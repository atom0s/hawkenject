#pragma once

// Hawken (1.5.3.142579) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

namespace Classes
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class HawkenGame.HawkenActorFactoryAI
// 0x0014 (0x00A4 - 0x0090)
class UHawkenActorFactoryAI : public UActorFactoryAI
{
public:
	class UR_NPC_Template*                             TemplateToBuildNpcFrom;                                   // 0x0090(0x0004) (Edit)
	TEnumAsByte<EDefaultNpcBehavior>                   Behavior;                                                 // 0x0094(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	TArray<class UETQTemplate*>                        ETQsNeeded;                                               // 0x0098(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenActorFactoryAI");
		return ptr;
	}


	void PostCreateActor(class AActor* NewActor, class USeqAct_ActorFactory* ActorFactoryData);
};


// Class HawkenGame.HawkenTypes
// 0x003C (0x0078 - 0x003C)
class UHawkenTypes : public UObject
{
public:
	struct FScriptDelegate                             __OnReadLegacyStatsComplete__Delegate;                    // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnLoginDialogClosed__Delegate;                          // 0x0048(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnMessageDialogClose__Delegate;                         // 0x0054(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnWaitingDialogClosed__Delegate;                        // 0x0060(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnInputCaptured__Delegate;                              // 0x006C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenTypes");
		return ptr;
	}


	void OnInputCaptured(int InDialogId, const struct FName& ButtonName);
	void OnWaitingDialogClosed(int InDialogId, bool bCancelled);
	void OnMessageDialogClose(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void OnLoginDialogClosed(int InDialogId, const struct FString& InEmail, const struct FString& InPassword, const struct FString& citizenID, bool bCancelled);
	void OnReadLegacyStatsComplete(bool bWasSuccessful, const struct FSOnlineLegacyStats& LegacyStats);
};


// Class HawkenGame.R_Ability_Base
// 0x00C4 (0x0298 - 0x01D4)
class AR_Ability_Base : public AActor
{
public:
	unsigned long                                      bReady : 1;                                               // 0x01D4(0x0004) (Net)
	unsigned long                                      bCanBeActivatedWhenOverheated : 1;                        // 0x01D4(0x0004) (Const)
	unsigned long                                      bInfiniteDuration : 1;                                    // 0x01D4(0x0004) (Const)
	unsigned long                                      bShowAbilityHologram : 1;                                 // 0x01D4(0x0004) (Const)
	unsigned long                                      bPlayLoopingSound : 1;                                    // 0x01D4(0x0004)
	unsigned long                                      bAllowHeavyModeBoost : 1;                                 // 0x01D4(0x0004) (Const)
	float                                              RegenerationSeconds;                                      // 0x01D8(0x0004)
	float                                              ModeActiveTime;                                           // 0x01DC(0x0004)
	float                                              CooldownAdjustPerPoint;                                   // 0x01E0(0x0004) (Const)
	float                                              DurationAdjustPerPoint;                                   // 0x01E4(0x0004) (Const)
	float                                              CooldownModifier;                                         // 0x01E8(0x0004)
	float                                              DurationModifier;                                         // 0x01EC(0x0004)
	TArray<struct FString>                             UpgradeName;                                              // 0x01F0(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             UpgradeDescription;                                       // 0x01FC(0x000C) (Const, Localized, NeedCtorLink)
	class AR_Pawn*                                     RobotOwner;                                               // 0x0208(0x0004) (Net)
	int                                                AbilityUpgradeFlags;                                      // 0x020C(0x0004)
	struct FString                                     AbilityName;                                              // 0x0210(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x021C(0x000C) (Const, Localized, NeedCtorLink)
	class UTexture2D*                                  AbilityIcon;                                              // 0x0228(0x0004) (Const)
	class UTexture2D*                                  AbilityIcon_Small;                                        // 0x022C(0x0004) (Const)
	struct FName                                       AbilityStat;                                              // 0x0230(0x0008) (Const)
	struct FString                                     PropSheetName;                                            // 0x0238(0x000C) (Const, NeedCtorLink)
	TArray<struct FString>                             ValidPropNameList;                                        // 0x0244(0x000C) (Const, NeedCtorLink)
	int                                                PropSheetIdx;                                             // 0x0250(0x0004)
	class USoundCue*                                   SoundActivate;                                            // 0x0254(0x0004) (Const)
	class USoundCue*                                   SoundDeactivate;                                          // 0x0258(0x0004) (Const)
	class USoundCue*                                   SoundTempDeactivate;                                      // 0x025C(0x0004) (Const)
	class USoundCue*                                   SoundReactivate;                                          // 0x0260(0x0004) (Const)
	class USoundCue*                                   ActivateVO;                                               // 0x0264(0x0004) (Const)
	class USoundCue*                                   DeactivateVO;                                             // 0x0268(0x0004) (Const)
	class USoundCue*                                   TempDeactivateVO;                                         // 0x026C(0x0004) (Const)
	class UAudioComponent*                             LoopingSoundComp;                                         // 0x0270(0x0004) (ExportObject, Component, EditInline)
	float                                              OverrideFOV;                                              // 0x0274(0x0004)
	TEnumAsByte<EAbilities>                            AbilityType;                                              // 0x0278(0x0001) (Const)
	TEnumAsByte<EAbilityState>                         PreviousClientState;                                      // 0x0279(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x027A(0x0002) MISSED OFFSET
	struct FName                                       AbilityTrackingName;                                      // 0x027C(0x0008) (Const)
	struct FReplicatedIsActive                         Active;                                                   // 0x0284(0x0008) (Net)
	TArray<class UClass*>                              AbilityClass;                                             // 0x028C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_Base");
		return ptr;
	}


	bool IsAvailable();
	bool IsTempDeactive();
	bool IsAbilityActive();
	void SetAbilityActiveState(TEnumAsByte<EAbilityState> NewState, float DeactiveTime);
	bool IsHealingOwner();
	void StopLoopingSound(bool bHardEnd);
	void StartLoopingSound();
	void ModifyCurrentAbilityRegen(float PercentOfDefaultToAdd);
	float GetRechargeTimeRemaining();
	float GetModeActiveTime();
	float STATIC_GetDefaultModeActiveTime();
	float GetRegenerationTime();
	float STATIC_GetDefaultRegenerationTime();
	float GetTimeRemaining();
	void RegenAbility();
	bool UpdateThrust(float DeltaTime);
	int AbilityWeaponHand();
	void OnSetCinematicMode(bool bCinematicMode);
	void OnEMPBlast();
	void OnTakeDamage(int Damage);
	void OnHeal();
	void OnBoost();
	void OnFire();
	void OnReactivate();
	void ClientOnTemporaryDeactivate(float DeactiveTime);
	void OnTemporaryDeactivate(float DeactiveTime);
	void ClientOnDeactivate(float forceRegenTime);
	void OnDeactivate(float forceRegenTime);
	void ClientOnActivate();
	bool OnActivate();
	void ResetAbility();
	bool CanActivate();
	void StartRegenTimer(float forceRegenTime);
	void StartAbilityTimer();
	void ReactivateTimer();
	void AbilityTimer();
	void ReplicatedEvent(const struct FName& VarName);
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int upgradeFlags);
	void Tick(float DeltaTime);
	void SetRobotOwner(class AR_Pawn* NewOwner);
};


// Class HawkenGame.R_BaseForcefield
// 0x0020 (0x01F4 - 0x01D4)
class AR_BaseForcefield : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;                   // 0x01D4(0x0004) (Const, Native, NoExport)
	class UStaticMeshComponent*                        MeshComp;                                                 // 0x01D8(0x0004) (Edit, ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   BlockadeMaterialInstance;                                 // 0x01DC(0x0004) (Transient)
	float                                              FadeAmount;                                               // 0x01E0(0x0004)
	unsigned long                                      bObstacleRegistered : 1;                                  // 0x01E4(0x0004) (Transient)
	TArray<struct FVector>                             BoundingShape;                                            // 0x01E8(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BaseForcefield");
		return ptr;
	}


	void UnRegisterObstacle();
	void RegisterObstacle();
	void PostBeginPlay();
	void Tick(float DeltaTime);
	bool IsActive();
};


// Class HawkenGame.R_BaseLifter
// 0x008C (0x0260 - 0x01D4)
class AR_BaseLifter : public AActor
{
public:
	int                                                TeamIndex;                                                // 0x01D4(0x0004) (Edit, Net)
	class UAnimNodeSlot*                               DeploySlot;                                               // 0x01D8(0x0004) (Transient)
	unsigned long                                      bIsLifting : 1;                                           // 0x01DC(0x0004) (Transient)
	class UUDKSkeletalMeshComponent*                   LifterMesh;                                               // 0x01E0(0x0004) (Edit, ExportObject, Component, EditInline)
	int                                                CurrentHealth;                                            // 0x01E4(0x0004) (Transient)
	int                                                MaxHealth;                                                // 0x01E8(0x0004)
	float                                              BeamSpawnCooldown;                                        // 0x01EC(0x0004) (Edit)
	float                                              InteractiveRange;                                         // 0x01F0(0x0004) (Const)
	class UStaticMeshComponent*                        TubeMesh;                                                 // 0x01F4(0x0004) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        LifterBaseMesh;                                           // 0x01F8(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       BaseSocket;                                               // 0x01FC(0x0008)
	struct FName                                       AttachSocket;                                             // 0x0204(0x0008)
	struct FName                                       CollectSocket;                                            // 0x020C(0x0008)
	struct FName                                       ActivateAnim;                                             // 0x0214(0x0008)
	struct FName                                       ReleaseAnim;                                              // 0x021C(0x0008)
	float                                              TransferLevel;                                            // 0x0224(0x0004)
	class USoundCue*                                   BaseLifterSoundUp;                                        // 0x0228(0x0004)
	class USoundCue*                                   BaseLifterSoundDown;                                      // 0x022C(0x0004)
	class USoundCue*                                   EnergyDrainSound;                                         // 0x0230(0x0004)
	class UMaterialInstanceConstant*                   TubeMaterialInstance;                                     // 0x0234(0x0004) (Transient)
	class UMaterialInstanceConstant*                   TubeAlphaMaterialInstance;                                // 0x0238(0x0004) (Transient)
	class UMaterialInstanceConstant*                   LifterMaterialInstance;                                   // 0x023C(0x0004) (Transient)
	class UParticleSystemComponent*                    DrainParticles;                                           // 0x0240(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       DrainSocket;                                              // 0x0244(0x0008) (Edit)
	class UParticleSystem*                             DrainEffect;                                              // 0x024C(0x0004) (Edit)
	float                                              TransferLevelMin;                                         // 0x0250(0x0004) (Edit)
	struct FLifterStateStruct                          LifterInfo;                                               // 0x0254(0x0008) (Net)
	class AR_Pawn*                                     LastActivator;                                            // 0x025C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BaseLifter");
		return ptr;
	}


	void DisplayDebug(class AHUD* H, float* YL, float* YPos);
	bool Interactive_Activate(class AActor* EventInstigator);
	bool Interactive_IsValidFor(class AActor* A);
	float Interactive_GetMaxInteractiveDist();
	float Interactive_GetMinInteractiveAngle();
	struct FRotator Interactive_GetRotation();
	struct FVector Interactive_GetLocation(const struct FVector& TraceHitLoc);
	class AR_Pawn* GetActivatorPawn(class AActor* Activator);
	class AR_PlayerController* GetActivatorController(class AActor* Activator);
	void Tick(float DeltaTime);
	bool IsNeutralTeamMode();
	bool IsValidTeam(int ActivatorTeamNum);
	bool CanDrain(class AR_Pawn* Activator, TEnumAsByte<EHintType>* FailHint);
	struct FVector GetPlatformPos();
	struct FVector GetCameraFocus();
	void SpawnNewBeam();
	void BeamCooldownTimer();
	void UpdateActivatorMeshLocation();
	struct FVector GetLifterUseLocation();
	void PostBeginPlay();
	void DoneDropping();
	void StopDraining(TEnumAsByte<EHintType> StopHint);
	void StopDrainingEffect();
	void StartDraining();
	void DetachPawn(class AR_Pawn* P);
	void AttachPawn(class AR_Pawn* P);
	void StartLifting();
	void StartWaiting();
	void InitCustomizedMaterial();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	bool Activate(class AController* EventInstigator);
	void SetLastActivator(class AR_Pawn* NewValue);
	void SetActivator(class AR_Pawn* ActivatorPawn);
	struct FVector GetHintTestLocation(const struct FVector& TraceHitLoc);
	float GetHintRange();
	TEnumAsByte<EHintType> GetHint(class AR_Pawn* RPawn);
	void ReplicatedEvent(const struct FName& VarName);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent);
	void TakeDamage(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
};


// Class HawkenGame.R_BaseReactor
// 0x0004 (0x01D8 - 0x01D4)
class AR_BaseReactor : public AActor
{
public:
	int                                                TeamNum;                                                  // 0x01D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BaseReactor");
		return ptr;
	}


	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	unsigned char GetTeamNum();
};


// Class HawkenGame.R_BattleShip
// 0x01A0 (0x0374 - 0x01D4)
class AR_BattleShip : public AActor
{
public:
	unsigned char                                      TeamIndex;                                                // 0x01D4(0x0001) (Edit, Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01D5(0x0003) MISSED OFFSET
	int                                                NumHomingMissilesFired;                                   // 0x01D8(0x0004) (Edit)
	TArray<float>                                      Spread;                                                   // 0x01DC(0x000C) (Edit, NeedCtorLink)
	float                                              MoveSpeed;                                                // 0x01E8(0x0004) (Net)
	float                                              BaseMoveSpeed;                                            // 0x01EC(0x0004)
	unsigned long                                      bTeamSet : 1;                                             // 0x01F0(0x0004)
	unsigned long                                      pendingDestruction : 1;                                   // 0x01F0(0x0004)
	unsigned long                                      bLaunched : 1;                                            // 0x01F0(0x0004) (Net)
	unsigned long                                      bMoving : 1;                                              // 0x01F0(0x0004) (Net)
	float                                              TravelTimeSeconds;                                        // 0x01F4(0x0004)
	int                                                NumEnergyUnitBlobs;                                       // 0x01F8(0x0004)
	int                                                EnergyUnitsPerBlob;                                       // 0x01FC(0x0004)
	class USkeletalMeshComponent*                      ShipMesh;                                                 // 0x0200(0x0004) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        CollisionMesh;                                            // 0x0204(0x0004) (ExportObject, Component, EditInline)
	class UClass*                                      ProjectileClass;                                          // 0x0208(0x0004) (Edit)
	class UClass*                                      TurretClass;                                              // 0x020C(0x0004) (Edit)
	class UClass*                                      EngineClass;                                              // 0x0210(0x0004) (Edit)
	class UParticleSystem*                             JetExhaustEffect;                                         // 0x0214(0x0004) (Edit)
	struct FName                                       JetExhaustSocket[0x3];                                    // 0x0218(0x0008)
	class UParticleSystemComponent*                    JetExhaustPSC[0x3];                                       // 0x0230(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       TurretSocket[0x2];                                        // 0x023C(0x0008)
	class UParticleSystemComponent*                    DamagePSC[0x8];                                           // 0x024C(0x0004) (ExportObject, Component, EditInline)
	int                                                NumDamageEffects;                                         // 0x026C(0x0004)
	class AR_Turret_Battleship*                        SpawnedTurrets[0x2];                                      // 0x0270(0x0004) (Net)
	struct FVector                                     EngineOffset;                                             // 0x0278(0x000C)
	struct FVector                                     EngineOffsetA;                                            // 0x0284(0x000C) (Const)
	struct FVector                                     EngineOffsetB;                                            // 0x0290(0x000C) (Const)
	class AR_BattleShipEngine*                         Engine;                                                   // 0x029C(0x0004) (Net)
	float                                              TravelDistance;                                           // 0x02A0(0x0004) (Net)
	float                                              SplineLength;                                             // 0x02A4(0x0004)
	class UAudioComponent*                             EngineSound;                                              // 0x02A8(0x0004) (ExportObject, Component, EditInline)
	class USoundCue*                                   HornSound;                                                // 0x02AC(0x0004)
	class USoundCue*                                   BattleshipExplosionSound;                                 // 0x02B0(0x0004)
	class USoundCue*                                   BattleshipWarmupSound;                                    // 0x02B4(0x0004)
	class AR_BaseReactor_MA*                           EnemyBase;                                                // 0x02B8(0x0004)
	class UParticleSystem*                             TeamExplosionPS[0x2];                                     // 0x02BC(0x0004)
	class UParticleSystem*                             ShipLaunchEffect;                                         // 0x02C4(0x0004)
	class UParticleSystem*                             DamageEffect[0x8];                                        // 0x02C8(0x0004)
	struct FName                                       DamageSocket[0x8];                                        // 0x02E8(0x0008)
	float                                              DamagePercent[0x8];                                       // 0x0328(0x0004)
	float                                              EffectRestart[0x8];                                       // 0x0348(0x0004)
	struct FCachedSplineInfo                           SplineFollowInfo;                                         // 0x0368(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BattleShip");
		return ptr;
	}


	void StartShipMovementAfterCooldown();
	void MissileVisualsTimer();
	void DamageEnemyBase();
	void DamageEnemyBattleship();
	int UpdateAttachments(const struct FVector& EngineLocation);
	void Tick(float DeltaTime);
	float GetSplineLength();
	bool FollowSpline();
	void UpdateVelocity(const struct FVector& NewVelocity);
	class ASplineActor* STATIC_GetStartSplineActor(int ShipTeamIndex, class AActor* A);
	class AProjectile* FireProjectileAtEnemyBase();
	void SpawnBattleshipExplosion();
	void TornOff();
	void OnDestroyed(bool bSpawnExplosion);
	float GetTimeToReachBase();
	void OnSpawn(int NewTeamIndex, int BattleShipLevel);
	void UpdateDamageEffect(float ShipDamagePercent, float DeltaTime);
	void ActivateThrusterEffects();
	void DeactivateThrusterEffects();
	void StartMoveTimer();
	void StartEngineTimer();
	void OnLaunch();
	unsigned char GetTeamNum();
	void SetTeam(int NewTeamIndex);
	void SetStartLocation();
	class AR_BaseReactor_MA* FindEnemyBase();
	bool EncroachingOn(class AActor* Other);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_BattleShipEngine
// 0x0024 (0x01F8 - 0x01D4)
class AR_BattleShipEngine : public AActor
{
public:
	unsigned char                                      TeamIndex;                                                // 0x01D4(0x0001) (Edit, Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01D5(0x0003) MISSED OFFSET
	class UStaticMeshComponent*                        EngineMesh;                                               // 0x01D8(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      bActive : 1;                                              // 0x01DC(0x0004) (Net)
	struct FVector                                     VelocityForHoming;                                        // 0x01E0(0x000C)
	class UR_DamageTracking*                           DamageTracker;                                            // 0x01EC(0x0004)
	float                                              DamageTrackingExpireTime;                                 // 0x01F0(0x0004) (Const)
	float                                              DamageTrackingAssistTime;                                 // 0x01F4(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BattleShipEngine");
		return ptr;
	}


	void SendOutDamageXPOnDeath();
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent);
	void PostBeginPlay();
	unsigned char GetTeamNum();
	void OnSetActive();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_CustomServerConfig
// 0x0078 (0x024C - 0x01D4)
class AR_CustomServerConfig : public AInfo
{
public:
	struct FString                                     OwnerId;                                                  // 0x01D4(0x000C) (Transient, NeedCtorLink)
	class AR_MPGameBase*                               OwnerGame;                                                // 0x01E0(0x0004) (Transient)
	struct FString                                     ServerName;                                               // 0x01E4(0x000C) (NeedCtorLink)
	struct FString                                     GamePassword;                                             // 0x01F0(0x000C) (NeedCtorLink)
	struct FString                                     ServerAdminPassword;                                      // 0x01FC(0x000C) (NeedCtorLink)
	unsigned long                                      bEnableDeathCam : 1;                                      // 0x0208(0x0004)
	unsigned long                                      bAutoBalance : 1;                                         // 0x0208(0x0004)
	unsigned long                                      bSupportsMapCycle : 1;                                    // 0x0208(0x0004)
	unsigned long                                      bUseConfigMapCycle : 1;                                   // 0x0208(0x0004) (Transient)
	int                                                GoalScore;                                                // 0x020C(0x0004)
	int                                                DefaultGoalScore;                                         // 0x0210(0x0004) (Transient)
	int                                                TimeLimit;                                                // 0x0214(0x0004)
	int                                                DefaultTimeLimit;                                         // 0x0218(0x0004) (Transient)
	float                                              PreMatchTime;                                             // 0x021C(0x0004)
	int                                                MinPlayers;                                               // 0x0220(0x0004)
	int                                                MaxPlayers;                                               // 0x0224(0x0004)
	TArray<struct FString>                             MapCycle;                                                 // 0x0228(0x000C) (NeedCtorLink)
	TArray<struct FString>                             Mod;                                                      // 0x0234(0x000C) (NeedCtorLink)
	struct FString                                     ModParams;                                                // 0x0240(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_CustomServerConfig");
		return ptr;
	}


	void UpdateGameInfo();
	void Setup(const struct FString& ServerID, class AR_MPGameBase* RGame);
};


// Class HawkenGame.R_DamageableActor
// 0x005C (0x0324 - 0x02C8)
class AR_DamageableActor : public AKActor
{
public:
	class UStaticMeshComponent*                        Mesh;                                                     // 0x02C8(0x0004) (Edit, ExportObject, Component, EditInline)
	class UStaticMesh*                                 DamagedMesh[0x4];                                         // 0x02CC(0x0004) (Edit)
	float                                              BumpCooldownTime;                                         // 0x02DC(0x0004) (Edit)
	int                                                BumpDamage;                                               // 0x02E0(0x0004) (Edit)
	int                                                CrushDamage;                                              // 0x02E4(0x0004) (Edit)
	class UParticleSystem*                             BumpEffect;                                               // 0x02E8(0x0004) (Edit)
	class UParticleSystem*                             BumpEffectSoft;                                           // 0x02EC(0x0004) (Edit)
	float                                              BumpEffectSoftVelocity;                                   // 0x02F0(0x0004) (Edit)
	class UParticleSystem*                             DamageEffect;                                             // 0x02F4(0x0004) (Edit)
	class USoundCue*                                   ImpactSound;                                              // 0x02F8(0x0004) (Edit)
	class USoundCue*                                   DamageSound;                                              // 0x02FC(0x0004) (Edit)
	class USoundCue*                                   DestroySound;                                             // 0x0300(0x0004) (Edit)
	float                                              DamageEffectScale;                                        // 0x0304(0x0004) (Edit)
	unsigned long                                      bDestroyable : 1;                                         // 0x0308(0x0004) (Edit)
	unsigned long                                      bDestroyOnBump : 1;                                       // 0x0308(0x0004) (Edit)
	unsigned long                                      bDestroyOnCrush : 1;                                      // 0x0308(0x0004) (Edit)
	class UParticleSystem*                             DestroyEffect;                                            // 0x030C(0x0004) (Edit)
	class UParticleSystem*                             DestroyEffectSecondary;                                   // 0x0310(0x0004) (Edit)
	float                                              DestroyEffectScale;                                       // 0x0314(0x0004) (Edit)
	int                                                HealthPerDamageLevel;                                     // 0x0318(0x0004) (Edit)
	int                                                Health;                                                   // 0x031C(0x0004)
	int                                                CurrentDestructionState;                                  // 0x0320(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DamageableActor");
		return ptr;
	}


	void UpdateDestructionState(int NewDestructionState);
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void DoCrushBump(class AActor* Other, const struct FVector& HitNormal);
	void BumpTimer();
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent);
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_DamageableStaticActor
// 0x0050 (0x0224 - 0x01D4)
class AR_DamageableStaticActor : public AActor
{
public:
	class UStaticMeshComponent*                        Mesh;                                                     // 0x01D4(0x0004) (Edit, ExportObject, Component, EditInline)
	class UStaticMesh*                                 DamagedMesh[0x4];                                         // 0x01D8(0x0004) (Edit)
	float                                              BumpCooldownTime;                                         // 0x01E8(0x0004) (Edit)
	int                                                BumpDamage;                                               // 0x01EC(0x0004) (Edit)
	int                                                CrushDamage;                                              // 0x01F0(0x0004) (Edit)
	class UParticleSystem*                             DamageEffect;                                             // 0x01F4(0x0004) (Edit)
	class USoundCue*                                   ImpactSound;                                              // 0x01F8(0x0004) (Edit)
	class USoundCue*                                   DamageSound;                                              // 0x01FC(0x0004) (Edit)
	class USoundCue*                                   DestroySound;                                             // 0x0200(0x0004) (Edit)
	float                                              DamageEffectScale;                                        // 0x0204(0x0004) (Edit)
	unsigned long                                      bDestroyable : 1;                                         // 0x0208(0x0004) (Edit)
	unsigned long                                      bDestroyOnBump : 1;                                       // 0x0208(0x0004) (Edit)
	unsigned long                                      bDestroyOnCrush : 1;                                      // 0x0208(0x0004) (Edit)
	class UParticleSystem*                             DestroyEffect;                                            // 0x020C(0x0004) (Edit)
	class UParticleSystem*                             DestroyEffectSecondary;                                   // 0x0210(0x0004) (Edit)
	float                                              DestroyEffectScale;                                       // 0x0214(0x0004) (Edit)
	int                                                HealthPerDamageLevel;                                     // 0x0218(0x0004) (Edit)
	int                                                Health;                                                   // 0x021C(0x0004)
	int                                                CurrentDestructionState;                                  // 0x0220(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DamageableStaticActor");
		return ptr;
	}


	void UpdateDestructionState(int NewDestructionState);
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void DoCrushBump(class AActor* Other, const struct FVector& HitNormal);
	void BumpTimer();
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent);
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_DamageType
// 0x0058 (0x00BC - 0x0064)
class UR_DamageType : public UDamageType
{
public:
	float                                              HitEffectScale;                                           // 0x0064(0x0004)
	unsigned long                                      IsRadiusDamage : 1;                                       // 0x0068(0x0004)
	unsigned long                                      IsTurret : 1;                                             // 0x0068(0x0004)
	unsigned long                                      IsBattleship : 1;                                         // 0x0068(0x0004)
	unsigned long                                      IsBaseDefense : 1;                                        // 0x0068(0x0004)
	unsigned long                                      CanKnockPlayer : 1;                                       // 0x0068(0x0004)
	unsigned long                                      CauseInstantExplosionOnDeath : 1;                         // 0x0068(0x0004)
	unsigned long                                      bDontHurtInstigator : 1;                                  // 0x0068(0x0004)
	unsigned long                                      bPlayTakeHitEffect : 1;                                   // 0x0068(0x0004) (Const)
	class USoundCue*                                   ImpactCockpitSound;                                       // 0x006C(0x0004)
	struct FString                                     R_DamageWeaponName;                                       // 0x0070(0x000C) (Const, Localized, NeedCtorLink)
	class UClass*                                      R_DamageWeaponClass;                                      // 0x007C(0x0004)
	struct FName                                       DamageStatsName;                                          // 0x0080(0x0008)
	struct FName                                       KillStatsName;                                            // 0x0088(0x0008)
	struct FName                                       AssistStatsName;                                          // 0x0090(0x0008)
	struct FName                                       DeathStatsName;                                           // 0x0098(0x0008)
	struct FName                                       SuicideStatsName;                                         // 0x00A0(0x0008)
	class UCameraAnim*                                 DamageCameraShake;                                        // 0x00A8(0x0004)
	float                                              DamageCameraShakeScale;                                   // 0x00AC(0x0004)
	TEnumAsByte<EDamageCategories>                     DamageCategory;                                           // 0x00B0(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00B1(0x0003) MISSED OFFSET
	class UParticleSystem*                             Override_MechActualHitEffect;                             // 0x00B4(0x0004)
	class UParticleSystem*                             Override_MechTakeHitEffect;                               // 0x00B8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DamageType");
		return ptr;
	}


	struct FName STATIC_GetStatsName(const struct FName& StatType);
	void STATIC_IncrementSuicides(class AR_PlayerReplicationInfo* KilledPRI);
	void STATIC_IncrementDeaths(class AR_PlayerReplicationInfo* KilledPRI);
	void STATIC_IncrementAssists(class AR_PlayerReplicationInfo* AssistPRI);
	int STATIC_IncrementKills(class AR_PlayerReplicationInfo* KillerPRI);
	void STATIC_ScoreKill(class AR_PlayerReplicationInfo* KillerPRI, class AR_PlayerReplicationInfo* KilledPRI, class APawn* KilledPawn);
};


// Class HawkenGame.R_DmgType_Crushed
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Crushed : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Crushed");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Fell
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Fell : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Fell");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_RepairTorch
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_RepairTorch : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_RepairTorch");
		return ptr;
	}

};


// Class HawkenGame.R_EnergySource
// 0x00D8 (0x02AC - 0x01D4)
class AR_EnergySource : public AActor
{
public:
	int                                                MaxEnergy;                                                // 0x01D4(0x0004) (Edit)
	float                                              CurrentEnergy;                                            // 0x01D8(0x0004)
	int                                                CurrentEnergyRep;                                         // 0x01DC(0x0004) (Net)
	float                                              EnergyRegenRate;                                          // 0x01E0(0x0004) (Edit)
	float                                              EnergyTransferRate;                                       // 0x01E4(0x0004) (Edit)
	float                                              DistanceToDrain;                                          // 0x01E8(0x0004) (Edit)
	float                                              EnergyTransferMultiplier[0x5];                            // 0x01EC(0x0004)
	float                                              LightChargePct[0x3];                                      // 0x0200(0x0004) (Edit)
	float                                              BeamSpawnCooldown;                                        // 0x020C(0x0004) (Edit)
	float                                              BeamSpawnCooldownEmpty;                                   // 0x0210(0x0004) (Edit)
	float                                              BeamMaxSpeed;                                             // 0x0214(0x0004) (Edit)
	float                                              BeamHomingStrength;                                       // 0x0218(0x0004) (Edit)
	struct FVector                                     BeamTargetAdjust;                                         // 0x021C(0x000C) (Edit)
	class UAudioComponent*                             AudioComponent;                                           // 0x0228(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UAudioComponent*                             DrainingAudioComponent;                                   // 0x022C(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class USkeletalMeshComponent*                      GeneratorMesh;                                            // 0x0230(0x0004) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        ObjectiveAreaMesh;                                        // 0x0234(0x0004) (ExportObject, Component, EditInline)
	class UAnimNodeSequence*                           SpinState;                                                // 0x0238(0x0004)
	float                                              CurrentEnergyPercent;                                     // 0x023C(0x0004)
	class UMaterialInstanceConstant*                   BulbAlphaMaterialInstance;                                // 0x0240(0x0004) (Transient)
	class AR_Pawn*                                     TouchingPawns[0x3];                                       // 0x0244(0x0004) (Net)
	int                                                NumTouchingPawns;                                         // 0x0250(0x0004) (Net)
	int                                                NumBeamEffects;                                           // 0x0254(0x0004)
	class UParticleSystem*                             BeamCompPS;                                               // 0x0258(0x0004)
	class UParticleSystemComponent*                    BeamComp[0x3];                                            // 0x025C(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             TopCompPS;                                                // 0x0268(0x0004)
	class UParticleSystemComponent*                    TopComp;                                                  // 0x026C(0x0004) (ExportObject, Component, EditInline)
	unsigned long                                      bTopEffectActive : 1;                                     // 0x0270(0x0004)
	class AR_Pawn*                                     AttractorEnabledPawns[0x3];                               // 0x0274(0x0004)
	class UParticleSystem*                             EnergyParticleSystem;                                     // 0x0280(0x0004)
	class UStaticMeshComponent*                        PaddleTemplate;                                           // 0x0284(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       RotateBone;                                               // 0x0288(0x0008)
	TArray<struct FTransform>                          PaddleTransforms;                                         // 0x0290(0x000C) (NeedCtorLink)
	TArray<struct FTransform>                          EmitterTransforms;                                        // 0x029C(0x000C) (NeedCtorLink)
	class AEmitter*                                    GridActor;                                                // 0x02A8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_EnergySource");
		return ptr;
	}


	void TransferEnergy(float DeltaTime);
	void PostBeginPlay();
	void ResetEnergy();
	void UpdateTopBeams(bool bReplenishing);
	void UpdateBeamEffects(bool bReplenishing);
	int GetNumDrainingPawns(bool bReplenishing);
	void UpdateChargeStateVisuals();
	void InitCustomizedMaterial();
	void Tick(float DeltaTime);
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
};


// Class HawkenGame.R_EventTracking
// 0x0000 (0x003C - 0x003C)
class UR_EventTracking : public UOnlineEventTracking
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_EventTracking");
		return ptr;
	}


	void STATIC_SendEvent_PlayerFramerate(class AController* Player, float DeltaTime);
	void STATIC_SendEvent_OverflowXpToMechFailure(class AController* Player, const struct FString& MechInstanceId, int MechType, int MechSubType, int AmountTransferred, int MechTier, int MechTierHasXpFor, int MechXPAfterTransfer, int OverflowXpAfterTransfer);
	void STATIC_SendEvent_TransferredOverflowXpToMech(class AController* Player, const struct FString& MechInstanceId, int MechType, int MechSubType, int AmountTransferred, int MechTier, int MechTierHasXpFor, int MechXPAfterTransfer, int OverflowXpAfterTransfer);
	void STATIC_SendEvent_OverflowXpToPoolFailure(class AController* Player, const struct FString& MechInstanceId, int MechType, int MechSubType, int AmountTransferred, int MechXPAfterTransfer, int OverflowXpAfterTransfer, int mcPerIncrement, int XpPerIncrement);
	void STATIC_SendEvent_SentOverflowXpToPool(class AController* Player, const struct FString& MechInstanceId, int MechType, int MechSubType, int AmountTransferred, int MechXPAfterTransfer, int OverflowXpAfterTransfer, int mcPerIncrement, int XpPerIncrement);
	void STATIC_SendEvent_MechInternalSlotsUnlocked(class AController* Player, const struct FString& MechInstanceId, int MechType, int MechSubType, int MechTierThreshold);
	void STATIC_SendEvent_MechItemSlotsUnlocked(class AController* Player, const struct FString& MechInstanceId, int MechType, int MechSubType, int MechTierThreshold);
	void STATIC_SendEvent_MechOptimizationSlotsUnlocked(class AController* Player, const struct FString& MechInstanceId, int MechType, int MechSubType, int MechTierThreshold);
	void STATIC_SendEvent_MechItemRewarded(class AController* Player, const struct FString& MechInstanceId, int MechType, int MechSubType, int MechTierThreshold, const struct FString& ItemTypeGUID);
	void STATIC_SendEvent_MechItemUnlocked(class AController* Player, const struct FString& MechInstanceId, int MechType, int MechSubType, int MechTierThreshold, const struct FString& ItemTypeGUID);
	void STATIC_SendEvent_MechTierReached(class AController* Player, const struct FString& MechInstanceId, int MechType, int MechSubType, int MechTierThreshold, const struct FString& MechItemType, bool IsTestDrive);
	void STATIC_SendEvent_PilotTechGroupUnlocked(class AController* Player, int PilotLevelThreshold, int TechGroup, int TechLevel);
	void STATIC_SendEvent_PilotOptimizationPointsUnlocked(class AController* Player, int PilotLevelThreshold);
	void STATIC_SendEvent_PilotItemRewarded(class AController* Player, const struct FString& ItemTypeGUID, int PilotLevelThreshold);
	void STATIC_SendEvent_MatchmakingRequestPartyDeployCancelled(struct FUniqueNetId* PlayerID);
	void STATIC_SendEvent_MatchmakingRequestPartyDeployed(TArray<struct FUniqueNetId> PartyMemberGuids, const struct FString& ServerListingGuid, struct FUniqueNetId* PlayerID);
	void STATIC_SendEvent_MatchmakingRequestFulfilled(const struct FString& ServerListingGuid, struct FUniqueNetId* PlayerID);
	void STATIC_SendEvent_MatchmakingRequestFailed(struct FUniqueNetId* PlayerID);
	void STATIC_SendEvent_MatchmakingRequestCancelled(struct FUniqueNetId* PlayerID);
	void STATIC_SendEvent_MatchmakingRequestSent(const struct FString& Region, const struct FString& GameType, TArray<struct FUniqueNetId> PartyMemberGuids, struct FUniqueNetId* PlayerID);
	void STATIC_SendEvent_AutoRestockConsumable(class AController* Player, const struct FString& OfferId, TEnumAsByte<EInventoryItemType> ConsumableType, TEnumAsByte<ENetworkErrorCode> ErrorCode);
	void STATIC_SendEvent_MechSavedInGame(class APlayerController* Player, const struct FMechPreset& preset);
	void STATIC_SendEvent_MechSaved(class APlayerController* Player, const struct FMechPreset& preset);
	void STATIC_SendEvent_TestDriveMechPurchased(const struct FMechPreset& NewMechPreset, const struct FString& TestDriveItemtypeId, const struct FString& PurchaseLocation);
	void STATIC_SendEvent_OfferRented(class AController* Player, const struct FString& OfferId, class UOnlineGameItemInstanceCollection* RentedGameItemInstances, int MechType, int MechSubType, const struct FString& MechInstanceId);
	void STATIC_SendEvent_OfferPurchased(class AController* Player, const struct FString& OfferId, class UOnlineGameItemInstanceCollection* PurchasedGameItemInstances, int MechType, int MechSubType, const struct FString& MechInstanceId, const struct FString& MechItemType, bool IsTestDrive);
	void STATIC_SendEvent_ExitedGarage(class APlayerController* PC);
	void STATIC_SendEvent_EnteredGarage(class APlayerController* PC);
	void STATIC_SendEvent_TutorialSectionStopped(const struct FString& TutorialSectionName);
	void STATIC_SendEvent_TutorialSectionStarted(const struct FString& TutorialSectionName);
	void STATIC_SendEvent_TutorialCompleted(const struct FString& TutorialName);
	void STATIC_SendEvent_TutorialStarted(const struct FString& TutorialName);
	void STATIC_SendEvent_ConsumableUsed(class AController* Player, int ConsumableIndex, int CurrentWaveNumber, int ChargeCost, int PreUseNumCharges, float PlayerHealth);
	void STATIC_SendEvent_ItemUsed(class AController* Player, int itemIdx);
	struct FString STATIC_GetTriggeredConsumableTrackingName(int itemSlot);
	struct FString STATIC_GetPassiveConsumableTrackingName(int itemSlot);
	struct FString STATIC_GetItemTrackingName(int itemSlot);
	struct FMechPreset STATIC_GetMechPresetFromInstanceId(const struct FString& MechInstanceId, class AController* Player, bool bUsePRI);
	void STATIC_AddMechIdData(class UStormEventObject* eventObject, const struct FMechPreset& preset);
	void STATIC_AddBotInfo(class UStormEventObject* eventObject, class APlayerReplicationInfo* SubjectPRI, class APlayerReplicationInfo* TargetPRI, class APlayerReplicationInfo* BotOptionalPRI);
	struct FString STATIC_GetBotInfo(class APlayerReplicationInfo* BotPRI);
	struct FString STATIC_GetBotOrPlayerID(class APlayerReplicationInfo* PRI);
	struct FString STATIC_GetBotOrPlayerType(class APlayerReplicationInfo* PRI);
	void STATIC_SendEvent_NPCKillAssist(class AController* AssistPlayer, class APawn* Victim, const struct FString& NPCName);
	void STATIC_SendEvent_BotAssist(class AController* AssistPlayer, class AController* VictimPlayer, class AController* KillerPlayer, int Points, int CurrentWaveNumber);
	void STATIC_SendEvent_BotKill(class AController* KillerPlayer, class UClass* DamageType, class AController* VictimPlayer, int CurrentWaveNumber);
	void STATIC_SendEvent_UpgradePurchased(int CurrentWaveNumber, class AR_PRI_Coop* PRI, TEnumAsByte<ECoopUpgradeCategory> UpgradeType);
	void STATIC_SendEvent_WaveEnded(int CurrentWaveNumber, class AR_CoOp* Game);
	void STATIC_SendEvent_WaveStarted(int CurrentWaveNumber, class AR_CoOp* Game);
	void STATIC_SendEvent_Revived(class AController* ReviverPlayer, class AController* DeadPlayer, int CurrentWaveNumber, const struct FVector& ReviveLocation);
	void STATIC_SendEvent_UpdateReactorHealth_MA(int TeamIndex, int HealthAmount, int MaxHealth);
	void STATIC_SendEvent_MissileFired_CP(int TeamIndex, int SiloIndex, int VictimTeamIndex);
	void STATIC_SendEvent_ControlPointCaptured(int TeamIndex, int SiloIndex);
	void STATIC_SendEvent_AntiAirFired(int subjectTeamIndex, int targetHealth, float targetTavelPercent);
	void STATIC_SendEvent_BattleshipReachedEnemyBase(int TeamIndex, int subjectHealth, int turretsLeft);
	void STATIC_SendEvent_BattleshipDestroyed(int TeamIndex, float travelPercent, int numTurretsLeft);
	void STATIC_SendEvent_BattleshipLaunched(int TeamIndex, int BattleShipLevel, int BattleshipHealthMax, int TravelDistanceTotal);
	void STATIC_SendEvent_LeftMissileSiloRadius(class AController* Player, float teamControl);
	void STATIC_SendEvent_EnteredMissileSiloRadius(class AController* Player, float teamControl);
	void STATIC_SendEvent_LoggedInAsAdmin(class AController* Player);
	void STATIC_SendEvent_UnlockedAchievement(class AController* Player, class UOnlineAchievementObject* Achievement);
	void STATIC_SendEvent_BehavedSuspiciously(class AController* Player, const struct FString& HackType);
	void STATIC_SendEvent_SyncingAccountFailed(const struct FString& ErrorDetails);
	void STATIC_SendEvent_SyncingAccountCompleted();
	void STATIC_SendEvent_SyncingAccountStarted();
	void STATIC_SendEvent_TrackVideoSettings();
	void STATIC_SendEvent_ViewedEULAVersion(int Version);
	struct FString STATIC_ConvertAchievementTypeToString(TEnumAsByte<EOnlineAchievementType> Value);
	struct FString STATIC_ConvertGraphicsSettingToString(int Value);
	struct FString STATIC_ConvertJoinServerFromToString(TEnumAsByte<EJoinServerFrom> JoinServerFrom);
	void STATIC_SendEvent_ConnectionToServerFailed(const struct FString& ConnectionRequestId, TEnumAsByte<EOnlineServerConnectionStatus> ConnectionStatus, TEnumAsByte<EProgressMessageSubType> ConnectionFailureSubType, const struct FString& ErrorDetails);
	void STATIC_SendEvent_ConnectedToServer(const struct FString& ConnectionRequestId);
	void STATIC_SendEvent_CancelledConnectionToServer(const struct FString& ConnectionRequestId);
	void STATIC_SendEvent_ConnectingToServer(const struct FString& ConnectionRequestId, TEnumAsByte<EJoinServerFrom> JoinServerFrom);
	void STATIC_SendEvent_LeftAntiAirRadius(class AController* Player, float teamControl);
	void STATIC_SendEvent_EnteredAntiAirRadius(class AController* Player, float teamControl);
	void STATIC_SendEvent_MatchEndMechStatus(class APlayerReplicationInfo* PRI, int presetIndex);
	void STATIC_SendEvent_MechGainedXP(class AController* Player, int XPamount, TEnumAsByte<EExperiencePointEventType> EventType);
	void STATIC_SendEvent_PilotLeveledUp(class AController* Player, int NewPilotLevel, int PilotLevelXPThreshold);
	void STATIC_SendEvent_GainedXP(class AController* Player, int XPamount, TEnumAsByte<EExperiencePointEventType> EventType);
	struct FString STATIC_ConvertMeteorCreditEventTypeToString(TEnumAsByte<EHawkenPointEventType> EventType);
	void STATIC_SendEvent_GainedMC(int MCamount, TEnumAsByte<EHawkenPointEventType> EventType);
	void STATIC_SendEvent_GainedHP(class AR_PlayerReplicationInfo* RSubjectPRI, int HPamount, TEnumAsByte<EHawkenPointEventType> EventType);
	struct FString STATIC_ConvertExperiencePointEventTypeToString(TEnumAsByte<EExperiencePointEventType> EventType);
	struct FString STATIC_ConvertHawkenPointEventTypeToString(TEnumAsByte<EHawkenPointEventType> EventType);
	void STATIC_SendEvent_EnergyDropped(class AController* Player, int Amount);
	void STATIC_SendEvent_EnergyDelivered(class AController* Player, int Amount);
	void STATIC_SendEvent_EnergyCollected(class AController* Player, int Amount);
	void STATIC_SendEvent_PlayerOverheatingStopped(class AController* Player);
	void STATIC_SendEvent_PlayerOverheatingStarted(class AController* Player);
	void STATIC_SendEvent_PlayerHealed(class AController* Player, float Amount, float Time);
	void STATIC_SendEvent_PlayerSustainedDamage(class AController* DamagedPlayer, class AR_PawnNative* DamagedPawn, class AController* DamageCauser, float Amount, class UClass* DamageType);
	void STATIC_SendEvent_PlayerAssist(class AController* Player, class AController* VictimPlayer, class AR_Pawn* VictimPawn, class AController* KillerPlayer, int Points);
	void STATIC_SendEvent_PlayerKill(class AController* KillerPlayer, class UClass* DamageType, class AController* VictimPlayer, int MultiKillLevel, int KillStreak, bool bRevenge, bool bAvenger, bool bSavior);
	void STATIC_SendEvent_PlayerDied(class AController* DeadPlayer, class UClass* DamageType, class AController* KillerPlayer);
	void STATIC_AddWeaponName(const struct FString& Key, class UStormEventObject* eventObject, class UClass* DamageType);
	void STATIC_SendEvent_PlayerSpawned(class AController* Player);
	void STATIC_SendEvent_PeriodicPlayerUpdate(class APawn* Pawn);
	void STATIC_SendEvent_PeriodicMatchConcurrencyUpdate(class AR_MPGameBase* Game);
	void STATIC_AddPlayerData_RoundEnded(const struct FString& Prefix, class UStormEventObject* eventObject, class AR_Deathmatch* Game, class AR_PlayerReplicationInfo* PRI, bool bIsInactive);
	void STATIC_SendEvent_MatchEnded(class AR_Deathmatch* Game, class AActor* Winner, const struct FString& WinReason);
	void STATIC_AddPlayerData_RoundStarted(const struct FString& Prefix, class UStormEventObject* eventObject, class AR_Deathmatch* Game, class AR_PlayerReplicationInfo* PRI);
	int STATIC_GetTeamIndex(class AR_PlayerReplicationInfo* PRI, bool bIsInactive);
	void STATIC_SendEvent_MatchStarted(class AR_Deathmatch* Game);
	void STATIC_SendEvent_MatchCreated(class AR_MPGameBase* Game, const struct FString& Region);
	void STATIC_SendEvent_ServerSyncingAccountFailed(class AR_PlayerReplicationInfo* RPRI, const struct FString& ErrorDetails);
	void STATIC_SendEvent_ServerSyncingAccountCompleted(class AR_PlayerReplicationInfo* RPRI);
	void STATIC_SendEvent_ServerSyncingAccountStarted(class AR_PlayerReplicationInfo* RPRI);
	void STATIC_SendEvent_PlayerLeftServer(class AController* Player);
	void STATIC_SendEvent_PlayerJoinedServer(class AController* Player);
	struct FString STATIC_GetTeamUniqueID(int TeamIndex);
};


// Class HawkenGame.R_GameInfoBase
// 0x00A8 (0x0450 - 0x03A8)
class AR_GameInfoBase : public AUDKGame
{
public:
	unsigned long                                      bOnlineGameStarted : 1;                                   // 0x03A8(0x0004) (Transient)
	unsigned long                                      bLogGameplayEvents : 1;                                   // 0x03A8(0x0004) (Config)
	unsigned long                                      bGameStatsEnabled : 1;                                    // 0x03A8(0x0004)
	unsigned long                                      bGameStatsUploadEnabled : 1;                              // 0x03A8(0x0004)
	unsigned long                                      bServerAllowCheats : 1;                                   // 0x03A8(0x0004) (Config)
	unsigned long                                      bEnableAntiAddictionDiminishingReturns : 1;               // 0x03A8(0x0004) (Config)
	unsigned long                                      bFilterEmpty : 1;                                         // 0x03A8(0x0004) (Transient)
	unsigned long                                      bHealthPickups : 1;                                       // 0x03A8(0x0004)
	unsigned long                                      bEnableDeathCam : 1;                                      // 0x03A8(0x0004) (Edit, Config)
	unsigned long                                      bAllowInternals : 1;                                      // 0x03A8(0x0004) (Edit, Const)
	unsigned long                                      bAllowOptimizations : 1;                                  // 0x03A8(0x0004) (Edit, Const)
	unsigned long                                      bAutoBanEnabled : 1;                                      // 0x03A8(0x0004)
	class UOnlineSubsystemMeteor*                      MeteorOSS;                                                // 0x03AC(0x0004) (Transient)
	int                                                StatsDieRoll;                                             // 0x03B0(0x0004)
	int                                                StatsUploadChance;                                        // 0x03B4(0x0004) (Config)
	int                                                Session_StatsUploadChance;                                // 0x03B8(0x0004) (Transient)
	int                                                Session_ForcedLODIndex;                                   // 0x03BC(0x0004) (Transient)
	int                                                Session_MaxFileSizeToUpload;                              // 0x03C0(0x0004) (Transient)
	struct FString                                     GameplayEventsUploaderName;                               // 0x03C4(0x000C) (Config, NeedCtorLink)
	class UHawkenGameplayEventsMCPUploader*            MCPUploader;                                              // 0x03D0(0x0004) (Transient)
	struct FString                                     GameplayEventsWriterClassName;                            // 0x03D4(0x000C) (Config, NeedCtorLink)
	class UHawkenGameplayEventsWriter*                 GameplayEventsWriter;                                     // 0x03E0(0x0004) (Transient)
	float                                              GameplayEventsPollingInterval;                            // 0x03E4(0x0004) (Config)
	int                                                ProfilingFrequency;                                       // 0x03E8(0x0004) (Transient, Config)
	int                                                ProfilingDuration;                                        // 0x03EC(0x0004) (Transient, Config)
	struct FName                                       StartMatchGotoState;                                      // 0x03F0(0x0008)
	int                                                GameTypeId;                                               // 0x03F8(0x0004)
	struct FName                                       GameTypeName;                                             // 0x03FC(0x0008)
	struct FName                                       GameSubTypeName;                                          // 0x0404(0x0008)
	int                                                EnergyUnitsHeldOnSpawn;                                   // 0x040C(0x0004) (Config)
	float                                              GameInfoUpdateRate;                                       // 0x0410(0x0004) (Const)
	float                                              MinDeathCamActiveDistance;                                // 0x0414(0x0004) (Edit, Config)
	TArray<class AHawkenSpectatorPoint*>               SpectatorPoints;                                          // 0x0418(0x000C) (Transient, NeedCtorLink)
	int                                                NumAutoBots;                                              // 0x0424(0x0004) (Config, GlobalConfig)
	class AR_BT_NPC_Manager*                           BT_NPC_Mgr;                                               // 0x0428(0x0004) (Transient)
	TArray<struct FSuspiciousBehaviorStat>             SuspiciousBehaviorsDetected;                              // 0x042C(0x000C) (NeedCtorLink)
	int                                                SuspiciousBehaviorDetectedThreshold;                      // 0x0438(0x0004)
	int                                                SuspiciousPackageLostThreshold;                           // 0x043C(0x0004)
	float                                              BanThresholdMaxClockRate;                                 // 0x0440(0x0004)
	float                                              BanThresholdTotalClockRate;                               // 0x0444(0x0004)
	float                                              BanThresholdHawkenDetectedNum;                            // 0x0448(0x0004)
	float                                              BanThresholdUnrealDetectedNum;                            // 0x044C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameInfoBase");
		return ptr;
	}


	void LoadAvailableChallenges();
	bool STATIC_ShouldPlaySiren(class AWorldInfo* WI, unsigned char TeamNum);
	class UClass* GetDefaultPlayerClass(class AController* C);
	class AHawkenSpectatorPoint* GetPrevSpectatorPoint(class AHawkenSpectatorPoint* CurrPoint);
	class AHawkenSpectatorPoint* GetNextSpectatorPoint(class AHawkenSpectatorPoint* CurrPoint);
	class AHawkenSpectatorPoint* GetFirstSpectatorPoint();
	void AcquireSpectatorPoints();
	void NotifyKilled(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType);
	void HandleSeamlessTravelPlayer(class AController** C);
	void PostSeamlessTravel();
	void GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList);
	void ForceEndGameCheat(class AR_PlayerController* Sender);
	bool NeedPlayers();
	bool STATIC_UseLowGore(class AWorldInfo* WI);
	float STATIC_GetFloatOption(const struct FString& Options, const struct FString& OptionNameToFind, float CurrentValue);
	bool STATIC_GetBoolOption(const struct FString& Options, const struct FString& OptionNameToFind, bool CurrentValue);
	void DoMemStartupStats();
	void CheckForBugItCommand();
	void StartMatch();
	void CheckStartMatch();
	bool CheckPlayersToStartMatch();
	bool CanStartMatch();
	class AHawkenAi_ControllerBase* SpawnBTBot();
	void AddBots(int NumBotsToAdd, unsigned char TeamIndex);
	struct FString FindUnusedBotName();
	bool NameAvailable(const struct FString& sName);
	unsigned char GetNpcsTeamId(unsigned char TeamNpcWantsToBeOn, class AController* NpcController);
	class AR_Bot* AddBot(const struct FString& BotName, unsigned char TeamIndex, class ATeamInfo* Team);
	class AR_Bot* SpawnBot(const struct FString& BotName, unsigned char TeamIndex);
	void AddInitialBots();
	bool MatchIsInProgress();
	void DelayedExit();
	void PreExit();
	void Logout(class AController* Exiting);
	void PostLogin(class APlayerController* NewPlayer);
	class APlayerController* Login(const struct FString& Portal, const struct FString& Options, const struct FUniqueNetId& UniqueId, struct FString* ErrorMessage);
	void PreLogin(const struct FString& Options, const struct FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, struct FString* ErrorMessage);
	void RestartPlayer(class AController* NewPlayer);
	void StartBots();
	void ParseGameStatsOptions(const struct FString& Options, struct FString* ErrorMessage);
	void SetMeteorOSS(class UOnlineSubsystemMeteor* OSS);
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
	void OnAutoLoginFailed(unsigned char LocalUserNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode);
	void OnAutoLoginChanged(unsigned char LocalUserNum);
	bool ProcessAutoLogin();
	void OnUnlockAchievementObjectCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID, const struct FUniqueNetId& AchievementGuid);
	void ClearOnlineDelegates();
	void ClearPlayerAutoLoginDelegates(unsigned char LocalUserNum);
	void RegisterPlayerAutoLoginDelegates(unsigned char LocalUserNum);
	void UploadGameplayStatsInternal();
	void UploadGameplayStats();
	void EndLogging(const struct FString& Reason);
	void InitializeGameplayStats();
	void InitializeTeamStats();
	void StartLogging();
	void SetGameOptionsForStats();
	void SendEndOfGameStats(class APlayerController* TargetPlayerController);
	bool STATIC_IsOnlineGame();
	int STATIC_GetGameType();
	bool AllowCheats(class APlayerController* P);
	bool STATIC_ReplaceURLOption(const struct FString& OptionName, const struct FString& OptionValue, bool bRequireOptionExists, struct FString* Options);
	bool STATIC_RemoveURLOption(const struct FString& OptionName, struct FString* Options);
	class UClass* STATIC_SetGameType(const struct FString& MapName, const struct FString& Options, const struct FString& Portal);
	void WriteHawkenSpeedHackInfo();
	void PerformEndGameHandling();
	void BanPlayer(class AR_PlayerReplicationInfo* PRI);
	bool ShouldBanPlayer(class AR_PlayerReplicationInfo* PRI);
	void UpdateSuspiciousPlayerStats(class AR_PlayerReplicationInfo* PRI, int suspiciousIndex);
	void WriteSuspiciousBehaviorsStats();
	void DetectSuspiciousPlayer(class AR_PlayerReplicationInfo* PRI, bool bHawkenDetected);
	void ReportSuspiciousPlayer(class AR_PlayerReplicationInfo* SuspiciousPRI, class AR_PlayerReplicationInfo* ReporterPRI, const struct FString& ReportDesc);
	struct FString GetMapFilename();
	bool GetMapNameOverride(struct FString* MapName);
	bool IsSmokeTest();
	void StartProfiling();
};


// Class HawkenGame.HawkenGameGeneric
// 0x0018 (0x0468 - 0x0450)
class AHawkenGameGeneric : public AR_GameInfoBase
{
public:
	struct FString                                     FallbackGametypeClassPathname;                            // 0x0450(0x000C) (NeedCtorLink)
	struct FString                                     PartyGameClassPathname;                                   // 0x045C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenGameGeneric");
		return ptr;
	}


	class UClass* STATIC_SetGameType(const struct FString& MapName, const struct FString& Options, const struct FString& Portal);
	struct FString STATIC_GetDefaultGameClassPath(const struct FString& MapName, const struct FString& Options, const struct FString& Portal);
	bool STATIC_IsValidMapPrefix(const struct FString& MapPrefix, int* out_PrefixIdx);
	struct FString STATIC_GetMapPrefix(const struct FString& MapName);
};


// Class HawkenGame.HawkenPRI_Base
// 0x0008 (0x0298 - 0x0290)
class AHawkenPRI_Base : public APlayerReplicationInfo
{
public:
	int                                                DLCFlag;                                                  // 0x0290(0x0004) (Net)
	unsigned long                                      bPendingAccountUpdate : 1;                                // 0x0294(0x0004) (Net)
	unsigned long                                      bQueuingAccountUpdate : 1;                                // 0x0294(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPRI_Base");
		return ptr;
	}


	void NotifyAccountAuthorizationChanged();
	void SetAccountQueuingUpdate(bool bValue);
	void SetAccountPendingUpdate(bool bValue);
	void ReplicatedEvent(const struct FName& VarName);
	void CopyProperties(class APlayerReplicationInfo* PRI);
};


// Class HawkenGame.R_PlayerReplicationInfo
// 0x0498 (0x0730 - 0x0298)
class AR_PlayerReplicationInfo : public AHawkenPRI_Base
{
public:
	TArray<struct FIntStat>                            KillStats;                                                // 0x0298(0x000C) (NeedCtorLink)
	TArray<struct FIntStat>                            DeathStats;                                               // 0x02A4(0x000C) (NeedCtorLink)
	TArray<struct FIntStat>                            SuicideStats;                                             // 0x02B0(0x000C) (NeedCtorLink)
	TArray<struct FIntStat>                            AssistStats;                                              // 0x02BC(0x000C) (NeedCtorLink)
	TArray<struct FIntStat>                            ItemStats;                                                // 0x02C8(0x000C) (NeedCtorLink)
	TArray<struct FIntStat>                            AbilityStats;                                             // 0x02D4(0x000C) (NeedCtorLink)
	TArray<struct FIntStat>                            PrimaryWeaponChoiceStats;                                 // 0x02E0(0x000C) (NeedCtorLink)
	TArray<struct FIntStat>                            SecondaryWeaponChoiceStats;                               // 0x02EC(0x000C) (NeedCtorLink)
	TArray<struct FIntStat>                            MechChoiceStats;                                          // 0x02F8(0x000C) (NeedCtorLink)
	TArray<struct FFloatStat>                          DamageStats;                                              // 0x0304(0x000C) (NeedCtorLink)
	class UR_OnlinePlayerStats_UnrankedGameplay*       OnlinePlayerStats_UnrankedGameplay;                       // 0x0310(0x0004)
	unsigned long                                      bForceRefreshPlayerStats : 1;                             // 0x0314(0x0004)
	unsigned long                                      bLoadedCurrentMechPreset : 1;                             // 0x0314(0x0004)
	unsigned long                                      bAbandonedGame : 1;                                       // 0x0314(0x0004)
	unsigned long                                      bTeamBalanceBonusAwarded : 1;                             // 0x0314(0x0004)
	unsigned long                                      bCoopMode : 1;                                            // 0x0314(0x0004)
	unsigned long                                      bPlayerInGame : 1;                                        // 0x0314(0x0004) (Net)
	unsigned long                                      bInactiveEnteredWorld : 1;                                // 0x0314(0x0004)
	unsigned long                                      bVotedToResign : 1;                                       // 0x0314(0x0004)
	unsigned long                                      bSpeaking : 1;                                            // 0x0314(0x0004)
	unsigned long                                      bMuted : 1;                                               // 0x0314(0x0004)
	unsigned long                                      bVisorBooting : 1;                                        // 0x0314(0x0004) (Net)
	unsigned long                                      bSentJoinedTrackingEvent : 1;                             // 0x0314(0x0004)
	unsigned long                                      bUseGenericKillCamInfo : 1;                               // 0x0314(0x0004) (Net)
	unsigned long                                      bCurrentMechTierFull : 1;                                 // 0x0314(0x0004) (Net)
	unsigned long                                      bWriteOnlineStatsStarted : 1;                             // 0x0314(0x0004)
	unsigned long                                      bSentTrackingEventSyncingAccountStarted : 1;              // 0x0314(0x0004)
	unsigned long                                      bSentTrackingEventSyncingAccountCompleted : 1;            // 0x0314(0x0004)
	unsigned long                                      bSentTrackingEventSyncingAccountFailed : 1;               // 0x0314(0x0004)
	unsigned long                                      bTriggerVolumeColorUpdate : 1;                            // 0x0314(0x0004) (Net)
	unsigned long                                      bHaveSuspiciousBehavior : 1;                              // 0x0314(0x0004)
	unsigned long                                      bServerAdmin : 1;                                         // 0x0314(0x0004) (Net)
	TArray<struct FPerPlayerStat>                      PlayerMatchups;                                           // 0x0318(0x000C) (NeedCtorLink)
	TArray<struct FDamagedPlayerInfo>                  PlayersDamaged;                                           // 0x0324(0x000C) (NeedCtorLink)
	struct FSiegeModeStats                             SiegeStats;                                               // 0x0330(0x0014)
	float                                              DamageDelivered;                                          // 0x0344(0x0004)
	int                                                DamageDeliveredRep;                                       // 0x0348(0x0004) (Net)
	float                                              DamageSustained;                                          // 0x034C(0x0004)
	int                                                DamageSustainedRep;                                       // 0x0350(0x0004) (Net)
	float                                              TeammateRepair;                                           // 0x0354(0x0004)
	int                                                TeammateRepairRep;                                        // 0x0358(0x0004) (Net)
	unsigned char                                      SaviorKills;                                              // 0x035C(0x0001) (Net)
	unsigned char                                      PlayersDominated;                                         // 0x035D(0x0001) (Net)
	unsigned char                                      NemesisKills;                                             // 0x035E(0x0001) (Net)
	unsigned char                                      SilosCaptured;                                            // 0x035F(0x0001) (Net)
	TEnumAsByte<EAbilities>                            SelectedMechAbilityIndex;                                 // 0x0360(0x0001) (Net)
	unsigned char                                      CurrentMechTier;                                          // 0x0361(0x0001) (Net)
	TEnumAsByte<EMechPresetLoadingState>               LastMechPresetLoadingState;                               // 0x0362(0x0001)
	unsigned char                                      CurrentEmblemIndex;                                       // 0x0363(0x0001) (Net)
	unsigned char                                      LastTeamIndex;                                            // 0x0364(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0365(0x0003) MISSED OFFSET
	int                                                StoredEnergyUnits;                                        // 0x0368(0x0004)
	int                                                EnergyCollected;                                          // 0x036C(0x0004) (Net)
	int                                                EnergyTransferred;                                        // 0x0370(0x0004) (Net)
	struct FGeneralMatchStats                          GeneralStats;                                             // 0x0374(0x0068) (NeedCtorLink)
	struct FExperiencePointGainedCategories            XPbyCategory;                                             // 0x03DC(0x00DC)
	int                                                HPbyCategory[0x9];                                        // 0x04B8(0x0004)
	int                                                Assists;                                                  // 0x04DC(0x0004) (Net)
	int                                                ExpPoints;                                                // 0x04E0(0x0004) (Net)
	int                                                HawkenPoints;                                             // 0x04E4(0x0004) (Net)
	int                                                MeteorPoints;                                             // 0x04E8(0x0004) (Net)
	int                                                CombatExpPoints;                                          // 0x04EC(0x0004)
	int                                                InactiveTimeInGame;                                       // 0x04F0(0x0004)
	float                                              MinutesPlayed;                                            // 0x04F4(0x0004)
	int                                                NewOverflowXP;                                            // 0x04F8(0x0004)
	int                                                NewFreeOverflowXP;                                        // 0x04FC(0x0004)
	int                                                ActiveItemIndex;                                          // 0x0500(0x0004) (Net)
	int                                                VotedMapIndex;                                            // 0x0504(0x0004)
	int                                                RankByXP;                                                 // 0x0508(0x0004)
	struct FSDelayedStatusEffect                       DelayedStatusEffectsForNexPawn[0x6];                      // 0x050C(0x0014) (NeedCtorLink)
	struct FItemsInfo                                  MechItems;                                                // 0x0584(0x0004) (Net)
	struct FSMechSetupStruct                           MechSetupStruct;                                          // 0x0588(0x0070) (Net)
	struct FCarouselMechInfo                           StoredCarouselMechInfo;                                   // 0x05F8(0x0054) (NeedCtorLink)
	class UTexture2D*                                  GenericKillCamIcon;                                       // 0x064C(0x0004)
	class AR_PlayerReplicationInfo*                    LastKillerPRI;                                            // 0x0650(0x0004)
	float                                              LastKillerTime;                                           // 0x0654(0x0004)
	class AR_PlayerReplicationInfo*                    LastKillPRI;                                              // 0x0658(0x0004)
	float                                              LastKillTime;                                             // 0x065C(0x0004)
	int                                                MultiKillLevel;                                           // 0x0660(0x0004)
	int                                                KillStreak;                                               // 0x0664(0x0004) (Net)
	int                                                DeathStreak;                                              // 0x0668(0x0004)
	int                                                CurrentMechTotalXP;                                       // 0x066C(0x0004) (Net)
	int                                                CurrentPilotXp;                                           // 0x0670(0x0004) (Net)
	int                                                LastNotifiedClientPilotXp;                                // 0x0674(0x0004)
	int                                                PreviousPilotXp;                                          // 0x0678(0x0004)
	class UR_MechSetup*                                MechSetup;                                                // 0x067C(0x0004)
	class UOnlineGameItemInstanceCollection*           ItemInstanceCollection;                                   // 0x0680(0x0004)
	class UOnlineUnlockedAchievementCollection*        UnlockedAchievementCollection;                            // 0x0684(0x0004)
	TArray<struct FUniqueNetId>                        UnlockingAchievementIds;                                  // 0x0688(0x000C) (NeedCtorLink)
	struct FString                                     CurrentMechInstanceId;                                    // 0x0694(0x000C) (NeedCtorLink)
	int                                                TaskId_GiveWalletCurrency;                                // 0x06A0(0x0004)
	int                                                TaskId_WriteUserStats;                                    // 0x06A4(0x0004)
	struct FString                                     ConnectionRequestId;                                      // 0x06A8(0x000C) (NeedCtorLink)
	struct FClanInfoStruct                             ClanInfo;                                                 // 0x06B4(0x0060) (Net, NeedCtorLink)
	int                                                VotedChallengeIndex;                                      // 0x0714(0x0004) (Net)
	int                                                UnrealNumSpeedHacks;                                      // 0x0718(0x0004)
	int                                                HawkenNumSpeedHacks;                                      // 0x071C(0x0004)
	float                                              TotalClientTimeAdvanced;                                  // 0x0720(0x0004)
	float                                              TotalServerTimeAdvanced;                                  // 0x0724(0x0004)
	float                                              TotalClockRate;                                           // 0x0728(0x0004)
	float                                              MaxClockRate;                                             // 0x072C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PlayerReplicationInfo");
		return ptr;
	}


	bool IsServerAdmin();
	void UpdateChallengeVotes();
	void UpdateChallengeVoteIndex(int NewVoteIndex);
	void ServerUpdateChallengeVoteIndex(int NewVoteIndex);
	void UpdateCaptureVolumeColors();
	void UpdateEmblemForUI();
	void SetClanInfo(class UOnlineClanInfo* PlayerClanInfo);
	void OnUnlockAchievementObjectCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerGuid, const struct FUniqueNetId& AchievementGuid);
	void ConditionalSetupMechStuff();
	void PrintWriteOnlineStatsStatus();
	bool IsWriteOnlineStatsCompleted();
	bool IsWriteUserStatsInProgress();
	bool IsGiveWalletCurrencyInProgress();
	void ClientReceiveUpdatedMechXP(const struct FString& MechInstanceId, int mechXP);
	void SendClientUpdatedMechXP(int iPresetIndex);
	void ClientReceiveUpdatedPlayerXP(int pilotXP);
	void SendClientUpdatedPlayerXP();
	bool IsOnlinePlayerAccountSynced();
	void SetActiveItemIndex(int NewActiveItemIndex);
	void OnVisorBootingUpdated();
	void SetVisorBooting(bool bValue);
	void STATIC_FindSpeakingPlayers(class AWorldInfo* WI, class UOnlineSubsystemMeteor* MeteorOSS);
	void InitOnlineStats();
	void TrackDamageDone(class AController* Victim, float DamageAmount);
	void IncrementMechWeaponShotsHit(int WeaponHand, int Amount);
	void IncrementMechWeaponShotsFired(int WeaponHand, int Amount);
	void IncrementMechTimePlayed(int Amount);
	void IncrementMechSilosNeutralized();
	void IncrementMechSilosCaptured();
	void IncrementMechEnergyDelivered(int Amount);
	void IncrementMechEnergyLost(int Amount);
	void IncrementMechEnergyCollected(int Amount);
	void IncrementMechNumMultiKills();
	void SetMechBestMultiKill(int Amount);
	void SetMechBestKillStreak(int Amount);
	void IncrementMechDamageSustained(float Amount);
	void IncrementMechDamageDealt(float Amount);
	void IncrementMechSuicides();
	void IncrementMechTurretDeaths();
	void IncrementMechDeaths();
	void IncrementMechAssists();
	void IncrementMechDeployableRepair(float Amount);
	void IncrementMechTeammateRepair(float Amount);
	void IncrementMechTotalHealed(float Amount);
	void IncrementMechTimeHealing(float Amount);
	void IncrementMechTimesHealed();
	void IncrementMechUnderdogBonus();
	void IncrementMechNemesisKill();
	void IncrementMechPlayersDominated();
	void IncrementMechCrushKill();
	void IncrementMechRevenge();
	void IncrementMechSavior();
	void IncrementMechAvenger();
	void IncrementMechKills();
	void SetMechTierHighStat(int presetIndex, int tier);
	void SetTierMechHasXPFor(int presetIndex, int tier);
	void UpdateReplicatedCurrentMechTierVars();
	void IncrementMechXP(int Amount, int presetIndex);
	bool CheckCanIncrementStatForCurrentMech();
	void ClearMatchHawkenPoints();
	void IncrementPlayerAP(int Amount);
	bool SetPlayerFloatStatIfSmaller(const struct FString& Key, float Amount);
	bool SetPlayerFloatStatIfGreater(const struct FString& Key, float Amount);
	void IncrementPlayerFloatStat(const struct FString& Key, float Amount);
	bool SetPlayerIntStatIfSmaller(const struct FString& Key, int Amount);
	bool SetPlayerIntStatIfGreater(const struct FString& Key, int Amount);
	void IncrementPlayerIntStat(const struct FString& Key, int Amount);
	void MarkAchievementAsUnlocked(class UOnlineAchievementObject* AchievementObject);
	void UnlockAchievement(class UOnlineAchievementObject* AchievementObject);
	bool IsAchievementUnlocked(struct FUniqueNetId* AchievementGuid);
	void UnlockPlayerAchievementsBasedOnStat(const struct FString& Key);
	void IncrementPlayerHP(int Amount, TEnumAsByte<EHawkenPointEventType> Type, bool bAllowMultipliers, bool bIncrementStatOnly);
	void IncrementPlayerXP(int Amount, bool bCombatXP, bool bStatsOnly);
	float GetOnlinePlayerFloatStat(const struct FString& Key);
	int GetOnlinePlayerIntStat(const struct FString& Key);
	bool IsPlayerLoggedIn();
	void IncrementSilosNeutralized();
	void IncrementSilosCaptured();
	void IncrementDefendingSiloStat();
	void IncrementAttackingSiloStat();
	void IncrementContestingSiloStat();
	void IncrementDefendingAAStat();
	void IncrementAttackingAAStat();
	void IncrementContestingAAStat();
	float IncrementEnergyLost(float Amount, bool bForSiege);
	float IncrementEnergyDelivered(float Amount, bool bForSiege);
	float IncrementEnergyCollected(float Amount, bool bForSiege);
	float IncrementDeployableRepair(float Amount);
	float IncrementTeammateRepair(float Amount);
	float IncrementHealedAmountStat(float Amount);
	float IncrementHealingTimeStat(float Amount);
	int IncrementTimesHealedStat();
	void IncrementNumMultiKillsStat();
	void IncrementMultiKillAchievementStat(int Amount);
	void IncrementKillstreakAchievementStat(int Amount);
	int SetMultiKillStatIfBest(int Amount, bool bSkipStats);
	int SetKillStreakStatIfBest(int Amount, bool bSkipStats);
	int IncrementUnderdogBonusStat();
	int IncrementNemesisKillStat();
	int IncrementPlayersDominatedStat();
	int IncrementCrushKillStat();
	int IncrementRevengeStat();
	int IncrementSaviorStat();
	int IncrementAvengerStat();
	int IncrementSuicideStat(const struct FName& NewStatName);
	int IncrementTurretDeathStat();
	int IncrementDeathStat(const struct FName& NewStatName);
	int IncrementKillStat(const struct FName& NewStatName);
	int IncrementAssistStat(const struct FName& NewStatName, bool bSkipStats);
	float IncrementDamageSustainedStat(const struct FName& NewStatName, float Amount);
	float IncrementDamageStat(const struct FName& NewStatName, float Amount, bool bDamagedBot);
	int IncrementSecondaryWeaponChoiceStat(const struct FName& NewStatName);
	int IncrementPrimaryWeaponChoiceStat(const struct FName& NewStatName);
	int IncrementAbilityStat(const struct FName& NewStatName);
	int IncrementItemStat(const struct FName& NewStatName);
	int IncrementMechChoiceStat(const struct FName& NewStatName);
	int IncrementKilledStat(class AR_PlayerReplicationInfo* StatPRI);
	int IncrementKilledByStat(class AR_PlayerReplicationInfo* StatPRI);
	bool DidKillNemesis(class AR_PlayerReplicationInfo* KilledPRI, TArray<struct FPerPlayerStat>* StatsArray);
	bool IsKillerNewNemesis(int KillerPlayerID, TArray<struct FPerPlayerStat>* StatsArray);
	int IncrementPerPlayerStat(class AR_PlayerReplicationInfo* StatPRI, bool bKill, int Amount, TArray<struct FPerPlayerStat>* StatsArray);
	int IncrementStatsArray(const struct FName& NewStatName, int Amount, TArray<struct FIntStat>* StatsArray);
	float IncrementStatsArrayFloat(const struct FName& NewStatName, float Amount, TArray<struct FFloatStat>* StatsArray);
	int GetStatsArrayInt(const struct FName& StatName, TArray<struct FIntStat>* StatsArray);
	float GetStatsArrayFloat(const struct FName& StatName, TArray<struct FFloatStat>* StatsArray);
	void IncrementKills(bool bEnemyKill, bool bSkipStats);
	void RecordGameplayStat_MultiKillLevel();
	void RecordGameplayStat_KillStreak();
	void ResetHawkenProperties(class AR_PlayerReplicationInfo* RPRI);
	void CopyProperties(class APlayerReplicationInfo* PRI);
	void Reset();
	void CreateCarouselMechInfo(struct FCarouselMechInfo* MechInfo);
	struct FString GetMechSubtypeName();
	void SetCurrentMech(const struct FString& Mech_InstanceId);
	void CheckMechSetup();
	bool ConditionalLinkStormEntitiesToLocalPlayer();
	struct FString GetPlayerStatsErrorText();
	bool ConditionalSetPlayerStatsReference();
	void SetDefaultAnimTaunt(int BaseMechType);
	void ClearDelayedStatusEffectList();
	void AddDelayedStatusEffectForNextPawn(class UClass* EffectBase, class UClass* internalBase);
	void CheckForNewMechTierNotification();
	void CheckForNewPilotLevelNotification();
	void SetPrimaryWeaponUpgradeFlags(int PrimaryWeapon, const struct FString& Mech_InstanceId);
	void SetReadyForSetup();
	void LoadedMechPreset(int presetIndex);
	float GetTimeSpentInMatch(bool bActivePlayer);
	void ReplicatedEvent(const struct FName& VarName);
	class AR_Pawn* GetRP(class APawn* TargetPawn);
	class AR_PlayerController* GetPC();
	class AR_PlayerController* GetALocalPC();
	bool ShouldBroadCastWelcomeMessage(bool bExiting);
	struct FString GetPlayerName();
	void ServerSetEmblem(unsigned char EmblemIndex, const struct FString& EmblemInstanceId);
	void PostBeginPlay();
};


// Class HawkenGame.R_MPGameBase
// 0x00FC (0x054C - 0x0450)
class AR_MPGameBase : public AR_GameInfoBase
{
public:
	class AR_GameReplicationInfo*                      HawkenGRI;                                                // 0x0450(0x0004) (Transient)
	TArray<class AR_TeamInfo*>                         Teams;                                                    // 0x0454(0x000C) (NeedCtorLink)
	unsigned long                                      bIsHumanTeamGame : 1;                                     // 0x0460(0x0004)
	unsigned long                                      bThirdPerson : 1;                                         // 0x0460(0x0004)
	unsigned long                                      bFastMovement : 1;                                        // 0x0460(0x0004)
	unsigned long                                      bPlayersMustBeReady : 1;                                  // 0x0460(0x0004)
	unsigned long                                      bQuickStart : 1;                                          // 0x0460(0x0004)
	unsigned long                                      bLoadedGameplayItemProperties : 1;                        // 0x0460(0x0004) (Transient)
	unsigned long                                      bAutoStartTimerActive : 1;                                // 0x0460(0x0004) (Transient)
	unsigned long                                      bInitializedOnFirstTick : 1;                              // 0x0460(0x0004) (Transient)
	unsigned long                                      bSupportsMapCycle : 1;                                    // 0x0460(0x0004)
	unsigned long                                      bModifiedGameRules : 1;                                   // 0x0460(0x0004)
	unsigned long                                      bDedicatedDemoRecordEnabled : 1;                          // 0x0460(0x0004) (Const, Config)
	unsigned long                                      bSentTrackingEventMatchCreated : 1;                       // 0x0460(0x0004)
	unsigned long                                      bDetectedEndGameNearing : 1;                              // 0x0460(0x0004)
	unsigned long                                      bIgnoreMMR : 1;                                           // 0x0460(0x0004)
	unsigned long                                      bRequireReservation : 1;                                  // 0x0460(0x0004)
	unsigned long                                      bDisconnectAfterVictory : 1;                              // 0x0460(0x0004)
	unsigned long                                      bIsTournamentMatch : 1;                                   // 0x0460(0x0004) (Config)
	unsigned long                                      bAllowInviteInProgress : 1;                               // 0x0460(0x0004)
	unsigned long                                      bDropRepairOrb : 1;                                       // 0x0460(0x0004)
	struct FString                                     QuitCountdownMessage;                                     // 0x0464(0x000C) (NeedCtorLink)
	float                                              DefaultQuitCountdownTime;                                 // 0x0470(0x0004) (Config)
	struct FString                                     DefaultQuitCountdownMessage;                              // 0x0474(0x000C) (NeedCtorLink)
	int                                                RefreshItemDatabaseMins;                                  // 0x0480(0x0004) (Config, GlobalConfig)
	int                                                RestartEmptyServerMins;                                   // 0x0484(0x0004) (Config, GlobalConfig)
	int                                                RestartEmptyServerMinsRandomRange;                        // 0x0488(0x0004) (Config, GlobalConfig)
	int                                                VotesNeededForMap;                                        // 0x048C(0x0004) (Config)
	int                                                AutoStartDelay_Min;                                       // 0x0490(0x0004) (Config)
	int                                                AutoStartDelay_Max;                                       // 0x0494(0x0004) (Config)
	int                                                LateEntryLives;                                           // 0x0498(0x0004) (Config)
	int                                                AutoStartMinPlayers;                                      // 0x049C(0x0004) (Config)
	float                                              AutoStartMinPercentReady;                                 // 0x04A0(0x0004) (Config)
	float                                              AutoStartMinPercentReadyTeam;                             // 0x04A4(0x0004) (Config)
	int                                                AutoStartCountdownSeconds;                                // 0x04A8(0x0004) (Config)
	float                                              LastReadyTime;                                            // 0x04AC(0x0004) (Transient)
	float                                              CountdownBeginTime;                                       // 0x04B0(0x0004) (Transient)
	float                                              PendingMatchStartTime;                                    // 0x04B4(0x0004) (Transient)
	float                                              MaxWaitForTravelingPlayers;                               // 0x04B8(0x0004) (Config)
	TArray<struct FName>                               MapCycle;                                                 // 0x04BC(0x000C) (Config, NeedCtorLink)
	struct FString                                     ForcedNextMap;                                            // 0x04C8(0x000C) (NeedCtorLink)
	int                                                ForcedRanking;                                            // 0x04D4(0x0004)
	float                                              PreMatchTime;                                             // 0x04D8(0x0004) (Config)
	float                                              GoalScoreForNearEndGame;                                  // 0x04DC(0x0004) (Config)
	float                                              TimeToEndForMusic;                                        // 0x04E0(0x0004) (Const, Config)
	class USoundCue*                                   EndGameMusicCue;                                          // 0x04E4(0x0004)
	float                                              PostMatchMusicFadeTime;                                   // 0x04E8(0x0004) (Const)
	float                                              PostMatchMusicFadeStartTime;                              // 0x04EC(0x0004) (Const)
	float                                              TimeSinceCheckEndGameForMusic;                            // 0x04F0(0x0004)
	float                                              CheckEndGameForMusicInterval;                             // 0x04F4(0x0004) (Const)
	TArray<struct FString>                             GameModeAchievementFirstBlood;                            // 0x04F8(0x000C) (NeedCtorLink)
	TArray<struct FString>                             GameModeAchievementMVP;                                   // 0x0504(0x000C) (NeedCtorLink)
	class UClass*                                      ReservationBeaconClientClass;                             // 0x0510(0x0004)
	class UPartyBeaconClient*                          ReservationBeaconClient;                                  // 0x0514(0x0004)
	class UClass*                                      ReservationBeaconHostClass;                               // 0x0518(0x0004)
	class UPartyBeaconHostMeteor*                      ReservationBeaconHost;                                    // 0x051C(0x0004)
	float                                              PostMatchStartTime;                                       // 0x0520(0x0004)
	float                                              AllowPostMatchLoginTime;                                  // 0x0524(0x0004)
	int                                                PlayerPurchaseCutOffTime;                                 // 0x0528(0x0004)
	float                                              PeriodicPlayerUpdateDelay;                                // 0x052C(0x0004)
	float                                              PeriodicPlayerUpdateIntervalInSecs;                       // 0x0530(0x0004) (Config)
	float                                              DistanceTraveledUpdateDelay;                              // 0x0534(0x0004)
	float                                              DistanceTraveledUpdateIntervalInSecs;                     // 0x0538(0x0004) (Config)
	float                                              PeriodicMatchConcurrencyUpdateDelay;                      // 0x053C(0x0004)
	float                                              PeriodicMatchConcurrencyUpdateIntervalInSecs;             // 0x0540(0x0004) (Config)
	class UClass*                                      CustomServerConfigClass;                                  // 0x0544(0x0004)
	class AR_CustomServerConfig*                       CustomServerConfig;                                       // 0x0548(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MPGameBase");
		return ptr;
	}


	void PlayerIdToPlayerName(int PlayerID, struct FString* PlayerName);
	void UpdateHostReservationBeaconScores();
	bool STATIC_IsOnlineGame();
	void SendClientAlert(int alert, int TeamNum);
	void QuitCountdownTick();
	void QuitForMaintenance(float TimeToQuit, const struct FString& Message);
	void GetAchievementMapWinLoseName(struct FString* OverallMapWinName, struct FString* GameModeMapWinName, struct FString* GameModeMapLoseName);
	void UpdateGameSettingsEvent();
	void UpdateGameSettingsCounts();
	void UpdateGameSettings();
	int GetMatchCompletionPercent();
	bool MatchHasEnded();
	struct FString GetNextMap();
	void SetForcedNextMap(const struct FString& NextMap);
	bool IsMapAvailable(const struct FName& MapName);
	int FindMapID_DLC(const struct FName& MapName);
	void SetGameOptionsForStats();
	bool AllowPausing(class APlayerController* PC);
	int DetermineHighestIntStatIndex(TArray<struct FIntStat> Stats);
	void ReportFinalScoreStat();
	void InitializeTeams();
	void SendServerPerfEventTimer();
	void VoteMapIndex(class AR_PlayerController* VotingRPC, int VotedMapNum);
	void TrySendTrackingEventMatchCreated();
	void CheckStartMatch();
	int GetNumPlayersNeededToReady();
	bool CheckPlayersToStartMatch();
	void NotifyPlayerReadyChanged();
	int GetNumReadyPlayers();
	void DeactivateAutoStartTimer();
	void ActivateAutoStartTimer();
	void Logout(class AController* Exiting);
	void PostLogin(class APlayerController* NewPlayer);
	class APlayerController* Login(const struct FString& Portal, const struct FString& Options, const struct FUniqueNetId& UniqueId, struct FString* ErrorMessage);
	void PreLogin(const struct FString& Options, const struct FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, struct FString* ErrorMessage);
	void Reset();
	void InitializeGameOnFirstTick();
	void ProcessServerTravel(const struct FString& URL, bool bAbsolute);
	void GenericPlayerInitialization(class AController* C);
	void ShuffleMapCycle();
	void InitGameReplicationInfo();
	void ClearOnlineDelegates();
	void QuitGame();
	void NotifyServerExperiencingDifficulties(TEnumAsByte<EServerExperiencingDifficultiesCode> ServerExperiencingDifficultiesCode);
	void OnReadAchievementCollectionCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode);
	void LoadAchievementCollection();
	void OnReadGameItemTypeCollectionComplete(bool bWasSuccessful);
	void RegisterServer();
	void LoadGameplayItemValues(bool bRefreshOnlineData);
	void CheckEmptyServerQuit();
	void RefreshGameplayValues();
	void UpdateBestNextHosts();
	void RegisterOnlineDelegates();
	void SetMeteorOSS(class UOnlineSubsystemMeteor* OSS);
	int GetNumHumanTeams();
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
	void STATIC_GetVictoryMessage(bool bIsAWinner, unsigned char Rank, class AR_TeamInfo* Friend, class AR_TeamInfo* Foe, struct FString* VictoryMsg, struct FString* colorMode, struct FString* friendNumber, struct FString* foeNumber);
	void StopEndGameMusic();
	void PlayEndGameMusic();
	void StartNearEndGameMusic();
	bool IsEndGameNear();
	void Tick(float DeltaTime);
	void PreBeginPlay();
};


// Class HawkenGame.R_DamageTracking
// 0x0090 (0x00CC - 0x003C)
class UR_DamageTracking : public UObject
{
public:
	struct FDamagedByInfo                              Damagers[0x5];                                            // 0x003C(0x0018)
	float                                              DamageTrackingExpireTime;                                 // 0x00B4(0x0004)
	float                                              DamageTrackingAssistTime;                                 // 0x00B8(0x0004)
	unsigned long                                      bTrackAllDamagers : 1;                                    // 0x00BC(0x0004) (Transient)
	TArray<class AController*>                         RecordedDamagers;                                         // 0x00C0(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DamageTracking");
		return ptr;
	}


	class AController* FindMostRecentDamager(class AWorldInfo* WI, class UClass** dmgType);
	bool DidDamagerAssistInKill(int Index, class AController* Damager);
	bool GetDamagedByInfo(class AController* Killer, class AWorldInfo* WI, struct FDamagedByInfo* RetDamagedByInfo);
	void SendAchievementStats(const struct FString& AchievementStat, class AWorldInfo* WI);
	void AwardXP(float TotalExpPoints, float HealthMax, TEnumAsByte<EExperiencePointEventType> XPEventType, class AWorldInfo* WI);
	void DamagedBy(class AController* Damager, float DamageAmount, class UClass* dmgType, class AWorldInfo* WI, bool bVicariousDamage);
	void ReduceTrackedDamage(float Amount, class AWorldInfo* WI);
	void ClearExpiredSlots(class AWorldInfo* WI);
	void LogDamageTracked(class AWorldInfo* WI);
	void ResetTracking();
};


// Class HawkenGame.R_Deathmatch
// 0x0058 (0x05A4 - 0x054C)
class AR_Deathmatch : public AR_MPGameBase
{
public:
	unsigned long                                      bTeamDamageDeployables : 1;                               // 0x054C(0x0004)
	unsigned long                                      bSpawnInTeamArea : 1;                                     // 0x054C(0x0004)
	unsigned long                                      bIsServerScoreAndRankingDirty : 1;                        // 0x054C(0x0004)
	unsigned long                                      bRequestedConnectionRequestId : 1;                        // 0x054C(0x0004)
	unsigned long                                      bFirstKillMade : 1;                                       // 0x054C(0x0004)
	unsigned long                                      bSkipKillAssistStats : 1;                                 // 0x054C(0x0004) (Const)
	float                                              RespawnDelay;                                             // 0x0550(0x0004) (Config)
	float                                              SpawnProtectionTime;                                      // 0x0554(0x0004) (Const)
	class ANavigationPoint*                            LastPlayerStartSpot;                                      // 0x0558(0x0004)
	class ANavigationPoint*                            LastStartSpot;                                            // 0x055C(0x0004)
	float                                              MatchRestartTime;                                         // 0x0560(0x0004)
	float                                              MatchOverTime;                                            // 0x0564(0x0004)
	float                                              PostMatchScreenTime;                                      // 0x0568(0x0004) (Const)
	float                                              WriteOnlineStatsMaxWaitTime;                              // 0x056C(0x0004) (Const)
	class AActor*                                      EndGameFocus;                                             // 0x0570(0x0004)
	float                                              TickServerScoreAndRankingDelay;                           // 0x0574(0x0004)
	float                                              TickUpdateGameSettingsDelay;                              // 0x0578(0x0004)
	float                                              TickRefreshUserInfoDelay;                                 // 0x057C(0x0004)
	int                                                MinPlayersForMVP;                                         // 0x0580(0x0004) (Const)
	int                                                XPEarnedForKill;                                          // 0x0584(0x0004)
	TEnumAsByte<EndOfMatchState_e>                     EndOfMatchState;                                          // 0x0588(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0589(0x0003) MISSED OFFSET
	float                                              EndStateTime[0x4];                                        // 0x058C(0x0004) (Const)
	float                                              LetterboxingTime;                                         // 0x059C(0x0004) (Const)
	float                                              VictoryMessageTime;                                       // 0x05A0(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Deathmatch");
		return ptr;
	}


	void DebugPrintPlayersLoadedMechs(const struct FString& PlayerName);
	void DebugWritePlayerOnlineStats(const struct FString& PlayerName);
	void DebugReadOnlinePlayerAccount(const struct FString& PlayerName);
	int GetMatchCompletionPercent();
	void RestartGame();
	void PrintWriteOnlineStatsStatus(float TimeElapsed);
	bool CheckWriteOnlineStatsCompleted();
	void SetEndOfMatchState(TEnumAsByte<EndOfMatchState_e> NewState);
	void ShowLetterboxing();
	void ShowWinnerMessage();
	void GetCarouselForCategory(TEnumAsByte<EPlayerSort_e> SortCategory, struct FCarouselInfo* CarouselCat);
	bool TurretIsEnemy(class AR_Turret_Base* Turret, class AController* Player);
	void AdjustPlayerStartScoreForGameType(class APlayerStart* P, class AController* Player, float* Score);
	float RatePlayerStart(class APlayerStart* P, unsigned char Team, class AController* Player);
	bool IsPlayerStartEnabled(class APlayerStart* P);
	void DebugUpdateBestPlayerStart(class AR_PlayerController* RPC, class APlayerStart* BestStart);
	class APlayerStart* ChoosePlayerStart(class AController* Player, unsigned char InTeam);
	void TestPlayerStartCollision(class AController* Player);
	class ANavigationPoint* FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName);
	bool ShouldSpawnAtStartSpot(class AController* Player);
	void ReduceDamage(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum);
	void ReduceDamageFloat(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser, float* Damage, struct FVector* Momentum);
	bool CheckScore(class APlayerReplicationInfo* Scorer);
	unsigned char GetNpcsTeamId(unsigned char TeamNpcWantsToBeOn, class AController* NpcController);
	bool CheckMaxLives(class APlayerReplicationInfo* Scorer);
	void EndKillStreak(class AR_PlayerReplicationInfo* Killer, class AR_PlayerReplicationInfo* Other);
	void NotifyKillStreak(class AR_PlayerReplicationInfo* Killer, int Num);
	void HandleAssists(class AController* KilledPlayer, class AR_Pawn* KilledPawn, class AController* Killer);
	void HandleKill(class AR_PawnNative* KilledPawn, class AController* Killer, class UClass* dmgType, int MultiKillLevel, int KillStreak);
	bool IsEnemyEUFullKill(class AR_Pawn* KilledPawn, class AController* Killer);
	bool IsEnemyOutOfSightCone(class AR_Pawn* KilledPawn, class AController* Killer);
	bool IsOverheatedKill(class AR_Pawn* KilledPawn, class AController* Killer);
	bool IsEnemyOverheatedKill(class AR_Pawn* KilledPawn, class AController* Killer);
	bool IsSaviorKill(class AR_PawnNative* KilledPawn, class AController* Killer);
	bool IsAvengerKill(class AR_PawnNative* KilledPawn, class AController* Killer);
	bool IsRevengeKill(class AR_PawnNative* KilledPawn, class AController* Killer);
	bool IsQuickTotalDamageKill(const struct FDamagedByInfo& KillerDamageInfo, class AR_Pawn* KilledPawn);
	bool IsInsideShield(class AR_Pawn* KilledPawn);
	void CheckKillAchievements(class AR_Pawn* R_KilledPawn, class AController* Killer, class AR_PlayerReplicationInfo* KillerPRI, class UClass* dmgType);
	void NotifyStatusEffectsOfKillAssist(class AController* KilledPlayer, class AR_Pawn* KilledPawn, class AController* Killer);
	bool HandleDeath(class AR_PlayerReplicationInfo* KilledPRI);
	void Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* dmgType);
	void BroadcastDeathMessage(class AController* Killer, class AController* KilledPlayer, class UClass* DamageType);
	void RestartPlayer(class AController* aPlayer);
	void ClearServerDelegates();
	void RegisterServerDelegates();
	void EndOnlineGame();
	void StartOnlineGame();
	void GameEnding();
	void CheckStartMatch();
	void StartMatch();
	void InitializeGameOnFirstTick();
	void HandleGamemodeEndGameAchievementConditions();
	void HandleGenericEndGameAchievementConditions();
	void SendClientAllEndOfMatchXP();
	void RegisterAllQueuedAchievements();
	void PrepareToQueueAchievements();
	void SendMatchEndedMechStatusEvents();
	void WriteStats(class AActor* Winner, const struct FString& WinReason);
	void OnReadAllUserGameItemStatsCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID, class UOnlineGameItemInstanceCollection* InstanceCollection);
	void OnReadGameItemInstanceCollectionComplete(const struct FUniqueNetId& PlayerID, bool bWasSuccessful, class UOnlineGameItemInstanceCollection* ItemInstanceCollection);
	void OnReadUnlockedAchievementCollectionCompleted(int TaskID, const struct FUniqueNetId& PlayerID, TEnumAsByte<ENetworkErrorCode> ErrorCode, class UOnlineUnlockedAchievementCollection* Collection);
	void OnReadOnlineStatsComplete(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID, class UOnlinePlayerStats* PlayerStats);
	void ReadOnlinePlayerAccount(class AR_PlayerReplicationInfo* playerRI);
	void ReadOnlinePlayerAccounts();
	void FixupMechOverflowXP(class AR_PlayerReplicationInfo* playerRI, bool bTransferToFreeLegacy);
	void OnGiveWalletCurrencyComplete(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID, TEnumAsByte<EOfferCurrency> Currency, int Amount);
	void OnWriteUserStatsComplete(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID, class UOnlinePlayerStats* PlayerStats);
	void WritePlayerOnlineStats(class AR_PlayerReplicationInfo* playerRI);
	void WriteOnlineStats();
	class AR_PlayerReplicationInfo* GetPRIFromNetId(bool bCheckInativePRIs, struct FUniqueNetId* PlayerID);
	void ForceEndGameCheat(class AR_PlayerController* Sender);
	void DestroyAllFlyingCarsCheat();
	void ResignGame(class AR_PlayerController* aPlayer);
	void UpdatePlayerRatings();
	void UpdateSoloPlayerRatings();
	int ScorePerTimeSort(class AR_PlayerReplicationInfo* A, class AR_PlayerReplicationInfo* B);
	int KDASort(class AR_PlayerReplicationInfo* A, class AR_PlayerReplicationInfo* B);
	void AwardEndofGameHawkenPoints();
	int GetHawkenPointsForMatchTime(class AR_PlayerReplicationInfo* RPRI, bool bActivePlayer);
	void OverridePRI(class APlayerController* PC, class APlayerReplicationInfo* OldPRI);
	void AddInactivePRI(class APlayerReplicationInfo* PRI, class APlayerController* PC);
	int DeathSort(class AR_PlayerReplicationInfo* A, class AR_PlayerReplicationInfo* B);
	int AssistSort(class AR_PlayerReplicationInfo* A, class AR_PlayerReplicationInfo* B);
	int KDRatioSort(class AR_PlayerReplicationInfo* A, class AR_PlayerReplicationInfo* B);
	int KillSort(class AR_PlayerReplicationInfo* A, class AR_PlayerReplicationInfo* B);
	int STATIC_ExpSort(class AR_PlayerReplicationInfo* A, class AR_PlayerReplicationInfo* B);
	void RemoveItemInstance(const struct FString& InstanceID, struct FUniqueNetId* PlayerID);
	bool CheckForValidBoost(class AR_PlayerReplicationInfo* RPRI, class AR_PlayerController* RPC, TEnumAsByte<EInventoryItemType> TargetInvType);
	void ApplyBoostToMatchHP();
	void ApplyBoostToMatchXP();
	void GiveEndOfGameXPAwards(bool bCountBots);
	void IncrementLastPlaceDMAchievement(const struct FString& lossOnMapAchievementName);
	void IncrementPlayerWinLossStats();
	void UpdateSinglePlayerProgressionStats(class AR_PlayerReplicationInfo* RPRI);
	void UpdatePlayerProgressionStats();
	void HackForMaxScoutPredatorReward();
	void HackForMigratedAccounts();
	void SendGameTypeEndOfGameStats(class AR_PlayerController* RPCOwner, class AR_PlayerReplicationInfo* RPRI);
	void SendEndOfGameStats(class APlayerController* TargetPlayerController);
	void DetermineAndSendMechXPGained(class AR_PlayerReplicationInfo* RPRI);
	int ExpGainSort(const struct FMechXPChange& A, const struct FMechXPChange& B);
	void DetermineMostChosenAbility(class AR_PlayerReplicationInfo* RPRI);
	void DetermineMostChosenItem(class AR_PlayerReplicationInfo* RPRI);
	void DetermineMostChosenSecondaryWeapon(class AR_PlayerReplicationInfo* RPRI);
	void DetermineMostChosenPrimaryWeapon(class AR_PlayerReplicationInfo* RPRI);
	void DetermineCategoryLeaders();
	void DetermineMostKilledByPlayer(class AR_PlayerReplicationInfo* RPRI);
	void DetermineMostKilledPlayer(class AR_PlayerReplicationInfo* RPRI);
	void STATIC_GetVictoryMessage(bool bIsAWinner, unsigned char Rank, class AR_TeamInfo* Friend, class AR_TeamInfo* Foe, struct FString* VictoryMsg, struct FString* colorMode, struct FString* friendNumber, struct FString* foeNumber);
	bool IsAWinner(class APlayerReplicationInfo* PRI);
	class ACameraActor* FindLevelWinnerCameraActor();
	void SetEndGameFocus(class APlayerReplicationInfo* Winner, bool bFindFocus);
	void SetEndGameTime();
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	void ReplicationEndMatchStats();
	void EndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	bool IsEndGameNear();
	void PlayEndOfMatchMessage();
	void UpdateServerRanking(TArray<class AR_PlayerReplicationInfo*> Players, int GameType);
	void UpdateServerScore(TArray<class AR_PlayerReplicationInfo*> Players);
	void UpdateServerPilotLevel(TArray<class AR_PlayerReplicationInfo*> Players);
	void UpdateServerScoreAndRanking();
	void Logout(class AController* Exiting);
	class APlayerController* Login(const struct FString& Portal, const struct FString& Options, const struct FUniqueNetId& UniqueId, struct FString* ErrorMessage);
	void PreBeginPlay();
};


// Class HawkenGame.R_GamePoints
// 0x0180 (0x01BC - 0x003C)
class UR_GamePoints : public UObject
{
public:
	float                                              KillXPVerticalOffset;                                     // 0x003C(0x0004) (Const)
	int                                                KillStreakMin;                                            // 0x0040(0x0004) (Const)
	struct FString                                     KillStreakString;                                         // 0x0044(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     EndKillStreakString;                                      // 0x0050(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RepairedTeammateString;                                   // 0x005C(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             MultiKillNames;                                           // 0x0068(0x000C) (Const, Localized, NeedCtorLink)
	float                                              MultiKillTimeLimit;                                       // 0x0074(0x0004) (Const)
	int                                                MultiKillLevelMin;                                        // 0x0078(0x0004) (Const)
	float                                              AvengerTime;                                              // 0x007C(0x0004) (Const)
	int                                                NemesisKillsRequired;                                     // 0x0080(0x0004) (Const)
	struct FString                                     NewNemesisString;                                         // 0x0084(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BecameNemesisString;                                      // 0x0090(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     KilledNemesisString;                                      // 0x009C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DominationEndedString;                                    // 0x00A8(0x000C) (Const, Localized, NeedCtorLink)
	float                                              SaviorMaxHealthMultiplier;                                // 0x00B4(0x0004) (Const)
	float                                              SaviorDamagedWithinSeconds;                               // 0x00B8(0x0004) (Const)
	float                                              SaviorMinDamageAmount;                                    // 0x00BC(0x0004) (Const)
	int                                                MinPlayersForZeroDeaths;                                  // 0x00C0(0x0004) (Const)
	int                                                MinTimeForZeroDeaths;                                     // 0x00C4(0x0004) (Const)
	float                                              AntiAirControlTime;                                       // 0x00C8(0x0004) (Const)
	struct FString                                     PropSheetNameHP;                                          // 0x00CC(0x000C) (Const, NeedCtorLink)
	struct FString                                     PropSheetNameXP;                                          // 0x00D8(0x000C) (Const, NeedCtorLink)
	struct FString                                     PropSheetNameHP_Coop;                                     // 0x00E4(0x000C) (Const, NeedCtorLink)
	struct FString                                     PropSheetNameXP_Coop;                                     // 0x00F0(0x000C) (Const, NeedCtorLink)
	struct FString                                     DestroyBattleshipEngineString;                            // 0x00FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DestroyBattleshipTurretString;                            // 0x0108(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DestroyNeutralTurretString;                               // 0x0114(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TransferEUtoBaseString;                                   // 0x0120(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CaptureSilo;                                              // 0x012C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SiloFired;                                                // 0x0138(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             XPLocalizedNameByCategory;                                // 0x0144(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     HPLocalizedNamebyCategory[0x9];                           // 0x0150(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GamePoints");
		return ptr;
	}


	float STATIC_GetPointsHPCoopArray(const struct FString& PropName, int Index, float defaultVal);
	float STATIC_GetPointsHPCoop(const struct FString& PropName, float defaultVal);
	float STATIC_GetPointsXPCoop(const struct FString& PropName, float defaultVal);
	float STATIC_GetPointsHP(const struct FString& PropName, float defaultVal);
	float STATIC_GetPointsForTypeHP(const struct FString& PropName, int GameType);
	float STATIC_GetPointsXPArray(const struct FString& PropName, int Index, float defaultVal);
	float STATIC_GetPointsXP(const struct FString& PropName, float defaultVal);
	int STATIC_GetXPGainedForType(TEnumAsByte<EExperiencePointEventType> EventType, struct FExperiencePointGainedCategories* XPbyCategory);
	void STATIC_RecordPointGainedEvent(class AController* Player, int NumPoints, TEnumAsByte<EExperiencePointEventType> EventType);
	int STATIC_GetKillPoints();
	int STATIC_GetMultiKillPoints(int Num);
	int STATIC_GetKillStreakPoints(int Num);
	bool STATIC_IsCombatXPEvent(TEnumAsByte<EExperiencePointEventType> XPEventType, bool bCheckCoOpEvents);
	int STATIC_ScorePoints(class AController* PC, int NumPoints, TEnumAsByte<EExperiencePointEventType> EventType, int presetIndex, bool bMechXPOnly, bool bAllowMultipliers);
	int STATIC_ScorePointsProp(class AController* PC, const struct FString& PropName, TEnumAsByte<EExperiencePointEventType> EventType, int presetIndex, bool bMechXPOnly);
};


// Class HawkenGame.R_GameSearchCommon
// 0x000C (0x0100 - 0x00F4)
class UR_GameSearchCommon : public UOnlineGameSearch
{
public:
	struct FString                                     GameClass;                                                // 0x00F4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameSearchCommon");
		return ptr;
	}


	void InitFilters();
};


// Class HawkenGame.R_GameSearchDM
// 0x0000 (0x0100 - 0x0100)
class UR_GameSearchDM : public UR_GameSearchCommon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameSearchDM");
		return ptr;
	}


	bool FilterSearchResult(class UOnlineGameSettings* GameSettings);
};


// Class HawkenGame.R_GameSearchSiege
// 0x0000 (0x0100 - 0x0100)
class UR_GameSearchSiege : public UR_GameSearchCommon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameSearchSiege");
		return ptr;
	}


	bool FilterSearchResult(class UOnlineGameSettings* GameSettings);
};


// Class HawkenGame.R_GameSearchTDM
// 0x0000 (0x0100 - 0x0100)
class UR_GameSearchTDM : public UR_GameSearchCommon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameSearchTDM");
		return ptr;
	}


	bool FilterSearchResult(class UOnlineGameSettings* GameSettings);
};


// Class HawkenGame.R_GFx_Base
// 0x0000 (0x016C - 0x016C)
class UR_GFx_Base : public UGFxMoviePlayer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GFx_Base");
		return ptr;
	}


	void ClearOculusCallback();
	void RegisterOculusCallback();
	void OnOculusStateChanged(bool bIsNowEnabled);
	void SetOculusTransforms(class UGFxObject* gfxObjectMC, const struct FString& DebugHint, float ZDepth, float MenuScale);
	void OnClose();
	bool Start(bool StartPaused);
};


// Class HawkenGame.R_GFx_Options
// 0x13DC (0x1548 - 0x016C)
class UR_GFx_Options : public UR_GFx_Base
{
public:
	unsigned long                                      bOptionsInitialized : 1;                                  // 0x016C(0x0004)
	unsigned long                                      bWaitingOnKeyBindEntry : 1;                               // 0x016C(0x0004)
	unsigned long                                      bDataInitialized : 1;                                     // 0x016C(0x0004)
	unsigned long                                      bOculusSettingsDirty : 1;                                 // 0x016C(0x0004)
	unsigned long                                      bDisplayingVideoSettingsConfirmation : 1;                 // 0x016C(0x0004) (Transient)
	class UGFxObject*                                  SettingsPanel;                                            // 0x0170(0x0004)
	class UGFxObject*                                  OptionDefinition;                                         // 0x0174(0x0004)
	class UGFxObject*                                  DummyOptionsReference;                                    // 0x0178(0x0004)
	class UR_GraphicsOptions*                          GraphicsOptions;                                          // 0x017C(0x0004)
	class UR_GraphicsOptions*                          BackupGraphicsOptions;                                    // 0x0180(0x0004)
	class UR_LanguageOptions*                          LanguageOptions;                                          // 0x0184(0x0004)
	class UGFxObject*                                  combo_Resolution;                                         // 0x0188(0x0004) (Transient)
	class UGFxObject*                                  check_Fullscreen;                                         // 0x018C(0x0004) (Transient)
	class UGFxObject*                                  check_Borderless;                                         // 0x0190(0x0004) (Transient)
	class UGFxObject*                                  combo_GraphicsQuality;                                    // 0x0194(0x0004) (Transient)
	float                                              SliderTimerRate;                                          // 0x0198(0x0004) (Const)
	TArray<struct FSKeyBind>                           CommandList;                                              // 0x019C(0x000C) (NeedCtorLink)
	TArray<struct FString>                             ResolutionList;                                           // 0x01A8(0x000C) (NeedCtorLink)
	TArray<struct FString>                             AnisotropyNamesList;                                      // 0x01B4(0x000C) (NeedCtorLink)
	TArray<int>                                        AnisotropyList;                                           // 0x01C0(0x000C) (NeedCtorLink)
	TArray<struct FString>                             TextureDetailList;                                        // 0x01CC(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             TextureDetailList32Bit;                                   // 0x01D8(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             PhysXLevelList;                                           // 0x01E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FSCachedPrimaryKeybind                      PrimaryKeybind_UseItem;                                   // 0x01F0(0x0018) (NeedCtorLink)
	struct FSCachedPrimaryKeybind                      PrimaryKeybind_WeaponUtility;                             // 0x0208(0x0018) (NeedCtorLink)
	struct FSCachedPrimaryKeybind                      PrimaryKeybind_UseAbility;                                // 0x0220(0x0018) (NeedCtorLink)
	struct FString                                     Controls_InvertMouse;                                     // 0x0238(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Controls_InvertTurn;                                      // 0x0244(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Controls_MouseSensitivity;                                // 0x0250(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Controls_MouseSmoothing;                                  // 0x025C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Controls_StickSensitivity;                                // 0x0268(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Controls_KeyBindTitle;                                    // 0x0274(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Controls_KeyBindText;                                     // 0x0280(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Controls_DoubleClickDodge;                                // 0x028C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_InWorldXPCallouts;                                   // 0x0298(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_RadarPosition;                                       // 0x02A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_ChatMessagePosition;                                 // 0x02B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_KillMessagePosition;                                 // 0x02BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_EnergyUnitPosition;                                  // 0x02C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_ScreenPositionNames[0x4];                            // 0x02D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_AutoSwitchItems;                                     // 0x0304(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_FixedRadar;                                          // 0x0310(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_CockpitLag;                                          // 0x031C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_CameraShakeLevel;                                    // 0x0328(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_CameraShakeLevelNames[0x3];                          // 0x0334(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_Language;                                            // 0x0358(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_ProfanityFilter;                                     // 0x0364(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_ShowAchievementToasts;                               // 0x0370(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_ShowGameplayTips;                                    // 0x037C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_ShowSiegeRules;                                      // 0x0388(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_ShowObjectives;                                      // 0x0394(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_ShowMissileAssaultRules;                             // 0x03A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_ShowCoopRules;                                       // 0x03AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Game_AccurateReticule;                                    // 0x03B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Device_OculusAimingMode;                                  // 0x03C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Device_OculusAimingModeNames[0x2];                        // 0x03D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Device_OculusPitchLock;                                   // 0x03E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Device_OculusHudDepth;                                    // 0x03F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Device_OculusMenuDepth;                                   // 0x0400(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Device_OculusFullscreen;                                  // 0x040C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Audio_MasterVolume;                                       // 0x0418(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Audio_SFXVolume;                                          // 0x0424(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Audio_UIMenusVolume;                                      // 0x0430(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Audio_MenuMusicVolume;                                    // 0x043C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Audio_InGameMusicVolume;                                  // 0x0448(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Audio_VoiceVolume;                                        // 0x0454(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Audio_TextToSpeech;                                       // 0x0460(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Audio_MovieVolume;                                        // 0x046C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Voice_UsePushToTalk;                                      // 0x0478(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Voice_DuckVolumeOnPushToTalk;                             // 0x0484(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Voice_PushToTalkDuckVolume;                               // 0x0490(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Voice_MicSensitivity;                                     // 0x049C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Voice_MicVolume;                                          // 0x04A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Voice_OtherPlayersVolume;                                 // 0x04B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_Resolution;                                         // 0x04C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_UseVSync;                                           // 0x04CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_Borderless;                                         // 0x04D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_Fullscreen;                                         // 0x04E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_SmoothFramerate;                                    // 0x04F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_PhysX;                                              // 0x04FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_FOV;                                                // 0x0508(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_DX11;                                               // 0x0514(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_TextureDetail;                                      // 0x0520(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_GraphicsQuality;                                    // 0x052C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_UseCustomSettings;                                  // 0x0538(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_DefaultCustomSettingsString;                        // 0x0544(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowStaticDecals;                                  // 0x0550(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowDynamicDecals;                                 // 0x055C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowUnbatchedDecals;                               // 0x0568(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_DecalCullDistanceScale;                             // 0x0574(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowDynamicShadows;                                // 0x0580(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowLightEnvironmentShadows;                       // 0x058C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowMotionBlur;                                    // 0x0598(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowDepthOfField;                                  // 0x05A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowAmbientOcclusion;                              // 0x05B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowBloom;                                         // 0x05BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowLightShafts;                                   // 0x05C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowDistortion;                                    // 0x05D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowParticleDistortionDropping;                    // 0x05E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowLensFlare;                                     // 0x05EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowRadialBlur;                                    // 0x05F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowPostProcess;                                   // 0x0604(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowPostProcessAA;                                 // 0x0610(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowHighQualityMaterials;                          // 0x061C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_MaxDrawDistanceScale;                               // 0x0628(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_MaxAnisotropy;                                      // 0x0634(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowBranchingPCFShadows;                           // 0x0640(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowWholeSceneDominantShadows;                     // 0x064C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_UseConservativeShadowBounds;                        // 0x0658(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowFracturedDamage;                               // 0x0664(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_FractureCullDistanceScale;                          // 0x0670(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowImageGrain;                                    // 0x067C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Video_AllowStatic;                                        // 0x0688(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Game_LanguageReload_Title;                        // 0x0694(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Game_LanguageReload_Text;                         // 0x06A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Game_OptionReload_Title;                          // 0x06AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Game_OptionReload_Text;                           // 0x06B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Options_ReducedSystemPerformance_Title;           // 0x06C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Options_ReducedSystemPerformance_Text;            // 0x06D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Options_OptionsWereResetNotice_Title;             // 0x06DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Options_OptionsWereResetNotice_Text;              // 0x06E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Options_PhysX_HighNotSupported_OldDriver_Title;   // 0x06F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Options_PhysX_HighNotSupported_OldDriver_Text;    // 0x0700(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Options_PhysX_HighNotSupported_NotNvidia_Title;   // 0x070C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Options_PhysX_HighNotSupported_NotNvidia_Text;    // 0x0718(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Options_Initialization_OldNvidiaDriver_Title;     // 0x0724(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Options_Initialization_OldNvidiaDriver_Text;      // 0x0730(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_TeamProsk;                                             // 0x073C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_TeamSentium;                                           // 0x0748(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarMain;                                            // 0x0754(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarGarage;                                          // 0x0760(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageEquipment;                                       // 0x076C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarMarket;                                          // 0x0778(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarCareer;                                          // 0x0784(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarTraining;                                        // 0x0790(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarDeploy;                                          // 0x079C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarStaging;                                         // 0x07A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarResume;                                          // 0x07B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarLobby;                                           // 0x07C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarScoreboard;                                      // 0x07CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarSettings;                                        // 0x07D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarExitGame;                                        // 0x07E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarExitMatch;                                       // 0x07F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarMenu;                                            // 0x07FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarProfile;                                         // 0x0808(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_NavbarBetaLabel;                                       // 0x0814(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_navBack;                                               // 0x0820(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ProfilePilot;                                          // 0x082C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ProfileMechs;                                          // 0x0838(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ProfileAchievements;                                   // 0x0844(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ProfileProgression;                                    // 0x0850(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ProfileRankChart;                                      // 0x085C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ProfileMechChart;                                      // 0x0868(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelRank;                                             // 0x0874(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelTotal;                                            // 0x0880(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelExtra;                                            // 0x088C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_MarketFeatured;                                        // 0x0898(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_MarketMechs;                                           // 0x08A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_MarketBoosts;                                          // 0x08B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_MarketEmblems;                                         // 0x08BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ExitGameTitle;                                         // 0x08C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ExitGameMessage;                                       // 0x08D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ExitMatchTitle;                                        // 0x08E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ExitMatchMessage;                                      // 0x08EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ExitMatchSafelyMessage;                                // 0x08F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ExitMatchInPartyMessage;                               // 0x0904(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ExitTrainingTitle;                                     // 0x0910(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ExitTrainingMessage;                                   // 0x091C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ResetBindingsTitle;                                    // 0x0928(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ResetBindingsMessage;                                  // 0x0934(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_KeepVideoTitle;                                        // 0x0940(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_KeepVideoMessage;                                      // 0x094C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ClearTreeTitle;                                        // 0x0958(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ClearTreeMessage;                                      // 0x0964(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ResetTreeTitle;                                        // 0x0970(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ResetTreeMessage;                                      // 0x097C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_PurchaseSpendHP;                                       // 0x0988(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_PurchaseSpendMP;                                       // 0x0994(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_PurchaseTitle;                                         // 0x09A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_PurchaseMeteorPoints;                                  // 0x09AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelActivateHCBoost;                                  // 0x09B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelActivateXPBoost;                                  // 0x09C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_PurchaseHCBoostText;                                   // 0x09D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_PurchaseXPBoostText;                                   // 0x09DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_PurchaseMCText;                                        // 0x09E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_TransferOverflow;                                      // 0x09F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_InfoHCExplained;                                       // 0x0A00(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_InfoXPExplained;                                       // 0x0A0C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_InfoMCExplained;                                       // 0x0A18(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_InfoTransferExplained;                                 // 0x0A24(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_profileOverviewTab;                                    // 0x0A30(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_agentLaila;                                            // 0x0A3C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_OptionsBindingsTab;                                    // 0x0A48(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_OptionsVideoTab;                                       // 0x0A54(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_OptionsAudioTab;                                       // 0x0A60(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_OptionsVoiceTab;                                       // 0x0A6C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_OptionsAdvancedTab;                                    // 0x0A78(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_OptionsGameTab;                                        // 0x0A84(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_OptionsCreditsTab;                                     // 0x0A90(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelActive;                                           // 0x0A9C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelInactive;                                         // 0x0AA8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelPrimary;                                          // 0x0AB4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelSecondary;                                        // 0x0AC0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelAlternate;                                        // 0x0ACC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelPrestige;                                         // 0x0AD8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelAbility;                                          // 0x0AE4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelPrimaryWeapon;                                    // 0x0AF0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelSecondaryWeapon;                                  // 0x0AFC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelAlternateWeapon;                                  // 0x0B08(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelMechHealth;                                       // 0x0B14(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelMechSpeed;                                        // 0x0B20(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelMechCapacity;                                     // 0x0B2C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelExpiredTestDrive;                                 // 0x0B38(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelActiveTestDrive;                                  // 0x0B44(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTestDriveExpiresOn;                               // 0x0B50(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageOwnedTab;                                        // 0x0B5C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelWeaponDamage;                                     // 0x0B68(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelWeaponRange;                                      // 0x0B74(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelWeaponRate;                                       // 0x0B80(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelWeaponHeat;                                       // 0x0B8C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelWeaponAccuracy;                                   // 0x0B98(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelItems;                                            // 0x0BA4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelItemOffense;                                      // 0x0BB0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelItemSupport;                                      // 0x0BBC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelInternals;                                        // 0x0BC8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelInternalO;                                        // 0x0BD4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelInternalD;                                        // 0x0BE0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelInternalF;                                        // 0x0BEC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelEmptySlot;                                        // 0x0BF8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelBack;                                             // 0x0C04(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelRanks;                                            // 0x0C10(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelAutofill;                                         // 0x0C1C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelOffense;                                          // 0x0C28(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelDefense;                                          // 0x0C34(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelMovement;                                         // 0x0C40(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelClear;                                            // 0x0C4C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelReset;                                            // 0x0C58(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelResetToDefault;                                   // 0x0C64(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelRemaining;                                        // 0x0C70(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelRename;                                           // 0x0C7C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelRenameMech;                                       // 0x0C88(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelEdit;                                             // 0x0C94(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelSave;                                             // 0x0CA0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelApply;                                            // 0x0CAC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelTest;                                             // 0x0CB8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelStop;                                             // 0x0CC4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelAdvanced;                                         // 0x0CD0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelLaunch;                                           // 0x0CDC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelSwapPrimary;                                      // 0x0CE8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelNo;                                               // 0x0CF4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelYes;                                              // 0x0D00(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelReady;                                            // 0x0D0C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelTeamSwitch;                                       // 0x0D18(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelCancel;                                           // 0x0D24(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelClose;                                            // 0x0D30(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelAny;                                              // 0x0D3C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelRefresh;                                          // 0x0D48(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelJoin;                                             // 0x0D54(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelFindMatch;                                        // 0x0D60(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelName;                                             // 0x0D6C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelPlayers;                                          // 0x0D78(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelMax;                                              // 0x0D84(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelMap;                                              // 0x0D90(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelGametype;                                         // 0x0D9C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelLatency;                                          // 0x0DA8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelRating;                                           // 0x0DB4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelPlayerRating;                                     // 0x0DC0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelFilteredResults;                                  // 0x0DCC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelFilterFor;                                        // 0x0DD8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelLogin;                                            // 0x0DE4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelEmail;                                            // 0x0DF0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelPassword;                                         // 0x0DFC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelServerPasswordText;                               // 0x0E08(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelLevel;                                            // 0x0E14(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelDifficulty;                                       // 0x0E20(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelCounterMeasureDescription;                        // 0x0E2C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelNext;                                             // 0x0E38(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelEquip;                                            // 0x0E44(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelEquipped;                                         // 0x0E50(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelViewAll;                                          // 0x0E5C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelUnlockTier;                                       // 0x0E68(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelMinuteShort;                                      // 0x0E74(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAvailableForPurchase;                             // 0x0E80(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAdditionalItemSlot;                               // 0x0E8C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAdditionalInternalSlot;                           // 0x0E98(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAdditionalOptimization;                           // 0x0EA4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelUnlockGlobal;                                     // 0x0EB0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelUnlocksAtTier;                                    // 0x0EBC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelIncompatiableWithEquipped;                        // 0x0EC8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAlreadyEquipped;                                  // 0x0ED4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTooLargeToFit;                                    // 0x0EE0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelMaxNumberReached;                                 // 0x0EEC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelRemove;                                           // 0x0EF8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelJoinServer;                                       // 0x0F04(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelSendMessage;                                      // 0x0F10(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_friendRemoveTitle;                                     // 0x0F1C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_friendRemoveMessage;                                   // 0x0F28(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_cancelMessageTitle;                                    // 0x0F34(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_cancelMessageMessage;                                  // 0x0F40(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAdd;                                              // 0x0F4C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelOnline;                                           // 0x0F58(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelOffline;                                          // 0x0F64(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTo;                                               // 0x0F70(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelSend;                                             // 0x0F7C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelEnterMessage;                                     // 0x0F88(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelFrom;                                             // 0x0F94(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelMessage;                                          // 0x0FA0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelReportBug;                                        // 0x0FAC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAccept;                                           // 0x0FB8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelIgnore;                                           // 0x0FC4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAddFriend;                                        // 0x0FD0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelInviteList;                                       // 0x0FDC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelWantsToBeFriends;                                 // 0x0FE8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelSignedOn;                                         // 0x0FF4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAcceptedFriend;                                   // 0x1000(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelNewMessageFrom;                                   // 0x100C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelStartChat;                                        // 0x1018(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelChatOffline;                                      // 0x1024(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelWantsToPlay;                                      // 0x1030(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelInvitetoGame;                                     // 0x103C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelSystemMessage;                                    // 0x1048(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_windowFriendList;                                      // 0x1054(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_windowMessageCenter;                                   // 0x1060(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_messageFriendRequest;                                  // 0x106C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_windowMessage;                                         // 0x1078(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_messageGameInvite;                                     // 0x1084(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_windowSystemMessage;                                   // 0x1090(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_windowNewMessage;                                      // 0x109C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_windowChat;                                            // 0x10A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelDaySingular;                                      // 0x10B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelDaysPlural;                                       // 0x10C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelDayShort;                                         // 0x10CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelHourSingular;                                     // 0x10D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelHourPlural;                                       // 0x10E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelHourShort;                                        // 0x10F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelHourLessShort;                                    // 0x10FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelWinSingular;                                      // 0x1108(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelWinPlural;                                        // 0x1114(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelDuration;                                         // 0x1120(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelFreeToTry;                                        // 0x112C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelExpired;                                          // 0x1138(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTestDrive;                                        // 0x1144(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_confirmRentalTitle;                                    // 0x1150(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_confirmRentalMessage;                                  // 0x115C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_wantFriend;                                            // 0x1168(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelDontShowAgain;                                    // 0x1174(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelMechMastery;                                      // 0x1180(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelPlayerCareer;                                     // 0x118C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelMechCareer;                                       // 0x1198(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchHonorsTab;                                    // 0x11A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchScoreboardTab;                                // 0x11B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchStatisticsTab;                                // 0x11BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchEarningsTab;                                  // 0x11C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchProgressionTab;                               // 0x11D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelBuy;                                              // 0x11E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelBuyAll;                                           // 0x11EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelBlock;                                            // 0x11F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelMute;                                             // 0x1204(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelUnmute;                                           // 0x1210(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTriggeredConsumable;                              // 0x121C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelPassiveConsumable;                                // 0x1228(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelConsumables;                                      // 0x1234(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAutoStock;                                        // 0x1240(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAutoDeploy;                                       // 0x124C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelRestock;                                          // 0x1258(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelPackage;                                          // 0x1264(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelUses;                                             // 0x1270(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTransferOverflow;                                 // 0x127C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelOverflowXP;                                       // 0x1288(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelActivate;                                         // 0x1294(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelShowLocked;                                       // 0x12A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelShowUnowned;                                      // 0x12AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelShowLarge;                                        // 0x12B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTechGroup;                                        // 0x12C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelSize;                                             // 0x12D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelPrice;                                            // 0x12DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelFilter;                                           // 0x12E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAchievements;                                     // 0x12F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_profileAchievementTab;                                 // 0x1300(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelViewProfile;                                      // 0x130C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelCategories;                                       // 0x1318(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelSorting;                                          // 0x1324(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAllFilter;                                        // 0x1330(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelProgressFilter;                                   // 0x133C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelCompletedFilter;                                  // 0x1348(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelNotStartedFilter;                                 // 0x1354(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelReverseSort;                                      // 0x1360(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelRewardSort;                                       // 0x136C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelLocalSort;                                        // 0x1378(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelInvitedToParty;                                   // 0x1384(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_messagePartyInvite;                                    // 0x1390(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelInvite;                                           // 0x139C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelLeave;                                            // 0x13A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelKickPlayer;                                       // 0x13B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelPromote;                                          // 0x13C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_windowParty;                                           // 0x13CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelPartyInvite;                                      // 0x13D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelInvitePartyGame;                                  // 0x13E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelCreateParty;                                      // 0x13F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelDelete;                                           // 0x13FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelHawkenCreditBoost;                                // 0x1408(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelExperienceBoost;                                  // 0x1414(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAdminKickPlayer;                                  // 0x1420(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelSwitchPlayer;                                     // 0x142C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelReportPlayer;                                     // 0x1438(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelSpecialDevices;                                   // 0x1444(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelOculusRift;                                       // 0x1450(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_homeNewMap;                                            // 0x145C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_homeNewMech;                                           // 0x1468(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_homeNewItems;                                          // 0x1474(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_homeDailyAchievement;                                  // 0x1480(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_homeEvent;                                             // 0x148C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_GraphicsQuality_Text;                            // 0x1498(0x000C) (Const, Localized, NeedCtorLink)
	int                                                GraphicsQualityConfirmationSavedIndex;                    // 0x14A4(0x0004) (Transient)
	TEnumAsByte<EStreamState>                          currentStreamingState;                                    // 0x14A8(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x14A9(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __OnSettingChanged__Delegate;                             // 0x14AC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SettingsMenuOpenedDelegate__Delegate;                   // 0x14B8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __RefreshVideoOptionsDelegate__Delegate;                  // 0x14C4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ReportBugDelegate__Delegate;                            // 0x14D0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ApplyVideoSettingsDelegate__Delegate;                   // 0x14DC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __RevertVideoSettingsDelegate__Delegate;                  // 0x14E8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ConfirmVideoSettingsDelegate__Delegate;                 // 0x14F4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ResetKeyBindingsDelegate__Delegate;                     // 0x1500(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ApplyVoiceSettingsDelegate__Delegate;                   // 0x150C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __TestVoiceSettingsDelegate__Delegate;                    // 0x1518(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __StopVoiceTestDelegate__Delegate;                        // 0x1524(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __StreamingSignInDelegate__Delegate;                      // 0x1530(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __RefreshStreamingOptionsDelegate__Delegate;              // 0x153C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GFx_Options");
		return ptr;
	}


	void SetStreamingStatus(TEnumAsByte<EStreamState> NewState);
	void SetDelegate_RefreshStreamingOptions(const struct FScriptDelegate& D);
	void RefreshStreamingOptionsDelegate();
	void SetDelegate_StreamingSignIn(const struct FScriptDelegate& D);
	void StreamingSignIn(const struct FString& Login, const struct FString& Password);
	void StreamingSignInDelegate(const struct FString& Login, const struct FString& Password);
	void SetDelegate_AllowStaticChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowStatic(class UGFxObject* gfxEvent);
	void SetDelegate_AllowImageGrainChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowImageGrain(class UGFxObject* gfxEvent);
	void SetDelegate_FractureCullDistanceScaleChanged(const struct FScriptDelegate& D);
	void OnChanged_FractureCullDistance(class UGFxObject* gfxEvent);
	void SetDelegate_AllowFracturedDamageChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowFracturedDamage(class UGFxObject* gfxEvent);
	void SetDelegate_UseConservativeShadowBoundsChanged(const struct FScriptDelegate& D);
	void OnChanged_UseConservationShadowBounds(class UGFxObject* gfxEvent);
	void SetDelegate_AllowWholeSceneDominantShadowsChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowWholeSceneDominantShadows(class UGFxObject* gfxEvent);
	void SetDelegate_AllowBranchingPCFShadowsChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowBranchingPCFShadows(class UGFxObject* gfxEvent);
	void SetDelegate_MaxAnisotropyChanged(const struct FScriptDelegate& D);
	void OnChanged_MaxAnisotropy(class UGFxObject* gfxEvent);
	void SetDelegate_MaxDrawDistanceScaleChanged(const struct FScriptDelegate& D);
	void OnChanged_MaxDrawDistanceScale(class UGFxObject* gfxEvent);
	void SetDelegate_AllowHighQualityMaterialsChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowHighQualityMaterials(class UGFxObject* gfxEvent);
	void SetDelegate_AllowPostProcessAAChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowPostProcessAA(class UGFxObject* gfxEvent);
	void SetDelegate_AllowRadialBlurChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowRadialBlur(class UGFxObject* gfxEvent);
	void SetDelegate_AllowParticleDistortionDroppingChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowParticleDistortionDropping(class UGFxObject* gfxEvent);
	void SetDelegate_AllowDistortionChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowDistortion(class UGFxObject* gfxEvent);
	void SetDelegate_AllowLightEnvironmentShadowsChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowLightEnvironmentShadows(class UGFxObject* gfxEvent);
	void SetDelegate_AllowDynamicShadowsChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowDynamicShadows(class UGFxObject* gfxEvent);
	void SetDelegate_DecalCullDistanceScaleChanged(const struct FScriptDelegate& D);
	void OnChanged_DecalCullDistanceScale(class UGFxObject* gfxEvent);
	void SetDelegate_AllowUnbatchedDecalsChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowUnbatchedDecals(class UGFxObject* gfxEvent);
	void SetDelegate_AllowDynamicDecalsChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowDynamicDecals(class UGFxObject* gfxEvent);
	void SetDelegate_AllowStaticDecalsChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowStaticDecals(class UGFxObject* gfxEvent);
	void SetDelegate_AllowAmbientOcclusionChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowAmbientOcclusion(class UGFxObject* gfxEvent);
	void SetDelegate_AllowLightShaftsChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowLightShafts(class UGFxObject* gfxEvent);
	void SetDelegate_AllowLensFlaresChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowLensFlares(class UGFxObject* gfxEvent);
	void SetDelegate_AllowMotionBlurChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowMotionBlur(class UGFxObject* gfxEvent);
	void SetDelegate_AllowDepthOfFieldChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowDepthOfField(class UGFxObject* gfxEvent);
	void SetDelegate_AllowBloomChanged(const struct FScriptDelegate& D);
	void OnChanged_AllowBloom(class UGFxObject* gfxEvent);
	void SetDelegate_DX11Changed(const struct FScriptDelegate& D);
	void DX11Changed(class UGFxObject* gfxEvent);
	void SetDelegate_PhysXChanged(const struct FScriptDelegate& D);
	void OnChanged_PhysX(class UGFxObject* gfxEvent);
	void SetDelegate_SmoothFramerateChanged(const struct FScriptDelegate& D);
	void OnChanged_SmoothFramerate(class UGFxObject* gfxEvent);
	void SetDelegate_BorderlessChanged(const struct FScriptDelegate& D);
	void OnChanged_Borderless(class UGFxObject* gfxEvent);
	void SetDelegate_VSyncChanged(const struct FScriptDelegate& D);
	void OnChanged_VSync(class UGFxObject* gfxEvent);
	void SetDelegate_FullscreenChanged(const struct FScriptDelegate& D);
	void OnChanged_Fullscreen(class UGFxObject* gfxEvent);
	void SetDelegate_UseCustomSettingsChanged(const struct FScriptDelegate& D);
	void UpdateAdvancedVideoOptions();
	void OnChanged_UseCustomSettings(class UGFxObject* gfxEvent);
	void SetDelegate_TextureDetailChanged(const struct FScriptDelegate& D);
	void OnChanged_TextureDetail(class UGFxObject* gfxEvent);
	void SetDelegate_GraphicsQualityChanged(const struct FScriptDelegate& D);
	void OnChanged_GraphicsQualityWorker(int GraphicsQualityIndex);
	void OnConfirm_GraphicsQuality(int InDialogId, TEnumAsByte<EMessageDialogButton> SelectedButton);
	void OnChanged_GraphicsQuality(class UGFxObject* gfxEvent);
	void SetDelegate_ResolutionChanged(const struct FScriptDelegate& D);
	void OnChanged_Resolution(class UGFxObject* gfxEvent);
	void SetDelegate_KeybindChanged(const struct FScriptDelegate& D);
	void OnChanged_Keybind(class UGFxObject* gfxEvent);
	void SetDelegate_StopVoiceTest(const struct FScriptDelegate& D);
	void StopVoiceTest();
	void StopVoiceTestDelegate();
	void SetDelegate_TestVoiceSettings(const struct FScriptDelegate& D);
	void TestVoiceSettings();
	void TestVoiceSettingsDelegate();
	void SetDelegate_OtherPlayersVolumeChanged(const struct FScriptDelegate& D);
	void OnChanged_OtherPlayersVolume(class UGFxObject* gfxEvent);
	void SetDelegate_MicVolumeChanged(const struct FScriptDelegate& D);
	void OnChanged_MicVolume(class UGFxObject* gfxEvent);
	void SetDelegate_MicVolumeSensitivity(const struct FScriptDelegate& D);
	void OnChanged_MicSensitivity(class UGFxObject* gfxEvent);
	void SetDelegate_UseTextToSpeechChanged(const struct FScriptDelegate& D);
	void OnChanged_UseTextToSpeech(class UGFxObject* gfxEvent);
	void SetDelegate_PushToTalkDuckVolumeChanged(const struct FScriptDelegate& D);
	void OnChanged_PushToTalkVolume(class UGFxObject* gfxEvent);
	void SetDelegate_DuckVolumeOnPushToTalkChanged(const struct FScriptDelegate& D);
	void OnChanged_DuckVolumeOnPushToTalk(class UGFxObject* gfxEvent);
	void SetDelegate_UsePushToTalkChanged(const struct FScriptDelegate& D);
	void OnChanged_UsePushToTalk(class UGFxObject* gfxEvent);
	void SetDelegate_MovieVolumeChanged(const struct FScriptDelegate& D);
	void OnChanged_MusicVolume(class UGFxObject* gfxEvent);
	void SetDelegate_VoiceVolumeChanged(const struct FScriptDelegate& D);
	void OnChanged_VoiceVolume(class UGFxObject* gfxEvent);
	void SetDelegate_InGameMusicVolumeChanged(const struct FScriptDelegate& D);
	void OnChanged_InGameMusicVolume(class UGFxObject* gfxEvent);
	void SetDelegate_MenuMusicVolumeChanged(const struct FScriptDelegate& D);
	void OnChanged_MenuMusicVolume(class UGFxObject* gfxEvent);
	void SetDelegate_UISoundVolumeChanged(const struct FScriptDelegate& D);
	void OnChanged_UISoundVolume(class UGFxObject* gfxEvent);
	void SetDelegate_SFXVolumeChanged(const struct FScriptDelegate& D);
	void OnChanged_SFXVolume(class UGFxObject* gfxEvent);
	void SetDelegate_MasterVolumeChanged(const struct FScriptDelegate& D);
	void OnChanged_MasterVolume(class UGFxObject* gfxEvent);
	void SetDelegate_ProfanityFilterChanged(const struct FScriptDelegate& D);
	void OnChanged_ProfanityFilter(class UGFxObject* gfxEvent);
	void SetDelegate_LanguageChanged(const struct FScriptDelegate& D);
	void OnChanged_Language(class UGFxObject* gfxEvent);
	void SetDelegate_FOVChanged(const struct FScriptDelegate& D);
	void OnChanged_FOV(class UGFxObject* gfxEvent);
	void SetDelegate_ShowCoopRulesChanged(const struct FScriptDelegate& D);
	void OnChanged_ShowCoopRules(class UGFxObject* gfxEvent);
	void SetDelegate_ShowMissileAssaultRulesChanged(const struct FScriptDelegate& D);
	void OnChanged_ShowMissileAssaultRules(class UGFxObject* gfxEvent);
	void SetDelegate_ShowSiegeRulesChanged(const struct FScriptDelegate& D);
	void OnChanged_ShowSiegeRules(class UGFxObject* gfxEvent);
	void SetDelegate_ShowObjectivesChanged(const struct FScriptDelegate& D);
	void OnChanged_ShowObjectives(class UGFxObject* gfxEvent);
	void SetDelegate_ShowAchievementToastsChanged(const struct FScriptDelegate& D);
	void OnChanged_ShowAchievementToasts(class UGFxObject* gfxEvent);
	void SetDelegate_ShowGameplayTipsChanged(const struct FScriptDelegate& D);
	void OnChanged_ShowGameplayTips(class UGFxObject* gfxEvent);
	void SetDelegate_FixedRadarChanged(const struct FScriptDelegate& D);
	void OnChanged_FixedRadar(class UGFxObject* gfxEvent);
	void SetDelegate_DoubleClickDodgeChanged(const struct FScriptDelegate& D);
	void OnChanged_DoubleClickDodge(class UGFxObject* gfxEvent);
	void SetDelegate_AutoSwitchItemsChanged(const struct FScriptDelegate& D);
	void OnChanged_AutoSwitchItems(class UGFxObject* gfxEvent);
	void SetDelegate_XPCalloutsChanged(const struct FScriptDelegate& D);
	void OnChanged_XPCallouts(class UGFxObject* gfxEvent);
	void SetDelegate_OculusRiftFullscreenChanged(const struct FScriptDelegate& D);
	void OnChanged_OculusRiftFullscreen(class UGFxObject* gfxEvent);
	void SetDelegate_OculusRiftMenuDepthChanged(const struct FScriptDelegate& D);
	void OnChanged_OculusRiftMenuDepth(class UGFxObject* gfxEvent);
	void SetDelegate_OculusRiftPitchLockChanged(const struct FScriptDelegate& D);
	void OnChanged_OculusRiftPitchLock(class UGFxObject* gfxEvent);
	void SetDelegate_OculusRiftHudDepthChanged(const struct FScriptDelegate& D);
	void OnChanged_OculusRiftHudDepth(class UGFxObject* gfxEvent);
	void SetDelegate_OculusRiftAimingModeChanged(const struct FScriptDelegate& D);
	void OnChanged_OculusRiftAimingMode(class UGFxObject* gfxEvent);
	void SetDelegate_CameraShakeLevelChanged(const struct FScriptDelegate& D);
	void OnChanged_CameraShakeLevel(class UGFxObject* gfxEvent);
	void SetDelegate_HudPositionChanged(const struct FScriptDelegate& D);
	void OnChanged_EnergyHudPosition(class UGFxObject* gfxEvent);
	void OnChanged_KillHudPosition(class UGFxObject* gfxEvent);
	void OnChanged_ChatHudPosition(class UGFxObject* gfxEvent);
	void OnChanged_RadarHudPosition(class UGFxObject* gfxEvent);
	void SetDelegate_CockpitLagChanged(const struct FScriptDelegate& D);
	void OnChanged_CockpitLag(class UGFxObject* gfxEvent);
	void SetDelegate_MouseSmoothingChanged(const struct FScriptDelegate& D);
	void OnChanged_MouseSmoothing(class UGFxObject* gfxEvent);
	void OnChanged_StickSensitivity(class UGFxObject* gfxEvent);
	void SetDelegate_MouseSensitivityChanged(const struct FScriptDelegate& D);
	void OnChanged_MouseSensitivity(class UGFxObject* gfxEvent);
	void SetDelegate_InvertTurnChanged(const struct FScriptDelegate& D);
	void OnChanged_InvertTurn(class UGFxObject* gfxEvent);
	void SetDelegate_InvertMouseChanged(const struct FScriptDelegate& D);
	void OnChanged_InvertMouse(class UGFxObject* gfxEvent);
	void SetDelegate_UpdateSetting(const struct FScriptDelegate& D);
	void SetDelegate_ApplyVoiceSettings(const struct FScriptDelegate& D);
	void ApplyVoiceSettings();
	void ApplyVoiceSettingsDelegate();
	void SetDelegate_ResetKeyBindings(const struct FScriptDelegate& D);
	void ResetKeyBindings();
	void ResetKeyBindingsDelegate();
	void SetDelegate_ConfirmVideoSettings(const struct FScriptDelegate& D);
	void ConfirmVideoSettings();
	void ConfirmVideoSettingsDelegate();
	void SetDelegate_RevertVideoSettings(const struct FScriptDelegate& D);
	void RevertVideoSettings();
	void RevertVideoSettingsDelegate();
	void SetDelegate_ApplyVideoSettings(const struct FScriptDelegate& D);
	void OnClick_ApplyVideoSettings();
	void ApplyVideoSettings();
	void ApplyVideoSettingsDelegate();
	void SetDelegate_ReportBug(const struct FScriptDelegate& D);
	void ReportBug();
	void ReportBugDelegate();
	void SetDelegate_RefreshVideoOptions(const struct FScriptDelegate& D);
	void RefreshVideoOptions();
	void RefreshVideoOptionsDelegate();
	void SetDelegate_SettingsMenuOpened(const struct FScriptDelegate& D);
	void SettingsMenuOpened();
	void SettingsMenuOpenedDelegate();
	void SetStreamingActive(bool Status);
	void UpdateStreamingStatus(TEnumAsByte<EStreamState> NewState);
	void SetLocalizedStringsForUI(class UGFxObject* LocObj);
	void GotNewKeybind(int InDialogId, const struct FName& ButtonName);
	void WaitingOnKeybind();
	void SetupAdvancedVideoOptions();
	void SetupVideoOptions();
	bool AreCustomVideoSettingsEnabled();
	int CalculateResolutionIndex(int CheckResX, int CheckResY);
	bool IsResolutionChangeable();
	void InitializeGraphicsOptionsCache();
	void SetupKeyBindings();
	void CachePrimaryKeybinds();
	void SetupVoiceOptions();
	void SetupAudioOptions();
	void SetupGameOptions();
	void SetupOculusRiftOptions();
	void SetupSpecialDeviceOptions();
	void RefreshStreamingOptions();
	void SetBasicDelegates();
	void SetKeybindValues(const struct FString& DisplayName, const struct FString& PrimaryBind, const struct FString& SecondaryBind, const struct FString& ThirdBind, bool bDisabled);
	void SetSliderValues(const struct FString& DisplayName, float currentVal, float Min, float Max, float interval, bool bDisabled);
	void SetDropdownValues(const struct FString& DisplayName, int CurrentIndex, TArray<struct FString> List, bool bDisabled);
	void SetCheckboxValues(const struct FString& DisplayName, bool bCurrent, bool bDisabled);
	void SetVoiceOptions(class UGFxObject* OptionsList);
	void SetAudioOptions(class UGFxObject* OptionsList);
	void SetAdvancedVideoOptions(class UGFxObject* OptionsList);
	void SetVideoOptions(class UGFxObject* OptionsList);
	void SetControlOptions(class UGFxObject* OptionsList);
	void SetGameOptions(class UGFxObject* OptionsList);
	void SetDeviceOptions(class UGFxObject* OptionsList);
	void UpdateUI();
	void OnClose();
	void OnCleanup(bool bUnload);
	void OnResize();
	void SetupStreamingOptions();
	void SetupAllOptions(bool bForce);
	void SetOculusTransforms(class UGFxObject* gfxObjectMC, const struct FString& DebugHint, float ZDepth, float MenuScale);
	void InitOptions(bool bForce);
	void InitData();
	bool Start(bool StartPaused);
	void OnSettingChanged(class UGFxObject* gfxEvent);
};


// Class HawkenGame.R_GFx_MechMenu_Base
// 0x1CD8 (0x3220 - 0x1548)
class UR_GFx_MechMenu_Base : public UR_GFx_Options
{
public:
	class UGFxObject*                                  LocalPlayerForUI;                                         // 0x1548(0x0004)
	TArray<class UGFxObject*>                          MechSubTypeList;                                          // 0x154C(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          MechSubRankList;                                          // 0x1558(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          PrimaryWeaponList;                                        // 0x1564(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          SecondaryWeaponList;                                      // 0x1570(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          DeployableItemList;                                       // 0x157C(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          AbilityList;                                              // 0x1588(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          InternalsList;                                            // 0x1594(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          CamoPatternList;                                          // 0x15A0(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          DroneList;                                                // 0x15AC(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          HUDColorList;                                             // 0x15B8(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          XPBoostList;                                              // 0x15C4(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          HPBoostList;                                              // 0x15D0(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          AnimTauntList;                                            // 0x15DC(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          HoloTauntList;                                            // 0x15E8(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          ConsumableTriggeredList;                                  // 0x15F4(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          ConsumablePassiveList;                                    // 0x1600(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          ConsumableBaseList;                                       // 0x160C(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          EmblemList;                                               // 0x1618(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          MechFamilyList;                                           // 0x1624(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          PilotRankObj;                                             // 0x1630(0x000C) (NeedCtorLink)
	class UGFxObject*                                  PilotRankForTechGroup;                                    // 0x163C(0x0004) (Transient)
	TArray<class UGFxObject*>                          TechGroupList;                                            // 0x1640(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          GameItemInstanceList;                                     // 0x164C(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          GameOfferList;                                            // 0x1658(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          MessageList;                                              // 0x1664(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          PartyPlayerList;                                          // 0x1670(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          PreviousPartyPlayerList;                                  // 0x167C(0x000C) (NeedCtorLink)
	struct FMap_Mirror                                 FriendsList;                                              // 0x1688(0x003C) (Const, Native, Transient)
	TArray<struct FGFxClanMemberObject>                ClanMemberList;                                           // 0x16C4(0x000C) (NeedCtorLink)
	float                                              UpdateRecentPlayersFrequency;                             // 0x16D0(0x0004)
	struct FString                                     PartUpper;                                                // 0x16D4(0x000C) (NeedCtorLink)
	struct FString                                     PartArm;                                                  // 0x16E0(0x000C) (NeedCtorLink)
	struct FString                                     PartMiddle;                                               // 0x16EC(0x000C) (NeedCtorLink)
	struct FString                                     PartLower;                                                // 0x16F8(0x000C) (NeedCtorLink)
	struct FString                                     PartArmor;                                                // 0x1704(0x000C) (NeedCtorLink)
	struct FString                                     PartBooster;                                              // 0x1710(0x000C) (NeedCtorLink)
	TArray<struct FSOfferInfo>                         PurchaseOfferListInfo;                                    // 0x171C(0x000C) (NeedCtorLink)
	unsigned long                                      bSaveAfterListComplete : 1;                               // 0x1728(0x0004)
	unsigned long                                      bFinishedInitGameOfferCollectionForUI : 1;                // 0x1728(0x0004) (Transient)
	unsigned long                                      hasReadOnlinePlayerNickname : 1;                          // 0x1728(0x0004)
	unsigned long                                      hasReadOnlinePlayerAccountInfo : 1;                       // 0x1728(0x0004)
	unsigned long                                      hasReadOverflowStats : 1;                                 // 0x1728(0x0004)
	unsigned long                                      hasReadOnlinePlayerStats : 1;                             // 0x1728(0x0004)
	unsigned long                                      hasReadOnlineLegacyStats : 1;                             // 0x1728(0x0004)
	unsigned long                                      hasReadGameItemTypeCollection : 1;                        // 0x1728(0x0004)
	unsigned long                                      hasReadGameItemInstanceCollection : 1;                    // 0x1728(0x0004)
	unsigned long                                      hasSyncingAccount_ReadAllUserGameItemStats : 1;           // 0x1728(0x0004)
	unsigned long                                      hasReadGameOfferCollection : 1;                           // 0x1728(0x0004)
	unsigned long                                      hasReadGameBundleCollection : 1;                          // 0x1728(0x0004)
	unsigned long                                      hasReadAchievementCollection : 1;                         // 0x1728(0x0004)
	unsigned long                                      hasReadUnlockedAchievementCollection : 1;                 // 0x1728(0x0004)
	unsigned long                                      bDontHandleXmppDisconnect : 1;                            // 0x1728(0x0004)
	unsigned long                                      hadFullSyncError : 1;                                     // 0x1728(0x0004)
	unsigned long                                      applybTintReticle : 1;                                    // 0x1728(0x0004)
	unsigned long                                      bSavingDialogShowed : 1;                                  // 0x1728(0x0004)
	unsigned long                                      bDelayedMechOfferUseHC : 1;                               // 0x1728(0x0004)
	unsigned long                                      bAutoReconnectingXMPP : 1;                                // 0x1728(0x0004)
	unsigned long                                      bRefreshingWallet : 1;                                    // 0x1728(0x0004) (Transient)
	unsigned long                                      bIgnoreRefreshWallet : 1;                                 // 0x1728(0x0004) (Transient)
	unsigned long                                      LeaveMatchAfterJoiningParty : 1;                          // 0x1728(0x0004) (Transient)
	unsigned long                                      bConnectingToServerCancelled : 1;                         // 0x1728(0x0004)
	unsigned long                                      bLeavingCurrentServer : 1;                                // 0x1728(0x0004)
	unsigned long                                      bTravelInitiated : 1;                                     // 0x1728(0x0004)
	unsigned long                                      bDevMode : 1;                                             // 0x1728(0x0004)
	unsigned long                                      bRecentlyPurchasedCredits : 1;                            // 0x1728(0x0004)
	unsigned long                                      bPartyCreated : 1;                                        // 0x1728(0x0004)
	unsigned long                                      bSyncingPlayerProfile : 1;                                // 0x1728(0x0004)
	class UGFxObject*                                  OfferFunctionObject;                                      // 0x172C(0x0004)
	class UGFxObject*                                  InstanceFunctionObject;                                   // 0x1730(0x0004)
	class UGFxObject*                                  StatsFunctionObject;                                      // 0x1734(0x0004)
	class UGFxObject*                                  AchievementPanelDataObj;                                  // 0x1738(0x0004)
	class UGFxObject*                                  UserObjRequestAchievementList;                            // 0x173C(0x0004)
	class UGFxObject*                                  UserObjRequestStatsOverview;                              // 0x1740(0x0004)
	class UGFxObject*                                  UserObjRequestMechStats;                                  // 0x1744(0x0004)
	class UGFxObject*                                  TutorialManager;                                          // 0x1748(0x0004)
	struct FString                                     CurrentDialogClosedFunctionName;                          // 0x174C(0x000C) (NeedCtorLink)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x1758(0x0004)
	class UOnlineSubsystemMeteor*                      MeteorOSS;                                                // 0x175C(0x0004)
	TArray<class UOnlineGameItemType*>                 ServerRegionItems;                                        // 0x1760(0x000C) (NeedCtorLink)
	TArray<class UTexture2D*>                          GameTypeIcon;                                             // 0x176C(0x000C) (Const, NeedCtorLink)
	struct FString                                     ClearExpirationsMechId;                                   // 0x1778(0x000C) (NeedCtorLink)
	int                                                GameOfferCollectionUpdatePerFrame;                        // 0x1784(0x0004)
	class UOnlineGameOfferCollection*                  processingOnlineGameOfferCollection;                      // 0x1788(0x0004) (Transient)
	struct FString                                     LastLoginName;                                            // 0x178C(0x000C) (Config, NeedCtorLink)
	TEnumAsByte<EPurchaseCurrency>                     LastPurchaseCurrency;                                     // 0x1798(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x1799(0x0003) MISSED OFFSET
	float                                              XmppReconnectQueueFriendNotificationsTime;                // 0x179C(0x0004) (Const)
	TArray<class UGFxObject*>                          QueuedFriendOnlineNotifications;                          // 0x17A0(0x000C) (NeedCtorLink)
	struct FVisualInfo                                 PreviewMechStyle;                                         // 0x17AC(0x003C)
	struct FString                                     applyFriendId;                                            // 0x17E8(0x000C) (NeedCtorLink)
	struct FString                                     applyNeutralId;                                           // 0x17F4(0x000C) (NeedCtorLink)
	struct FString                                     applyFoeId;                                               // 0x1800(0x000C) (NeedCtorLink)
	struct FString                                     applyPrimaryId;                                           // 0x180C(0x000C) (NeedCtorLink)
	struct FString                                     applySecondaryId;                                         // 0x1818(0x000C) (NeedCtorLink)
	float                                              DisplayRange_Mech_MinHealth;                              // 0x1824(0x0004) (Const)
	float                                              DisplayRange_Mech_MaxHealth;                              // 0x1828(0x0004) (Const)
	float                                              DisplayRange_Mech_MinSpeed;                               // 0x182C(0x0004) (Const)
	float                                              DisplayRange_Mech_MaxSpeed;                               // 0x1830(0x0004) (Const)
	float                                              DisplayRange_Mech_MinEUCapacity;                          // 0x1834(0x0004) (Const)
	float                                              DisplayRange_Mech_MaxEUCapacity;                          // 0x1838(0x0004) (Const)
	float                                              DisplayRange_PrimaryWeapon_Min;                           // 0x183C(0x0004) (Const)
	float                                              DisplayRange_PrimaryWeapon_Max;                           // 0x1840(0x0004) (Const)
	float                                              DisplayRange_SecondaryWeapon_Min;                         // 0x1844(0x0004) (Const)
	float                                              DisplayRange_SecondaryWeapon_Max;                         // 0x1848(0x0004) (Const)
	int                                                NumMatchesForMAMatchmakingUnlock;                         // 0x184C(0x0004) (Const)
	int                                                NumMatchesForSiegeMatchmakingUnlock;                      // 0x1850(0x0004) (Const)
	int                                                NumMatchesForDMMatchmakingUnlock;                         // 0x1854(0x0004) (Const)
	struct FString                                     ApplyReticlesToAllMechs_Title;                            // 0x1858(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ApplyReticlesToAllMechs_Text;                             // 0x1864(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ApplyColorsToAllMechs_Title;                              // 0x1870(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ApplyColorsToAllMechs_Text;                               // 0x187C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PurchaseSuccess_NewMech_Title;                            // 0x1888(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PurchaseSuccess_NewMech_Text;                             // 0x1894(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PurchaseSuccess_NewMech_AgentText;                        // 0x18A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PurchaseConfirm_NewMech_Generic_Title;                    // 0x18AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PurchaseConfirm_NewMech_AlreadyOwn_Text;                  // 0x18B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PurchaseConfirm_NewMech_PilotUnlock_Text;                 // 0x18C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PurchaseConfirm_NewMech_MechTierUnlock_Text;              // 0x18D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PurchaseNotAllowed_Title;                                 // 0x18DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PurchaseNotAllowed_MatchStarting_Text;                    // 0x18E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PurchaseNotAllowed_MatchRollingOver_Text;                 // 0x18F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_PurchaseFailed_Generic_Title;                       // 0x1900(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_PurchaseFailed_Generic_Text;                        // 0x190C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_PurchaseFailed_PurchaseList_Generic_Text;           // 0x1918(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_PurchaseFailed_PurchaseList_Text;                   // 0x1924(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_PurchaseFailed_NoRoom_Text;                         // 0x1930(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_PurchaseFailed_NewMech_Text;                        // 0x193C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_PurchaseFailed_PendingListRequest;                  // 0x1948(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_RentFailed_Generic_Title;                           // 0x1954(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_RentFailed_Generic_Text;                            // 0x1960(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_JoinFriendServer_Title;                             // 0x196C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_FriendRequest_Title;                                // 0x1978(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_FriendRequest_Text;                                 // 0x1984(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_AcceptFriendRequest_Title;                          // 0x1990(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_AcceptFriendRequest_Text;                           // 0x199C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_DownloadMail_Title;                                 // 0x19A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_DownloadMail_Text;                                  // 0x19B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_GameInvite_Title;                                   // 0x19C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_GameInvite_Text;                                    // 0x19CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_GameInvite_Offline;                                 // 0x19D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_SyncingPlayerProfile_Title;                         // 0x19E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_CreatingParty_Title;                                // 0x19F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_CreatingParty_Text_PartyObjectMissing;              // 0x19FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_LeavingParty_Title;                                 // 0x1A08(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_InvitingToParty_Title;                              // 0x1A14(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_JoiningParty_Title;                                 // 0x1A20(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_JoiningParty_Text;                                  // 0x1A2C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_PartyInternal_Text;                                 // 0x1A38(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_AlreadyInParty_Text;                                // 0x1A44(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_DeployingParty_Title;                               // 0x1A50(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_SendFriendMessage_Text;                             // 0x1A5C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_SendFriendMessage_Title;                            // 0x1A68(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_XMPP_Disconnected;                                  // 0x1A74(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_Storm_Connection_Lost_Text;                         // 0x1A80(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_Storm_Connection_Lost_Title;                        // 0x1A8C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_SyncingAccountFailed_Title;                         // 0x1A98(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_MechSpawnFailure_Title;                             // 0x1AA4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_MechSpawnFailure_Text;                              // 0x1AB0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_JoinGameFailedBadPassword_Title;                    // 0x1ABC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_JoinGameFailedBadPassword_Text;                     // 0x1AC8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_LoggingOut_Title;                                 // 0x1AD4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_LoggingOut_Text;                                  // 0x1AE0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_SyncingStats_Title;                               // 0x1AEC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_SyncingStats_Text;                                // 0x1AF8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ChangeParty_Title;                               // 0x1B04(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ChangeParty_Text;                                // 0x1B10(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_LeaveMatchToJoinParty_Title;                     // 0x1B1C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_LeaveMatchToJoinParty_Text;                      // 0x1B28(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_LeaveMatchAndChangeParty_Title;                  // 0x1B34(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_LeaveMatchAndChangeParty_Text;                   // 0x1B40(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_LeavePartyToJoinFriend_Title;                    // 0x1B4C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_LeavePartyToJoinFriend_Text;                     // 0x1B58(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_LeavePartyToAcceptInvite_Title;                  // 0x1B64(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_LeavePartyToAcceptInvite_Text;                   // 0x1B70(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_LeavePartyConfirmation_Title;                    // 0x1B7C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_LeavePartyConfirmation_Text;                     // 0x1B88(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_SyncingAccount_Title;                             // 0x1B94(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_SyncingAccount_Text;                              // 0x1BA0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_Purchase_Generic_Title;                           // 0x1BAC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_Purchase_Generic_Text;                            // 0x1BB8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_Purchase_OfferList_Text;                          // 0x1BC4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_Rent_Generic_Title;                               // 0x1BD0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_Rent_Generic_Text;                                // 0x1BDC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_JoinFriendServer_Title;                           // 0x1BE8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_JoinFriendServer_Text;                            // 0x1BF4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_FriendRequest_Title;                              // 0x1C00(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_FriendRequest_Text;                               // 0x1C0C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_GenericProcessing_Title;                          // 0x1C18(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_GenericProcessing_Text;                           // 0x1C24(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_CreatingParty_Title;                              // 0x1C30(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_CreatingParty_Text;                               // 0x1C3C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_LeavingParty_Title;                               // 0x1C48(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_LeavingParty_Text;                                // 0x1C54(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_InvitingToParty_Title;                            // 0x1C60(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_InvitingToParty_Text;                             // 0x1C6C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_JoiningParty_Title;                               // 0x1C78(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_JoiningParty_Text;                                // 0x1C84(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_GameInviteSending_Title;                             // 0x1C90(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_GameInviteSending_Text;                              // 0x1C9C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_GameInviteSent_Title;                                // 0x1CA8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_GameInviteSent_Text;                                 // 0x1CB4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_JoinFriendServerCancelled_Title;                     // 0x1CC0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_JoinFriendServerCancelled_Text;                      // 0x1CCC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_ReturningToMainMenu_Text;                            // 0x1CD8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_XMPP_Connected;                                      // 0x1CE4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_XMPP_Reconnecting;                                   // 0x1CF0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_GameServerStatus_Unavailable;                        // 0x1CFC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ExpirationDateFormat;                                     // 0x1D08(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TechPoints_Boost;                                         // 0x1D14(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PrimaryWeapon_Boost;                                      // 0x1D20(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SecondaryWeapon_Boost;                                    // 0x1D2C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     AltPrimaryWeapon_Boost;                                   // 0x1D38(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Ability_Boost;                                            // 0x1D44(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PerLevel_Boost;                                           // 0x1D50(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_ExperiencePoints;                                    // 0x1D5C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_HawkenPoints;                                        // 0x1D68(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     STAT_DEATHS;                                              // 0x1D74(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     STAT_ASSISTS;                                             // 0x1D80(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_Suicides;                                            // 0x1D8C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_RepairTeammate;                                      // 0x1D98(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_RepairDeployable;                                    // 0x1DA4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_Damage;                                              // 0x1DB0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_DamageSustained;                                     // 0x1DBC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_TimePlayed;                                          // 0x1DC8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_TurretDeaths;                                        // 0x1DD4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_BaseTurretDeaths;                                    // 0x1DE0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_TimeHealing;                                         // 0x1DEC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_TimesHealed;                                         // 0x1DF8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_TotalHealed;                                         // 0x1E04(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_TotalAccuracy;                                       // 0x1E10(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_WeaponName_Accuracy;                                 // 0x1E1C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     STAT_KILLS;                                               // 0x1E28(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_Avenger;                                             // 0x1E34(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_Savior;                                              // 0x1E40(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_Revenge;                                             // 0x1E4C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_Crush;                                               // 0x1E58(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_UnderdogBonus;                                       // 0x1E64(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_Nemesis;                                             // 0x1E70(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_PlayersDominated;                                    // 0x1E7C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_NumMultikills;                                       // 0x1E88(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_BestMultikill;                                       // 0x1E94(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_BestKillStreak;                                      // 0x1EA0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_SiegeWins;                                           // 0x1EAC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_SiegeLosses;                                         // 0x1EB8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_SiegeEUCollected;                                    // 0x1EC4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_SiegeEUDelivered;                                    // 0x1ED0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_SiegeEULost;                                         // 0x1EDC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_ShipsLaunched;                                       // 0x1EE8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_ShipsSuccessful;                                     // 0x1EF4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_EnemyShipsLaunched;                                  // 0x1F00(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_EnemyShipsDestroyed;                                 // 0x1F0C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_MAWins;                                              // 0x1F18(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_MALosses;                                            // 0x1F24(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_MASilosCaptured;                                     // 0x1F30(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_MASilosNeutralized;                                  // 0x1F3C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_TDMWins;                                             // 0x1F48(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_TDMLosses;                                           // 0x1F54(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_DMWins;                                              // 0x1F60(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_DMLosses;                                            // 0x1F6C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_CoOpWins;                                            // 0x1F78(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_CoOpLosses;                                          // 0x1F84(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_CoOpTDMWins;                                         // 0x1F90(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_CoOpTDMLosses;                                       // 0x1F9C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_OverallTeamWins;                                     // 0x1FA8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_OverallTeamLosses;                                   // 0x1FB4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_OverallTeamAbandons;                                 // 0x1FC0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_OverallTeamWinPercentage;                            // 0x1FCC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_OverallKDRatio;                                      // 0x1FD8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Stat_OveralDamageRatio;                                   // 0x1FE4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GAMETYPE_ANY;                                             // 0x1FF0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_Deathmatch;                                      // 0x1FFC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_TeamDeathmatch;                                  // 0x2008(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GAMETYPE_SIEGE;                                           // 0x2014(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GAMETYPE_ASYMSIEGE;                                       // 0x2020(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_MissileAssault;                                  // 0x202C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GAMETYPE_COOP;                                            // 0x2038(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_CoOpOffline;                                     // 0x2044(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_CoOpTDM;                                         // 0x2050(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GAMETYPE_EXPLORE;                                         // 0x205C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_Description_Any;                                 // 0x2068(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_Description_Deathmatch;                          // 0x2074(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_Description_TeamDeathmatch;                      // 0x2080(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_Description_Siege;                               // 0x208C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_Description_AsymSiege;                           // 0x2098(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_Description_MissileAssault;                      // 0x20A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_Description_CoOp;                                // 0x20B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_Description_CoOpTDM;                             // 0x20BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_Description_Explore;                             // 0x20C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameType_Locked_MatchesLeft;                              // 0x20D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyCreated;                                    // 0x20E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PlayerJoined;                                    // 0x20EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_YouInvitedPlayer;                                // 0x20F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PlayerInvitedPlayer;                             // 0x2104(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_YouJoined;                                       // 0x2110(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PlayerLeft;                                      // 0x211C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PlayerKicked;                                    // 0x2128(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PlayerKicked_Title;                              // 0x2134(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_MemberWasKicked;                                 // 0x2140(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PlayerIsTheNewLeader;                            // 0x214C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_YouAreTheNewLeader;                              // 0x2158(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyMatchmaking;                                // 0x2164(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyMatchmakingStart;                           // 0x2170(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyMatchmakingCancel;                          // 0x217C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyMatchmakingCancelLeaderAction;              // 0x2188(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyMatchmakingCancelLeaderChange;              // 0x2194(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyMatchmakingCancelMatchFailure;              // 0x21A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyMatchmakingCancelMemberJoin;                // 0x21AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyMatchmakingCancelMemberLeft;                // 0x21B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyDeployingToMatch;                           // 0x21C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyDeploymentCancelled;                        // 0x21D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyDeploymentCancelledLeaderAction;            // 0x21DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyDeploymentCancelledMemberJoin;              // 0x21E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyDeploymentCancelledMemberLeft;              // 0x21F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyDeploymentCancelledMemberKicked;            // 0x2200(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyRegroupingToLobby;                          // 0x220C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_FailedToSendMessage;                             // 0x2218(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_PartyInvitedToGame;                              // 0x2224(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_FailedInvitingPartyToGame;                       // 0x2230(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_FailedToKickFromParty;                           // 0x223C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyLog_FailedToPromoteToLeader;                         // 0x2248(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_PartyInvite;                                      // 0x2254(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Color_Self;                                       // 0x2260(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Prefix_Party;                                     // 0x226C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Prefix_Clan;                                      // 0x2278(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Prefix_Team;                                      // 0x2284(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Color_Team;                                       // 0x2290(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Color_Neutral;                                    // 0x229C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Color_Enemy;                                      // 0x22A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Color_EndFont;                                    // 0x22B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Color_System;                                     // 0x22C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Message_Color_EndSystemFont;                              // 0x22CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelKillDeathRatio;                                   // 0x22D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAssists;                                          // 0x22E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelWinLossRatio;                                     // 0x22F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelScorePerMin;                                      // 0x22FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelCurrent;                                          // 0x2308(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelScore;                                            // 0x2314(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelClassScore;                                       // 0x2320(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAvailableChips;                                   // 0x232C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelStatsOptimization;                                // 0x2338(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelCommonOptimization;                               // 0x2344(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelClassOptimization;                                // 0x2350(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelContinue;                                         // 0x235C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelSkipCards;                                        // 0x2368(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageOverview;                                        // 0x2374(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageProgression;                                     // 0x2380(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageWeapons;                                         // 0x238C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageOptimizations;                                   // 0x2398(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageItems;                                           // 0x23A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageInternals;                                       // 0x23B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageStyle;                                           // 0x23BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageTips;                                            // 0x23C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageCounterMeasures;                                 // 0x23D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageCockpit;                                         // 0x23E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTier;                                             // 0x23EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelClan;                                             // 0x23F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipPilotRank;                                      // 0x2404(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipOverviewRank;                                   // 0x2410(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipOverviewAbility;                                // 0x241C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipOverviewWeapons;                                // 0x2428(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipOverviewCounterMeasures;                        // 0x2434(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipOverviewUpgrades;                               // 0x2440(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipOverviewItems;                                  // 0x244C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipOverviewInternals;                              // 0x2458(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipOverviewRename;                                 // 0x2464(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipWeaponsPrimary;                                 // 0x2470(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipWeaponsSecondary;                               // 0x247C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelUnlocksAtPilotRank;                               // 0x2488(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelUnlockBoost;                                      // 0x2494(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelDisconnected;                                     // 0x24A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelConnecting;                                       // 0x24AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_homeXPEventHeader;                                     // 0x24B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_homeXPEventFooter;                                     // 0x24C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowConvert;                                       // 0x24D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowTransfer;                                      // 0x24DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelFree;                                             // 0x24E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageShopTab;                                         // 0x24F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageCapturedTab;                                     // 0x2500(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageEquipmentTab;                                    // 0x250C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageBoostTab;                                        // 0x2518(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageTreesTab;                                        // 0x2524(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garageBodyTab;                                         // 0x2530(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_garagePaintTab;                                        // 0x253C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelOwned;                                            // 0x2548(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelExpires;                                          // 0x2554(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelCustomize;                                        // 0x2560(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_confirmItemRentalTitle;                                // 0x256C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_confirmItemRentalMessage;                              // 0x2578(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_purchaseMessage;                                       // 0x2584(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_purchaseMechMessage;                                   // 0x2590(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_purchasePlayerItemMessage;                             // 0x259C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_purchaseMechRentalMessage;                             // 0x25A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelInternalsDescription;                             // 0x25B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelCounterMeasurePurchasePrompt;                     // 0x25C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTrial;                                            // 0x25CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelMultipleTrials;                                   // 0x25D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTrialAvailable;                                   // 0x25E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelFreeTrial;                                        // 0x25F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelHoloTauntDescription;                             // 0x25FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_purchaseHoloTauntMessage;                              // 0x2608(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_confirmFreeItemTitle;                                  // 0x2614(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_choosePurchaseRentTitle;                               // 0x2620(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_choosePurchaseRentMessage;                             // 0x262C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_confirmGlobalItemRentalMessage;                        // 0x2638(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_purchaseGlobalMessage;                                 // 0x2644(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_showPurchaseExtraDateInfoHack;                         // 0x2650(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_showTrialExtraDateInfoHack;                            // 0x265C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelLimited;                                          // 0x2668(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAllMechs;                                         // 0x2674(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelShowExpired;                                      // 0x2680(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelHideExpired;                                      // 0x268C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelIncludedWithPurchase;                             // 0x2698(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelViewInGarage;                                     // 0x26A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAvailableFor;                                     // 0x26B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_marketConsumable;                                      // 0x26BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelUnlockMech;                                       // 0x26C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelComingSoon;                                       // 0x26D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelPartSet;                                          // 0x26E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelStyleChassis;                                     // 0x26EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelStyleDrone;                                       // 0x26F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelStylePattern;                                     // 0x2704(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelStyleTrim;                                        // 0x2710(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelStyleThruster;                                    // 0x271C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelStyleTaunt;                                       // 0x2728(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelStyleHolo;                                        // 0x2734(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelHoloTaunt;                                        // 0x2740(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelMechTaunt;                                        // 0x274C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelScale;                                            // 0x2758(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelSaturation;                                       // 0x2764(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelValue;                                            // 0x2770(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelHue;                                              // 0x277C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelRegion;                                           // 0x2788(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelRegionUpper;                                      // 0x2794(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelRegionMiddle;                                     // 0x27A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelRegionLower;                                      // 0x27AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelRegionArm;                                        // 0x27B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelColor;                                            // 0x27C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTotalFunds;                                       // 0x27D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTotalCost;                                        // 0x27DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelNew;                                              // 0x27E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelSale;                                             // 0x27F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelPopular;                                          // 0x2800(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelGlobal;                                           // 0x280C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelInsufficientCurrencyForItem;                      // 0x2818(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelInsufficientCurrency;                             // 0x2824(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelCurrencyPrice;                                    // 0x2830(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelCurrentCurrency;                                  // 0x283C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_messageItemConflict;                                   // 0x2848(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_messageInternalConflict;                               // 0x2854(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelMechNeedsMoreExp;                                 // 0x2860(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelIncludes;                                         // 0x286C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelMarketDeals;                                      // 0x2878(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_messageKickPlayerConfirm;                              // 0x2884(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UINavPath_Garage;                                         // 0x2890(0x000C) (Const, NeedCtorLink)
	int                                                WaitingDialogId;                                          // 0x289C(0x0004)
	int                                                MessageDialogId;                                          // 0x28A0(0x0004)
	int                                                CreatePartyTaskId;                                        // 0x28A4(0x0004)
	int                                                SendGameInviteTaskId;                                     // 0x28A8(0x0004)
	struct FString                                     DelayedMechOfferID;                                       // 0x28AC(0x000C) (NeedCtorLink)
	TArray<struct FMapDefinition>                      MapDefinitionList;                                        // 0x28B8(0x000C) (NeedCtorLink)
	struct FMapDefinition                              MapDefinition_VRTutorial;                                 // 0x28C4(0x0058) (NeedCtorLink)
	struct FMapDefinition                              MapDefinintion_BotTraining;                               // 0x291C(0x0058) (NeedCtorLink)
	TArray<class UGFxObject*>                          MapGfxObjectList;                                         // 0x2974(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          GameTypeList;                                             // 0x2980(0x000C) (NeedCtorLink)
	struct FString                                     DownloadingMailMessageId;                                 // 0x298C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FUniqueNetId>                        InviteToPartyOnceCreated;                                 // 0x2998(0x000C) (Transient, NeedCtorLink)
	struct FString                                     AcceptPartyInviteAfterLeavingParty;                       // 0x29A4(0x000C) (Transient, NeedCtorLink)
	class UGFxObject*                                  JoinFriendServerAfterPrompt;                              // 0x29B0(0x0004) (Transient)
	class UGFxObject*                                  AcceptInviteAfterPrompt;                                  // 0x29B4(0x0004) (Transient)
	int                                                InvitationPendingCount;                                   // 0x29B8(0x0004)
	TArray<struct FSAchievementIcon>                   AchievementIcons;                                         // 0x29BC(0x000C) (NeedCtorLink)
	int                                                defaultAchievementIconIndex;                              // 0x29C8(0x0004) (Const)
	TArray<struct FPublicPlayerProfile>                CachedPublicPlayerProfiles;                               // 0x29CC(0x000C) (NeedCtorLink)
	TArray<struct FString>                             prestigeWeaponIDforSubType;                               // 0x29D8(0x000C) (NeedCtorLink)
	float                                              UpdateVoiceIndicatorRate;                                 // 0x29E4(0x0004)
	float                                              UpdateVoiceIndicatorTime;                                 // 0x29E8(0x0004)
	TArray<TEnumAsByte<EMechProgressionFlags>>         MechProgressionFlagOrder;                                 // 0x29EC(0x000C) (NeedCtorLink)
	struct FString                                     UnlockCategoryNames[0x11];                                // 0x29F8(0x000C) (Const, Localized, NeedCtorLink)
	class UTexture2D*                                  UnlockCategoryIcons[0x11];                                // 0x2AC4(0x0004)
	class UTexture2D*                                  ActionIcon_PilotRankIncreased;                            // 0x2B08(0x0004)
	class UTexture2D*                                  UnlockIcon_OptimizationSlots;                             // 0x2B0C(0x0004)
	class UTexture2D*                                  UnlockIcon_ItemSlots;                                     // 0x2B10(0x0004)
	class UTexture2D*                                  UnlockIcon_InternalSlots;                                 // 0x2B14(0x0004)
	class UTexture2D*                                  UnlockIcon_OptimizationPoints;                            // 0x2B18(0x0004)
	class UTexture2D*                                  UnlockIcon_InternalsTechGroup;                            // 0x2B1C(0x0004)
	class UTexture2D*                                  UnlockIcon_ItemsTechGroup;                                // 0x2B20(0x0004)
	TArray<class UTexture2D*>                          TechGroupIcons;                                           // 0x2B24(0x000C) (NeedCtorLink)
	struct FString                                     Unlock_GeneralExplanation;                                // 0x2B30(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             Unlock_TechGroup;                                         // 0x2B3C(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             Unlock_TechLevelModifier;                                 // 0x2B48(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_XPForTier2;                                   // 0x2B54(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_XPForTier3;                                   // 0x2B60(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_XPForTier4;                                   // 0x2B6C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_XPForTier5;                                   // 0x2B78(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Description_MechTierAvailable;                     // 0x2B84(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_LoreText_MechTierAvailable;                        // 0x2B90(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Title_UpgradeAvailable;                            // 0x2B9C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Explanation_MechGainedXP;                          // 0x2BA8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_ReachedTier2;                                 // 0x2BB4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_ReachedTier3;                                 // 0x2BC0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_ReachedTier4;                                 // 0x2BCC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_ReachedTier5;                                 // 0x2BD8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_ReachedTier5Max;                              // 0x2BE4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Description_MechTierReached;                       // 0x2BF0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_LoreText_MechTierReached;                          // 0x2BFC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Title_UpgradeComplete;                             // 0x2C08(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Explanation_Purchase;                              // 0x2C14(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Title_GlobalItemAvailable;                         // 0x2C20(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Title_MechAvailable;                               // 0x2C2C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Title_UnlockAvailable;                             // 0x2C38(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Explanation_MechGainedTier;                        // 0x2C44(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Explanation_MechMaxTier;                           // 0x2C50(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_OptimizationSlot;                             // 0x2C5C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Description_OptimizationSlot;                      // 0x2C68(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_LoreText_OptimizationSlot;                         // 0x2C74(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_ItemSlot;                                     // 0x2C80(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Description_ItemSlot;                              // 0x2C8C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_LoreText_ItemSlot;                                 // 0x2C98(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_InternalSlot;                                 // 0x2CA4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Description_InternalSlot;                          // 0x2CB0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_LoreText_InternalSlot;                             // 0x2CBC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Title_Slot;                                        // 0x2CC8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_OptimizationPoint;                            // 0x2CD4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Description_OptimizationPoint;                     // 0x2CE0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_LoreText_OptimizationPoint;                        // 0x2CEC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Explanation_PilotLevel;                            // 0x2CF8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Title_CustomizationAvailable;                      // 0x2D04(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Title_AbilityUpgradeAvailable;                     // 0x2D10(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_AbilityUpgrade;                               // 0x2D1C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Description_AbilityUpgrade;                        // 0x2D28(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_LoreText_AbilityUpgrade;                           // 0x2D34(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Title_WeaponUpgradeAvailable;                      // 0x2D40(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_PrimaryWeaponUpgrade;                         // 0x2D4C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Description_PrimaryWeaponUpgrade;                  // 0x2D58(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_LoreText_PrimaryWeaponUpgrade;                     // 0x2D64(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_SecondaryWeaponUpgrade;                       // 0x2D70(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Description_SecondaryWeaponUpgrade;                // 0x2D7C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_LoreText_SecondaryWeaponUpgrade;                   // 0x2D88(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_AlternateWeaponUpgrade;                       // 0x2D94(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Description_AlternateWeaponUpgrade;                // 0x2DA0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_LoreText_AlternateWeaponUpgrade;                   // 0x2DAC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_PrestigeWeaponUpgrade;                        // 0x2DB8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Description_PrestigeWeaponUpgrade;                 // 0x2DC4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_LoreText_PrestigeWeaponUpgrade;                    // 0x2DD0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Title_EmblemAvailable;                             // 0x2DDC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Lore_EmblemAvailable;                              // 0x2DE8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_EmblemAvailable;                              // 0x2DF4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Title_ConsumableHoloTauntAvailable;                // 0x2E00(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Lore_ConsumableHoloTauntAvailable;                 // 0x2E0C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_ConsumableHoloTauntAvailable;                 // 0x2E18(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Description_ConsumableHoloTauntAvailable;          // 0x2E24(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Title_ConsumableTriggeredAvailable;                // 0x2E30(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Lore_ConsumableTriggeredAvailable;                 // 0x2E3C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Name_ConsumableTriggeredAvailable;                 // 0x2E48(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Unlock_Description_ConsumableTriggeredAvailable;          // 0x2E54(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             Unlock_Description_TechUnlock;                            // 0x2E60(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             Unlock_LoreText_TechUnlock;                               // 0x2E6C(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             TestDriveOfferDisplayName;                                // 0x2E78(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             TestDriveOfferDescription;                                // 0x2E84(0x000C) (Const, Localized, NeedCtorLink)
	TArray<class UTexture2D*>                          TestDriveOfferIconPath;                                   // 0x2E90(0x000C) (Const, NeedCtorLink)
	TArray<struct FSAgentDialogCardInfo>               NewMechAgentDialogs;                                      // 0x2E9C(0x000C) (NeedCtorLink)
	struct FString                                     ServerPassword;                                           // 0x2EA8(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __DialogClosedDelegate__Delegate;                         // 0x2EB4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SetCurrentMechPresetIndexDelegate__Delegate;            // 0x2EC0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetClientOnlyDelegate__Delegate;                        // 0x2ECC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetVersionStringDelegate__Delegate;                     // 0x2ED8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GaragePanelOpenedDelegate__Delegate;                    // 0x2EE4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __MechCenterDelegate__Delegate;                           // 0x2EF0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __MechLeftDelegate__Delegate;                             // 0x2EFC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __MechRightDelegate__Delegate;                            // 0x2F08(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SetViewingDronesDelegate__Delegate;                     // 0x2F14(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SetViewingHUDSamplerDelegate__Delegate;                 // 0x2F20(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SetViewingReticleSamplerDelegate__Delegate;             // 0x2F2C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __PreviewCamoDelegate__Delegate;                          // 0x2F38(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __AccentPreviewDelegate__Delegate;                        // 0x2F44(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ApplyColorsToAllMechsDelegate__Delegate;                // 0x2F50(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ApplyReticlesToAllMechsDelegate__Delegate;              // 0x2F5C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HUDColorPreviewDelegate__Delegate;                      // 0x2F68(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __PartPreviewDelegate__Delegate;                          // 0x2F74(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ShowCockpit__Delegate;                                  // 0x2F80(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __RequestAchievementListDelegate__Delegate;               // 0x2F8C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnCalloutFollowUrlDelegate__Delegate;                   // 0x2F98(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetIsChinaBuildDelegate__Delegate;                      // 0x2FA4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __PurchaseOfferDelegate__Delegate;                        // 0x2FB0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __PurchaseOfferListDelegate__Delegate;                    // 0x2FBC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __RentOfferDelegate__Delegate;                            // 0x2FC8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SaveMechPresetDelegate__Delegate;                       // 0x2FD4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SaveGarageOrderDelegate__Delegate;                      // 0x2FE0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SavePlayerSettingsDelegate__Delegate;                   // 0x2FEC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OpenFriendsDelegate__Delegate;                          // 0x2FF8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ConnectSocialDelegate__Delegate;                        // 0x3004(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __AddFriendRequestFromEmailDelegate__Delegate;            // 0x3010(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __AddFriendRequestFromUserIdDelegate__Delegate;           // 0x301C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __AddFriendRequestFromCallsignDelegate__Delegate;         // 0x3028(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __RemoveFriendDelegate__Delegate;                         // 0x3034(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __BlockFriendDelegate__Delegate;                          // 0x3040(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __AcceptFriendRequestDelegate__Delegate;                  // 0x304C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __DeclineFriendRequestDelegate__Delegate;                 // 0x3058(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SendChatMessageDelegate__Delegate;                      // 0x3064(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetChatHistoryDelegate__Delegate;                       // 0x3070(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UI_CreatePartyDelegate__Delegate;                       // 0x307C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UI_LeavePartyDelegate__Delegate;                        // 0x3088(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UI_InviteToPartyDelegate__Delegate;                     // 0x3094(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UI_SendPartyMessageDelegate__Delegate;                  // 0x30A0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UI_PromoteToLeaderDelegate__Delegate;                   // 0x30AC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UI_KickFromPartyDelegate__Delegate;                     // 0x30B8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UI_AcceptPartyInviteDelegate__Delegate;                 // 0x30C4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UI_DeclinePartyInvitationDelegate__Delegate;            // 0x30D0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UI_InvitePartyToGameDelegate__Delegate;                 // 0x30DC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __JoinFriendServerDelegate__Delegate;                     // 0x30E8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __CanJoinFriendServerDelegate__Delegate;                  // 0x30F4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SendGameInviteDelegate__Delegate;                       // 0x3100(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __CanInviteToGameDelegate__Delegate;                      // 0x310C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __AcceptGameInviteDelegate__Delegate;                     // 0x3118(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __DeclineGameInviteDelegate__Delegate;                    // 0x3124(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __DeleteMailMessageDelegate__Delegate;                    // 0x3130(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __MarkMailMessageAsReadDelegate__Delegate;                // 0x313C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __MutePlayerDelegate__Delegate;                           // 0x3148(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __IsTrainingDelegate__Delegate;                           // 0x3154(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetInstanceIsExpiredDelegate__Delegate;                 // 0x3160(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetInstanceIsTimeLimitedDelegate__Delegate;             // 0x316C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetNumTriggeredDelegate__Delegate;                      // 0x3178(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetNumPassiveDelegate__Delegate;                        // 0x3184(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetNumTauntConsumableDelegate__Delegate;                // 0x3190(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ExitGameDelegate__Delegate;                             // 0x319C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __BuyMeteorCreditsDelegate__Delegate;                     // 0x31A8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetInstanceIsUseLimitedDelegate__Delegate;              // 0x31B4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetInstanceTimeToExpirationDelegate__Delegate;          // 0x31C0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetInstanceNumUsesToExpirationDelegate__Delegate;       // 0x31CC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetOfferTimeToExpirationDelegate__Delegate;             // 0x31D8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetOfferExpiryDateDelegate__Delegate;                   // 0x31E4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetOfferIsExpiredDelegate__Delegate;                    // 0x31F0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __StatsOverviewRequestDelegate__Delegate;                 // 0x31FC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __MechStatsRequestDelegate__Delegate;                     // 0x3208(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ShowBackgroundBlurDelegate__Delegate;                   // 0x3214(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GFx_MechMenu_Base");
		return ptr;
	}


	bool CheckGameServersAvailable(bool bShowDialog);
	void HideStatusTicker();
	void ShowStatusTicker(const struct FString& Message, const struct FString& Type);
	void OnStreamingChatMessageReceived(const struct FString& Message);
	void OnStreamingStatusChanged(TEnumAsByte<EStreamState> NewState);
	void ResetPreviewVisualInfo(class UGFxObject* UIPreset);
	void OnFullSyncComplete();
	bool IsSynced();
	void ResetSync();
	void ResetPlayerAccountStatus();
	void UpdateDidFullSyncFinish();
	void OnMessageDialogClose_ErrorSyncingAccount(int InDialogId, int InButton);
	void UpdatePlayerInfo(class UR_MechSetup* MechSetup);
	void OnReadOnlineStatsComplete(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID, class UOnlinePlayerStats* PlayerStats);
	void ReadOnlinePlayerStats();
	void LoadAvailableChallenges();
	void SyncingAccount_OnReadAllUserGameItemStatsCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID, class UOnlineGameItemInstanceCollection* InstanceCollection);
	void SyncingAccount_ReadAllUserGameItemStats();
	void OnReadSingleMechUserGameItemStatsCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID, class UOnlineGameItemInstanceCollection* InstanceCollection);
	void ReadSingleMechUserGameItemStats(const struct FString& InstanceGUID, class UOnlineGameItemInstance* itemInstance);
	void OnReadGameItemInstanceCollectionComplete(const struct FUniqueNetId& PlayerID, bool bWasSuccessful, class UOnlineGameItemInstanceCollection* ItemInstanceCollection);
	void ReadGameItemInstanceCollection();
	struct FString STATIC_GetMapDisplayName(const struct FString& MapName);
	int STATIC_FindMapDefinitionIndex(const struct FString& MapName);
	void SyncPlayerProfile_Update(struct FUniqueNetId* PlayerID);
	void SyncPlayerProfile_OnReadOnlineStatsComplete(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID, class UOnlinePlayerStats* PlayerStats);
	void SyncPlayerProfile_OnReadUserSettingsComplete(bool bWasSuccessful, class UOnlinePlayerSettings* Settings, const struct FUniqueNetId& PlayerID);
	void SyncPlayerProfile_OnReadUnlockedAchievementCollectionCompleted(int TaskID, const struct FUniqueNetId& PlayerID, TEnumAsByte<ENetworkErrorCode> ErrorCode, class UOnlineUnlockedAchievementCollection* Collection);
	void SyncPlayerProfile_UnRegisterDelegates();
	void SyncPlayerProfile_RegisterDelegates();
	void SyncPlayerProfile_Complete();
	void SyncPlayerProfile(struct FUniqueNetId* PlayerID);
	bool UpdateCachedPlayerProfileEmblem(int EmblemIndex, struct FUniqueNetId* PlayerID);
	bool GetCachedPlayerProfile(struct FUniqueNetId* PlayerID, struct FPublicPlayerProfile* PlayerProfile);
	void ViewPlayerProfile(struct FUniqueNetId* PlayerID);
	struct FString STATIC_GetAchievementIconPath(const struct FString& ImageId);
	struct FString STATIC_GetMechSubtypeActionIconPath(class UClass* MechSubtypeClass);
	struct FString STATIC_GetMechSubtypeIconPath(class UClass* MechSubtypeClass);
	struct FString GetConsumableIconPath(class UClass* ConsumableClass);
	struct FString STATIC_GetWeaponClassIconPath(class UClass* WeaponClass);
	struct FString GetGameTypeIconPath(int GameTypeIndex);
	struct FString STATIC_GetMapDefinitionIconPath(const struct FMapDefinition& mapdata);
	struct FString STATIC_GetCamoPatternIconPath(int Index, struct FCamoPattern* pattern);
	struct FString STATIC_GetMechTauntIconPath(struct FMechTauntType* mechTaunt);
	struct FString STATIC_GetMechPartStyleIconPath(struct FMechPartStyles* MechStyle);
	struct FString GetItemHUDIconPath(class UClass* ItemClass);
	struct FString GetItemIconPath(class UClass* ItemClass);
	class UGFxObject* GetGameTypeForTypeIndex(int GameTypeIndex);
	class UGFxObject* GetGameTypeForName(const struct FString& GameType);
	class UGFxObject* GetMapObjectForName(const struct FString& MapName);
	void InitMapAndGameTypeList();
	void InitGametypeMatchmakingLocks(int debugMatchesCompletedOverride);
	bool IsMAMatchmakingUnlocked(int MatchesCompleted);
	bool IsDMMatchmakingUnlocked(int MatchesCompleted);
	bool IsSiegeMatchmakingUnlocked(int MatchesCompleted);
	int GetNumberOfMatchesCompleted();
	void FillInMechStats(const struct FMechPreset& preset, class UGFxObject* StatsObj, int MechTier, bool bMechTierFull);
	void FillInPlayerStatsOverview_Details(class UR_OnlinePlayerStats_UnrankedGameplay** Stats);
	void FillInPlayerStatsOverview(class UGFxObject** StatsObj, class UR_OnlinePlayerStats_UnrankedGameplay** Stats);
	void SendMechStatsToUI(class UGFxObject* UserObj, const struct FPublicPlayerProfile& PlayerProfile);
	void SendStatsOverviewToUI(class UGFxObject* UserObj, const struct FPublicPlayerProfile& PlayerProfile);
	struct FString STATIC_GetLocalizedStatName(const struct FString& StatName);
	void SetDelegate_ShowBackgroundBlur(const struct FScriptDelegate& D);
	void ShowBackgroundBlur(bool bEnabled);
	void ShowBackgroundBlurDelegate(bool bEnabled);
	void SetDelegate_MechStatsRequest(const struct FScriptDelegate& del);
	void MechStatsRequest(class UGFxObject* UserObj);
	void MechStatsRequestDelegate(class UGFxObject* UserObj);
	void SetDelegate_StatsOverviewRequest(const struct FScriptDelegate& del);
	void StatsOverviewRequest(class UGFxObject* UserObj);
	void StatsOverviewRequestDelegate(class UGFxObject* UserObj);
	void SetDelegate_GetOfferIsExpired(const struct FScriptDelegate& del);
	bool GetOfferIsExpired(const struct FString& OfferId);
	bool GetOfferIsExpiredDelegate(const struct FString& OfferId);
	void SetDelegate_GetOfferExpiryDate(const struct FScriptDelegate& del);
	struct FString GetOfferExpiryDate(const struct FString& OfferId);
	struct FString GetOfferExpiryDateDelegate(const struct FString& OfferId);
	void SetDelegate_GetOfferTimeToExpiration(const struct FScriptDelegate& del);
	class UGFxObject* GetOfferTimeToExpiration(const struct FString& OfferId);
	class UGFxObject* GetOfferTimeToExpirationDelegate(const struct FString& OfferId);
	void SetDelegate_GetInstanceNumUsesToExpiration(const struct FScriptDelegate& del);
	int GetInstanceNumUsesToExpiration(const struct FString& InstanceID);
	int GetInstanceNumUsesToExpirationDelegate(const struct FString& InstanceID);
	void SetDelegate_GetInstanceTimeToExpiration(const struct FScriptDelegate& del);
	class UGFxObject* GetInstanceTimeToExpiration(const struct FString& InstanceID);
	class UGFxObject* GetInstanceTimeToExpirationDelegate(const struct FString& InstanceID);
	void SetDelegate_GetInstanceIsUseLimited(const struct FScriptDelegate& del);
	bool GetInstanceIsUseLimited(const struct FString& InstanceID);
	bool GetInstanceIsUseLimitedDelegate(const struct FString& InstanceID);
	void OnExternalUIChange_BuyMeteorCredits(bool bIsOpening);
	void SetDelegate_BuyMeteorCredits(const struct FScriptDelegate& D);
	void BuyMeteorCredits();
	void BuyMeteorCreditsDelegate();
	void ConcatStormLoginToURL(const struct FString& inURL, struct FString* OutURL);
	void SetDelegate_ExitGame(const struct FScriptDelegate& del);
	void ExitGame();
	void ExitGameDelegate();
	void SetDelegate_GetNumTauntConsumable(const struct FScriptDelegate& del);
	int GetNumTauntConsumable();
	int GetNumTauntConsumableDelegate();
	void SetDelegate_GetNumPassive(const struct FScriptDelegate& del);
	int GetNumPassive();
	int GetNumPassiveDelegate();
	void SetDelegate_GetNumTriggered(const struct FScriptDelegate& del);
	int GetNumTriggered();
	int GetNumTriggeredDelegate();
	void SetDelegate_GetInstanceIsTimeLimited(const struct FScriptDelegate& del);
	bool GetInstanceIsTimeLimited(const struct FString& InstanceID);
	bool GetInstanceIsTimeLimitedDelegate(const struct FString& InstanceID);
	void SetDelegate_GetInstanceIsExpired(const struct FScriptDelegate& del);
	bool GetInstanceIsExpired(const struct FString& InstanceID);
	bool GetInstanceIsExpiredDelegate(const struct FString& InstanceID);
	void SetDelegate_IsTraining(const struct FScriptDelegate& del);
	bool IsTraining();
	bool IsTrainingDelegate();
	void SetDelegate_MutePlayer(const struct FScriptDelegate& del);
	void MutePlayer(class UGFxObject* PlayerObj, bool bMute);
	void MutePlayerDelegate(class UGFxObject* PlayerObj, bool bMute);
	void SetDelegate_MarkMailMessageAsRead(const struct FScriptDelegate& del);
	void MarkMailMessageAsRead(class UGFxObject* MessageObj);
	void MarkMailMessageAsReadDelegate(class UGFxObject* MessageObj);
	void SetDelegate_DeleteMailMessage(const struct FScriptDelegate& del);
	void DeleteMailMessage(class UGFxObject* MessageObj);
	void DeleteMailMessageDelegate(class UGFxObject* MessageObj);
	void SetDelegate_DeclineGameInvite(const struct FScriptDelegate& del);
	void DeclineGameInvite(class UGFxObject* MessageObj);
	void DeclineGameInviteDelegate(class UGFxObject* MessageObj);
	void SetDelegate_AcceptGameInvite(const struct FScriptDelegate& del);
	void OnMessageDialog_LeavePartyAcceptInvite(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void AcceptGameInvite(class UGFxObject* MessageObj, const struct FString& Password);
	void AcceptGameInviteDelegate(class UGFxObject* MessageObj, const struct FString& Password);
	void SetDelegate_CanInviteToGame(const struct FScriptDelegate& del);
	bool CanInviteToGame(class UGFxObject* FriendObj);
	bool CanInviteToGameDelegate(class UGFxObject* FriendObj);
	void OnSendGameInviteCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode);
	void SetDelegate_SendGameInvite(const struct FScriptDelegate& del);
	void OnWaitingDialogClosed_GameInviteSending(int InDialogId, bool bCancelled);
	void SendGameInvite(class UGFxObject* FriendObj, const struct FString& Message);
	void SendGameInviteDelegate(class UGFxObject* FriendObj, const struct FString& Message);
	void SetDelegate_CanJoinFriendServer(const struct FScriptDelegate& D);
	bool CanJoinFriendServer(class UGFxObject* FriendObj);
	bool CanJoinFriendServerDelegate(class UGFxObject* FriendObj);
	void OnMessageDialogClosed_JoinFriendServerCancelled(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void OnWaitingDialogClosed_JoinFriendServer(int InDialogId, bool bCancelled);
	void SetDelegate_JoinFriendServer(const struct FScriptDelegate& del);
	void OnMessageDialogClosed_LeavePartyConfirmation(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void OnMessageDialog_LeavePartyJoinFriendServer(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void JoinFriendServer(class UGFxObject* FriendObj);
	void JoinFriendServerDelegate(class UGFxObject* FriendObj);
	bool IsOnServer();
	void OnPartyMatchmakingCanceled(TEnumAsByte<EMMCancelReason> Reason);
	void OnPartyMatchmakingStarted();
	void OnPartyDeploymentCancelled(TEnumAsByte<EMMCancelReason> Reason);
	void OnPartyDeploying(int CountdownTime);
	void DeployParty(int CountdownTime);
	void OnPartyMessageReceived(class UOnlinePartyMemberObject* PartyMemberObject, const struct FString& Message);
	void OnPartyMemberChanged(class UOnlinePartyMemberObject* PartyMember);
	void OnPartyLeaderChanged(class UOnlinePartyMemberObject* NewLeaderMemberObject);
	void OnPlayerKickedFromParty(class UOnlinePartyMemberObject* PartyMemberObject);
	void OnPlayerLeftParty(class UOnlinePartyMemberObject* PartyMemberObject);
	void OnPlayerJoinedParty(class UOnlinePartyMemberObject* PartyMemberObject, bool bNewMember);
	void UI_AddPartySystemMessage(const struct FString& Message, bool Silent);
	struct FString RemoveHTML(const struct FString& Message);
	struct FString ChatColorForUI(const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, const struct FString& Message, bool bIsTeamChat, class APlayerReplicationInfo* SourcePRI);
	struct FString AttachClanTagToName(const struct FName& ClanTag, const struct FString& PlayerName);
	void AddStreamingMessageToChatWindow(const struct FString& msg, bool Silent);
	void UI_AddPartyMessage(class UGFxObject* PlayerObj, const struct FString& Message, bool Silent, int Index);
	void UI_RemoveFromParty(class UGFxObject* PlayerObj);
	void UI_AddToParty(class UGFxObject* PlayerObj);
	void UI_DestroyParty();
	void UI_ClearPartyChat();
	void UpdatePartyPlayerGfxObject(class UGFxObject* GFxObj, class UOnlinePartyMemberObject* PartyMember);
	class UGFxObject* GetOrCreatePartyPlayerGfxObjectForLog(const struct FUniqueNetId& PlayerID, const struct FString& DisplayName);
	class UGFxObject* GetPartyPlayerGfxObjectFromDisplayName(const struct FString& DisplayName);
	class UGFxObject* GetPartyPlayerGfxObject(struct FUniqueNetId* PlayerID);
	void RemovePreviousPartyPlayersFromList(class UOnlinePartyObject* PartyObject);
	void CleanupPartyUI();
	class UGFxObject* CreatePartyPlayerForUI(class UOnlinePartyMemberObject* PartyMemberObject);
	void PrintPartySystemMessage(const struct FString& Message, bool bAddToLog);
	void ShowPartyLeaderChangedMessage(class UGFxObject* PlayerObj, bool Toast);
	void ShowPlayerKickedFromPartyMessage(class UGFxObject* PlayerObj, bool Toast);
	void ShowPlayerLeftPartyMessage(class UGFxObject* PlayerObj, bool Toast);
	void ShowPlayerJoinedPartyMessage(class UGFxObject* PlayerObj, bool Toast);
	void PrintPartyChatMessage(class UGFxObject* PlayerObj, const struct FString& Message, bool Silent, int Index);
	void PrintPartyCreatedMessage(bool Silent);
	void SetupPartyObjectForUI(class UOnlinePartyObject* PartyObject);
	void InitializePartyLobby();
	void InvitePartyToGame();
	void SetDelegate_InvitePartyToGame(const struct FScriptDelegate& del);
	void UI_InvitePartyToGame();
	void UI_InvitePartyToGameDelegate();
	void OnDeclinePartyInvitationCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FString& InviteMessageId);
	void DeclinePartyInvitation(const struct FString& InviteMessageId);
	void SetDelegate_DeclinePartyInvitation(const struct FScriptDelegate& del);
	void UI_DeclinePartyInvitation(class UGFxObject* MessageObj);
	void UI_DeclinePartyInvitationDelegate(class UGFxObject* MessageObj);
	void OnAcceptPartyInvitationCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FString& MessageId, class UOnlinePartyObject* PartyObject);
	void OnMessageDialogClosed_AcceptPartyInvite(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void OnMessageDialog_LeaveMatchAcceptPartyInvite(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void AcceptPartyInvite(const struct FString& InviteMessageId, bool bSkipPrompt);
	void SetDelegate_AcceptPartyInvite(const struct FScriptDelegate& del);
	void UI_AcceptPartyInvite(class UGFxObject* MessageObj);
	void UI_AcceptPartyInviteDelegate(class UGFxObject* MessageObj);
	void OnKickFromPartyCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID);
	void KickFromParty(class UGFxObject* PlayerObj);
	void SetDelegate_KickFromParty(const struct FScriptDelegate& del);
	void UI_KickFromParty(class UGFxObject* PlayerObj);
	void UI_KickFromPartyDelegate(class UGFxObject* PlayerObj);
	void OnPromoteToLeaderCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID);
	void PromoteToLeader(class UGFxObject* PlayerObj);
	void SetDelegate_PromoteToLeader(const struct FScriptDelegate& del);
	void UI_PromoteToLeader(class UGFxObject* PlayerObj);
	void UI_PromoteToLeaderDelegate(class UGFxObject* PlayerObj);
	void OnSendMessageToPartyCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FString& Message);
	void SendPartyMessage(const struct FString& Message);
	void SetDelegate_SendPartyMessage(const struct FScriptDelegate& del);
	void UI_SendPartyMessage(const struct FString& Message);
	void UI_SendPartyMessageDelegate(const struct FString& Message);
	void OnInviteToPartyCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID, const struct FString& Message, class UOnlinePartyObject* PartyObject);
	void OnInvitedToParty(int TaskID, const struct FString& Message);
	void InviteToParty(bool bBatchInvite, struct FUniqueNetId* PlayerID);
	void SetDelegate_InviteToParty(const struct FScriptDelegate& del);
	void UI_InviteToParty(class UGFxObject* PlayerObj);
	void UI_InviteToPartyDelegate(class UGFxObject* PlayerObj);
	void OnLeavePartyCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode);
	void LeaveParty();
	void SetDelegate_LeaveParty(const struct FScriptDelegate& del);
	void UI_LeaveParty();
	void UI_LeavePartyDelegate();
	void OnWaitingDialogClosed_CreateParty(int InDialogId, bool bCancelled);
	void OnCreatePartyCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, class UOnlinePartyObject* PartyObject);
	void CreateParty();
	bool IsInParty();
	void SetDelegate_CreateParty(const struct FScriptDelegate& del);
	void UI_CreateParty();
	void UI_CreatePartyDelegate();
	void SetDelegate_GetChatHistory(const struct FScriptDelegate& del);
	void GetChatHistory(class UGFxObject* FriendObj);
	void GetChatHistoryDelegate(class UGFxObject* FriendObj);
	void SetDelegate_SendChatMessage(const struct FScriptDelegate& del);
	void SendChatMessage(class UGFxObject* FriendObj, const struct FString& Message);
	void SendChatMessageDelegate(class UGFxObject* FriendObj, const struct FString& Message);
	void SetDelegate_DeclineFriendRequest(const struct FScriptDelegate& del);
	void DeclineFriendRequest(class UGFxObject* MessageObj);
	void DeclineFriendRequestDelegate(class UGFxObject* MessageObj);
	void SetDelegate_AcceptFriendRequest(const struct FScriptDelegate& del);
	void AcceptFriendRequest(class UGFxObject* MessageObj);
	void AcceptFriendRequestDelegate(class UGFxObject* MessageObj);
	void SetDelegate_BlockFriend(const struct FScriptDelegate& del);
	void BlockFriend(class UGFxObject* FriendObj);
	void BlockFriendDelegate(class UGFxObject* FriendObj);
	void SetDelegate_RemoveFriend(const struct FScriptDelegate& del);
	void RemoveFriend(class UGFxObject* FriendObj);
	void RemoveFriendDelegate(class UGFxObject* FriendObj);
	void SetDelegate_AddFriendRequestFromCallsign(const struct FScriptDelegate& del);
	void AddFriendRequestFromCallsign(const struct FString& Callsign);
	void AddFriendRequestFromCallsignDelegate(const struct FString& Callsign);
	void SetDelegate_AddFriendRequestFromUserId(const struct FScriptDelegate& del);
	void AddFriendRequestFromUserId(const struct FString& UserId);
	void AddFriendRequestFromUserIdDelegate(const struct FString& UserId);
	void SetDelegate_AddFriendRequestFromEmail(const struct FScriptDelegate& del);
	void AddFriendRequestFromEmail(const struct FString& Email);
	void AddFriendRequestFromEmailDelegate(const struct FString& Email);
	void SetDelegate_ConnectSocial(const struct FScriptDelegate& del);
	void ConnectSocial();
	void ConnectSocialDelegate();
	void SetDelegate_OpenFriends(const struct FScriptDelegate& del);
	void OpenFriends(bool IsFriendListOpen);
	void OpenFriendsDelegate(bool IsFriendListOpen);
	void SetDelegate_SavePlayerSettings(const struct FScriptDelegate& D);
	void SavePlayerSettings();
	void SavePlayerSettingsDelegate();
	void SetDelegate_SaveGarageOrder(const struct FScriptDelegate& D);
	void SaveGarageOrder();
	void SaveGarageOrderDelegate();
	void OnWriteOnlineMechInstanceCompleted(bool bWasSuccessful, const struct FString& Mech_InstanceId);
	bool DoActualSave(int Index);
	void SetDelegate_SaveMechPreset(const struct FScriptDelegate& D);
	void SaveMechPreset(class UGFxObject* UIPreset);
	void SaveMechPresetDelegate(class UGFxObject* UIPreset);
	void SetDelegate_RentOffer(const struct FScriptDelegate& D);
	void RentOffer(const struct FString& OfferId, bool bUseHawkenPoints);
	void RentOfferDelegate(const struct FString& OfferId, bool bUseHawkenPoints);
	void OnCloseDialogMechInOfferUnlocksFromProgression(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void OnCloseDialogPlayerOwnsMechOffer(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void SetDelegate_PurchaseOfferList(const struct FScriptDelegate& D);
	void PurchaseOfferList(TArray<struct FString> OfferIdList, bool bUseHawkenPoints);
	void PurchaseOfferListDelegate(TArray<struct FString> OfferIdList, bool bUseHawkenPoints);
	void SetDelegate_PurchaseOffer(const struct FScriptDelegate& D);
	void PurchaseOffer(const struct FString& OfferId, bool bUseHawkenPoints, bool bIsBundle);
	void PurchaseOfferDelegate(const struct FString& OfferId, bool bUseHawkenPoints, bool IsBundle);
	void SetDelegate_GetIsChinaBuild(const struct FScriptDelegate& D);
	bool GetIsChinaBuildDelegate();
	bool STATIC_GetIsChinaBuild();
	bool DoesMechSubTypeUnlockViaProgression(int MechSubType, int* outPilotLevelUnlocksAt, int* outMechSubtypeIndexUnlocksAt);
	bool DoesPlayerOwnMechSubType(int MechSubType);
	int GetMechSubtypeFromOffer(const struct FString& OfferId);
	bool FindRentalMechInstanceId(const struct FString& OfferId, struct FString* MechInstanceId, int* numNonRentalMechsOwned);
	bool IsOfferForMechRental(const struct FString& OfferId);
	bool IsOfferForMechRental_WithOffer(class UOnlineGameOffer* GameOffer);
	bool IsOfferForMechPackage(const struct FString& OfferId);
	bool IsOfferForGlobalItem(const struct FString& OfferId);
	void OnRefreshOverflowComplete(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID, class UOnlinePlayerStats* PlayerStats);
	void RefreshOverflow();
	void RefreshPlayerWalletValues();
	void SubtractLocalPlayerCredits(TEnumAsByte<EPurchaseCurrency> CurrencyType, int CurrencyTaken);
	void OnRefreshWalletComplete(bool bWasSuccessful);
	void RefreshWallet();
	void OnPurchasedNewItems(class UOnlineGameItemInstanceCollection* PurchasedGameItemInstances, int Num, const struct FString& MechInstanceId);
	void OnPurchaseNewMech(class UOnlineGameItemInstanceCollection* PurchasedGameItemInstances, int NumItems, const struct FString& MechInstanceId, const struct FString& mechSubClassName, int MechSubType);
	bool HandleNewGameItemsFromPurchaseOrRent(class UOnlineGameItemInstanceCollection* NewGameItemInstances);
	class UGFxObject* FindUIGameItemInstance(const struct FString& InstanceID);
	void RefreshMechItemInstances(const struct FString& MechId);
	void ClearCachedExpirationsOnMech(const struct FString& MechId);
	void OnCloseDialogPurchaseCompletedButSyncFailed(int InDialogId, int InButton);
	void OnPurchaseGameBundleComplete(int TaskID, const struct FString& BundleId, TEnumAsByte<ENetworkErrorCode> ErrorCode);
	void ShowFailedListPurchases();
	void OnPurchaseOfferListComplete();
	void OnPurchaseGameOfferFromListComplete(int TaskID, const struct FString& OfferId, TEnumAsByte<ENetworkErrorCode> ErrorCode, class UOnlineGameItemInstanceCollection* PurchasedGameItemInstances);
	void OnPurchaseGameOfferComplete(int TaskID, const struct FString& OfferId, TEnumAsByte<ENetworkErrorCode> ErrorCode, class UOnlineGameItemInstanceCollection* PurchasedGameItemInstances);
	void UpdateLocalWalletForLastPurchase(const struct FString& OfferId, bool bKeepLastCurrency);
	bool IsPurchaseListComplete();
	bool UpdateCompletedPurchaseListEntry(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode);
	bool IsPurchaseListIndexValid(int ListIndex);
	bool IsTaskFromPurchaseList(int TaskID, int* ListIndex);
	void OnRentGameOfferComplete(int TaskID, const struct FString& OfferId, TEnumAsByte<ENetworkErrorCode> ErrorCode, class UOnlineGameItemInstanceCollection* RentedGameItemInstances);
	void GotNewKeybind(int InDialogId, const struct FName& ButtonName);
	void WaitingOnKeybind();
	void OnWaitingDialogInputCaptured_Generic(int InDialogId, const struct FName& ButtonName);
	void ShowMessageDialog(const struct FString& Title, const struct FString& Message, int DialogPriority, bool bIsError, const struct FScriptDelegate& OnMessageDialogCloseDelegate, bool bIsConfirmation);
	void NotifyPartyInviteReceived(class UOnlineMailMessage_PartyInvite* Invite);
	void NotifyGameInviteReceived(class UOnlineMailMessage_GameInvite* Invite);
	void NotifyFriendRequestReceived(class UOnlineMailMessage_FriendRequest* friendRequest);
	void HideWaitingDialog(int DialogId);
	bool ShowWaitingDialog(const struct FString& Title, const struct FString& Message, bool bCancelButton, bool bShowSpinner, bool bModal, const struct FScriptDelegate& OnWaitingDialogClosedDelegate, const struct FScriptDelegate& OnInputCapturedDelegate);
	void OnMailMessageListRefreshed();
	void OnMailMessageDownloaded(class UOnlineMailMessage* MailMessage);
	void OnMailMessageDeleted(class UOnlineMailMessage* MailMessage);
	void OnMailMessageReceived(class UOnlineMailMessage* MailMessage);
	void OnMessageDialogClosed_ErrorJoinFriendServer(int InDialogId, int InButton);
	void OnJoinFriendServerCompleted(TEnumAsByte<ENetworkErrorCode> ErrorCode, bool bTravelingInitiated);
	void OnClanMembersChanged(TArray<struct FOnlineFriend> Members);
	void OnClanInfoChanged(class UOnlineClanInfo* ClanInfo);
	void OnFriendsListRefreshed();
	void OnFriendRemoved(const struct FUniqueNetId& PlayerID);
	void OnFriendChatMessageReceived(const struct FOnlineFriend& GameFriend, const struct FChatMessage& Message);
	void OnFriendPresenceUpdated(const struct FOnlineFriend& GameFriend);
	void QueueNotifyFriendOnline(class UGFxObject* FriendObj);
	void HandleQueuedFriendsOnlineNotifications();
	void OnFriendRequestDeclined(const struct FString& MessageId);
	void OnFriendRequestAccepted(TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FString& MessageId);
	void OnFriendRequestAcceptedByFriend(const struct FOnlineFriend& GameFriend);
	void OnFriendRequestSent(TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FString& Email, const struct FString& Callsign, const struct FUniqueNetId& PlayerID);
	void SetSocialConnecting(bool bConnecting);
	void SetSocialEnabled(bool bEnabled);
	void OnXMPPConnectionChanged(bool bConnected, bool bConnecting);
	class UGFxObject* GetGfxMailMessage(const struct FString& MessageId);
	void RemoveMailMessageHelper(const struct FString& MessageId);
	class UGFxObject* CreateNewMailMessageHelper(class UOnlineMailMessage* MailMessage);
	void RemoveFriendHelper(const struct FOnlineFriend& GameFriend);
	class UGFxObject* CreateNewFriendHelper(const struct FOnlineFriend& GameFriend, class UGFxObject* FriendArrayForUI, int Index);
	void SetupGfxFriendClanFromInfoStruct(class UGFxObject* ClanObject, const struct FClanInfoStruct& ClanInfo);
	void SetupGfxFriendClanFromInfo(class UGFxObject* ClanObject, class UOnlineClanInfo* ClanInfo);
	void SetupGfxFriendFromGameFriend(class UGFxObject* FriendObj, const struct FOnlineFriend& GameFriend);
	class UGFxObject* AddOrUpdateFriend(const struct FOnlineFriend& GameFriend);
	void AddGameItemInstanceForUI(class UOnlineGameItemInstance* Item, class UOnlineGameItemType* ItemType);
	class UGFxObject* AddOfflineGameItemInstanceForUI(const struct FString& InstanceID, const struct FString& ParentId, const struct FString& TypeId, const struct FString& MeteorName, int invType, int Index, bool bTestDrive);
	void InitializeHPBoostItemForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder);
	void InitializeXPBoostItemForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder);
	void SetColorForHudColor(int R, int G, int B, class UGFxObject* Temp);
	void InitializeHUDColorsForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder);
	void InitializeReticleGameItemForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder, int invType);
	void InitializeCockpitDecorationGameItemForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder, class UOnlineGameItemType** Item);
	void InitializeHealingDroneGameItemForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder, float BonusXpMultiplier);
	void InitializeTauntGameItemForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder);
	void InitializeCamoPatternGameItemForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder, float BonusXpMultiplier, const struct FString& IsMechUnlock);
	void InitializeAbilityGameItemForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder);
	void SetDelegate_OnCalloutFollowUrl(const struct FScriptDelegate& del);
	void OnCalloutFollowUrl(const struct FString& CalloutURL);
	void OnCalloutFollowUrlDelegate(const struct FString& CalloutURL);
	void ASInitUICallout(class UGFxObject* CalloutObj);
	void ASInitMarketCallout(class UGFxObject* CalloutObj);
	void InitializePrivateServerTokenForUI(class UOnlineGameItemType* Item, const struct FString& MeteorTypeID, const struct FString& MeteorName);
	void InitializeServerRegionForUI(class UOnlineGameItemType* RegionItem);
	void InitializeGameChallengeForUI(int invType, class UOnlineGameItem* GameChallengeItem);
	void InitializeUICalloutItemForUI(int invType, class UOnlineGameItem* CalloutItem);
	void InitializeEmblemGameItemForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, int StoreOrder);
	void InitializeItemGameItemForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder);
	void IntializeConsumablePassiveForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder);
	void IntializeConsumableTriggeredForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder);
	void InitializeConsumableBaseForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder, int invType, const struct FString& Type);
	void InitializeSecondaryWeaponGameItemForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder);
	void InitializePrimaryWeaponGameItemForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder);
	void InitializeMechSubRankObjectForUI(const struct FString& unlockName, const struct FString& MeteorTypeID, int xpThreshold, int MechRank, int forLevel, int forType);
	void InitializeMechSubRankObjectForUIHelper(int invType, class UOnlineGameItemType* Item, const struct FString& MeteorTypeID);
	void SetWeaponFloatValue(class UGFxObject* Weapon, const struct FString& valueName, float fValue, float Min, float Max);
	void InternalDataFill(int Index, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder, int invType, const struct FString& strForUI, class UClass* internalBaseClass, class UGFxObject** Internal);
	void InitializeInternalGameItemForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, const struct FString& supportedMechs, int StoreOrder);
	bool RemoveTestDriveMechFromUI(int NewMechSubType, struct FString* TestDriveItemtypeId);
	void SetDefaultUIPresetValues(class UGFxObject* UIPreset);
	int AddNewPlayerMechForUI();
	int AddEmptyPlayerMechForUI();
	void SetupMechBayOptimizations(class UClass* SubType, class UClass* MechInfoClass, class UGFxObject** MechBay);
	void InitializeMechSubTypeGameItemForUI(int Index, const struct FString& MeteorTypeID, const struct FString& MeteorName, int StoreOrder, class UOnlineGameItemType** Item);
	void InitializeMechPartGameItemForUIArray(int invType, int Index, int StoreOrder, float BonusXpMultiplier, TArray<struct FMechPartStyles>* styleStructList, struct FString* MeteorTypeID, struct FString* MeteorName, struct FString* TypeForUI, struct FString* supportedMechs, struct FString* replacedByID);
	void InitializeGameBundleCollectionForUI(class UOnlineGameBundleCollection* BundleCollection);
	void OnInitializeGameOfferCollectionForUICompleted();
	void InitializeGameOfferCollectionForUI(class UOnlineGameOfferCollection* OfferCollection);
	void StartInitializeGameOfferCollectionForUI(class UOnlineGameOfferCollection* OfferCollection);
	void InviteNextPlayerInQueue();
	void UpdateDataForUI(float DeltaTime);
	void InitializeFakeGameItemInstancesForUI();
	void InitializeGameItemInstanceCollectionForUI(class UOnlineGameItemInstanceCollection* ItemCollection);
	void InitializeOfflineGameItemInstanceCollectionForUI();
	void AddGameItemTypeForUI(int invType, int Index, int StoreOrder, const struct FString& MeteorTypeID, class UOnlineGameItemType* Item, float BonusXpMultiplier, struct FString* supportedMechs, struct FString* replacedByID, struct FString* MeteorName);
	void ParseSupportedMechClassesString(struct FString* supportedMechs);
	void SendGlobalItemDataToUI();
	void FixupItemSiblingReferences();
	void FixupInternalsSiblingReferences();
	void FixupMechSubRankReferences();
	void PostInitializeGameItemTypeCollectionForUI();
	class UGFxObject* CreateUpgradeItem(const struct FString& DisplayName, const struct FString& Description, const struct FString& IconPath);
	void InitializeFakeGameItemTypesForUI();
	void InitializeGameItemTypeCollectionForUI(class UOnlineGameItemTypeCollection* ItemCollection);
	void InitializeOfflineGameItemTypeCollectionForUI();
	void InitializeUIBarGraphRanges();
	void InitializeMechTypesForUI();
	void SetupMechTypeForUI(int iMechType, class UGFxObject** gfxMechType);
	void InitializeMechFamilyList();
	class UGFxObject* GFxGetClanMember(const struct FUniqueNetId& PlayerID);
	void InitializeLocalPlayerClanForUI();
	void OnReadClanMembersComplete_InitLocalPlayer(bool bWasSuccessful);
	bool MenuHasFocus();
	void InitializeLocalPlayerForUI();
	void InitializeOptimizations();
	void InitializeMechRankRewardList();
	void InitializePilotRankRewardList();
	void InitializeTechGroupList();
	void UpdateActiveHPBoost(class UOnlineGameItemInstance* instanceHP);
	void UpdateActiveXPBoost(class UOnlineGameItemInstance* instanceXP);
	void UpdateLocalPlayerActiveBoosts();
	int GetEquippedEmblem(bool bVerifyOwned, struct FString* EmblemInstanceId);
	int UpdateLocalPlayerEquippedEmblemForUI(bool bVerifyOwned);
	void SetLocalPlayerEquippedEmblem(class UOnlineGameItemInstance* itemInstance, class UOnlineGameItemType* ItemType);
	void InitializeChatHistory();
	void InitializeMessageList();
	void InitializeRecentPlayersList();
	void InitializeFriendsList();
	void LoadAchievementPanel(class UGFxObject* PanelData);
	void AddAchievementToPanelData(class UGFxObject* AchievementObj);
	void SetDelegate_RequestAchievementList(const struct FScriptDelegate& del);
	void RequestAchievementList(class UGFxObject* UserObj);
	void RequestAchievementListDelegate(class UGFxObject* UserObj);
	void SetupGfxAchievement(class UGFxObject* GfxAchievementObj, class UOnlineAchievementObject* Achievement, bool bUnlocked, const struct FOnlineUnlockedAchievement& UnlockedAchievement, class UOnlinePlayerStats* PlayerStats, bool bCompare, bool bUnlockedCompare, class UOnlinePlayerStats* PlayerStatsCompare, struct FOnlineUnlockedAchievement* UnlockedAchievementCompare);
	class UGFxObject* CreateNewAchievementHelper(class UOnlineAchievementObject* Achievement, bool bUnlocked, const struct FOnlineUnlockedAchievement& UnlockedAchievement, class UOnlinePlayerStats* PlayerStats, bool bCompare, bool bUnlockedCompare, class UOnlinePlayerStats* PlayerStatsCompare, struct FOnlineUnlockedAchievement* UnlockedAchievementCompare);
	void AddNewMechAgentDialogsToProgressionUnlock(class UClass* MechSubType, TArray<struct FSAgentDialogCardInfo>* outAgentDialogArray);
	void AddDataForSecondaryWeaponUpgradeUnlock(int WeaponIndex, TArray<struct FSProgressionUnlockDetails>* outUnlockDetails, struct FString* actionIconPath, struct FString* unlockExplanation);
	void AddDataForPrestigeWeaponUpgradeUnlock(int WeaponIndex, TArray<struct FSProgressionUnlockDetails>* outUnlockDetails, struct FString* actionIconPath, struct FString* unlockExplanation);
	void AddDataForAlternateWeaponUpgradeUnlock(int WeaponIndex, TArray<struct FSProgressionUnlockDetails>* outUnlockDetails, struct FString* actionIconPath, struct FString* unlockExplanation);
	void AddDataForPrimaryWeaponUpgradeUnlock(int WeaponIndex, TArray<struct FSProgressionUnlockDetails>* outUnlockDetails, struct FString* actionIconPath, struct FString* unlockExplanation);
	void GetDataForMechProgressionUnlocks(int presetIndex, TEnumAsByte<EMechProgressionFlags> Flag, TArray<struct FSProgressionUnlockDetails>* unlockDetails);
	struct FString STATIC_GetLoreTextForTechUnlocks(TEnumAsByte<ETechGroup_e> TechGroup, TEnumAsByte<ETechLevel_e> TechLevel);
	struct FString STATIC_GetDescriptionForTechUnlocks(TEnumAsByte<ETechGroup_e> TechGroup, TEnumAsByte<ETechLevel_e> TechLevel);
	int STATIC_GetArrayIndexForTechUnlocks(TEnumAsByte<ETechGroup_e> TechGroup, TEnumAsByte<ETechLevel_e> TechLevel);
	struct FString STATIC_GetIconPathForTechUnlocks(TEnumAsByte<ETechGroup_e> TechGroup, TEnumAsByte<ETechLevel_e> TechLevel);
	struct FString STATIC_GetDisplayNameForTechUnlocks(TEnumAsByte<ETechGroup_e> TechGroup, TEnumAsByte<ETechLevel_e> TechLevel);
	void GetDataForPilotProgressionUnlocks(int PilotLevel, TArray<struct FSProgressionUnlockDetails>* unlockDetails);
	class UGFxObject* CreateNewStatUnlock(const struct FString& DisplayName, const struct FString& itemIconPath, const struct FString& Description, const struct FString& loreText, const struct FString& Title, const struct FString& unlockExplanation, TEnumAsByte<EProgressionUnlockCategory> Category, const struct FString& actionIconPath);
	class UGFxObject* CreateNewStatUnlockHelper(struct FSProgressionUnlockDetails* unlockDetails);
	void GetUnlockedAP(const struct FPublicPlayerProfile& PlayerProfile, int* unlockedAP, int* totalAP);
	void SendAchievementsToUI(class UGFxObject* UserObj, bool bCompareWithLocalPlayer, struct FPublicPlayerProfile* PlayerProfile);
	void OnMessageDialogClosed_ErrorLogout(int InDialogId, int InButton);
	void OnLogoutCompleted(bool bWasSuccessful);
	void InitializeTwitchCallbacks();
	void InitializePresetIndependentItems();
	void SetAllFunctionDelegates();
	void ClearAllFunctionDelegates();
	void SetDelegate_ShowCockpit(const struct FScriptDelegate& del);
	void OnShowCockpit(bool bShow);
	void ShowCockpit(bool bShow);
	void SetDelegate_PartPreview(const struct FScriptDelegate& D);
	void PartPreviewHelper(class UGFxObject* PartGameItemType, bool bSinglePartSwap);
	void PartPreview(class UGFxObject* PartGameItemType);
	void PartPreviewDelegate(class UGFxObject* PartGameItemType);
	void SetDelegate_HUDColorPreview(const struct FScriptDelegate& D);
	void HUDColorPreview(class UGFxObject* Friend, class UGFxObject* neutral, class UGFxObject* Enemy, bool bTintReticle);
	void HUDColorPreviewDelegate(class UGFxObject* Friend, class UGFxObject* neutral, class UGFxObject* Enemy, bool bTintReticle);
	void DoApplyReticlesToAllMechs(const struct FString& primaryId, const struct FString& secondaryId);
	void DoApplyHUDColorsToAllMechs(const struct FString& FriendID, const struct FString& neutralId, const struct FString& foeId, bool bTintReticle);
	void SetDelegate_ApplyReticlesToAllMechs(const struct FScriptDelegate& D);
	void OnCloseApplyReticlesToAllMechs(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void ApplyReticlesToAllMechs(const struct FString& primaryId, const struct FString& secondaryId);
	void ApplyReticlesToAllMechsDelegate(const struct FString& primaryId, const struct FString& secondaryId);
	void SetDelegate_ApplyColorsToAllMechs(const struct FScriptDelegate& D);
	void OnCloseApplyColorsToAllMechs(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void ApplyColorsToAllMechs(const struct FString& FriendID, const struct FString& neutralId, const struct FString& foeId, bool bTintReticle);
	void ApplyColorsToAllMechsDelegate(const struct FString& FriendID, const struct FString& neutralId, const struct FString& foeId, bool bTintReticle);
	void SetDelegate_AccentPreview(const struct FScriptDelegate& D);
	void AccentPreview(float AccentValue, float hue, float saturation, bool bUpper, bool bMiddle, bool bLower, bool bArm);
	void AccentPreviewDelegate(float AccentValue, float hue, float saturation, bool bUpper, bool bMiddle, bool bLower, bool bArm);
	void SetDelegate_PreviewCamo(const struct FScriptDelegate& D);
	void PreviewCamo(class UGFxObject* PatternGameItemType, float saturation, float Scale, int Region);
	void PreviewCamoDelegate(class UGFxObject* PatternGameItemType, float saturation, float Scale, int Region);
	void SetDelegate_SetViewingReticleSampler(const struct FScriptDelegate& del);
	void SetViewingReticleSampler(bool bViewingReticleSampler);
	void SetViewingReticleSamplerDelegate(bool bViewingReticleSampler);
	void SetDelegate_SetViewingHUDSampler(const struct FScriptDelegate& del);
	void SetViewingHUDSampler(bool bViewingHUDSampler);
	void SetViewingHUDSamplerDelegate(bool bViewingHUDSampler);
	void SetDelegate_SetViewingDrones(const struct FScriptDelegate& del);
	void SetViewingDrones(bool bViewingDrones);
	void SetViewingDronesDelegate(bool bViewingDrones);
	void SetDelegate_MechRight(const struct FScriptDelegate& D);
	void MechRight(float Time);
	void MechRightDelegate(float Time);
	void SetDelegate_MechLeft(const struct FScriptDelegate& D);
	void MechLeft(float Time);
	void MechLeftDelegate(float Time);
	void SetDelegate_MechCenter(const struct FScriptDelegate& D);
	void MechCenter(float Time);
	void MechCenterDelegate(float Time);
	void SetDelegate_GaragePanelOpened(const struct FScriptDelegate& D);
	void GaragePanelOpenedDelegate();
	void GaragePanelOpened();
	void SetDelegate_GetVersionString(const struct FScriptDelegate& D);
	struct FString GetVersionStringDelegate();
	struct FString GetVersionString();
	void SetDelegate_GetClientOnly(const struct FScriptDelegate& D);
	bool GetClientOnlyDelegate();
	bool GetClientOnly();
	struct FUniqueNetId GetLocalPlayerID();
	bool IsLoggedIn(int ControllerId, bool bRequireOnlineLogin);
	bool IsPlayerLoggedIn();
	void SetLocalizedStringsForUI(class UGFxObject* LocObj);
	void OnClose();
	void OnCleanup(bool bUnload);
	void InitData();
	bool Start(bool StartPaused);
	void ShowCursor();
	void HideCursor();
	void AddUnlockObjectToPilotRank(class UGFxObject* UnlockObj);
	void AddTechGroupToPilotRank(class UGFxObject* TechGroupObj);
	void SetNavigationPath(const struct FString& navName);
	void AddNavigationLock(const struct FString& navName, bool bCalloutOnly, class UGFxObject* callbackScope, const struct FString& callbackFunctionName);
	void SetGaragePanelTutorial(const struct FString& panelName, bool bAutoShow, const struct FString& Title, class UGFxObject* labelArray, class UGFxObject* callbackScope, const struct FString& callbackFunctionName);
	void SetGaragePanelTutorialHelper(const struct FSGaragePanelTutorialCardInfo& cardInfo);
	void AddEducationCard(const struct FString& Title, class UGFxObject* labelArray, class UGFxObject* callbackScope, const struct FString& callbackFunctionName);
	void AddEducationCardHelper(const struct FSEducationalDialogCardInfo& cardInfo);
	void AddAgentCard(const struct FString& dialogText, const struct FString& agentImageType, const struct FString& agentName, const struct FString& secondaryImage, class UGFxObject* callbackScope, const struct FString& callbackFunctionName);
	void AddAgentCardHelper(const struct FSAgentDialogCardInfo& dialogInfo);
	void LoadStatsMech(class UGFxObject* MechStatsArray);
	void LoadStatsOverview(class UGFxObject* StatsOverview);
	void AddMechToStatsOverview(class UGFxObject* MechStats);
	void AddStatToOverview(const struct FString& Key, const struct FString& Value);
	void RefreshGameItemInstance();
	void AddGameItemInstanceAttribute(const struct FString& Key, const struct FString& Value);
	void AddGameOfferAttribute(const struct FString& Key, const struct FString& Value);
	void RefreshMessageListUI();
	void ClearMailMessages();
	void RemoveMailMessage(class UGFxObject* MailMessageObj);
	void AddMailMessage(class UGFxObject* MailMessageObj);
	void NotifyNewMailMessage(class UGFxObject* MailMessageObj);
	void ClearChatMessageHistory(class UGFxObject* FriendObj);
	class UGFxObject* FindChatMessageHistoryById(const struct FString& UserId);
	void AddChatMessageHistory(class UGFxObject* FriendObj, const struct FString& Message, bool bOutgoing, bool bSilentUpdate);
	void NotifyFriendChatMessageReceived(class UGFxObject* FriendObj, const struct FString& Message, bool Silent);
	void NotifyFriendOffline(class UGFxObject* FriendObj);
	void NotifyFriendOnline(class UGFxObject* FriendObj);
	void NotifyMultipleFriendsOnline(int NumFriends);
	void NotifyFriendRequestAccepted(class UGFxObject* FriendObj);
	void RefreshRecentPlayersList();
	void RefreshFriendsListUI();
	void SetSecondaryWeaponStatsRange_Accuracy(float Min, float Max);
	void SetSecondaryWeaponStatsRange_Range(float Min, float Max);
	void SetSecondaryWeaponStatsRange_HeatRate(float Min, float Max);
	void SetSecondaryWeaponStatsRange_FireRate(float Min, float Max);
	void SetSecondaryWeaponStatsRange_Damage(float Min, float Max);
	void SetPrimaryWeaponStatsRange_Accuracy(float Min, float Max);
	void SetPrimaryWeaponStatsRange_Range(float Min, float Max);
	void SetPrimaryWeaponStatsRange_HeatRate(float Min, float Max);
	void SetPrimaryWeaponStatsRange_FireRate(float Min, float Max);
	void SetPrimaryWeaponStatsRange_Damage(float Min, float Max);
	void SetMechStatsRange_EUCapacity(float Min, float Max);
	void SetMechStatsRange_Speed(float Min, float Max);
	void SetMechStatsRange_Health(float Min, float Max);
	void UpdateVoiceIndicators(float DeltaTime);
	void SetDelegate_TutorialDialogClosed(const struct FScriptDelegate& D);
	void SetupSetCurrentMechPresetIndexDelegate(const struct FScriptDelegate& D);
	void SetCurrentMechPresetIndex(int Index);
	void SetCurrentMechPresetIndexDelegate(int Index);
	void DialogClosedDelegate();
	int GFxGetNumFriends();
	void GFxClearFriends();
	class UGFxObject* GFxGetFriend(const struct FUniqueNetId& FriendID);
	class UGFxObject* GFxRemoveFriend(const struct FUniqueNetId& FriendID);
	void GFxAddFriend(const struct FUniqueNetId& FriendID, class UGFxObject* FriendObj);
};


// Class HawkenGame.R_GFx_ProjectedUI
// 0x004C (0x01B8 - 0x016C)
class UR_GFx_ProjectedUI : public UR_GFx_Base
{
public:
	struct FProjectionParams                           ProjectionConfig;                                         // 0x016C(0x0010) (Transient)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x017C(0x003C) UNKNOWN PROPERTY: MapProperty HawkenGame.R_GFx_ProjectedUI.ClipProjections

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GFx_ProjectedUI");
		return ptr;
	}


	void UpdateClipProjection(class UGFxObject* TargetClip);
	void InitializeClipProjection(class UGFxObject* TargetClip);
	void InitProjectionConfig();
	void Init(class ULocalPlayer* LocPlay);
	bool Start(bool bStartPaused);
	void ApplyCanvasViewMatrix(class UCanvas* C, class UGFxObject* TargetClip);
	bool StoreProjectionData(class UGFxObject* TargetClip, struct FClipProjectionData* ProjectionData);
	bool GetProjectionData(class UGFxObject* TargetClip, bool bCreateIfNeeded, struct FClipProjectionData* out_ProjectionData);
	bool HasProjectionData(class UGFxObject* TargetClip);
};


// Class HawkenGame.R_Gfx_VisorNative
// 0x0210 (0x03C8 - 0x01B8)
class UR_Gfx_VisorNative : public UR_GFx_ProjectedUI
{
public:
	TArray<struct FString>                             ColorTypeString;                                          // 0x01B8(0x000C) (NeedCtorLink)
	class UGFxObject*                                  RadarMC;                                                  // 0x01C4(0x0004)
	class UGFxObject*                                  IndicatorsMC;                                             // 0x01C8(0x0004)
	TArray<struct FIndicatorGeneric>                   RadarIndicators;                                          // 0x01CC(0x000C) (NeedCtorLink)
	TArray<struct FIndicatorGeneric>                   MapIndicators;                                            // 0x01D8(0x000C) (NeedCtorLink)
	TArray<struct FIndicatorGeneric>                   Indicators;                                               // 0x01E4(0x000C) (NeedCtorLink)
	struct FName                                       GameTypeName;                                             // 0x01F0(0x0008)
	struct FName                                       GameSubTypeName;                                          // 0x01F8(0x0008)
	unsigned long                                      bTeamGame : 1;                                            // 0x0200(0x0004)
	unsigned long                                      bOnlineGame : 1;                                          // 0x0200(0x0004)
	unsigned long                                      bUseFixedRadar : 1;                                       // 0x0200(0x0004)
	unsigned long                                      bInThirdPersonMode : 1;                                   // 0x0200(0x0004)
	unsigned long                                      bEnableRadarMC : 1;                                       // 0x0200(0x0004)
	struct FString                                     IndicatorType_Edge;                                       // 0x0204(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_None;                                       // 0x0210(0x000C) (Const, NeedCtorLink)
	float                                              LastIndicatorStringUpdateTime;                            // 0x021C(0x0004) (Transient)
	float                                              IndicatorUpdateRate;                                      // 0x0220(0x0004) (Const)
	float                                              ActorIndicatorFadeFactor;                                 // 0x0224(0x0004)
	float                                              LastRadarCacheUpdateTime;                                 // 0x0228(0x0004) (Transient)
	float                                              RadarCacheUpdateRate;                                     // 0x022C(0x0004) (Const)
	TArray<class AR_Turret_AntiAir*>                   AA_cached;                                                // 0x0230(0x000C) (NeedCtorLink)
	TArray<class AR_Turret_Station*>                   TS_cached;                                                // 0x023C(0x000C) (NeedCtorLink)
	TArray<class AR_EnergySource*>                     ES_cached;                                                // 0x0248(0x000C) (NeedCtorLink)
	TArray<class AR_BaseLifter*>                       BL_cached;                                                // 0x0254(0x000C) (NeedCtorLink)
	TArray<class AR_BaseReactor*>                      RE_cached;                                                // 0x0260(0x000C) (NeedCtorLink)
	TArray<class AR_BattleShip*>                       BS_cached;                                                // 0x026C(0x000C) (NeedCtorLink)
	TArray<class AR_BattleShipEngine*>                 BSE_cached;                                               // 0x0278(0x000C) (NeedCtorLink)
	TArray<class AR_Turret_Battleship*>                BST_cached;                                               // 0x0284(0x000C) (NeedCtorLink)
	TArray<class AR_Turret_Deployed*>                  TI_cached;                                                // 0x0290(0x000C) (NeedCtorLink)
	TArray<class AR_Radar_Base*>                       RI_cached;                                                // 0x029C(0x000C) (NeedCtorLink)
	TArray<class AR_Pickup*>                           EP_cached;                                                // 0x02A8(0x000C) (NeedCtorLink)
	TArray<class AR_Pickup*>                           HP_cached;                                                // 0x02B4(0x000C) (NeedCtorLink)
	TArray<class AR_Pickup*>                           HeatPickup_cached;                                        // 0x02C0(0x000C) (NeedCtorLink)
	TArray<class AR_NPC*>                              Drone_cached;                                             // 0x02CC(0x000C) (NeedCtorLink)
	TArray<class AR_ShockCoil*>                        STI_cached;                                               // 0x02D8(0x000C) (NeedCtorLink)
	TArray<class AR_RevivalMarker*>                    RevivalMarkers_cached;                                    // 0x02E4(0x000C) (NeedCtorLink)
	TArray<class AR_SpawningVolume*>                   SpawnVolumes_cached;                                      // 0x02F0(0x000C) (NeedCtorLink)
	class AR_NPC_Manager*                              NPC_cached;                                               // 0x02FC(0x0004)
	TArray<class ATutorialPOI*>                        POI_cached;                                               // 0x0300(0x000C) (NeedCtorLink)
	TArray<class AR_Turret_BaseMissile*>               BaseMissile_cached;                                       // 0x030C(0x000C) (NeedCtorLink)
	TArray<class AR_BaseReactor_MA*>                   BaseReactorMA_cached;                                     // 0x0318(0x000C) (NeedCtorLink)
	TArray<class AR_CTF_FlagBase*>                     FLB_cached;                                               // 0x0324(0x000C) (NeedCtorLink)
	struct FVector                                     BL_Loc_cached;                                            // 0x0330(0x000C)
	float                                              ScaleformWidth;                                           // 0x033C(0x0004)
	float                                              ScaleformHeight;                                          // 0x0340(0x0004)
	float                                              HACK_ProjectedIndicatorScale;                             // 0x0344(0x0004) (Transient)
	float                                              HACK_RiftProjectedIndicatorScale;                         // 0x0348(0x0004) (Config, GlobalConfig)
	float                                              RadarWorldRadius;                                         // 0x034C(0x0004)
	float                                              RadarRadius;                                              // 0x0350(0x0004)
	float                                              EdgeRadius;                                               // 0x0354(0x0004) (Const)
	float                                              MapTextureRadius;                                         // 0x0358(0x0004) (Const)
	class AR_Pawn*                                     Owner;                                                    // 0x035C(0x0004)
	class UCanvas*                                     HudCanvas;                                                // 0x0360(0x0004)
	struct FRotator                                    OwnerViewRotation;                                        // 0x0364(0x000C)
	struct FVector                                     OwnerLocation;                                            // 0x0370(0x000C)
	struct FVector                                     CameraLocation;                                           // 0x037C(0x000C)
	float                                              MaxEnemyRadarDistance[0x2];                               // 0x0388(0x0004) (Const)
	float                                              FiringEnemyRadarDistance[0x2];                            // 0x0390(0x0004) (Const)
	float                                              BoostingEnemyRadarDistance[0x2];                          // 0x0398(0x0004) (Const)
	float                                              RunningEnemyRadarDistance[0x2];                           // 0x03A0(0x0004) (Const)
	float                                              WalkingEnemyRadarDistance[0x2];                           // 0x03A8(0x0004) (Const)
	float                                              IdleEnemyRadarDistance[0x2];                              // 0x03B0(0x0004) (Const)
	float                                              MinimumPawnIndicatorDistance;                             // 0x03B8(0x0004) (Const)
	struct FString                                     EnergyUnitsCaption;                                       // 0x03BC(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Gfx_VisorNative");
		return ptr;
	}


	void SuperHackDrawBox(const struct FVector& UpperLeftCorner, const struct FVector& LowerRightCorner);
	void SuperHackDrawIndicator(const struct FVector& ScreenLoc, float IndWidth, float IndHeight, unsigned char R, unsigned char G, unsigned char B);
	void ToggleRadar();
	bool IsOwner(class AR_PawnNative* CheckPawn);
	void GetClosestBaseLifterLocation();
	void GetAntiAir();
	void UpdateMissileAssaultRadarCache();
	void UpdateSiegeRadarCache();
	void UpdateRadarCache();
	void DisplayObjectiveIndicator(const struct FVector& Location, const struct FString& Id, const struct FString& CaptionText, const struct FString& ObjectiveLabel, const struct FString& iconType, const struct FString& cColor, float fScale, bool bFocusedObjective, bool bShowControl, float ControlPercentage, float fAlpha, const struct FString& ProgressColor);
	void DisplayActorIndicator(const struct FVector& Location, const struct FString& DisplayName, class AActor* Actor, const struct FString& Type, const struct FString& IndColor, float HealthPercent, float Scale, float Width, float Height, float HealthMax);
	bool DisplayPawnIndicator(class AR_PawnNative* RP, bool bTeammate, bool bDistant, bool bIsHologram, const struct FVector& HologramLocation, const struct FVector& HologramIndicatorLocation);
	unsigned char GetViewTargetTeamNum();
	void DisableLocalIndicator(class UGFxObject* Clip);
	void RemoveLocalIndicator(class UGFxObject* Clip);
	class UGFxObject* AddCompactIndicator(class UGFxObject* Params, class UGFxObject* Labels);
	class UGFxObject* AddLocalDistantIndicator(class UGFxObject* Params, class UGFxObject* Labels);
	class UGFxObject* AddLocalIndicator(class UGFxObject* Params, class UGFxObject* Labels, bool bUseInfo);
	void DisableRadarIndicator(class UGFxObject* Clip);
	void RemoveRadarIndicator(class UGFxObject* Clip);
	class UGFxObject* AddRadarIndicator(class UGFxObject* Params, class UGFxObject* Labels, bool bUseInfo);
	bool SetIndicatorActiveTest(class UGFxObject* TargetIndicator, bool bVisible, bool bCachedVisible);
	float STATIC_GetOverlayDistance(class AR_PawnNative* P, bool bUseMinimumDistance, int OutOfSight, class AActor* SpecialLockonTarget);
	int GetLocalIndicator(const struct FString& Id, TEnumAsByte<EIndicatorType> Type, bool bUseInfo, int* bNewIndicator);
	void UpdateRadarIndicator(const struct FString& Id, const struct FVector& IndLoc, const struct FRotator& IndRot, bool bUseEdgeIndicators, const struct FString& Type, TEnumAsByte<EVisorColorType> cType, float maxRadarDist, bool bRotation, bool bShowHeightDiff, bool bFocusedObjective, bool bBlink, float RadiusIndication, const struct FString& ShortLabel);
	void UpdateActorRadarIndicator(class AActor* A, const struct FString& Type, TEnumAsByte<EVisorColorType> cType, float maxRadarDist, bool bRotation, bool bShowHeightDiff, bool bFocusedObjective, bool bBlink, float RadiusIndication, const struct FString& ShortLabel);
	float STATIC_GetRadarDistance(class AR_PawnNative* P, bool bRecentHitFire, int OutOfSight, class AActor* SpecialLockonTarget);
	float GetRadarRotation(const struct FRotator& Rotation, bool bForFixedMap);
	struct FVector GetRadarPos(const struct FVector& ActorPos, bool bFixedRadar, const struct FVector& Location, const struct FRotator& Rotation, bool bClampToEdge);
	void GetScreenSpaceWidthHeight(const struct FVector& Location, float* Width, float* Height);
	bool WorldToScreenPos(const struct FVector& WorldPos, class UCanvas* ProjectionCanvas, bool bClipToScreen, bool bDoBehindCheck, bool bApplyGFxScaling, struct FVector* out_ScreenLoc);
	struct FVector STATIC_GetRectangleEdge(float Angle, float aspectRatioY, int Width, int Height);
	float GetObjectDir(const struct FVector& pos);
	float GetRemoteDir(const struct FVector& pos, const struct FVector& OwnerPos, const struct FRotator& OwnerRot, class UCanvas* ProjectionCanvas);
	void SetClipData(class UGFxObject* Clip, const struct FVector& ScreenLoc, bool changeVisibility, bool newVisible, float NewScale, float NewAlpha, float NewRotation);
	struct FVector4 PixelToScreen(struct FVector2D* PixelPosition);
	struct FVector2D ScreenToPixel(struct FVector4* ScreenPosition);
};


// Class HawkenGame.R_GraphicsOptions
// 0x00A8 (0x00E4 - 0x003C)
class UR_GraphicsOptions : public UObject
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                             // 0x003C(0x0004) (Const, Native, NoExport)
	struct FCommonSettingsGroup                        StoredCommonSettings;                                     // 0x0040(0x001C)
	TEnumAsByte<ESystemPhysXCapability>                SysPhysXCaps;                                             // 0x005C(0x0001) (Const)
	TEnumAsByte<EGraphicDetail>                        TextureDetail;                                            // 0x005D(0x0001)
	TEnumAsByte<EGraphicDetail>                        GraphicsQuality;                                          // 0x005E(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x005F(0x0001) MISSED OFFSET
	unsigned long                                      bNeedFirstBootGraphicsWarning : 1;                        // 0x0060(0x0004) (Config, GlobalConfig)
	unsigned long                                      bNotifyOldNvidiaDriver : 1;                               // 0x0060(0x0004) (Config, GlobalConfig)
	unsigned long                                      bUseVSync : 1;                                            // 0x0060(0x0004)
	unsigned long                                      bBorderless : 1;                                          // 0x0060(0x0004)
	unsigned long                                      bFullScreen : 1;                                          // 0x0060(0x0004)
	unsigned long                                      bAllowImageGrain : 1;                                     // 0x0060(0x0004)
	unsigned long                                      bAllowStatic : 1;                                         // 0x0060(0x0004)
	unsigned long                                      bUseCustomSettings : 1;                                   // 0x0060(0x0004)
	unsigned long                                      bAllowStaticDecals : 1;                                   // 0x0060(0x0004)
	unsigned long                                      bAllowDynamicDecals : 1;                                  // 0x0060(0x0004)
	unsigned long                                      bAllowUnbatchedDecals : 1;                                // 0x0060(0x0004)
	unsigned long                                      bAllowDynamicShadows : 1;                                 // 0x0060(0x0004)
	unsigned long                                      bAllowLightEnvironmentShadows : 1;                        // 0x0060(0x0004)
	unsigned long                                      bAllowMotionBlur : 1;                                     // 0x0060(0x0004)
	unsigned long                                      bAllowDepthOfField : 1;                                   // 0x0060(0x0004)
	unsigned long                                      bAllowAmbientOcclusion : 1;                               // 0x0060(0x0004)
	unsigned long                                      bAllowBloom : 1;                                          // 0x0060(0x0004)
	unsigned long                                      bAllowLightShafts : 1;                                    // 0x0060(0x0004)
	unsigned long                                      bAllowDistortion : 1;                                     // 0x0060(0x0004)
	unsigned long                                      bAllowParticleDistortionDropping : 1;                     // 0x0060(0x0004)
	unsigned long                                      bAllowLensFlares : 1;                                     // 0x0060(0x0004)
	unsigned long                                      bAllowRadialBlur : 1;                                     // 0x0060(0x0004)
	unsigned long                                      bAllowPostprocessMLAA : 1;                                // 0x0060(0x0004)
	unsigned long                                      bAllowPostprocessAA : 1;                                  // 0x0060(0x0004)
	unsigned long                                      bAllowPostprocess : 1;                                    // 0x0060(0x0004)
	unsigned long                                      bAllowHighQualityMaterials : 1;                           // 0x0060(0x0004)
	unsigned long                                      bEnableBranchingPCFShadows : 1;                           // 0x0060(0x0004)
	unsigned long                                      bAllowWholeSceneDominantShadows : 1;                      // 0x0060(0x0004)
	unsigned long                                      bUseConservativeShadowBounds : 1;                         // 0x0060(0x0004)
	unsigned long                                      bAllowFracturedDamage : 1;                                // 0x0060(0x0004)
	unsigned long                                      bSmoothFrameRate : 1;                                     // 0x0060(0x0004)
	unsigned long                                      bDX11 : 1;                                                // 0x0060(0x0004)
	int                                                CurrentResX;                                              // 0x0064(0x0004)
	int                                                CurrentResY;                                              // 0x0068(0x0004)
	int                                                DesiredResX;                                              // 0x006C(0x0004)
	int                                                DesiredResY;                                              // 0x0070(0x0004)
	float                                              DecalCullDistanceScale;                                   // 0x0074(0x0004)
	int                                                MaxFilterBlurSampleCount;                                 // 0x0078(0x0004)
	int                                                SkeletalMeshLODBias;                                      // 0x007C(0x0004)
	int                                                DetailMode;                                               // 0x0080(0x0004)
	float                                              MaxDrawDistanceScale;                                     // 0x0084(0x0004)
	int                                                MaxAnisotropy;                                            // 0x0088(0x0004)
	int                                                MinShadowResolution;                                      // 0x008C(0x0004)
	int                                                MinPreShadowResolution;                                   // 0x0090(0x0004)
	int                                                MaxShadowResolution;                                      // 0x0094(0x0004)
	int                                                MaxWholeSceneDominantShadowResolution;                    // 0x0098(0x0004)
	float                                              ShadowTexelsPerPixel;                                     // 0x009C(0x0004)
	float                                              FractureCullDistanceScale;                                // 0x00A0(0x0004)
	TArray<struct FScriptDelegate>                     ResizedDelegates;                                         // 0x00A4(0x000C) (NeedCtorLink)
	int                                                PhysXLevel;                                               // 0x00B0(0x0004)
	TArray<struct FScreenResolutionElement>            AvailableResolutions;                                     // 0x00B4(0x000C) (NeedCtorLink)
	float                                              MinResX;                                                  // 0x00C0(0x0004) (Const)
	float                                              MinResY;                                                  // 0x00C4(0x0004) (Const)
	TArray<struct FPhysXSettings>                      PhysXSettingsPerLevel;                                    // 0x00C8(0x000C) (Config, GlobalConfig, NeedCtorLink)
	struct FPointer                                    SystemSettingsObj;                                        // 0x00D4(0x0004) (Const, Native, Transient)
	struct FScriptDelegate                             __OnResized__Delegate;                                    // 0x00D8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GraphicsOptions");
		return ptr;
	}


	void PrintAllResolutions();
	void RestoreCommonSettings();
	void SaveCommonSettings();
	bool IsCustomGraphicsEnabled();
	void CopyTo(class UR_GraphicsOptions* RGR);
	void ApplyPhysXSettings(int NewPhysXLevel);
	void UpdatePhysXSettings();
	void Initialize();
	void ClearResizedDelegate(const struct FScriptDelegate& Delegate);
	void AddResizedDelegate(const struct FScriptDelegate& Delegate);
	void OnResized();
	void ApplyVideoSettings();
	void PopulatePresetsForCustomGraphics();
	bool LoadSettingsBucket(int DesiredBucketQuality);
	void DetermineAvailableResolutions();
	void DetermineSysPhysXCapability();
	void GetVideoSettings();
	void InitSystemSettingsObjReference();
};


// Class HawkenGame.R_EntryGraphicsOptions
// 0x0000 (0x00E4 - 0x00E4)
class UR_EntryGraphicsOptions : public UR_GraphicsOptions
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_EntryGraphicsOptions");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_Base
// 0x00DC (0x0118 - 0x003C)
class UR_Internal_Base : public UObject
{
public:
	TArray<struct FInternalModification>               Modification;                                             // 0x003C(0x000C) (NeedCtorLink)
	struct FName                                       RelatedClassName;                                         // 0x0048(0x0008)
	struct FString                                     DisplayName;                                              // 0x0050(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     tooltipText;                                              // 0x005C(0x000C) (Const, Localized, NeedCtorLink)
	struct FName                                       InternalTrackingName;                                     // 0x0068(0x0008) (Const)
	struct FString                                     HudIconName_None;                                         // 0x0070(0x000C) (Const, NeedCtorLink)
	struct FString                                     HudIconName_Healing;                                      // 0x007C(0x000C) (Const, NeedCtorLink)
	struct FString                                     HudIconName_Buffed;                                       // 0x0088(0x000C) (Const, NeedCtorLink)
	struct FString                                     HudIconName_Debuffed;                                     // 0x0094(0x000C) (Const, NeedCtorLink)
	struct FString                                     HudIconName_Speed;                                        // 0x00A0(0x000C) (Const, NeedCtorLink)
	struct FString                                     HudIconName_Rate;                                         // 0x00AC(0x000C) (Const, NeedCtorLink)
	struct FString                                     HudIconName_Fuel;                                         // 0x00B8(0x000C) (Const, NeedCtorLink)
	struct FString                                     HudIconName_Armor;                                        // 0x00C4(0x000C) (Const, NeedCtorLink)
	struct FString                                     HudIconName_Explosive;                                    // 0x00D0(0x000C) (Const, NeedCtorLink)
	struct FString                                     HudIconName_Air;                                          // 0x00DC(0x000C) (Const, NeedCtorLink)
	struct FString                                     HudIconName_Accuracy;                                     // 0x00E8(0x000C) (Const, NeedCtorLink)
	struct FString                                     HudIconName_Target;                                       // 0x00F4(0x000C) (Const, NeedCtorLink)
	TEnumAsByte<EHudIconType>                          IconTypeForHUD;                                           // 0x0100(0x0001)
	TEnumAsByte<ETechGroup_e>                          TechGroup;                                                // 0x0101(0x0001) (Const)
	TEnumAsByte<ETechLevel_e>                          TechLevel;                                                // 0x0102(0x0001) (Const)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0103(0x0001) MISSED OFFSET
	class UTexture2D*                                  StoreIcon;                                                // 0x0104(0x0004) (Const)
	int                                                SlotSize;                                                 // 0x0108(0x0004) (Const)
	int                                                MaxSlots;                                                 // 0x010C(0x0004) (Const)
	class UClass*                                      statusEffectClass;                                        // 0x0110(0x0004) (Const)
	class UClass*                                      StatusEffectClass2;                                       // 0x0114(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_Base");
		return ptr;
	}


	struct FString STATIC_GetIconNameForType(TEnumAsByte<EHudIconType> iconType);
	struct FString STATIC_GetHUDIconName();
	float STATIC_GetValue(int iValIndex);
	void STATIC_GetLocalizedDescriptions(struct FString* positiveDescription, struct FString* negativeDescription);
	void STATIC_ApplyToPawn(class AR_Pawn* P, class UClass* RIB);
};


// Class HawkenGame.R_Item_Base
// 0x0094 (0x0268 - 0x01D4)
class AR_Item_Base : public AActor
{
public:
	int                                                NumItem;                                                  // 0x01D4(0x0004) (Net)
	int                                                LastNumItem;                                              // 0x01D8(0x0004)
	unsigned long                                      bInfinite : 1;                                            // 0x01DC(0x0004) (Net)
	unsigned long                                      bDisabled : 1;                                            // 0x01DC(0x0004)
	unsigned long                                      bServerActivateOnly : 1;                                  // 0x01DC(0x0004)
	unsigned long                                      bPassiveItem : 1;                                         // 0x01DC(0x0004)
	unsigned long                                      bItemRegeneratorActive : 1;                               // 0x01DC(0x0004) (Net)
	unsigned long                                      bActivateOnRelease : 1;                                   // 0x01DC(0x0004)
	float                                              CooldownTime;                                             // 0x01E0(0x0004)
	float                                              RegenerationSeconds;                                      // 0x01E4(0x0004) (Net)
	float                                              RegenerationSecondsPropDefault;                           // 0x01E8(0x0004)
	float                                              GlobalItemCooldownTime;                                   // 0x01EC(0x0004) (Const)
	float                                              GlobalItemCooldownTimeRegenerator;                        // 0x01F0(0x0004) (Const)
	struct FString                                     DisplayName;                                              // 0x01F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0200(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     tooltipText;                                              // 0x020C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     loreText;                                                 // 0x0218(0x000C) (Const, Localized, NeedCtorLink)
	class UTexture2D*                                  HUDIcon;                                                  // 0x0224(0x0004) (Const)
	class UTexture2D*                                  StoreIcon;                                                // 0x0228(0x0004) (Const)
	struct FName                                       ItemStat;                                                 // 0x022C(0x0008)
	class USoundCue*                                   ItemFireSound;                                            // 0x0234(0x0004)
	struct FName                                       ItemTrackingName;                                         // 0x0238(0x0008) (Const)
	int                                                SlotSize;                                                 // 0x0240(0x0004) (Const)
	int                                                MaxSlots;                                                 // 0x0244(0x0004) (Const)
	float                                              RegenerationReductionPerEmptySlot;                        // 0x0248(0x0004) (Const)
	TEnumAsByte<ETechGroup_e>                          TechGroup;                                                // 0x024C(0x0001) (Const)
	TEnumAsByte<ETechLevel_e>                          TechLevel;                                                // 0x024D(0x0001) (Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x024E(0x0002) MISSED OFFSET
	struct FString                                     PropSheetName;                                            // 0x0250(0x000C) (NeedCtorLink)
	int                                                PropSheetIdx;                                             // 0x025C(0x0004)
	class UClass*                                      MyProjectileClass;                                        // 0x0260(0x0004)
	class AActor*                                      DeployedItem;                                             // 0x0264(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Base");
		return ptr;
	}


	void InitForAI(class AHawkenAi_ControllerBase* HawkenAI);
	bool OverridesCamera();
	void ScaleItemRegen(float regenMultiplier);
	float GetGlobalItemCooldown();
	void ResetItem();
	int STATIC_GetMaxItems();
	int STATIC_GetItemSlotSize(int ItemIndex);
	class UClass* STATIC_GetItemClassForIndex(int ItemIndex);
	unsigned char STATIC_GetItemIndexForClass(class UClass* ItemClass);
	class AR_Projectile* FireProjectile(class UClass* ProjectileClass, class AR_Pawn* Activator, float SpeedScale);
	float GetHealthPercent();
	void PlayFiringSound();
	void SetInfinite(bool newVal);
	void OnGet(class AR_Pawn* Activator);
	void RegenItem();
	float GetRechargeTimeRemaining(class AR_Pawn* Activator);
	float GetRechargePercentRemaining(class AR_Pawn* Activator);
	bool IsDepleted();
	int GiveCharges(int numChargesToGive);
	void ModifyCooldownTimer(float SecondsToAdd);
	void OnItemUsed(class AR_Pawn* Activator);
	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
	bool ConditionalUseItem(class AR_Pawn* ItemUser, float ChargeTime);
	bool CanActivate(class AR_Pawn* Activator, bool bSkipRoleCheck);
	void TriggerCooldown();
	bool IsCoolingDown();
	void OnCooldownCompleted();
	void ReplicatedEvent(const struct FName& VarName);
	void SetItemProperties(class UR_ItemDatabaseProps* Props);
	void PreBeginPlay();
};


// Class HawkenGame.R_ItemDatabaseProps
// 0x3810 (0x384C - 0x003C)
class UR_ItemDatabaseProps : public UObject
{
public:
	TArray<struct FString>                             IgnoreProps;                                              // 0x003C(0x000C) (NeedCtorLink)
	struct FItemDBPropertiesStore                      GameTypeProperties[0x200];                                // 0x0048(0x001C) (NeedCtorLink)
	int                                                NumGameTypePropertyStores;                                // 0x3848(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ItemDatabaseProps");
		return ptr;
	}


	void AddPropsFromOnlineItemArray(class UOnlineGameItemType** Item);
	void UpdatePropSheetsFromItemCollection(class UOnlineGameItemTypeCollection* ItemCollection);
	void PrintAll();
	void PrintProperties(struct FItemDBPropertiesStore* TypeProps);
	void STATIC_ValidateProperties(TArray<struct FString> ValidPropNameList, struct FItemDBPropertiesStore* WeapClassProps);
	bool STATIC_IsValidPropName(const struct FString& PropName, TArray<struct FString>* ValidPropNameList);
	bool STATIC_IsInIgnoreList(const struct FString& PropName);
	bool GetBoolProp(int SheetIdx, const struct FString& PropName, bool defaultVal);
	float GetProp(int SheetIdx, const struct FString& PropName, int upgradeFlags, float defaultVal);
	float GetPropLookup(const struct FString& Typename, const struct FString& PropName, int Level, float defaultVal);
	int GetPropSheetForName(const struct FString& Typename);
	bool ReadFromFile();
	bool WriteToFile();
	void Clear();
};


// Class HawkenGame.R_LanguageOptions
// 0x000C (0x0048 - 0x003C)
class UR_LanguageOptions : public UObject
{
public:
	TArray<struct FSLanguage>                          LanguageList;                                             // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_LanguageOptions");
		return ptr;
	}


	void SetCurrentLanguage(int Index);
};


// Class HawkenGame.R_LocalPlayer
// 0x0434 (0x07E0 - 0x03AC)
class UR_LocalPlayer : public ULocalPlayer
{
public:
	int                                                mechXPForTier[0x7];                                       // 0x03AC(0x0004) (Const)
	int                                                OptimizationSlotsLockedAtTier[0x7];                       // 0x03C8(0x0004) (Const)
	int                                                ItemSlotsLockedAtTier[0x7];                               // 0x03E4(0x0004) (Const)
	int                                                InternalsSlotsLockedAtTier[0x7];                          // 0x0400(0x0004) (Const)
	int                                                UnlockTier_AltPrimary;                                    // 0x041C(0x0004) (Const)
	int                                                UnlockTier_PrestigePrimary;                               // 0x0420(0x0004) (Const)
	int                                                UnlockTier_AltLegs;                                       // 0x0424(0x0004) (Const)
	int                                                UnlockTier_AltArms;                                       // 0x0428(0x0004) (Const)
	int                                                UnlockTier_AltMiddle;                                     // 0x042C(0x0004) (Const)
	int                                                UnlockTier_AltTorso;                                      // 0x0430(0x0004) (Const)
	int                                                UnlockTier_VetCamo;                                       // 0x0434(0x0004) (Const)
	int                                                UnlockTier_GlobalItem;                                    // 0x0438(0x0004) (Const)
	int                                                UnlockTier_Mech;                                          // 0x043C(0x0004) (Const)
	struct FString                                     AttributeName_AltWeapon;                                  // 0x0440(0x000C) (Const, NeedCtorLink)
	struct FString                                     AttributeName_PrestigeWeapon;                             // 0x044C(0x000C) (Const, NeedCtorLink)
	struct FString                                     AttributeName_AltLegs;                                    // 0x0458(0x000C) (Const, NeedCtorLink)
	struct FString                                     AttributeName_AltArms;                                    // 0x0464(0x000C) (Const, NeedCtorLink)
	struct FString                                     AttributeName_AltMiddle;                                  // 0x0470(0x000C) (Const, NeedCtorLink)
	struct FString                                     AttributeName_AltTorso;                                   // 0x047C(0x000C) (Const, NeedCtorLink)
	struct FString                                     AttributeName_VetCamo;                                    // 0x0488(0x000C) (Const, NeedCtorLink)
	struct FString                                     AttributeName_GlobalItem;                                 // 0x0494(0x000C) (Const, NeedCtorLink)
	struct FString                                     AttributeName_MechUnlock;                                 // 0x04A0(0x000C) (Const, NeedCtorLink)
	class UTexture2D*                                  MechTierStartIcon[0x7];                                   // 0x04AC(0x0004)
	class UTexture2D*                                  MechTierEndIcon[0x7];                                     // 0x04C8(0x0004)
	int                                                PilotXPForLevel[0x1F];                                    // 0x04E4(0x0004)
	int                                                OptimizationPointsPerLevel[0x1F];                         // 0x0560(0x0004)
	int                                                FakePilotLevelAchievementToast[0x1F];                     // 0x05DC(0x0004)
	TArray<struct FSPilotLevelUnlock>                  PilotLevelUnlocks;                                        // 0x0658(0x000C) (NeedCtorLink)
	class UTexture2D*                                  PilotRankIcon_Small[0x1F];                                // 0x0664(0x0004)
	class UTexture2D*                                  PilotRankIcon_Large[0x1F];                                // 0x06E0(0x0004)
	TEnumAsByte<ETechGroup_e>                          GroupUnlocked[0x1F];                                      // 0x075C(0x0001) (Const)
	TEnumAsByte<ETechLevel_e>                          TechLevelUnlocked[0x1F];                                  // 0x077B(0x0001) (Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x079A(0x0002) MISSED OFFSET
	int                                                BattleFieldEfficiencyUnlockLevel;                         // 0x079C(0x0004) (Const)
	TArray<struct FString>                             TechGroupTrackingName;                                    // 0x07A0(0x000C) (Const, NeedCtorLink)
	TArray<struct FString>                             TechLevelTrackingName;                                    // 0x07AC(0x000C) (Const, NeedCtorLink)
	class UAudioComponent*                             MusicComp;                                                // 0x07B8(0x0004) (ExportObject, Component, EditInline)
	class USoundCue*                                   MusicSoundCue;                                            // 0x07BC(0x0004)
	float                                              MusicFadeInTime;                                          // 0x07C0(0x0004)
	float                                              MusicFadeInVolumeLevel;                                   // 0x07C4(0x0004)
	float                                              MusicFadeOutTime;                                         // 0x07C8(0x0004)
	float                                              MusicFadeOutVolumeLevel;                                  // 0x07CC(0x0004)
	unsigned long                                      bMusicPersistentAcrossLevels : 1;                         // 0x07D0(0x0004)
	unsigned long                                      bMusicAutoPlay : 1;                                       // 0x07D0(0x0004)
	struct FString                                     LastSelectedMechId;                                       // 0x07D4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_LocalPlayer");
		return ptr;
	}


	int STATIC_GetPilotLevelMechUnlocksAt(int MechSubType);
	struct FString STATIC_GetLargePilotRankIconPath(int Rank);
	struct FString STATIC_GetLargePilotRankIconPathFromPoints(int pilotXP);
	struct FString STATIC_GetSmallPilotRankIconPath(int Rank);
	struct FString STATIC_GetSmallPilotRankIconPathFromPoints(int pilotXP);
	bool GetAchievementProgress(class UOnlineAchievementObject* AchievementObject, class UOnlinePlayerStats* PlayerStats, int* OutStartValue, int* OutTargetValue, int* OutCurrentValue);
	bool IsMenuMusicPlaying();
	void StopMusicTrack(float FadeOutTime, float FadeOutVolumeLevel);
	void PlayMusicTrack(float FadeInTime, float FadeInVolumeLevel);
	int STATIC_GetInternalsSlotsForMechTier(int MechTier);
	int STATIC_GetItemSlotsForMechTier(int MechTier);
	int STATIC_GetOptimizationPointsForPilotLevel(int PilotLevel);
	int STATIC_GetOptimizationPointsForPilotXP(int pilotXP);
	void STATIC_GetBoostsForXP(int pilotXP, bool bPrintLog, int* OptimizationPoints);
	bool STATIC_IsEquipmentUnlockedForXP(int OldXP, int NewXP);
	int STATIC_GetClampedXP(int mechXP);
	bool STATIC_IsMechTierFilledByXp(int MechTier, int mechXP);
	int STATIC_GetMechLevelForXP(int mechXP);
	int STATIC_GetUnlockTierForAlternateItemString(const struct FString& altItemString);
	struct FString STATIC_GetAlternateItemAttributeString(int invType);
	bool STATIC_DoesFreeMechUnlockAtTier(int MechTier);
	bool STATIC_DoesGlobalItemUnlockAtTier(int MechTier);
	bool STATIC_DoesVeteranCamoUnlockAtTier(int MechTier);
	bool STATIC_DoesAlternateTorsoUnlockAtTier(int MechTier);
	bool STATIC_DoesAlternateMiddleUnlockAtTier(int MechTier);
	bool STATIC_DoesAlternateArmsUnlockAtTier(int MechTier);
	bool STATIC_DoesAlternateLegsUnlockAtTier(int MechTier);
	bool STATIC_DoesPrestigeWeaponUnlockAtTier(int MechTier);
	bool STATIC_DoesAlternateWeaponUnlockAtTier(int MechTier);
	bool STATIC_IsFreeMechLockedForTier(int MechTier);
	bool STATIC_IsGlobalItemLockedForTier(int MechTier);
	bool STATIC_IsVeteranCamoLockedForTier(int MechTier);
	bool STATIC_IsAlternateTorsoLockedForTier(int MechTier);
	bool STATIC_IsAlternateMiddleLockedForTier(int MechTier);
	bool STATIC_IsAlternateArmsLockedForTier(int MechTier);
	bool STATIC_IsAlternateLegsLockedForTier(int MechTier);
	bool STATIC_IsPrestigeWeaponLockedForTier(int MechTier);
	bool STATIC_IsAlternateWeaponLockedForTier(int MechTier);
	bool STATIC_HasTechUnlockChanged(int NewPilotLevel);
	int STATIC_GetPilotLevelForTechUnlock(TEnumAsByte<ETechGroup_e> Group, TEnumAsByte<ETechLevel_e> Level);
	bool STATIC_IsTechUnlockedForRank(int PilotLevel, TEnumAsByte<ETechGroup_e> Group, TEnumAsByte<ETechLevel_e> Level);
	int STATIC_GetMaxPilotXPForLevel(int PilotLevel);
	int STATIC_GetMinPilotXPForLevel(int PilotLevel);
	int STATIC_GetPilotLevel(int PlayerXP);
	int STATIC_GetMaxMechXP();
	bool GetIsPilotProgressionConditionMet(int pilotLevelCondition, int pilotLevelToCheck);
	bool GetIsPilotProgressionFlagSet(int PilotLevel);
	bool GetIsNewUserExperienceConditionMet(TEnumAsByte<ENewUserExperienceFlags> Flag);
	bool GetIsNewUserExperienceFlagSet(TEnumAsByte<ENewUserExperienceFlags> Flag);
	int GetPilotLevelFromStat();
};


// Class HawkenGame.R_MapInfo
// 0x0020 (0x005C - 0x003C)
class UR_MapInfo : public UMapInfo
{
public:
	struct FString                                     overheadMapTexture;                                       // 0x003C(0x000C) (NeedCtorLink, Deprecated)
	class UTexture*                                    OverheadMapTextureRef;                                    // 0x0048(0x0004) (Edit)
	float                                              DeathmatchRespawnDelay;                                   // 0x004C(0x0004) (Edit)
	float                                              TeamDeathmatchRespawnDelay;                               // 0x0050(0x0004) (Edit)
	float                                              MissileAssaultRespawnDelay;                               // 0x0054(0x0004) (Edit)
	float                                              SiegeRespawnDelay;                                        // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MapInfo");
		return ptr;
	}

};


// Class HawkenGame.R_MechInfo_Base
// 0x01B0 (0x01EC - 0x003C)
class UR_MechInfo_Base : public UObject
{
public:
	unsigned long                                      bFastMode : 1;                                            // 0x003C(0x0004)
	struct FString                                     DisplayName;                                              // 0x0040(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x004C(0x000C) (Const, Localized, NeedCtorLink)
	class UTexture2D*                                  Icon;                                                     // 0x0058(0x0004)
	TArray<struct FThrusterType>                       ThrusterTypes;                                            // 0x005C(0x000C) (NeedCtorLink)
	TArray<struct FDroneType>                          DroneTypes;                                               // 0x0068(0x000C) (NeedCtorLink)
	TArray<struct FCockpitDecoration>                  CockpitDecorationList;                                    // 0x0074(0x000C) (NeedCtorLink)
	TArray<struct FHealEffectTimeArray>                HealEffectTimes;                                          // 0x0080(0x000C) (NeedCtorLink)
	TArray<struct FName>                               TauntAnimName;                                            // 0x008C(0x000C) (NeedCtorLink)
	TArray<struct FMechArmor>                          MechArmorSetA;                                            // 0x0098(0x000C) (NeedCtorLink)
	TArray<struct FMechSkelDef>                        MechSkels;                                                // 0x00A4(0x000C) (NeedCtorLink)
	class UPhysicsAsset*                               DefaultPhysicsAsset;                                      // 0x00B0(0x0004)
	class USkeletalMesh*                               DefaultCockpitMesh;                                       // 0x00B4(0x0004)
	class USkeletalMesh*                               OculusCockpitMesh;                                        // 0x00B8(0x0004)
	TArray<class UStaticMesh*>                         DefaultCracksMesh;                                        // 0x00BC(0x000C) (NeedCtorLink)
	class UAnimTree*                                   DefaultAnimTree;                                          // 0x00C8(0x0004)
	class UAnimTree*                                   DefaultAnimTreeFPS;                                       // 0x00CC(0x0004)
	class UAnimSet*                                    DefaultAnimSet;                                           // 0x00D0(0x0004)
	class UAnimSet*                                    DefaultAnimSetFPS;                                        // 0x00D4(0x0004)
	class USkeletalMesh*                               DestroyedMesh;                                            // 0x00D8(0x0004)
	float                                              BoostBlurAmount;                                          // 0x00DC(0x0004)
	float                                              IndicatorWidth;                                           // 0x00E0(0x0004)
	float                                              IndicatorHeight;                                          // 0x00E4(0x0004)
	float                                              BumpDamageFactor;                                         // 0x00E8(0x0004)
	float                                              FallingDamageMultiplier;                                  // 0x00EC(0x0004)
	float                                              CrushDamageMultiplier;                                    // 0x00F0(0x0004)
	float                                              TimeAfterJumpingToAcceptDrop;                             // 0x00F4(0x0004)
	float                                              ThrusterHeightGainInterpTime;                             // 0x00F8(0x0004)
	float                                              ThrusterHeightLossInterpTime;                             // 0x00FC(0x0004)
	float                                              ExplosionDecalSize;                                       // 0x0100(0x0004)
	class UParticleSystem*                             DeathExplosionEffect;                                     // 0x0104(0x0004)
	class UClass*                                      DeathLightClass;                                          // 0x0108(0x0004)
	float                                              DamageMultiplier[0x3];                                    // 0x010C(0x0004)
	float                                              DamageMultiplierReduction[0x3];                           // 0x0118(0x0004)
	float                                              HeatMultiplier;                                           // 0x0124(0x0004)
	float                                              OverHeatDownTime;                                         // 0x0128(0x0004)
	float                                              CooldownLeftMultiplier;                                   // 0x012C(0x0004)
	float                                              CooldownRightMultiplier;                                  // 0x0130(0x0004)
	float                                              WeaponsRotationRateCenterYaw;                             // 0x0134(0x0004)
	float                                              WeaponsRotationRateCenterPitch;                           // 0x0138(0x0004)
	float                                              CockpitLagRecoverRate;                                    // 0x013C(0x0004)
	float                                              CockpitLagTurnMaxRate;                                    // 0x0140(0x0004)
	float                                              HealRatePerPoint;                                         // 0x0144(0x0004)
	float                                              BeamDamagePerPoint;                                       // 0x0148(0x0004)
	float                                              Health;                                                   // 0x014C(0x0004)
	float                                              HealRatePercentPerSecond;                                 // 0x0150(0x0004)
	float                                              HealStartupTime;                                          // 0x0154(0x0004)
	float                                              MaxEnergyUnitsHeld;                                       // 0x0158(0x0004)
	float                                              BoostForwardSpeed;                                        // 0x015C(0x0004)
	float                                              SideBoostCooldownTime;                                    // 0x0160(0x0004)
	float                                              RunSpeed;                                                 // 0x0164(0x0004)
	float                                              AccelRate;                                                // 0x0168(0x0004)
	float                                              DodgeSpeed;                                               // 0x016C(0x0004)
	float                                              PushMultiplier;                                           // 0x0170(0x0004)
	float                                              DodgeDistance;                                            // 0x0174(0x0004)
	int                                                BoostRotationSpeed;                                       // 0x0178(0x0004)
	float                                              MaxLandDelay;                                             // 0x017C(0x0004)
	float                                              ThrusterRegenRate;                                        // 0x0180(0x0004)
	float                                              MaxThrusterEnergy;                                        // 0x0184(0x0004)
	float                                              ThrusterJumpEnergy;                                       // 0x0188(0x0004)
	float                                              ThrusterDoubleJumpEnergy;                                 // 0x018C(0x0004)
	float                                              ThrusterBoostSideEnergy;                                  // 0x0190(0x0004)
	float                                              ThrusterRateHover;                                        // 0x0194(0x0004)
	float                                              ThrusterRateBoostForward;                                 // 0x0198(0x0004)
	int                                                JumpZ;                                                    // 0x019C(0x0004)
	float                                              AccelRatePerPoint;                                        // 0x01A0(0x0004) (Const)
	float                                              BaseEyeHeight;                                            // 0x01A4(0x0004)
	float                                              CylinderRadius;                                           // 0x01A8(0x0004)
	float                                              CylinderHeight;                                           // 0x01AC(0x0004)
	float                                              HealCylinderHeight;                                       // 0x01B0(0x0004)
	float                                              HealCylinderOffset;                                       // 0x01B4(0x0004)
	float                                              HitEffectRadius;                                          // 0x01B8(0x0004)
	float                                              FootstepDecalSize;                                        // 0x01BC(0x0004)
	class USoundCue*                                   HealLoopSound;                                            // 0x01C0(0x0004)
	class USoundCue*                                   DeathExplosionSoundDelayed;                               // 0x01C4(0x0004)
	class USoundCue*                                   DeathExplosionSoundInstant;                               // 0x01C8(0x0004)
	struct FVector                                     HmdCockpitOffset;                                         // 0x01CC(0x000C)
	struct FVector                                     HmdArmOffset;                                             // 0x01D8(0x000C)
	float                                              HmdCockpitScale;                                          // 0x01E4(0x0004)
	float                                              HmdArmScale;                                              // 0x01E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechInfo_Base");
		return ptr;
	}


	void STATIC_AttachCockpitDecoration(unsigned char Idx, class UUDKSkeletalMeshComponent* CockpitMeshToAttachTo, class AActor* A, struct FCockpitDecorationInstanceData* DecorationData);
	class USkeletalMesh* STATIC_GetDefaultCockpitMesh();
	void STATIC_SetHealModeCollision(class UCylinderComponent* HitCylinderComponent, bool IsHealMode);
	void STATIC_ApplyUpgradesFromInternals(class AR_Pawn* P, struct FInternalsInfo* MechInternals);
	void STATIC_ResetUpgrades(class AR_Pawn* P, class AR_PlayerReplicationInfo* RPRI);
	void STATIC_OverloadProperties(class AR_Pawn* P);
	void STATIC_PrestreamTexturesForSkeletalMesh(class USkeletalMesh* SkelMesh, float Seconds, bool Force);
	void STATIC_PrestreamMechTextures(int Index, float Seconds, bool bTorso, bool bMid, bool bLow, bool bArms);
	float STATIC_GetHealPlaybackLength(int DroneIdx);
	void STATIC_UpdateHealDroneEffect(TArray<struct FHealEffectTime> HealEffectTiming, class USkeletalMeshComponent* DroneMesh, class UAnimNodeSequence* DroneAnim, class AActor* Owner, class UMaterialInstanceConstant* DroneMIC, int* bHealEffectActive, struct FDroneType* DroneInfo, class UParticleSystemComponent** DroneFX, class USkeletalMeshComponent** MechMesh);
	void STATIC_SetupHealDrone(class AActor* ParentActor, struct FDroneType* DroneInfo, class USkeletalMeshComponent** DroneMesh, class UMaterialInstanceConstant** DroneMIC, class UAnimNodeSequence** HealAnim);
	bool STATIC_AttachMechArmor(struct FMechMeshes* MechMeshData);
	void STATIC_DetachMechArmor(struct FMechMeshes* MechMeshData, class UStaticMeshComponent** MeshComp);
	void STATIC_AttachThrusterModelsAndEffects(class AActor* A, struct FMechMeshes* MechMeshData, class UParticleSystemComponent** ThrusterEffect_L, class UParticleSystemComponent** ThrusterEffect_R);
	class UMaterialInterface* STATIC_GetNewMaterialOverride(class UMaterialInterface* BaseMatOverride, int skelIndex, class UMaterialInterface* SelectionPartOverride, class UMaterialInterface* HologramPartOverride);
	void STATIC_SetMeshesTPS(class UMaterialInterface* BaseMatOverride, bool bReplaceArmsMat, struct FMechMeshes* MeshData);
	int STATIC_GetArmIndex(struct FMechMeshes* MeshData);
	void STATIC_SetSkelMeshMaterial(class USkeletalMeshComponent* MeshComp, class UMaterialInterface* Mat);
	void STATIC_ResetMaterials(struct FMechMeshes* MechMeshData);
	void STATIC_SetSingleMaterial(class UMaterialInterface* Mat, struct FMechMeshes* MechMeshData);
	void STATIC_SetSDPG(TEnumAsByte<ESceneDepthPriorityGroup> NewSDPG, struct FMechMeshes* MechMeshData);
	void STATIC_SetScalarMechMeshParam(const struct FName& ParamName, float Value, struct FMechMeshes* MechMeshData);
	void STATIC_SetCamoPattern(const struct FVisualInfo& MechStyle, struct FMechMeshes* MechMeshData);
	void STATIC_InitHighlightMaterial(const struct FLinearColor& HighlightColor, class UUDKSkeletalMeshComponent* Mesh, class UMaterialInstanceConstant** MatInstance);
	void STATIC_InitCustomizedMaterial(class UMeshComponent* Mesh, int Section, class UMaterialInterface* BaseMatOverride, class UMaterialInstanceConstant* MatOverride, class UMaterialInstanceConstant** MatInstance);
	class UClass* STATIC_GetMechInfo(int MechType);
};


// Class HawkenGame.R_MechInfo_A
// 0x0000 (0x01EC - 0x01EC)
class UR_MechInfo_A : public UR_MechInfo_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechInfo_A");
		return ptr;
	}


	int STATIC_GetArmIndex(struct FMechMeshes* MeshData);
	void STATIC_SetMeshesTPS(class UMaterialInterface* BaseMatOverride, bool bReplaceArmsMat, struct FMechMeshes* MeshData);
};


// Class HawkenGame.R_MechInfo_B
// 0x0000 (0x01EC - 0x01EC)
class UR_MechInfo_B : public UR_MechInfo_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechInfo_B");
		return ptr;
	}

};


// Class HawkenGame.R_MechInfo_C
// 0x0000 (0x01EC - 0x01EC)
class UR_MechInfo_C : public UR_MechInfo_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechInfo_C");
		return ptr;
	}


	void STATIC_SetHeavyModeCollision(bool IsHeavyMode, class UCylinderComponent** HitCylinderComponent);
};


// Class HawkenGame.R_MechSetup
// 0x0208 (0x0244 - 0x003C)
class UR_MechSetup : public UObject
{
public:
	struct FUniqueNetId                                OwnerId;                                                  // 0x003C(0x0010)
	TArray<struct FMechSelectionType>                  MechSelectionTypes;                                       // 0x004C(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechAUpperPartStyles;                                     // 0x0058(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechAMidPartStyles;                                       // 0x0064(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechAArmPartStyles;                                       // 0x0070(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechALowerPartStyles;                                     // 0x007C(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechBUpperPartStyles;                                     // 0x0088(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechBMidPartStyles;                                       // 0x0094(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechBArmPartStyles;                                       // 0x00A0(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechBLowerPartStyles;                                     // 0x00AC(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechCUpperPartStyles;                                     // 0x00B8(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechCMidPartStyles;                                       // 0x00C4(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechCArmPartStyles;                                       // 0x00D0(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechCLowerPartStyles;                                     // 0x00DC(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechBoosterStyles;                                        // 0x00E8(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechArmorStyles;                                          // 0x00F4(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     MechDroneStyles;                                          // 0x0100(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     CockpitDecorationTypes;                                   // 0x010C(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     CockpitPrimaryReticleStyles;                              // 0x0118(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     CockpitSecondaryReticleStyles;                            // 0x0124(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechPartStyles>                     CockpitHudColor;                                          // 0x0130(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechTauntType>                      MechHoloTauntTypes;                                       // 0x013C(0x000C) (Const, NeedCtorLink)
	TArray<struct FMechTauntType>                      MechAnimTauntTypes;                                       // 0x0148(0x000C) (Const, NeedCtorLink)
	TArray<class UClass*>                              MechSubTypes;                                             // 0x0154(0x000C) (Const, NeedCtorLink)
	TArray<struct FName>                               WeaponPrimaryChooseStat;                                  // 0x0160(0x000C) (NeedCtorLink)
	TArray<struct FName>                               WeaponSecondaryChooseStat;                                // 0x016C(0x000C) (NeedCtorLink)
	TArray<class UClass*>                              WeaponPrimaryClass;                                       // 0x0178(0x000C) (NeedCtorLink)
	TArray<class UClass*>                              WeaponSecondaryClass;                                     // 0x0184(0x000C) (NeedCtorLink)
	TArray<class UClass*>                              ItemClass;                                                // 0x0190(0x000C) (NeedCtorLink)
	TArray<class UClass*>                              InternalClass;                                            // 0x019C(0x000C) (NeedCtorLink)
	TArray<class UClass*>                              ConsumablePassiveClass;                                   // 0x01A8(0x000C) (NeedCtorLink)
	TArray<class UClass*>                              ConsumableTriggeredClass;                                 // 0x01B4(0x000C) (NeedCtorLink)
	TArray<class UClass*>                              XPBoostClass;                                             // 0x01C0(0x000C) (NeedCtorLink)
	TArray<class UClass*>                              HPBoostClass;                                             // 0x01CC(0x000C) (NeedCtorLink)
	int                                                CurrentPresetIndex;                                       // 0x01D8(0x0004)
	TArray<struct FMechPreset>                         Presets;                                                  // 0x01DC(0x000C) (Transient, AlwaysInit, NeedCtorLink)
	TArray<class UOnlineGameItemType*>                 TestDriveMechItemTypes;                                   // 0x01E8(0x000C) (Transient, NeedCtorLink)
	TArray<struct FScriptDelegate>                     WriteOnlineMechInstanceCompletedDelegates;                // 0x01F4(0x000C) (NeedCtorLink)
	TArray<struct FScriptDelegate>                     RefreshOnlineMechStatsCompletedDelegates;                 // 0x0200(0x000C) (NeedCtorLink)
	int                                                TaskId_RefreshOnlineMechStats;                            // 0x020C(0x0004)
	int                                                TaskId_WriteOnlineMechStats;                              // 0x0210(0x0004)
	class UR_OnlinePlayerStats_UnrankedGameplay*       OnlinePlayerStats_UnrankedGameplay;                       // 0x0214(0x0004)
	TArray<class UOnlineGameItemInstance*>             MechOwnedItemsCache;                                      // 0x0218(0x000C) (NeedCtorLink)
	int                                                DefaultPaintIndex;                                        // 0x0224(0x0004) (Const)
	unsigned long                                      bRequireMechTierItems : 1;                                // 0x0228(0x0004) (Const)
	struct FScriptDelegate                             __OnWriteOnlineMechInstanceCompleted__Delegate;           // 0x022C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnRefreshOnlineMechStatsCompleted__Delegate;            // 0x0238(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSetup");
		return ptr;
	}


	void STATIC_GetMechPartDisplayInfo(int invType, int Index, struct FString* DisplayName, struct FString* IconPath, struct FString* loreText, struct FString* Description);
	void Reset();
	class UOnlineGameItemInstanceCollection* GetGameItemInstanceCollection();
	void SetUnsavedDefaultDataForPresets();
	void AddInternalToPresetIfEmptyRoom(int iPreset, int Index, const struct FString& InstanceID, bool bIgnoreSpaceCheck);
	bool IsInternalCompatibleWithEquippedInternals(int iPreset, int NewInternalIndex);
	bool DoesPresetHaveEmptyRoomForInternal(int iPreset, int Index);
	void ShufflePresetInternalsLeft(int iPreset);
	void AddItemToPresetIfEmptyRoom(int iPreset, int Index, const struct FString& InstanceID, bool bIgnoreSpaceCheck);
	bool IsItemCompatibleWithEquippedItems(int iPreset, int ItemIndex);
	bool DoesPresetHaveEmptyRoomForItem(int iPreset, int Index);
	void ShufflePresetItemsLeft(int iPreset);
	void AddItemInstanceToPreset(class UOnlineGameItemInstance* itemInstance, class UOnlineGameItemType* gameItemType, class UOnlineGameItemInstance* ParentInstance, class UGFxObject* UIPreset, const struct FString& mechSubClassName, bool bIsForMechPurchase);
	void AddSingleTestDriveMechToPresets(int SubType, class UOnlineGameItemType* MechItemType, class UOnlineGameItemTypeCollection* ItemTypeCollection, class UR_GFx_MechMenu_Base* MenuObj);
	int GetNumMechsOfType(int MechType, int MechSubType);
	int GetPresetIndexForParentPreset(const struct FString& ParentInstanceID);
	bool GetMechInfoByInstanceID(const struct FString& MechInstanceId, int* MechType, int* MechSubType);
	int FindMechByInstanceID(const struct FString& MechInstanceId);
	void ShiftGarageOrderRight(int ignoreIndex);
	void SetNewGarageOrder(int iPreset);
	int GetHighestSetGarageOrder();
	void SaveAllMechGarageOrder();
	void FixupMechPresetsGarageOrder();
	bool ReadMechPresetDataFromPurchasedItems(class UOnlineGameItemInstanceCollection* PurchasedGameItemInstances, class UOnlineGameItemTypeCollection* GameItemTypeCollection, class UOnlineGameItemInstanceCollection* FullInstanceCollection, class UGFxObject* UIPreset, const struct FString& MechInstanceId, const struct FString& mechSubClassName);
	void ReadLatestInternalsFromUI(int iPreset, class UGFxObject* UIPreset);
	void ReadLatestItemsFromUI(int iPreset, class UGFxObject* UIPreset);
	void ReadMechPresetDataFromUI(class UGFxObject* MechPresetArray, int Slot);
	void UpdateAllocatedOptimization(TEnumAsByte<EAllocatedOptimizationType> optType, float val, int iPreset);
	void UpdatePresetInternalsForUI(int iPreset, class UGFxObject* UIPreset, class UR_GFx_MechMenu_Base* menuBase);
	void UpdatePresetItemsForUI(int iPreset, class UGFxObject* UIPreset, class UR_GFx_MechMenu_Base* menuBase);
	void UpdatePresetLockedSlotsForUI(int iMechTier, class UGFxObject** UIPreset);
	void UpdateSingleMechPresetItemToUI(int iPreset, class UGFxObject* UIPreset, class UOnlineGameItemType* gameItemType, class UR_GFx_MechMenu_Base* menuBase);
	void ReadMechPresetVisorStyleDataFromUI(int I, class UGFxObject** UIPreset);
	void WriteSingleMechPresetVisorStyleToUI(int I, class UGFxObject** UIPreset);
	void WriteSingleMechPresetDataToUI(int iPreset, class UR_GFx_MechMenu_Base* menuBase, class UGFxObject** UIPreset);
	bool UpdatePresetGarageOrderForUI(class UGFxObject* MechPresetArray, bool bSaveIfChanged);
	void GetOptimizationDefinitionFromType(TEnumAsByte<EAllocatedOptimizationType> optType, class UGFxObject** out_OptDef, class UGFxObject** optDefArray);
	int WriteAllocatedOptimization(int Index, int allocatedPts, TEnumAsByte<EAllocatedOptimizationType> optType, class UR_GFx_MechMenu_Base* menuBase, int MechSubType, int lockedSlots, class UGFxObject** optimizationArray, struct FSOptimization* OptDefinition);
	void WriteMechPresetDataToUI(class UR_GFx_MechMenu_Base* menuBase, class UGFxObject** MechPresetArray);
	bool IsSingleInternalDirty(unsigned char InternalID, class UGFxObject* gfxInternal);
	bool IsSingleItemDirty(unsigned char ItemId, class UGFxObject* gfxItem);
	bool IsSingleConsumableDirty(unsigned char ConsumableID, class UGFxObject* gfxConsumable);
	bool IsMechDataDirty(class UGFxObject* MechPresetArray, int presetIndex);
	bool HasAllocatedOptimizationChanged(TEnumAsByte<EAllocatedOptimizationType> optType, float val, int iPreset);
	void STATIC_SetBoolArrayToUI(TArray<unsigned long> ListArray, const struct FString& ArrayName, class UGFxObject* Data);
	void STATIC_SetStringArrayToUI(TArray<struct FString> ListArray, const struct FString& ArrayName, class UGFxObject* Data, int iElementStart);
	void AssignUnassignedOptimizationPoints(int iPreset);
	void SetUpDefaultAllocatedOptimizationsForMechPreset(int iPreset);
	void ResetOptimizationsForMechPreset(int iPreset);
	void SetDirtyFromPurchase(bool bDirty, int iPreset);
	void ClearAllDirtyFromPurchaseFlags();
	void ApplyPlayerDefaultsToPreset(int I);
	void SetDefaultValuesForPreset(int iPreset);
	struct FMechPreset AddDataToTestDrivePreset(class UOnlineGameItemTypeCollection* ItemTypeCollection, class UOnlineGameItemType* MechItemType);
	void CopyMechSubTypeToPreset(int iSubType, int iPreset);
	void SetDefaultMechStyleArray(int I);
	void SetDefaultMechStyle(struct FVisualInfo* MechStyle);
	void GiveBotStartingMechsOffline(struct FMechPreset* PresetToSet);
	void GivePlayerStartingMechsOffline();
	void SetPresetLevelsFromXP(int Index);
	int GetMechPresetIndex(const struct FString& Mech_InstanceId);
	struct FString GetCurrentMechInstanceID();
	int FindPresetIndexForDefaultMech();
	int FindPresetIndexByMechSubType(const struct FString& MechClassID);
	void GetCopyOfCurrentVisualInfo(struct FVisualInfo* Visuals);
	struct FString GetOnlineStatNameKillMechType(int Index);
	struct FString GetOnlineStatNameKillMadeWith(int Index);
	struct FString GetOnlineStatNameTierHighWithSubtype(int Index);
	struct FString GetOnlineStatNameXpForTierWithSubtype(int Index);
	struct FString GetOnlineStatNameSpawnedWithSubType(int Index);
	struct FString GetOnlineStatNameMadeKillWithSubType(int Index);
	struct FString GetOnlineStatNameKilledSubType(int Index);
	struct FString GetOnlineStatNameVictoryCoOpWithSubtype(int Index, bool bNoDeaths);
	int GetMechSubType(int Index);
	int GetMechType(int Index);
	void SetCurrentPreset(const struct FString& Mech_InstanceId);
	bool SetCurrentPresetIndex(int Index);
	bool IsCurrentPresetATestDrive();
	bool IsPresetATestDrive(int Index);
	bool DidPresetLoadFail(int Index);
	bool DidCurrentPresetLoadFail();
	bool IsPresetLoaded(int Index);
	bool IsCurrentPresetLoaded();
	bool IsPresetRented(int Index);
	bool IsCurrentPresetRented();
	bool IsPresetExpired(int Index);
	bool IsCurrentPresetExpired();
	int GetNumMechPresets();
	bool IsCurrentPresetIndexValid();
	bool IsPresetIndexValid(int Index);
	void WriteOnlineMechProgressionFlags(int presetIndex);
	void WriteOnlineMechHUDData(const struct FString& Mech_InstandId);
	void WriteOnlineMechGarageOrder(const struct FString& Mech_InstanceId);
	void OnReadGameItemInstancesComplete_RefreshOnlineMechStats(int TaskID, bool bWasSuccessful, const struct FUniqueNetId& PlayerID, TArray<struct FString> InstanceIds, bool bReadChildren, class UOnlineGameItemInstanceCollection* ItemInstanceCollection);
	bool IsLoggedIn();
	void UnRegisterDelegate_OnBatchIncrementUserGameItemStatsComplete_WriteOnlineMechStats();
	void RegisterDelegate_OnBatchIncrementUserGameItemStatsComplete_WriteOnlineMechStats();
	void OnBatchIncrementUserGameItemStatsComplete_WriteOnlineMechStats(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, TArray<struct FStormUserGameItemStats> StatsArray);
	void UnRegisterDelegate_OnReadGameItemInstancesComplete_RefreshOnlineMechStats();
	void RegisterDelegate_OnReadGameItemInstancesComplete_RefreshOnlineMechStats();
	void OnUpdateGameItemInstanceComplete_WriteOnlineMechInstance(bool bWasSuccessful, const struct FUniqueNetId& PlayerID, class UOnlineGameItemInstance* Instance, TArray<struct FString> PrefixedAttributesOnly);
	void UnRegisterDelegate_OnUpdateGameItemInstanceComplete_WriteOnlineMechInstance();
	void RegisterDelegate_OnUpdateGameItemInstanceComplete_WriteOnlineMechInstance();
	TEnumAsByte<EInventoryItemType> STATIC_GetPartInvType(TEnumAsByte<EMechType> MechType, TEnumAsByte<EPartLocation> PartLocation);
	bool STATIC_IsLockedAlternateItemForMech(int invType, const struct FString& itemTypeID, int MechPresetIndex, const struct FString& Mech_InstanceId);
	bool STATIC_IsAlternateItemForMech(int invType, const struct FString& itemTypeID, int MechPresetIndex, const struct FString& Mech_InstanceId, struct FString* OutAltItemString);
	class UOnlineGameItemInstance* STATIC_FindFirstItemInstanceForMech(int MechPresetIndex, const struct FString& Mech_InstanceId, TEnumAsByte<EInventoryItemType> invType, bool bIgnoreExpired, bool bIgnoreAlternates, const struct FString& CheckAttribute, int CheckVal);
	void STATIC_CacheGameItemsForMech(const struct FString& Mech_InstanceId);
	void CheckLevelUnlocks_ItemSlots(int MechPresetIndex, int MechTier);
	void CheckPilotLevelUnlocks_Items(int MechPresetIndex, int PilotLevel);
	void CheckLevelUnlocks_InternalsSlots(int MechPresetIndex, int MechTier);
	void CheckLevelUnlocks_OptimizationPoints(int MechPresetIndex, int MechTier, class UClass* SubTypeInfo);
	bool DoesPresetShowMechProgression(int presetIndex);
	void SetUpgradeFlags(int presetIdx, int MechTier);
	void CheckMechLevelUnlocks(int MechPresetIndex);
	int GetCurrentPresetMechTier();
	bool GetMechTierInstanceIdForNumber(int presetIndex, int MechTier, struct FString* InstanceID);
	bool STATIC_GetMechTierInvTypeForNumber(int MechTier, TEnumAsByte<EInventoryItemType>* ItemType);
	bool STATIC_GetTierNumberForInvType(TEnumAsByte<EInventoryItemType> ItemType, int* MechTier);
	int GetPilotXP();
	bool STATIC_GetAreMechTierItemsRequired();
	int GetPresetUpgradeFlags(int presetIndex, int invType, int MechTier);
	bool DoesPresetOwnItemForUpgrade(int presetIndex, int invType, int upgradeLevel, int MechTier);
	bool CanPresetPurchaseAbilityUpgrade(int presetIndex, int upgradeLevel);
	bool CanPresetPurchaseSecondaryWeaponUpgrade(int presetIndex, int upgradeLevel);
	bool CanPresetPurchasePrestigeWeaponUpgrade(int presetIndex, int upgradeLevel);
	bool CanPresetPurchaseAlternateWeaponUpgrade(int presetIndex, int upgradeLevel);
	bool CanPresetPurchasePrimaryWeaponUpgrade(int presetIndex, int upgradeLevel);
	bool CanPresetPurchaseUpgrade(int presetIndex, int invType, int upgradeLevel);
	bool DoesPresetOwnPrestigeWeapon(int presetIndex);
	bool DoesPresetOwnAlternateWeapon(int presetIndex);
	bool IsPresetAbilityUpgradeLocked(int presetIndex, int upgradeLevel);
	bool IsPresetSecondaryWeaponUpgradeLocked(int presetIndex, int upgradeLevel);
	bool IsPresetPrestigeWeaponUpgradeLocked(int presetIndex, int upgradeLevel);
	bool IsPresetAlternateWeaponUpgradeLocked(int presetIndex, int upgradeLevel);
	bool IsPresetPrimaryWeaponUpgradeLocked(int presetIndex, int upgradeLevel);
	bool IsPresetUpgradeLocked(int presetIndex, int invType, int upgradeLevel);
	bool HasSeenMaxTierUnlockForPresetType(int presetIndex);
	int GetPresetMechTier(int presetIndex);
	bool IsPresetMechTierFull(int presetIndex, int MechTier);
	bool IsPresetMechTierUnlocked(int presetIndex, int MechTier);
	bool DoesPresetHaveXpForTier(int presetIndex, int MechTier);
	bool DoesPresetOwnMechTierItem(int presetIndex, int MechTier);
	void GetPresetPrimaryWeaponInfo(int presetIndex, int* primWeapIndex);
	bool STATIC_IsItemExpired(const struct FString& Item_InstanceId);
	bool STATIC_IsItemIndexValid(TEnumAsByte<EInventoryItemType> invType, int ItemIndex);
	bool STATIC_IsConflictingItemEquipped(int MechPresetIndex, int invType, int ItemIndex);
	bool STATIC_IsDuplicateItemEquipped(int MechPresetIndex, int invType, int ItemIndex);
	bool STATIC_IsItemEquippedOnMech(int MechPresetIndex, const struct FString& Item_InstanceId);
	bool STATIC_CanItemBeUsedByMechClass(const struct FString& Item_InstanceId, const struct FString& Mech_InstanceId);
	bool STATIC_IsItemIndexUpToDate(const struct FString& Item_InstanceId, int ItemIndex);
	bool STATIC_IsItemGlobal(const struct FString& Item_InstanceId);
	bool STATIC_IsItemInstanceGlobal(class UOnlineGameItemInstance* itemInstance);
	bool STATIC_IsItemOwnedForPlayer(class UOnlineGameItemInstanceCollection* InstanceCollection, const struct FString& Item_InstanceId, int ItemId, TArray<struct FSFakeDefault>* FakeDefaults);
	bool STATIC_IsItemOwnedForMech(const struct FString& Item_InstanceId, const struct FString& Mech_InstanceId);
	bool CheckDefaultNonOwnedItem(int MechPresetIndex, class UOnlineGameItemInstance* MechItemInstance, int invType, const struct FString& DefaultInstanceAttribute, int* ItemIndex);
	bool CheckItemIntegrity(int MechPresetIndex, class UOnlineGameItemInstance* MechItemInstance, int invType, const struct FString& DefaultInstanceAttribute, bool bCanBeEmpty, bool bFindFirstIfNoDefault, bool bMechIsExpired, bool bCheckForLockedAlternate, const struct FString& CheckAttribute, int CheckVal, int* ItemIndex, struct FString* ItemInstanceId);
	bool CheckItemIntegrityByte(int MechPresetIndex, class UOnlineGameItemInstance* MechItemInstance, int invType, const struct FString& DefaultInstanceAttribute, bool bCanBeEmpty, bool bFindFirstIfNoDefault, bool bMechIsExpired, bool bCheckForLockedAlternate, unsigned char* ItemIndex, struct FString* ItemInstanceId);
	bool CheckMechPresetIntegrity(int MechPresetIndex, class UOnlineGameItemInstance* MechItemInstance);
	float GetBonusXpMultiplierForPreset(int MechPreset);
	float CalculateBonusXpMultiplierForPreset(int MechPresetIndex, class UOnlineGameItemInstance* MechItemInstance);
	void UpdateMechInstanceFromPreset(int MechPresetIndex, class UOnlineGameItemInstance* MechItemInstance);
	bool SetupMechPresetFromType(int MechPresetIndex, class UOnlineGameItemType* MechItemType);
	bool SetupMechPresetFromInstance(int MechPresetIndex, class UOnlineGameItemInstance* MechItemInstance);
	int AddMechPreset(const struct FString& Mech_InstanceId);
	float GetLowestFloatStat(const struct FString& StatKey);
	int GetLowestIntStat(const struct FString& StatKey);
	float GetHighestFloatStat(const struct FString& StatKey);
	int GetHighestIntStat(const struct FString& StatKey);
	float GetAggregatedFloatStat(const struct FString& StatKey);
	int GetAggregatedIntStat(const struct FString& StatKey);
	void ClearRefreshOnlineMechStatsCompletedDelegate(const struct FScriptDelegate& Delegate);
	void AddRefreshOnlineMechStatsCompletedDelegate(const struct FScriptDelegate& Delegate);
	void OnRefreshOnlineMechStatsCompleted(bool bWasSuccessful, const struct FUniqueNetId& PlayerID);
	void RefreshOnlineMechStats();
	void ClearWriteOnlineMechInstanceCompletedDelegate(const struct FScriptDelegate& Delegate);
	void AddWriteOnlineMechInstanceCompletedDelegate(const struct FScriptDelegate& Delegate);
	void OnWriteOnlineMechInstanceCompleted(bool bWasSuccessful, const struct FString& Mech_InstanceId);
	struct FString GetAttributeStringForPreset(int presetIndex, const struct FString& AttributeName);
	bool IsPresetProgressionConditionMet(TEnumAsByte<EMechProgressionFlags> Flag, int presetIndex);
	bool IsPresetProgressionFlagSet(TEnumAsByte<EMechProgressionFlags> Flag, int presetIndex);
	void ClearPresetProgressionUnlockFlag(int presetIndex);
	void SetPresetProgressionUnlockFlag(TEnumAsByte<EMechProgressionFlags> newFlag, int presetIndex);
	int GetProgressionBitFlagValue(TEnumAsByte<EMechProgressionFlags> Flag);
	bool IsWriteOnlineMechStatsInProgress();
	void WriteOnlineMechStats();
	bool WriteOnlineMechInstance(const struct FString& Mech_InstanceId, bool bWritePresets);
	bool CheckTestDriveMechIntegrity(struct FMechPreset* LocalPreset);
	void CheckMechPresetsIntegrity(class UOnlineGameItemInstanceCollection* ItemInstanceCollection);
	void UpdateMechPresetsStatsFromInstances(class UOnlineGameItemInstanceCollection* ItemInstanceCollection, bool bExpectAllMechs);
	void AddTestDriveMechsToPresets(class UR_GFx_MechMenu_Base* MenuObj);
	void CreateMechPresetsFromInstances(class UOnlineGameItemInstanceCollection* ItemInstanceCollection);
	struct FUniqueNetId GetOwnerNetId();
	void SetOwnerNetId(class APlayerController* OwnerPC);
	void SetPlayerStatsReference(class UR_OnlinePlayerStats_UnrankedGameplay* OwningPlayer_OnlineStats_UnrankedGameplay);
	void FindItemInstanceIdForMechPreset(int presetIndex, int invType, int ItemIndex, struct FString* outInstanceID);
	bool IsMechSubTypeGameItemTypeAvailable(int presetIndex);
	class UOnlineGameItemType* FindItemOfType(int invType, struct FString* ItemGUID);
};


// Class HawkenGame.R_Modifier
// 0x0000 (0x003C - 0x003C)
class UR_Modifier : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Modifier");
		return ptr;
	}

};


// Class HawkenGame.R_PawnModifier
// 0x0002 (0x003E - 0x003C)
class UR_PawnModifier : public UR_Modifier
{
public:
	TEnumAsByte<EPawnRepModifiers>                     RepModType;                                               // 0x003C(0x0001) (Const, Transient)
	TEnumAsByte<EPawnServerModifiers>                  ServerModType;                                            // 0x003D(0x0001) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PawnModifier");
		return ptr;
	}

};


// Class HawkenGame.R_PawnModifierBool
// 0x0006 (0x0044 - 0x003E)
class UR_PawnModifierBool : public UR_PawnModifier
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x003E(0x0002) MISSED OFFSET
	unsigned long                                      Value : 1;                                                // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PawnModifierBool");
		return ptr;
	}

};


// Class HawkenGame.R_PawnModifierFloat
// 0x0006 (0x0044 - 0x003E)
class UR_PawnModifierFloat : public UR_PawnModifier
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x003E(0x0002) MISSED OFFSET
	float                                              Value;                                                    // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PawnModifierFloat");
		return ptr;
	}

};


// Class HawkenGame.R_PawnModifierAccuracy
// 0x0000 (0x0044 - 0x0044)
class UR_PawnModifierAccuracy : public UR_PawnModifierFloat
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PawnModifierAccuracy");
		return ptr;
	}

};


// Class HawkenGame.R_PawnModifierInt
// 0x0006 (0x0044 - 0x003E)
class UR_PawnModifierInt : public UR_PawnModifier
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x003E(0x0002) MISSED OFFSET
	int                                                Value;                                                    // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PawnModifierInt");
		return ptr;
	}

};


// Class HawkenGame.R_Oculus
// 0x0038 (0x0168 - 0x0130)
class UR_Oculus : public UOculus
{
public:
	unsigned long                                      bForceOculusCockpit : 1;                                  // 0x0130(0x0004) (Config, GlobalConfig)
	unsigned long                                      bSkipInGameHangar : 1;                                    // 0x0130(0x0004) (Config, GlobalConfig)
	unsigned long                                      bShowVisorInRift : 1;                                     // 0x0130(0x0004) (Config)
	unsigned long                                      bAttachVisorToHeadset : 1;                                // 0x0130(0x0004) (Config, GlobalConfig)
	float                                              MenuHmdDepth;                                             // 0x0134(0x0004) (Config, GlobalConfig)
	int                                                MenuDepthUIMin;                                           // 0x0138(0x0004) (Config, GlobalConfig)
	int                                                MenuDepthUIMax;                                           // 0x013C(0x0004) (Config, GlobalConfig)
	int                                                HUDDepthUIMin;                                            // 0x0140(0x0004) (Config, GlobalConfig)
	int                                                HUDDepthUIMax;                                            // 0x0144(0x0004) (Config, GlobalConfig)
	int                                                MenuDepthUIStep;                                          // 0x0148(0x0004) (Config, GlobalConfig)
	int                                                HUDDepthUIStep;                                           // 0x014C(0x0004) (Config, GlobalConfig)
	TArray<struct FScriptDelegate>                     OculusStateChangedDelegates;                              // 0x0150(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OculusStateChanged__Delegate;                           // 0x015C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Oculus");
		return ptr;
	}


	void TriggerOculusStateChangedDelegates(bool bIsNowEnabled);
	void ClearOculusStateChangedDelegate(const struct FScriptDelegate& OculusStateChangedCallback);
	void AddOculusStateChangedDelegate(const struct FScriptDelegate& OculusStateChangedCallback);
	void OculusStateChanged(bool bIsEnabledNow);
	float STATIC_GetHudDepthUIStep();
	float STATIC_GetMenuDepthUIStep();
	void ApplyHmdRotationToVisor(class APlayerController* PC, const struct FVector& VisorLoc, struct FRotator* VisorRot);
	bool ShouldBeginCalibration(class APlayerController* PC);
	void OnOculusStateChange(bool bIsEnabledNow);
	bool STATIC_ShouldDisplayVisorInRift();
	bool STATIC_ShouldSkipInGameHangar();
	bool STATIC_IsOculusHeadsetAttached(class AController* C);
};


// Class HawkenGame.R_OnlineAccountObject
// 0x00B4 (0x01B4 - 0x0100)
class UR_OnlineAccountObject : public UOnlineAccountObject
{
public:
	struct FString                                     MechSetupClassName;                                       // 0x0100(0x000C) (Config, NeedCtorLink)
	struct FString                                     OnlineStatsObjectClassName;                               // 0x010C(0x000C) (Config, NeedCtorLink)
	class UR_MechSetup*                                MechSetup;                                                // 0x0118(0x0004)
	class UR_OnlineAccountObjectDelegates*             R_Delegates;                                              // 0x011C(0x0004)
	struct FSOnlineAccountInfo                         OnlineAccountInfo;                                        // 0x0120(0x0074) (NeedCtorLink)
	struct FSOnlineLegacyStats                         LegacyStats;                                              // 0x0194(0x0020)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_OnlineAccountObject");
		return ptr;
	}


	void UnRegisterDelegate_OnReadUserSettingComplete_LegacyStats();
	void RegisterDelegate_OnReadUserSettingComplete_LegacyStats();
	void OnReadUserSettingComplete_LegacyStats(bool bWasSuccessful, class UOnlinePlayerSettings* Settings, const struct FUniqueNetId& UserId);
	void ClearReadLegacyStatsCompleteDelegate(const struct FScriptDelegate& ReadLegacyStatsCompleteDelegate);
	void AddReadLegacyStatsCompleteDelegate(const struct FScriptDelegate& ReadLegacyStatsCompleteDelegate);
	void ReadOnlineLegacyStats();
	void CreateMechSetup(class APlayerController* OwnerPC);
	void ShutDown();
	void Init(class UOnlineAccountManager* Manager);
};


// Class HawkenGame.R_OnlineAccountObjectDelegates
// 0x000C (0x0048 - 0x003C)
class UR_OnlineAccountObjectDelegates : public UObject
{
public:
	TArray<struct FScriptDelegate>                     ReadLegacyStatsCompleteDelegates;                         // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_OnlineAccountObjectDelegates");
		return ptr;
	}

};


// Class HawkenGame.R_OnlineConfig
// 0x000C (0x0048 - 0x003C)
class UR_OnlineConfig : public UObject
{
public:
	struct FString                                     BaseWebURL;                                               // 0x003C(0x000C) (Const, Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_OnlineConfig");
		return ptr;
	}


	struct FString STATIC_GetBaseWebURL();
	class UR_OnlineConfig* STATIC_GetInstance();
};


// Class HawkenGame.R_OnlineMechStats_Unranked
// 0x0000 (0x007C - 0x007C)
class UR_OnlineMechStats_Unranked : public UOnlinePlayerStats
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_OnlineMechStats_Unranked");
		return ptr;
	}


	void Init();
};


// Class HawkenGame.R_OnlinePlayerStats_UnrankedGameplay
// 0x0000 (0x007C - 0x007C)
class UR_OnlinePlayerStats_UnrankedGameplay : public UOnlinePlayerStats
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_OnlinePlayerStats_UnrankedGameplay");
		return ptr;
	}


	void Init();
};


// Class HawkenGame.R_Pickup
// 0x00DC (0x02B0 - 0x01D4)
class AR_Pickup : public AActor
{
public:
	float                                              EnergyAmount;                                             // 0x01D4(0x0004) (Net)
	struct FVector                                     ForceLocationRep;                                         // 0x01D8(0x000C) (Net)
	float                                              EnergyTransferRate;                                       // 0x01E4(0x0004) (Const)
	float                                              FadeLifetime;                                             // 0x01E8(0x0004)
	float                                              FadeInTimeAccum;                                          // 0x01EC(0x0004)
	unsigned long                                      bClientStartFade : 1;                                     // 0x01F0(0x0004) (Net)
	unsigned long                                      bActive : 1;                                              // 0x01F0(0x0004) (Net)
	unsigned long                                      bShowEnergyLight : 1;                                     // 0x01F0(0x0004)
	unsigned long                                      bHasLanded : 1;                                           // 0x01F0(0x0004)
	unsigned long                                      bAllowBelowPickups : 1;                                   // 0x01F0(0x0004) (Const)
	unsigned long                                      bActivateOnLanded : 1;                                    // 0x01F0(0x0004) (Const)
	float                                              SpawnTime;                                                // 0x01F4(0x0004)
	float                                              TimeTilActive;                                            // 0x01F8(0x0004) (Const)
	float                                              TerminalVelocity;                                         // 0x01FC(0x0004) (Const)
	class USkeletalMeshComponent*                      SkelMesh;                                                 // 0x0200(0x0004) (ExportObject, Component, EditInline)
	class AR_PawnNative*                               TouchingPawns[0x3];                                       // 0x0204(0x0004) (Net)
	class AR_PawnNative*                               TransientTouchingPawns[0x3];                              // 0x0210(0x0004)
	int                                                NumDrainingPawns;                                         // 0x021C(0x0004) (Net)
	float                                              BeamSpawnCooldown;                                        // 0x0220(0x0004)
	float                                              LifespanAfterOwnerDies;                                   // 0x0224(0x0004)
	float                                              CollisionCheckRadius;                                     // 0x0228(0x0004) (Const)
	float                                              RadiusCheckInterval;                                      // 0x022C(0x0004) (Const)
	TEnumAsByte<EFadeInType>                           FadeInType;                                               // 0x0230(0x0001) (Const)
	TEnumAsByte<EnergyPickupType_e>                    EnergyPickupType;                                         // 0x0231(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0232(0x0002) MISSED OFFSET
	class UUDKParticleSystemComponent*                 EnergyParticleEffects;                                    // 0x0234(0x0004) (ExportObject, Component, EditInline)
	class UPointLightComponent*                        EnergyLight;                                              // 0x0238(0x0004) (ExportObject, Component, EditInline)
	struct FColor                                      EnergyLightColor;                                         // 0x023C(0x0004)
	class UParticleSystem*                             BaseEffect;                                               // 0x0240(0x0004)
	class UParticleSystem*                             BeamPickupEffect;                                         // 0x0244(0x0004)
	struct FVector                                     EffectOffset;                                             // 0x0248(0x000C)
	struct FVector                                     BeamOffset;                                               // 0x0254(0x000C)
	int                                                NumBeamEffects;                                           // 0x0260(0x0004)
	class UParticleSystemComponent*                    BeamComp[0x3];                                            // 0x0264(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             DrainingAudioComponent;                                   // 0x0270(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	struct FSEnergyDisplayValues                       EnergyDisplayValues[0x4];                                 // 0x0274(0x000C) (Const)
	class AR_Pawn*                                     AttractorEnabledPawns[0x3];                               // 0x02A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Pickup");
		return ptr;
	}


	void NotifyPawnOwnerDied();
	void Destroyed();
	void CooldownTimer();
	void UpdateEnergyParticles();
	void UpdateBeamEffects();
	void SetVelocity(const struct FVector& Vel);
	void ScaleEnergyParticles();
	float GetDrawScaleForEnergyPercent();
	void SetEnergyUnits(float EU);
	void PostBeginPlay();
	void Tick(float DeltaTime);
	void UpdateFade(float DeltaTime);
	void TickNative(float DeltaTime);
	void TransferEnergy(float DeltaTime);
	bool CanDrain(class AR_PawnNative* Pawn);
	void EncroachedBy(class AActor* Other);
	void Reset();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_PilotEmblems
// 0x0018 (0x03C4 - 0x03AC)
class UR_PilotEmblems : public ULocalPlayer
{
public:
	TArray<struct FSFakeDefault>                       FakeDefaultEmblems;                                       // 0x03AC(0x000C) (NeedCtorLink)
	TArray<struct FSPilotEmblem>                       PilotEmblems;                                             // 0x03B8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PilotEmblems");
		return ptr;
	}


	void STATIC_GetPilotEmblemInfo(int EmblemIndex, struct FString* DisplayName, struct FString* LockedToolText, struct FString* UnlockedToolText, struct FString* IconPath);
	struct FString STATIC_GetPilotEmblemIconPath(int EmblemIndex);
};


// Class HawkenGame.R_PlayerController_Base
// 0x03D4 (0x0CC4 - 0x08F0)
class AR_PlayerController_Base : public AUDKPlayerController
{
public:
	float                                              NextAdminCommandTime;                                     // 0x08F0(0x0004) (Transient)
	struct FString                                     LocalPlayerName;                                          // 0x08F4(0x000C) (Config, GlobalConfig, NeedCtorLink)
	float                                              MasterVolumeSetting;                                      // 0x0900(0x0004) (Config, GlobalConfig)
	float                                              SFXVolumeSetting;                                         // 0x0904(0x0004) (Config, GlobalConfig)
	float                                              UIMenusVolumeSetting;                                     // 0x0908(0x0004) (Config, GlobalConfig)
	float                                              MenuMusicVolumeSetting;                                   // 0x090C(0x0004) (Config, GlobalConfig)
	float                                              InGameMusicVolumeSetting;                                 // 0x0910(0x0004) (Config, GlobalConfig)
	float                                              CockpitVoiceVolumeSetting;                                // 0x0914(0x0004) (Config, GlobalConfig)
	float                                              MovieVolumeSetting;                                       // 0x0918(0x0004) (Config, GlobalConfig)
	float                                              FOV_Override;                                             // 0x091C(0x0004) (Config, GlobalConfig)
	float                                              FOV_Override_Oculus;                                      // 0x0920(0x0004) (Config, GlobalConfig)
	unsigned long                                      UseFixedRadar : 1;                                        // 0x0924(0x0004) (Config, GlobalConfig)
	unsigned long                                      UseDoubleClickDodge : 1;                                  // 0x0924(0x0004) (Config, GlobalConfig)
	unsigned long                                      VoiceUsePushToTalk : 1;                                   // 0x0924(0x0004) (Config, GlobalConfig)
	unsigned long                                      bDuckVolumeOnPushToTalk : 1;                              // 0x0924(0x0004) (Config, GlobalConfig)
	unsigned long                                      bUseTextToSpeech : 1;                                     // 0x0924(0x0004) (Config, GlobalConfig)
	unsigned long                                      bIsProfanityFilterOn : 1;                                 // 0x0924(0x0004) (Config, GlobalConfig)
	unsigned long                                      bShowObjectiveList : 1;                                   // 0x0924(0x0004) (Config, GlobalConfig)
	unsigned long                                      bShowAchievementToasts : 1;                               // 0x0924(0x0004) (Config, GlobalConfig)
	unsigned long                                      bShowXPCallouts : 1;                                      // 0x0924(0x0004) (Config, GlobalConfig)
	unsigned long                                      bQuittingToMainMenu : 1;                                  // 0x0924(0x0004) (Transient)
	unsigned long                                      bPushToTalkEnabled : 1;                                   // 0x0924(0x0004)
	unsigned long                                      bRightMouseDown : 1;                                      // 0x0924(0x0004)
	unsigned long                                      bLeftMouseDown : 1;                                       // 0x0924(0x0004)
	unsigned long                                      bAccountDirty : 1;                                        // 0x0924(0x0004)
	unsigned long                                      bIsPurchasing : 1;                                        // 0x0924(0x0004)
	unsigned long                                      bIsSaving : 1;                                            // 0x0924(0x0004)
	unsigned long                                      bJoinOnlineGameInProgress : 1;                            // 0x0924(0x0004)
	unsigned long                                      bJoinOnlineGameCancelled : 1;                             // 0x0924(0x0004)
	float                                              CockpitLagFactor;                                         // 0x0928(0x0004) (Config, GlobalConfig)
	unsigned char                                      CameraShakeLevel;                                         // 0x092C(0x0001) (Config, GlobalConfig)
	unsigned char                                      RadarHUDPos;                                              // 0x092D(0x0001) (Config, GlobalConfig)
	unsigned char                                      KillMessageHUDPos;                                        // 0x092E(0x0001) (Config, GlobalConfig)
	unsigned char                                      ChatMessageHUDPos;                                        // 0x092F(0x0001) (Config, GlobalConfig)
	unsigned char                                      EnergyUnitsHUDPos;                                        // 0x0930(0x0001) (Config, GlobalConfig)
	TEnumAsByte<EInventoryItemType>                    RestockingConsumableType;                                 // 0x0931(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0932(0x0002) MISSED OFFSET
	float                                              PushToTalkDuckVolume;                                     // 0x0934(0x0004) (Config, GlobalConfig)
	float                                              VoiceMicSensitivity;                                      // 0x0938(0x0004) (Config, GlobalConfig)
	float                                              VoiceMicVolume;                                           // 0x093C(0x0004) (Config, GlobalConfig)
	float                                              VoiceOtherPlayersVolume;                                  // 0x0940(0x0004) (Config, GlobalConfig)
	class USoundCue*                                   CockpitVoiceVolumeTestCue;                                // 0x0944(0x0004) (Const)
	class USoundCue*                                   BeepSound;                                                // 0x0948(0x0004) (Const)
	class USoundCue*                                   CountdownSnd;                                             // 0x094C(0x0004) (Const)
	class USoundCue*                                   OutOfConsumableChargesVO;                                 // 0x0950(0x0004) (Const)
	float                                              ZoomRotationModifier;                                     // 0x0954(0x0004)
	float                                              HeavyModeRotationModifier;                                // 0x0958(0x0004)
	float                                              SliderTimerRate;                                          // 0x095C(0x0004)
	struct FString                                     DesiredGameplayVoiceChannelUri;                           // 0x0960(0x000C) (Transient, NeedCtorLink)
	float                                              CameraAnimScaleForLevel[0x3];                             // 0x096C(0x0004)
	float                                              ZoomAnimScale;                                            // 0x0978(0x0004) (Const)
	struct FString                                     ConnectionStatus_GenericError_Title;                      // 0x097C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ConnectionStatus_DuplicateLogin_Text;                     // 0x0988(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ConnectionStatus_ConnectionDropped_Text;                  // 0x0994(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ConnectionStatus_NoNetworkConnection_Text;                // 0x09A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ConnectionStatus_UpdateRequired_Title;                    // 0x09AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ConnectionStatus_UpdateRequired_Text;                     // 0x09B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ConnectionStatus_ServersTooBusy_Text;                     // 0x09C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ConnectionStatus_ServiceUnavailable_Text;                 // 0x09D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ConnectionStatus_FriendNotPlaying_Text;                   // 0x09DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NetworkLink_Lost_Title;                                   // 0x09E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NetworkLink_Lost_Text;                                    // 0x09F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ConnectionDropped_Kicked_Title;                           // 0x0A00(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ConnectionDropped_Kicked_Text;                            // 0x0A0C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerExperiencingDifficulties_Title;                     // 0x0A18(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerExperiencingDifficulties_Text_Generic;              // 0x0A24(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerExperiencingDifficulties_Text[0x4];                 // 0x0A30(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_AntiAddiction_Title;                                 // 0x0A60(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_AntiAddiction_100_Text;                              // 0x0A6C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_AntiAddiction_101_Text;                              // 0x0A78(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_AntiAddiction_102_Text;                              // 0x0A84(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_AntiAddiction_103_Text;                              // 0x0A90(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_AntiAddiction_200_Text;                              // 0x0A9C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_AntiAddiction_300_Text;                              // 0x0AA8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Toast_Title_AchievementUnlocked;                          // 0x0AB4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_EmergencyBroadcast_Title;                            // 0x0AC0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_WaitingChangeChannel_Title;                          // 0x0ACC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_WaitingJoinTest_Text;                                // 0x0AD8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Info_WaitingLeaveTest_Text;                               // 0x0AE4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FakeAchievement_Title;                                    // 0x0AF0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FakeAchievement_MechRankedUp_Text;                        // 0x0AFC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FakeAchievement_PilotLeveledUp_Text;                      // 0x0B08(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FakeAchievement_TeamBalance_Title;                        // 0x0B14(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FakeAchievement_TeamBalance_Text;                         // 0x0B20(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             ReadingMechList;                                          // 0x0B2C(0x000C) (NeedCtorLink)
	class UOnlineSubsystemMeteor*                      MeteorOSS;                                                // 0x0B38(0x0004)
	int                                                TaskId_RestockConsumableResource;                         // 0x0B3C(0x0004)
	TArray<int>                                        TaskIds_ReadGameItemInstances_OnPurchase;                 // 0x0B40(0x000C) (NeedCtorLink)
	int                                                TaskId_RetrieveClanInfo;                                  // 0x0B4C(0x0004)
	int                                                TaskId_TestFindClanById;                                  // 0x0B50(0x0004)
	int                                                TaskId_TestFindClanByName;                                // 0x0B54(0x0004)
	int                                                TaskId_TestFindClanByTag;                                 // 0x0B58(0x0004)
	int                                                TaskId_TestFindPlayerClan;                                // 0x0B5C(0x0004)
	TArray<int>                                        TaskIDs_FindClan;                                         // 0x0B60(0x000C) (NeedCtorLink)
	int                                                TaskID_AcceptClanInvite;                                  // 0x0B6C(0x0004)
	int                                                VoiceChannelWaitingDialogId;                              // 0x0B70(0x0004)
	int                                                ConnectionStatusErrorDialogId;                            // 0x0B74(0x0004)
	int                                                LinkStatusErrorDialogId;                                  // 0x0B78(0x0004)
	TArray<struct FScriptDelegate>                     ReadPlayerNicknameCompleteDelegates;                      // 0x0B7C(0x000C) (NeedCtorLink)
	TArray<struct FScriptDelegate>                     ReadPlayerAccountInfoCompleteDelegates;                   // 0x0B88(0x000C) (NeedCtorLink)
	class AActor*                                      NextSpectatorViewTarget;                                  // 0x0B94(0x0004) (Net)
	class AActor*                                      PrevSpectatorViewTarget;                                  // 0x0B98(0x0004) (Net)
	class ACameraActor*                                SpectatorPathCamera;                                      // 0x0B9C(0x0004) (Net)
	class AR_PreviewMech*                              MechPreview;                                              // 0x0BA0(0x0004)
	class AR_PreviewCockpit*                           CockpitPreview;                                           // 0x0BA4(0x0004)
	class APawn*                                       LastPawn;                                                 // 0x0BA8(0x0004)
	TArray<struct FUniqueNetId>                        UnlockedAchievements;                                     // 0x0BAC(0x000C) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        QueuedAchievementForNotification;                         // 0x0BB8(0x000C) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        UnlockedAchievementClientNotificationQueue;               // 0x0BC4(0x000C) (NeedCtorLink)
	class UClass*                                      VideoSettingsClass;                                       // 0x0BD0(0x0004) (Const)
	class UR_GraphicsOptions*                          CurrentVideoSettings;                                     // 0x0BD4(0x0004)
	class UR_GraphicsOptions*                          BackupVideoSettings;                                      // 0x0BD8(0x0004)
	struct FStormGameServerListing                     CurrentServerListing;                                     // 0x0BDC(0x009C) (Transient, NeedCtorLink)
	struct FString                                     ServerPassword;                                           // 0x0C78(0x000C) (Transient, NeedCtorLink)
	int                                                JoinGameWaitingDialogId;                                  // 0x0C84(0x0004) (Transient)
	TArray<struct FString>                             AdminCommandHelps;                                        // 0x0C88(0x000C) (NeedCtorLink)
	TArray<struct FString>                             GameModeHelps;                                            // 0x0C94(0x000C) (NeedCtorLink)
	TArray<struct FHelpMapInfo>                        ValidMapInfo;                                             // 0x0CA0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReadPlayerNicknameComplete__Delegate;                 // 0x0CAC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReadPlayerAccountInfoComplete__Delegate;              // 0x0CB8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PlayerController_Base");
		return ptr;
	}


	int GetMechType();
	void PreviewReticleType(int PrimaryIdx, int SecondaryIdx);
	void PreviewHUDColors(int friendColor, int neutralColor, int enemyColor, bool bTintReticle);
	void ShowCockpitPreview(class UR_OnlineAccountObject* LocalPlayerAccount);
	void ToggleCockpitMeshOff();
	void ToggleCockpitMeshOn();
	void ToggleCockpitMode(bool bShow);
	void CleanupJoinOnlineGame();
	struct FString BuildConnectURL(const struct FString& ConnectString);
	void SetServerPassword(const struct FString& Password);
	void OnJoinGameComplete(const struct FName& SessionName, bool bSuccessful);
	void OnDestroyOnlineGameComplete_JoinGame(const struct FName& SessionName, bool bWasSuccessful);
	void JoinOnlineGame_Step2();
	void OnRequestReservationComplete(TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FString& EndPoint, int Port);
	void OnWaitingDialogClosed_JoinOnlineGame(int InDialogId, bool bCancelled);
	void JoinOnlineGame(const struct FStormGameServerListing& ToJoin, bool bHasReservation, const struct FString& Password);
	void SetTrailOptimization(bool bOptimization);
	void ToggleTrailOptimization();
	void ServerNotifySaveComplete();
	void ServerNotifySavingMech();
	void ServerNotifyPurchaseComplete();
	void ServerNotifyMakingPurchase();
	bool IsPlayerAccountDataDirty(class UGFxObject* LocalPlayer, int presetIndex);
	void DisableTest(const struct FName& TestName);
	void EnableTest(const struct FName& TestName);
	void OnLeavePartyCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode);
	void ServerLeaveParty();
	void ClientLeaveParty();
	bool LeaveParty(bool bNotifyServer);
	void ServerChangeTeam(int N);
	void OnClanInfoChanged(class UOnlineClanInfo* ClanInfo);
	void ServerNotifyClanInfoChanged();
	void OnFindClanComplete(int RequestID, bool bWasSuccessful, class UOnlineClanInfo* ClanInfo);
	void RetrieveClanInfo();
	void SetHudDepth(float newHudDepth);
	void SetHmdScale(float NewScale, float NewArmScale);
	void SetHmdOffsets(const struct FVector& NewCockpitOffset, const struct FVector& NewArmOffset);
	void ResetMotionInput();
	void ShowCursor();
	void InviteFriendToParty(const struct FString& FriendNameOrId);
	void CreateParty();
	class UR_GraphicsOptions* GetBackupVideoSettingsContainer();
	class UR_GraphicsOptions* GetVideoSettingsContainer();
	class UR_GraphicsOptions* CreateVideoSettingsContainer(const struct FString& ObjectNameToUse);
	void ChangeClanInfo(const struct FString& ClanName, const struct FString& ClanTag, const struct FString& Motto, const struct FString& Description);
	void OnChangeClanLeaderComplete(bool bWasSuccessful);
	void ChangeClanLeader(const struct FString& PlayerGuid);
	void RemovePlayerFromClan(const struct FString& PlayerGuid);
	void OnClanInviteAccepted(class UOnlineClanInfo* ClanInfo);
	void OnFindClanComplete_AcceptInvite(int RequestID, bool bWasSuccessful, class UOnlineClanInfo* ClanInfo);
	void AcceptClanInvite(const struct FString& ClanIdOrTag);
	void SendClanInvite(const struct FString& PlayerGuid, const struct FString& Message);
	void OnFindClanComplete_ExecCommand(int RequestID, bool bWasSuccessful, class UOnlineClanInfo* ClanInfo);
	void FindLocalPlayerClan();
	void FindPlayerClan(struct FUniqueNetId* PlayerID);
	void FindClan(const struct FString& ClanIdOrTag);
	void OnDestroyClanComplete(bool bWasSuccesful);
	void DestroyClan();
	void OnCreateClanComplete(bool bWasSuccessful);
	void CreateClan(const struct FString& ClanName, const struct FString& ClanTag, const struct FString& Motto, const struct FString& Description);
	void ReconnectXMPP();
	void OnUnlockClientAchievementObjectCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID, const struct FUniqueNetId& AchievementGuid);
	void UnlockClientAchievement(const struct FString& AchievementGuid);
	int GetLeftmostMechIndex();
	void ClientNotifyServerQuit(float TimeToQuit, const struct FString& Message);
	bool NotifyDisconnect(const struct FString& Command);
	void NotifyMenuOfUnlockedAchievement(class UOnlineAchievementObject* AchievementObject);
	void ClientOnAchievementUnlocked(const struct FUniqueNetId& AchievementGuid);
	void OnAchievementUnlockError(const struct FUniqueNetId& AchievementGuid);
	void OnAchievementUnlocked(const struct FUniqueNetId& AchievementGuid);
	void OnCompletedQueuingAchievementUnlocks();
	void AddQueuedAchievementUnlocked(const struct FUniqueNetId& AchievementGuid);
	bool IsAchievementInClientNotificationQueue(const struct FUniqueNetId& AchievementGuid);
	void RegisterQueuedAchievements(TArray<struct FUniqueNetId> UnlockingAchievementIds);
	void BeginQueuingAchievementUnlocks();
	void ShowTeamBalanceFakeAchievement();
	void ShowMechTierFakeAchievement(int NewMechTier);
	void ShowPilotLevelFakeAchievement(int NewPilotLevel);
	void OnPartyVoiceChannelChanged(const struct FString& VoiceChannelUri);
	void OnPartyMatchmakingCanceled(TEnumAsByte<EMMCancelReason> Reason);
	void OnPartyMatchmakingStarted();
	void OnPartyTravelRequestReceived(const struct FStormGameServerListing& GameToJoin, bool bHasReservation);
	void OnPartyDeploymentCancelled(TEnumAsByte<EMMCancelReason> Reason);
	void OnPartyDeploying(int CountdownTime);
	void OnPartyMessageReceived(class UOnlinePartyMemberObject* PartyMemberObject, const struct FString& Message);
	void OnPartyMemberChanged(class UOnlinePartyMemberObject* PartyMember);
	void OnPartyLeaderChanged(class UOnlinePartyMemberObject* NewLeaderMemberObject);
	void OnPlayerKickedFromParty(class UOnlinePartyMemberObject* PartyMemberObject);
	void OnPlayerLeftParty(class UOnlinePartyMemberObject* PartyMemberObject);
	void OnPlayerJoinedParty(class UOnlinePartyMemberObject* PartyMemberObject, bool bNewMember);
	void PlayerTick(float DeltaTime);
	void OnMailMessageReceived(class UOnlineMailMessage* MailMessage);
	void GetAntiAddictionMessage(int AAMessageId, struct FString* Message, int* bIsRed);
	void OnAntiAddictionMessageReceived(int AAMessageId);
	void ServerExperiencingDifficulties(TEnumAsByte<EServerExperiencingDifficultiesCode> ServerExperiencingDifficultiesCode);
	class UOnlineGameItemInstance* GetInstanceOfInventoryType(TEnumAsByte<EInventoryItemType> TargetInvType, TArray<struct FString> IgnoreInstanceIDs, bool bIgnoreExpired, bool bIsForUI);
	void AdminHelp();
	void ListAllGameModes();
	void ServerListAllMaps();
	void ListAllMaps();
	void ListPlayers();
	void ServerRandomMapCycle();
	void RandomMapCycle();
	void ServerShowMapCycle();
	void ShowMapCycle();
	void ServerShowMods();
	void ShowMods();
	struct FString RemoveHTML(const struct FString& Message);
	void ServerRemoveMods();
	void RemoveMods();
	void ServerApplyMod(const struct FString& ModParams);
	void ApplyMod(const struct FString& ModParams);
	void ServerForceSwitchTeam(const struct FString& PlayerName);
	void InternalForceSwitchTeam();
	void ForceSwitchTeam(const struct FString& PlayerName);
	void ServerForceRollOver();
	void ForceRollOver();
	void ServerForceEndMatch();
	void ForceEndMatch();
	void ServerForceStartMatch(bool bSkipPrematch);
	void ForceStartMatch(bool bSkipPrematch);
	void RestartMap();
	void ServerSetNextMap(const struct FString& NextMap);
	void SetNextMap(const struct FString& NextMap);
	void ServerAdminChangeMap(const struct FString& MapName, const struct FString& GameMode);
	void ChangeMap(const struct FString& MapURL);
	bool ValidateMap(const struct FString& MapName, const struct FString& GameMode);
	struct FString GetCurrentGameModeShortName();
	bool IsGameModeNameValid(const struct FString& GameMode);
	bool ValidatePlayerName(const struct FString& PlayerName);
	void ServerSetAutoBalance(bool bAutoBalance);
	void SetAutoBalance(bool bAutoBalance);
	void Kick(const struct FString& S);
	void ServerSetGamePassword(const struct FString& NewGamePassword);
	void SetGamePassword(const struct FString& NewGamePassword);
	void ServerShowAdminCommandLog(const struct FString& Log);
	void ShowAdminCommandLog(const struct FString& Log, bool bBroadcast);
	void ClientShowConsoleString(const struct FString& MapListString);
	void ServerForceTextUnMute(const struct FString& TargetPlayer);
	void AdminForceTextUnMute(const struct FString& TargetPlayer);
	void ServerForceTextMute(const struct FString& TargetPlayer);
	void AdminForceTextMute(const struct FString& TargetPlayer);
	void ServerForceVoiceUnMute(const struct FString& TargetPlayer);
	void AdminForceVoiceUnMute(const struct FString& TargetPlayer);
	void ServerForceVoiceMute(const struct FString& TargetPlayer);
	void AdminForceVoiceMute(const struct FString& TargetPlayer);
	void ServerChangeMap(const struct FString& URL);
	void AdminChangeMap(const struct FString& URL);
	void ServerRestartMap();
	void AdminRestartMap();
	void AdminPlayerList();
	void AdminSay(const struct FString& S);
	void AdminKick(const struct FString& S);
	void ServerKickBan(const struct FString& PlayerToKick, bool bBan);
	void AdminKickBan(const struct FString& S);
	void ServerAdmin(const struct FString& CommandLine);
	void Admin(const struct FString& CommandLine);
	void ServerAdminLogOut();
	void AdminLogout();
	void ServerAdminLogin(const struct FString& Password);
	void AdminLogin(const struct FString& Password);
	bool AreAdminCommandsAllowed();
	void AddCheats(bool bForce);
	bool CheckServerAdmin();
	bool IsServerAdmin();
	void RestoreSavedVolumeSettings();
	void OtherPlayersVolumeChangedTimer();
	void MicVolumeChangedTimer();
	void VoiceVolumeChangedTimer();
	void PlayerInputSliderChangedTimer();
	void GeneralSliderChangedTimer();
	void SetOtherPlayersVolume(float setting);
	void SetMicVolume(float setting);
	void SetMicSensitivity(float setting);
	void SetUseTextToSpeech(bool setting);
	void SetPushToTalkDuckVolume(float setting);
	void SetDuckVolumeOnPushToTalk(bool setting);
	void DuckVolumeForPushToTalk();
	void SetUsePushToTalk(bool setting);
	void LeaveGameplayVoiceChannel();
	void OnJoinVoiceChannelComplete(bool bWasSuccessful);
	void OnLeaveVoiceChannelComplete(bool bWasSuccessful);
	void LeaveVoiceTestChannel();
	void DoJoinVoiceTestChannel();
	void JoinVoiceTestChannel();
	void OnLeaveVoiceChannelForVoiceTestComplete(bool bWasSuccessful);
	void JoinBestVoiceChannel();
	void LeaveVoiceChannel(bool bMuteVoice);
	void JoinVoiceChannel(const struct FString& VoiceChannelUri);
	struct FString GetPartyVoiceChannel();
	bool IsInPartyVoiceChannel();
	bool IsInParty();
	bool IsInVoiceTestChannel();
	void VerifyConfigValueRanges(bool bReapplySettings, bool bSaveSettings);
	void InitStoredVoiceSettings();
	void SetMovieVolume(float setting);
	void SetCockpitVoiceVolume(float setting);
	void SetInGameMusicVolume(float setting);
	void SetMenuMusicVolume(float setting);
	void SetUISoundVolume(float setting);
	void SetSFXVolume(float setting);
	void SetMasterVolume(float setting);
	void SetEnergyUnitsHUDPosition(int NewPosition);
	void SetKillMessageHUDPosition(int NewPosition);
	void SetChatMessageHUDPosition(int NewPosition);
	void SetRadarHUDPosition(int NewPosition);
	void SwapHUDValues(int oldVal, int newVal);
	void UpdateHUDPositioning();
	void ServerUpdateCamera(const struct FVector& CamLoc, int CamPitchAndYaw);
	void SetFOVOverride(float setting, bool bSaveSettings);
	void SetCameraShakeLevel(int setting, bool bSaveSettings);
	void SetCockpitLag(float setting, bool bSaveSettings);
	void SetUseFixedRadar(bool setting);
	void SetShowXPCallouts(bool setting);
	void SetUseDoubleClickDodge(bool setting);
	void UpdateShowAchievementToasts(bool setting);
	void UpdateShowObjectives(bool setting);
	void PushToTalkDisable();
	void PushToTalkEnable();
	void DumpVoiceChatDebug();
	void ClientStopAllCameraAnims(bool bImmediate);
	void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace);
	float GetFinalAnimScale(float Scale);
	void FixFOVParam(float NewFOV);
	void FixFOV();
	float GetFOVOverride();
	void FOV(float NewFOV);
	void SetPrevAndNextViewTargets();
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerViewSelfInPlace(const struct FVector& CamLoc, const struct FRotator& CamRot);
	void PreStreamSpectatorTargets();
	bool IsVisorBootComplete();
	void ServerSetVisorBooting(bool bValue);
	void SetVisorBooting(bool bValue);
	void SetVisorVisibility(bool bShouldDrawVisor);
	bool IsVisorEnabled();
	bool ShouldHideVisor();
	void FinishQuitToMainMenu();
	void QuitToMainMenu(bool bLeaveParty);
	void ServerPlayerInitiatedQuitToMainMenu();
	struct FString GetGameModeAbandonedStatName();
	bool PlayerAccountLogout();
	void RemoveOculusOverrides();
	void ApplyOculusOverrides();
	struct FString GetDebugName();
	void SetQueuingAccountUpdate(bool bNewValue);
	void SetPendingAccountUpdate(bool bNewValue);
	void OnHeroRoleAuthorizeComplete(bool bWasSuccessful, const struct FUniqueNetId& PlayerID);
	void OnRoleAuthorizeComplete(bool bWasSuccessful, const struct FUniqueNetId& PlayerID);
	void OnPlayerLoginFailed(unsigned char LocalUserNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode);
	void OnPlayerLoginChanged(unsigned char LocalUserNum);
	void LoadSettingsFromOnlineComplete(bool bWasSuccessful);
	void LoadSettingsFromOnline();
	void LoadSettingsFromFile();
	void PrintAllHawkenPropertySheets();
	void OnMessageDialogClosed_LinkStatusChanged(int InDialogId, int InButton);
	void OnLinkStatusChanged(bool bConnected);
	void OnMessageDialogClosed_UpdateRequired(int InDialogId, int InButton);
	void OnMessageDialogClosed_ConnectionStatusChange(int InDialogId, int InButton);
	void OnConnectionStatusChange(TEnumAsByte<EOnlineServerConnectionStatus> ConnectionStatus);
	void OnServerStatusChange(TEnumAsByte<EOnlineServerConnectionStatus> ServerStatus);
	void UnRegisterDelegate_OnReadGameItemInstancesComplete_OnPurchase();
	void RegisterDelegate_OnReadGameItemInstancesComplete_OnPurchase();
	void OnReadGameItemInstancesComplete_OnPurchase(int TaskID, bool bWasSuccessful, const struct FUniqueNetId& PlayerID, TArray<struct FString> InstanceIds, bool bReadChildren, class UOnlineGameItemInstanceCollection* ItemInstanceCollection);
	void UnRegisterDelegate_OnPurchaseGameOfferComplete_RestockConsumableResource();
	void RegisterDelegate_OnPurchaseGameOfferComplete_RestockConsumableResource();
	void OnPurchaseGameOfferComplete_RestockConsumableResource(int TaskID, const struct FString& OfferId, TEnumAsByte<ENetworkErrorCode> ErrorCode, class UOnlineGameItemInstanceCollection* PurchasedGameItemInstances);
	void RefreshWallet();
	void PrintConsumableResources(TEnumAsByte<EInventoryItemType> ConsumableType, bool bUseLocalPlayerCollection);
	void ServerOnPurchaseGameItemInstance_Native(const struct FString& InstanceID);
	void ServerOnPurchaseGameItemInstance(const struct FString& InstanceID);
	class UOnlineGameItemInstanceCollection* GetGameItemInstanceCollection(bool bUseLocalPlayerCollection);
	class UOnlineGameOffer* GetConsumableResourceOffer(TEnumAsByte<EInventoryItemType> ConsumableType);
	void RestockConsumableResource(TEnumAsByte<EInventoryItemType> ConsumableType);
	void UseConsumableResource(TEnumAsByte<EInventoryItemType> ConsumableType, bool bUseLocalPlayerCollection);
	int GetConsumableResourceCount(TEnumAsByte<EInventoryItemType> ConsumableType, bool bUseLocalPlayerCollection);
	void OnFriendMessageReceived(unsigned char LocalUserNum, const struct FUniqueNetId& SendingPlayer, const struct FString& SendingNick, const struct FString& Message);
	void OnFriendInviteReceived(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const struct FString& RequestingNick, const struct FString& Message);
	void OnGameInviteReceived(unsigned char LocalUserNum, const struct FString& RequestingNick);
	void OnDestroyOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	void OnEndOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	bool CleanupOnlineSubsystemSession(bool bWasFromMenu);
	void ClearOnlineDelegates();
	void AddOnlineDelegates(bool bRegisterVoice);
	void RegisterOnlineDelegates();
	void SetDefaultName(const struct FString& NewName);
	struct FString GetOnlineSystemNick();
	bool AllowTextMessage(const struct FString& msg);
	void SpeakTTS(const struct FString& S, class APlayerReplicationInfo* PRI);
	void GetStreamingStatus();
	void RunCommercial();
	void StopStreaming();
	void PauseStreaming();
	void StartStreaming(int Width, int Height);
	void StreamingLogin(const struct FString& UserName, const struct FString& Password);
	bool IsLoggedIn();
	void PressLeft();
	void PressRight();
	void PressDown();
	void PressUp();
	void ClearReadPlayerAccountInfoCompleteDelegate(const struct FScriptDelegate& ReadPlayerAccountInfoCompleteDelegate);
	void AddReadPlayerAccountInfoCompleteDelegate(const struct FScriptDelegate& ReadPlayerAccountInfoCompleteDelegate);
	void OnReadPlayerAccountInfoComplete(bool bWasSuccessful, const struct FSOnlineAccountInfo& AcctInfo);
	void SavePilotProgressionFlags();
	void ClearAllPilotProgressionFlags();
	void ClearPilotProgressionFlag(int PilotLevel);
	void UpdatePilotProgressionFlag(int PilotLevel, bool bForceSave);
	bool SetPilotProgressionFlag(int PilotLevel);
	void SaveNewUserExperienceFlags();
	void ClearAllNewUserExperienceFlags();
	void ClearNewUserExperienceFlag(TEnumAsByte<ENewUserExperienceFlags> newFlag);
	void UpdateNewUserExperienceFlags(TEnumAsByte<ENewUserExperienceFlags> newFlag, bool bForceSave);
	bool SetNewUserExperienceFlag(TEnumAsByte<ENewUserExperienceFlags> newFlag);
	void UpdateDefaultReticles(int PrimaryIdx, const struct FString& primaryId, int SecondaryIdx, const struct FString& secondaryId);
	void UpdateDefaultHUDColors(int friendIdx, const struct FString& FriendID, int neutralIdx, const struct FString& neutralId, int foeIdx, const struct FString& foeId, bool bTintReticle);
	void UpdateEquippedEmblem(int EmblemIndex, struct FString* EmblemInstanceId);
	void UpdateEULAVersionSeen(int iNewVal);
	void UpdateAutoSwitchItems(bool bNewVal);
	void UpdateShowGameplayTips(bool bNewVal);
	void UpdateShowCoopRules(bool bNewVal);
	void UpdateShowMissileAssaultRules(bool bNewVal);
	void UpdateShowSiegeRules(bool bNewVal);
	void UpdateHasSeenAllModesUnlocked(bool bNewVal);
	void UpdateHasSeenMatchmaking(bool bNewVal);
	void ReadOnlinePlayerAccountInfo();
	void UnRegisterDelegate_OnReadUserSettingComplete_PlayerAccountInfo();
	void RegisterDelegate_OnReadUserSettingComplete_PlayerAccountInfo();
	void OnReadUserSettingComplete_PlayerAccountInfo(bool bWasSuccessful, class UOnlinePlayerSettings* Settings, const struct FUniqueNetId& PlayerID);
	void ClearReadPlayerNicknameCompleteDelegate(const struct FScriptDelegate& ReadPlayerNicknameCompleteDelegate);
	void AddReadPlayerNicknameCompleteDelegate(const struct FScriptDelegate& ReadPlayerNicknameCompleteDelegate);
	void OnReadPlayerNicknameComplete(bool bWasSuccessful);
	void ReadOnlinePlayerNickname();
	void UnRegisterDelegate_OnReadUserSettingComplete_PlayerNickname();
	void RegisterDelegate_OnReadUserSettingComplete_PlayerNickname();
	void OnReadUserSettingComplete_PlayerNickname(bool bWasSuccessful, class UOnlinePlayerSettings* Settings, const struct FUniqueNetId& PlayerID);
	void ClientWasKicked(const struct FString& KickReason, const struct FString& KickTitle);
	class UR_GFx_MechMenu_Base* GetMechMenuMovie();
	class UGFxMoviePlayer* GetCockpitMovie();
	class UGFxMoviePlayer* GetReticleMovie();
	class UGFxMoviePlayer* GetVisorMovie();
	void ResetMouseButtonState();
	void InitInputSystem();
	void ServerTriggerAccountAuthUpdate();
	void TriggerAccountAuthUpdate();
	void ReceivedPlayer();
	struct FString STATIC_ExtractMapNameFromURL(const struct FString& URL);
	void ClientShowLoadingMovie(bool bShowMovie, const struct FString& PendingURL);
	void ClientKeepPlayingLoadingMovie();
	void PreClientTravel(const struct FString& PendingURL, TEnumAsByte<ETravelType> TravelType, bool bIsSeamlessTravel);
	void AdjustHUDRenderSize(int FullScreenSizeX, int FullScreenSizeY, int* X, int* Y, int* SizeX, int* SizeY);
	void ShowBackgroundBlurPost(bool On, float BlendTime);
	void Destroyed();
	bool CheckOnlineSubsystem();
	void InitStormUserId();
	void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* LensEffectEmitter);
	void ClientSpawnLensEffect(class UClass* LensEffectEmitterClass);
	void ClearCameraEffect();
	void RemoveCameraEffect(class AUDKEmitCameraEffect* CamEmitter);
	void ClientSpawnCameraEffect(class UClass* CameraEffectClass);
	int AchievementSort(class UOnlineAchievementObject* objectA, class UOnlineAchievementObject* objectB);
};


// Class HawkenGame.R_EntryPlayerController
// 0x01D5 (0x0E99 - 0x0CC4)
class AR_EntryPlayerController : public AR_PlayerController_Base
{
public:
	class UR_GFx_MainMenu*                             MainMenu;                                                 // 0x0CC4(0x0004)
	unsigned long                                      bMechPreviewCamera : 1;                                   // 0x0CC8(0x0004)
	unsigned long                                      bScreenShotMode : 1;                                      // 0x0CC8(0x0004)
	struct FRotator                                    MechRotate;                                               // 0x0CCC(0x000C)
	struct FRotator                                    CameraRotate;                                             // 0x0CD8(0x000C)
	float                                              MainMenuFOV;                                              // 0x0CE4(0x0004)
	float                                              CenterOrbitDistance;                                      // 0x0CE8(0x0004) (Const)
	float                                              PannedOrbitDistanceLeft;                                  // 0x0CEC(0x0004) (Const)
	float                                              PannedOrbitDistanceRight;                                 // 0x0CF0(0x0004) (Const)
	float                                              MechSideLeftPosX;                                         // 0x0CF4(0x0004) (Const)
	float                                              MechSideRightPosX;                                        // 0x0CF8(0x0004) (Const)
	float                                              MechCenterPosX;                                           // 0x0CFC(0x0004) (Const)
	struct FGarageCamData                              GarageCam;                                                // 0x0D00(0x0048)
	float                                              BackgroundMusicFadeDuration;                              // 0x0D48(0x0004) (Const)
	int                                                CurrentMechIdx;                                           // 0x0D4C(0x0004)
	struct FVector                                     PreviewMechLocation[0x6];                                 // 0x0D50(0x000C)
	struct FRotator                                    PreviewMechRotation[0x6];                                 // 0x0D98(0x000C)
	struct FRotator                                    MechCamMin[0x6];                                          // 0x0DE0(0x000C)
	struct FRotator                                    MechCamMax[0x6];                                          // 0x0E28(0x000C)
	class UMaterialEffect*                             StaticEffect;                                             // 0x0E70(0x0004)
	class UMaterialInstanceConstant*                   StaticEffectMaterialInstance;                             // 0x0E74(0x0004) (Transient)
	struct FLinearColor                                StaticColor;                                              // 0x0E78(0x0010)
	float                                              StaticTime;                                               // 0x0E88(0x0004)
	float                                              DistancePerZoomLevel;                                     // 0x0E8C(0x0004) (Const)
	int                                                MechAutoRotateRate;                                       // 0x0E90(0x0004)
	int                                                MechViewZoom;                                             // 0x0E94(0x0004)
	TEnumAsByte<EMechCamera_e>                         CameraPosition;                                           // 0x0E98(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_EntryPlayerController");
		return ptr;
	}


	void CleanupJoinOnlineGame();
	void OnWriteOnlineMechInstanceCompleted_JoinOnlineGame(bool bWasSuccessful, const struct FString& Mech_InstanceId);
	void JoinOnlineGame_Step2();
	void ViewReticleSampler(bool bViewing);
	void ViewHUDSampler(bool bViewing);
	void ToggleCockpitMode(bool bShow);
	void ZoomGarageMech(int zoomDelta);
	void AutoRotateMech(int Dir);
	void SetPreviewMech(int NewIdx);
	void StartMatchmaking(TEnumAsByte<EGameSearchMode> SearchMode, const struct FString& Region, const struct FString& GameType);
	void SetMainMenuDepth(float NewValue);
	float GetFOVAngle();
	void ToggleGarageCinematic(bool bEnabled);
	void TriggerPlayIntro(int Idx);
	void GetRecommendedGraphicsQuality();
	void SetEULAVersionSeen(int Version);
	void ViewPlayerProfile(const struct FString& StormUserId);
	void ShowAntiAddictionMessage(int AAMessageId);
	void ShowLegalScreenTimer();
	bool IsPlayerChatting();
	void FadeOutMusic(float FadeDuration, float FadePercent);
	void FadeInMusic(float FadeDuration, float FadePercent);
	void OnRoleAuthorizeComplete(bool bWasSuccessful, const struct FUniqueNetId& PlayerID);
	void SetAllPilotProgressionFlags();
	void ClearPilotProgressionFlags();
	void ShowPilotProgressionDialogs(int PilotLevel);
	void SetAllMechProgressionFlags();
	void ClearSingleMechProgressionFlags(int presetIndex);
	void ClearAllMechProgressionFlags();
	void ClearNewUserExperienceFlags();
	void SetAllNewUserExperienceFlags();
	void ShowFirstOptimizationsDialog();
	void ShowGarageTutorialDialog();
	void ShowIntroDialog();
	int GetDroneType();
	float GetPrimaryWeaponSpread();
	int GetTauntType(bool bAnimTaunt);
	void SetMainMenu(class UR_GFx_MainMenu* NewMainMenu);
	void PlayerLogin(const struct FString& PlayerName, const struct FString& Password, const struct FString& citizenID);
	void PrintStormUserInfo(const struct FStormUserInfo& Info);
	void QuitToMainMenu(bool bLeaveParty);
	void OnControllerChanged(int ControllerId, bool bIsConnected);
	void TeamTalk();
	void Talk();
	void InitStaticEffect(class ULocalPlayer* LP);
	void SetTransitionEffect(float Amount);
	void SetStaticTime(float Time);
	void PlayerTick(float DeltaTime);
	bool MenuHasFocus();
	bool CanDoMechAction(bool bCheckAnim);
	void UpdateGarageCamera(float DeltaTime);
	void StartCameraMovement(float Time, float Pan, float OrbitDist, bool bAdjustForMech, bool bViewingDrones);
	void MechCockpit(float Time);
	void MechCenter(float Time, float DistAdjust, int InMechViewZoom);
	void MechLeft(float Time, bool bViewingDrones, int InMechViewZoom);
	void MechRight(float Time, bool bViewingDrones, int InMechViewZoom);
	void GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	void RotateMech();
	void RotateCamera();
	void UpdatePreviewSecondaryMechWeapon(int SecondaryWeapon);
	void TestLoginFailed();
	void StopMovie();
	void PauseMovie();
	void DelayedShowLoginDialog();
	void PlayMovie(class UTextureMovie* movieTex);
	void OnPurchasePrestigeWeapon();
	void PreviewReticleType(int PrimaryIdx, int SecondaryIdx);
	void PreviewHUDColors(int friendColor, int neutralColor, int enemyColor, bool bTintReticle);
	void UpdatePreviewPart(int invType, int Index, int SubType, bool bSinglePartSwap);
	void PreviewMechPreloadTimer();
	void OnMechChanged();
	void CheckWallet();
	struct FString GetAppScreenShotName(const struct FString& ShotName);
	void ShowScreenshotConfirmDialogTimer();
	void UpdatePreviewMechType(int presetIndex);
	void ShowPreviewMech();
	void UpdatePreviewMechBackground(bool bResetCamera);
	void GetPreviewMechLocations();
	void VerifyNewBindings();
	int VerifyBinding(const struct FString& IntermediateCommand, const struct FString& Command, const struct FString& defaultKey);
	class UR_GFx_MechMenu_Base* GetMechMenuMovie();
	void BeginFullSync();
	void InitInputSystem();
	struct FString GetUnrankedMatchRegion(bool bSquadRegion);
	void SetUnrankedMatchRegion(const struct FString& Region, bool bSquadRegion);
};


// Class HawkenGame.R_PlayerController
// 0x0A04 (0x16C8 - 0x0CC4)
class AR_PlayerController : public AR_PlayerController_Base
{
public:
	TArray<struct FName>                               MechChooseStat;                                           // 0x0CC4(0x000C) (NeedCtorLink)
	TArray<struct FString>                             AchievementMechTypeChoice;                                // 0x0CD0(0x000C) (NeedCtorLink)
	int                                                CurrentPresetIndex;                                       // 0x0CDC(0x0004)
	unsigned long                                      bMechStatsRefreshed : 1;                                  // 0x0CE0(0x0004)
	unsigned long                                      bLastChatMessageSent : 1;                                 // 0x0CE0(0x0004)
	unsigned long                                      bFirstSpawn : 1;                                          // 0x0CE0(0x0004)
	unsigned long                                      bQuickSpawn : 1;                                          // 0x0CE0(0x0004)
	unsigned long                                      bSpawnFailed : 1;                                         // 0x0CE0(0x0004)
	unsigned long                                      bPauseMode : 1;                                           // 0x0CE0(0x0004)
	unsigned long                                      bDisableEscInPause : 1;                                   // 0x0CE0(0x0004)
	unsigned long                                      bGaragePanelOpen : 1;                                     // 0x0CE0(0x0004)
	unsigned long                                      bChangingMechs : 1;                                       // 0x0CE0(0x0004)
	unsigned long                                      bZoomedPostActive : 1;                                    // 0x0CE0(0x0004)
	unsigned long                                      bDebugHeat : 1;                                           // 0x0CE0(0x0004)
	unsigned long                                      bCachedTargetCrosshair : 1;                               // 0x0CE0(0x0004)
	unsigned long                                      bUsePreviewRotLimits : 1;                                 // 0x0CE0(0x0004)
	unsigned long                                      bLateJoinWaitingForRep : 1;                               // 0x0CE0(0x0004)
	unsigned long                                      bLateJoinWaitingForStats : 1;                             // 0x0CE0(0x0004)
	unsigned long                                      bUseItemDown : 1;                                         // 0x0CE0(0x0004)
	unsigned long                                      bHeal : 1;                                                // 0x0CE0(0x0004)
	unsigned long                                      bTaunt : 1;                                               // 0x0CE0(0x0004)
	unsigned long                                      bOrbitMode : 1;                                           // 0x0CE0(0x0004)
	unsigned long                                      bZoomOut : 1;                                             // 0x0CE0(0x0004)
	unsigned long                                      bTargetRelativeRotation : 1;                              // 0x0CE0(0x0004)
	unsigned long                                      bAutoQuickSpawn : 1;                                      // 0x0CE0(0x0004)
	unsigned long                                      bUseBattleCamAutoFraming : 1;                             // 0x0CE0(0x0004)
	unsigned long                                      bBehindView : 1;                                          // 0x0CE0(0x0004) (Transient)
	unsigned long                                      bForceBehindView : 1;                                     // 0x0CE0(0x0004) (Transient)
	unsigned long                                      bRemotePlayerBehindView : 1;                              // 0x0CE0(0x0004) (Transient)
	unsigned long                                      bCameraOutOfWorld : 1;                                    // 0x0CE0(0x0004)
	unsigned long                                      bCameraLookAtIsFromKismet : 1;                            // 0x0CE0(0x0004)
	unsigned long                                      bCameraGodMode : 1;                                       // 0x0CE0(0x0004)
	unsigned long                                      bNonlinearZoomInterpolation : 1;                          // 0x0CE0(0x0004) (Transient)
	unsigned long                                      bEnteredWorld : 1;                                        // 0x0CE0(0x0004)
	unsigned long                                      bCarouselLoading : 1;                                     // 0x0CE0(0x0004)
	unsigned long                                      bGhostSpectatingFromDeadState : 1;                        // 0x0CE4(0x0004) (Transient)
	unsigned long                                      bDebugAI : 1;                                             // 0x0CE4(0x0004) (Config)
	float                                              ActivateItemDistance;                                     // 0x0CE8(0x0004)
	float                                              MaxSniperDist;                                            // 0x0CEC(0x0004)
	float                                              HeatCheckTime;                                            // 0x0CF0(0x0004)
	float                                              LastHeat[0x5];                                            // 0x0CF4(0x0004)
	class AActor*                                      LastTarget;                                               // 0x0D08(0x0004)
	float                                              LastTargetTime;                                           // 0x0D0C(0x0004)
	float                                              TargetDistance;                                           // 0x0D10(0x0004)
	struct FVector                                     TargetWorldLocation;                                      // 0x0D14(0x000C) (Transient)
	float                                              UpdateTargetTime;                                         // 0x0D20(0x0004)
	float                                              UpdateTargetRate;                                         // 0x0D24(0x0004)
	struct FLinearColor                                EnemyOutlineColor;                                        // 0x0D28(0x0010)
	struct FLinearColor                                HealingOutlineColor;                                      // 0x0D38(0x0010)
	float                                              TotalPostmatchTransitionTime[0x6];                        // 0x0D48(0x0004) (Const)
	float                                              DeathFadeOutTime;                                         // 0x0D60(0x0004) (Const)
	float                                              StagingHangarFadeInTime;                                  // 0x0D64(0x0004) (Const)
	float                                              SpawnFadeInTime;                                          // 0x0D68(0x0004) (Const)
	float                                              PrematchSpawnFadeInTime;                                  // 0x0D6C(0x0004) (Const)
	TEnumAsByte<ESelectStage_e>                        MechSelectStage;                                          // 0x0D70(0x0001)
	TEnumAsByte<EPostMatchState_e>                     PostMatchState;                                           // 0x0D71(0x0001)
	TEnumAsByte<EPostMatchState_e>                     NextPostMatchState;                                       // 0x0D72(0x0001)
	TEnumAsByte<EePredatorVisionState>                 PredatorVision;                                           // 0x0D73(0x0001)
	TEnumAsByte<EePredatorVisionState>                 TargetPredatorVision;                                     // 0x0D74(0x0001)
	TEnumAsByte<EMechHangarCamera_e>                   OldCameraPosition;                                        // 0x0D75(0x0001)
	TEnumAsByte<EMechHangarCamera_e>                   CameraPosition;                                           // 0x0D76(0x0001)
	unsigned char                                      IdentifiedTeam;                                           // 0x0D77(0x0001)
	TEnumAsByte<EPostMatchFadeType_e>                  PostMatchFadeType;                                        // 0x0D78(0x0001)
	TEnumAsByte<ERobotMoveState>                       PreFixupMoveState;                                        // 0x0D79(0x0001)
	TEnumAsByte<ESelectionValidationStatus>            OverallSelectionValidationStatus;                         // 0x0D7A(0x0001)
	TEnumAsByte<ESelectionValidationStatus>            ValidationStatus_ItemInstanceCollection;                  // 0x0D7B(0x0001)
	TEnumAsByte<ESelectionValidationStatus>            ValidationStatus_PresetLoaded;                            // 0x0D7C(0x0001)
	TEnumAsByte<ESelectionValidationStatus>            ValidationStatus_MechInstance;                            // 0x0D7D(0x0001)
	TEnumAsByte<ESelectionValidationStatus>            ValidationStatus_SelectedPrimaryWeapon;                   // 0x0D7E(0x0001)
	TEnumAsByte<ESelectionValidationStatus>            ValidationStatus_AchievementsLoaded;                      // 0x0D7F(0x0001)
	TEnumAsByte<ESelectionValidationResponse>          SelectionValidationResponse;                              // 0x0D80(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0D81(0x0003) MISSED OFFSET
	struct FRotator                                    PreviewMechRot;                                           // 0x0D84(0x000C)
	float                                              PreviewMechOrbitDistance;                                 // 0x0D90(0x0004)
	float                                              PreviewOrbitMin;                                          // 0x0D94(0x0004)
	float                                              PreviewOrbitMax;                                          // 0x0D98(0x0004)
	struct FVector                                     PreviewMechLoc;                                           // 0x0D9C(0x000C)
	struct FRotator                                    PreviewMechRotMin;                                        // 0x0DA8(0x000C)
	struct FRotator                                    PreviewMechRotMax;                                        // 0x0DB4(0x000C)
	float                                              HangarClipZ;                                              // 0x0DC0(0x0004)
	class UPostProcessChain*                           HangarPostProcessChain;                                   // 0x0DC4(0x0004) (Const)
	float                                              StagingHangarFOV;                                         // 0x0DC8(0x0004)
	class UPostProcessChain*                           PredatorVisionPostChain;                                  // 0x0DCC(0x0004) (Const)
	float                                              PredatorVisionTime;                                       // 0x0DD0(0x0004)
	float                                              PredatorVisionFadeTime;                                   // 0x0DD4(0x0004) (Const)
	struct FSiegeModeStats                             PostMatchSiegeStats;                                      // 0x0DD8(0x0014)
	struct FVector                                     CarouselMechLocation[0x6];                                // 0x0DEC(0x000C)
	struct FRotator                                    CarouselMechRotation[0x6];                                // 0x0E34(0x000C)
	struct FVector                                     CarouselMechLocationV[0x6];                               // 0x0E7C(0x000C)
	struct FRotator                                    CarouselMechRotationV[0x6];                               // 0x0EC4(0x000C)
	TArray<class AR_PreviewMech*>                      CarouselMechs;                                            // 0x0F0C(0x000C) (NeedCtorLink)
	int                                                CurrentCarouselStage;                                     // 0x0F18(0x0004)
	int                                                ActiveItemIndex;                                          // 0x0F1C(0x0004)
	float                                              LastItemSwitchTime;                                       // 0x0F20(0x0004)
	float                                              UseItemPressTime;                                         // 0x0F24(0x0004)
	class AActor*                                      OrbitTarget;                                              // 0x0F28(0x0004)
	float                                              OrbitDistance;                                            // 0x0F2C(0x0004)
	struct FVector                                     OrbitOffset;                                              // 0x0F30(0x000C)
	struct FVector                                     OrbitCenterOffset;                                        // 0x0F3C(0x000C)
	float                                              OrbitRoll;                                                // 0x0F48(0x0004)
	float                                              InitialOrbitTargetYaw;                                    // 0x0F4C(0x0004)
	float                                              CurrentCamInterp;                                         // 0x0F50(0x0004)
	float                                              CurrentCamTransitionTime;                                 // 0x0F54(0x0004)
	struct FVector                                     PreviewMechCamOffset[0x4];                                // 0x0F58(0x000C) (Const)
	class AR_Pawn*                                     KilledByPawn;                                             // 0x0F88(0x0004) (Transient)
	struct FVector                                     KilledLocation;                                           // 0x0F8C(0x000C) (Transient)
	float                                              RagdollCamDuration;                                       // 0x0F98(0x0004)
	float                                              KillerCamDuration;                                        // 0x0F9C(0x0004)
	class AHawkenSpectatorPoint*                       CurrSpectatorPoint;                                       // 0x0FA0(0x0004)
	struct FName                                       DefaultSpectateType;                                      // 0x0FA4(0x0008) (Const)
	class USeqAct_SpectatorCameraPath*                 BattleCamPath;                                            // 0x0FAC(0x0004) (Transient)
	int                                                TargetDamage;                                             // 0x0FB0(0x0004)
	int                                                TotalTargetDamage;                                        // 0x0FB4(0x0004)
	float                                              LastCameraTimeStamp;                                      // 0x0FB8(0x0004)
	float                                              LastKickWarningTime;                                      // 0x0FBC(0x0004)
	float                                              HoloTauntCooldown;                                        // 0x0FC0(0x0004) (Const)
	float                                              ServerLastTauntTime;                                      // 0x0FC4(0x0004)
	float                                              ClientLastEnemySpottedTime;                               // 0x0FC8(0x0004)
	float                                              ServerLastEnemySpottedTime;                               // 0x0FCC(0x0004)
	float                                              ClientLastNeedAssistanceTime;                             // 0x0FD0(0x0004)
	float                                              ServerLastNeedAssistanceTime;                             // 0x0FD4(0x0004)
	float                                              LastRallyPointTime;                                       // 0x0FD8(0x0004) (Transient)
	float                                              EnemySpottedInterval;                                     // 0x0FDC(0x0004) (Const)
	float                                              NeedAssistanceInterval;                                   // 0x0FE0(0x0004) (Const)
	float                                              RallyPointInterval;                                       // 0x0FE4(0x0004) (Const)
	float                                              RallyPointCheckUpDistance;                                // 0x0FE8(0x0004) (Const)
	float                                              RallyPointCheckDownDistance;                              // 0x0FEC(0x0004) (Const)
	float                                              RallyPointBumpUp;                                         // 0x0FF0(0x0004) (Const)
	class USoundCue*                                   EnemySightedVoiceCue;                                     // 0x0FF4(0x0004)
	class USoundCue*                                   EnemySightedSensorCue;                                    // 0x0FF8(0x0004)
	class USoundCue*                                   NeedAssistanceVoiceCue;                                   // 0x0FFC(0x0004)
	class USoundCue*                                   RallyPointVoiceCue;                                       // 0x1000(0x0004)
	class USoundCue*                                   HitConfirmCue;                                            // 0x1004(0x0004)
	class USoundCue*                                   KillConfirmCue;                                           // 0x1008(0x0004)
	class USoundCue*                                   ItemSwitchedCue;                                          // 0x100C(0x0004)
	class USoundCue*                                   ItemUnavailableCue;                                       // 0x1010(0x0004)
	class AActor*                                      CalcViewActor;                                            // 0x1014(0x0004)
	struct FVector                                     CalcViewActorLocation;                                    // 0x1018(0x000C)
	struct FRotator                                    CalcViewActorRotation;                                    // 0x1024(0x000C)
	struct FVector                                     CalcViewLocation;                                         // 0x1030(0x000C)
	struct FRotator                                    CalcViewRotation;                                         // 0x103C(0x000C)
	struct FRotator                                    CalcControllerRotation;                                   // 0x1048(0x000C)
	float                                              CalcEyeHeight;                                            // 0x1054(0x0004)
	struct FVector                                     CalcWalkBob;                                              // 0x1058(0x000C)
	float                                              FOVLinearZoomRate;                                        // 0x1064(0x0004)
	float                                              FOVNonlinearZoomInterpSpeed;                              // 0x1068(0x0004) (Transient)
	int                                                PlayerRating;                                             // 0x106C(0x0004)
	struct FCarouselInfo                               CarouselCats[0x3];                                        // 0x1070(0x01FC) (NeedCtorLink)
	int                                                currentCarouselCat;                                       // 0x1664(0x0004)
	float                                              NextCarouselActionTime;                                   // 0x1668(0x0004)
	float                                              CarouselActionCooldown[0x6];                              // 0x166C(0x0004)
	float                                              TransitionFade;                                           // 0x1684(0x0004)
	float                                              TransitionStartTime;                                      // 0x1688(0x0004)
	int                                                GhostSpectatingPitch;                                     // 0x168C(0x0004)
	struct FRClientAdjustment                          RPendingAdjustment;                                       // 0x1690(0x0008)
	float                                              ServerThrusterEnergy;                                     // 0x1698(0x0004)
	TScriptInterface<class UActivationHintProvider>    LastHintProvider;                                         // 0x169C(0x0008)
	TArray<struct FName>                               DebugAICategories;                                        // 0x16A4(0x000C) (NeedCtorLink)
	class UR_ActorWatch*                               ActorWatch;                                               // 0x16B0(0x0004) (Transient)
	int                                                KickWarningDialogId;                                      // 0x16B4(0x0004) (Transient)
	int                                                LastKickWarningDialogTime;                                // 0x16B8(0x0004) (Transient)
	TArray<struct FString>                             InputDisabledWhitelistCommands;                           // 0x16BC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PlayerController");
		return ptr;
	}


	void ServerReportPlayer(class AR_PlayerReplicationInfo* SuspiciousPRI, class AR_PlayerReplicationInfo* ReporterPRI, const struct FString& ReportDesc);
	bool InternalReportPlayer(const struct FString& PlayerName, const struct FString& ReportDesc);
	void ReportPlayer();
	void OnAccountAdminModeChanged(bool bIsAdmin);
	void NotifyAccountAuthorizationChanged();
	void WriteToLog(const struct FString& Param);
	void DebugDraw_AI_Rotation(class AR_HUD* H);
	void DebugDraw_AI(class AR_HUD* H);
	bool STATIC_DebugAIOn(const struct FName& Category);
	bool IsUsingCinematicCamera();
	void GetCarouselMechLocations();
	void PrintActiveBuffs();
	void AddAirDodge();
	void AddExplodeOnDeathBuff();
	void UpdatePredatorVision(float DeltaTime);
	void TogglePredatorVision(TEnumAsByte<EePredatorVisionState> NewState);
	void DeactivatePredatorVisionOverrides();
	void SetVisionColor(const struct FLinearColor& NewColor);
	void GetAchievementMapSpawnName(struct FString* MapNameTotal, struct FString* GameModeMapName);
	void NotifyMenuOfUnlockedAchievement(class UOnlineAchievementObject* AchievementObject);
	void PublishKeybindToAS(class UGFxObject* KeyArray, class UGFxObject* ConnectorArray);
	void OnAddCallout(class USeqAct_AddCallout* inAction);
	void TutorialSectionStopped(const struct FString& TutorialSectionName);
	void TutorialSectionStarted(const struct FString& TutorialSectionName);
	void TutorialCompleted(const struct FString& TutorialName);
	void TutorialStarted(const struct FString& TutorialName);
	void DisplayDebug(class AHUD* H, float* YL, float* YPos);
	void DrawPawnDebugText(class AHUD* H, class AR_Pawn* RPawn);
	void DrawOverheatDebugText(class AHUD* H, class AR_Pawn* RPawn);
	void ShowTargetDamage();
	void ClientSetXPandHPByCategory(const struct FExperiencePointGainedCategories& XPbyCategory, int HPbyCategory, int NewOverflowXP, int NewFreeOverflowXP);
	void ClientSetMechXPStats(const struct FMechXPChange& MechXPStats, int NumMechs);
	void ClientSetEndOfGameStats(const struct FGeneralMatchStats& GeneralStats);
	void ClientSetEndOfGameSiegeStats(const struct FSiegeModeStats& ServerSiegeStats);
	void SetCarouselStats(int Cat, const struct FCarouselMechInfo& Mech1, const struct FCarouselMechInfo& Mech2, const struct FCarouselMechInfo& Mech3, int StartIndex, int NumMechs);
	void ClientSetCarouselStats(int Cat, const struct FCarouselMechInfo& Mech1, const struct FCarouselMechInfo& Mech2, const struct FCarouselMechInfo& Mech3, int StartIndex, int NumMechs);
	void DrawHUD(class AHUD* H);
	void PostHUDRender(class AR_HUD* H);
	void ExitHangar();
	void CloseMechMenu();
	void JoinPublicVoiceChannel();
	void JoinTeamVoiceChannel();
	void ClientStartOnlineGame();
	void ShowLetterboxing();
	void ShowMenu();
	void ToggleCockpitMode(bool bShow);
	void ViewReticleSampler(bool bViewing);
	void ViewHUDSampler(bool bViewing);
	void UpdatePreviewPart(int invType, int Index, int SubType);
	void PreviewReticleType(int PrimaryIdx, int SecondaryIdx);
	void PreviewHUDColors(int friendColor, int neutralColor, int enemyColor, bool bTintReticle);
	bool GetCurrentMechPreset(struct FMechPreset* preset);
	void Sentinel_SetupForGamebasedTravelTheWorld();
	void ServerSetSelectedMechAbilityIndex(TEnumAsByte<EAbilities> AbilityIndex);
	int UpdateSelectedMechAbilityIndex(int presetIndex);
	void UpdatePreviewMechType(int presetIndex, bool bUpdateWeapons);
	void Destroyed();
	class ACameraActor* FindCarouselCameraActor();
	void UpdateCarouselLabelPositions(class AR_HUD* H);
	void ShowEndgameCarouselMechs(int CarouselStage, struct FCarouselInfo* CarouselCat);
	bool GetCarouselMech(const struct FString& PlayerName, class AR_PreviewMech** OutPreviewMech);
	void ClearCarouselMechs();
	void SetCarouselStage(int NewStage);
	void OnCarouselLoaded();
	void SetShowingCarouselTab(bool bShowing);
	void SetCarouselCat(int newCat, bool bForceUpdate);
	void DoMatchStateTransitions();
	void OnShowPostMatchCinematic();
	void SetCarouselCam();
	void OnShowPostMatchStats();
	void TriggerShowCarouselEvent();
	bool IsTransitioningTo(TEnumAsByte<EPostMatchState_e> TestPostMatchState);
	void StartPostMatchStateTransition(TEnumAsByte<EPostMatchState_e> NewPostMatchState);
	void UpdatePostMatchState();
	void RequestPostMatchStats();
	void ClientJoinPostMatch();
	void ClientShowLetterBoxing();
	void ClientShowVictoryMessage(bool bIsAWinner, unsigned char Rank);
	void SetupHeroCam();
	void UpdateStagingHangarCamera(float DeltaTime);
	bool MenuHasFocus();
	void HideSelectionMech();
	bool ConditionalShowSelectionMech();
	void ShowSelectionMech();
	void SyncViewTargetMeshVisibility();
	void TeamTalk();
	void Talk();
	void OnStartMechSelect();
	void GotoSelectionStage(int NewStage);
	void ServerUpdateSelectionStage(int ClientSelectStage);
	void TogglePostChain(class UPostProcessChain* PostProcessChainOverload);
	void EnableHeightFogHangar(bool bEnabled);
	void ServerPlayerReady(bool bReady);
	void LobbyReady(bool bReady);
	void SetTargetCrosshair(bool bTargeting);
	void GetTarget(class AR_Pawn* RPawn);
	bool ValidTarget(class AActor* Target);
	bool UsingFirstPersonCamera();
	void PlayStartupMessage(unsigned char StartupStage);
	void AcknowledgePossession(class APawn* P);
	void ResetCameraMode();
	void UnPossess();
	void ClientRestart(class APawn* NewPawn);
	void ClientShowPlayerSwitchTeams(const struct FUniqueNetId& PlayerID, const struct FString& TeamName);
	void ClientShowPlayerVolunteered();
	void ClientNotifyTeamsAreImbalanced();
	void ClientShowGenericXPEvent(TEnumAsByte<EExperiencePointEventType> XPEventType, int Points);
	void ClientShowDominationEnded(const struct FString& PlayerName, int PlayerID);
	void ClientShowKilledNemesis(const struct FString& PlayerName, int PlayerID, int Points);
	void ClientShowBecameNemesis(const struct FString& PlayerName, int PlayerID, int Points);
	void ClientShowNewNemesis(const struct FString& PlayerName, int PlayerID);
	void ClientShowKill(class APlayerReplicationInfo* KilledPRI, class UClass* dmgType, const struct FVector& Loc, int totalPoints, float PercentDamage, int KillPoints, int MultiKillLevel, int MultiKillPoints, int KillStreak, int KillStreakPoints, bool bRevenge, int RevengePoints, bool bAvenger, int AvengerPoints, bool bSavior, int SaviorPoints, bool bDefendingAA, int DefendingAAPoints, bool bAttackingAA, int AttackingAAPoints, bool bContestingAA, int ContestingAAPoints, bool bCrushKill, int CrushKillPoints, bool bUnderdogBonus, int UnderdogBonusPoints);
	void ClientShowAssist(class APlayerReplicationInfo* KilledPRI, const struct FVector& Loc, int totalPoints, float PercentDamage, int AssistPoints, bool bDefendingAA, int DefendingAAPoints, bool bAttackingAA, int AttackingAAPoints, bool bContestingAA, int ContestingAAPoints, bool bCritialAssist, bool bUnderdogBonus, int UnderdogBonusPoints);
	void ClientShowAlert(int alert);
	void ClientShowPopup(class USeqAct_ShowPopup* Action);
	void ClientTakeDamage(int DamageForFrame);
	void RobotClientPlayTakeHit(const struct FVector& HitPos, float Distance, float Damage, class UClass* DamageType, class AActor* DamagingActor);
	void R_NotifyTakeHit(class AActor* DamageCauser, const struct FVector& HitLocation, float Damage, class UClass* DamageType);
	void ClientAddRallyPointIndicator(const struct FVector& Loc);
	void ServerRequestRallyPoint(float X, float Y);
	void SetTeamRallyPoint(float X, float Y);
	void ClientAddNeedAssistanceIndicator(class APawn* P);
	void ServerRequestNeedAssistance();
	void NeedAssistance();
	void ClientAddEnemyIndicator(const struct FVector& spottedLoc, bool bFromSensor);
	void ServerRequestEnemySpotted(const struct FVector& spottedLoc);
	void EnemySpotted();
	void ToggleRadar();
	void ToggleMap();
	void RebootVisor(TEnumAsByte<EVisorBootMode> desiredBootMode);
	void InitializeVisor();
	void ShutdownVisor();
	void EndHeal();
	void StartHeal();
	void UpdateRotation(float DeltaTime);
	struct FRotator GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc);
	bool AimingHelp(bool bInstantHit);
	void ClientUpdatePosition();
	void ClientHoloTauntUnavailable();
	void ClientUsedHoloTaunt();
	void TriggerHoloTauntClient();
	void HoloTauntUp();
	void HoloTaunt();
	void EndAnimatedTaunt();
	void AnimatedTaunt();
	void SendFramerate();
	void PostPlayerSpawn();
	void ClientSetSpawnFailed(bool bFailed);
	void ClientPostPlayerSpawnFailed();
	void UpdateReplicationInfoForMech(int HoloTauntType, struct FMechPreset* preset);
	void ServerSetStartMech(const struct FString& Mech_InstanceId, int PrimaryWeapon, int HoloTauntType);
	void StopMusicTrack();
	void StopIntroMusicTrack();
	void DoSpawn(int presetIndex, int PrimaryWeapon, int HoloTauntType);
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
	void ClientResetCameraInterpolation();
	void OnViewTargetChanged(class AActor* OldViewTarget, class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams);
	void SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams);
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	bool IsBattleCamActor(class ACameraActor* CamActorVT);
	bool AllowViewTargetSwitch(class AActor* NewViewTarget);
	bool ShouldOverrideWithBattleCam(class AActor* NewViewTarget);
	class AActor* LocallySetInitialViewTarget(bool bSkipSetViewTarget);
	class UHawkenPawnCameraManager* GetPawnCameraManager(bool bLocalPlayersOnly);
	class AHawkenPlayerCamera* GetHawkenCam(bool bLocalPlayersOnly);
	bool IsUsingQuickSpawn();
	float GetFOVAngle();
	float GetStagingHangarFOV();
	void RemoveOculusOverrides();
	void ApplyOculusOverrides();
	void ColorFadeTest();
	void OnRefreshOnlineMechStatsCompleted(bool bWasSuccessful, const struct FUniqueNetId& PlayerID);
	void InitializeForQuickSpawn();
	void ClientSetHUD(class UClass* newHUDType);
	void ClientSpawnSelectionFailed(TEnumAsByte<ESelectionValidationResponse> Reason);
	void ClientSpawnSelectionValidated();
	void ServerValidatePlayerSpawnSelection();
	void ValidatePlayerMechSelections();
	bool IsItemIndexValidSelection(int ItemIndex, int Item1, int Item2, int Item3);
	void DoMechSpawn(int presetIndex, int PrimaryWeapon, int HoloTauntType);
	void KeepCockpitTexturesResident(int TargetMechType);
	void UpdateRespawnTimerUI();
	void ServerPickValidViewTarget();
	void ClientClearForcedCameraFOV();
	void ClientSetForcedCameraFOV(float inFOV);
	void ClearFocusPoint(bool bFromKismet, bool bForceLeaveRotation);
	void ClearCameraFocus(class USeqAct_CameraLookAt* Action, class AHawkenPlayerCamera* HawkenCam);
	void CameraLookAtFinished(class USeqAct_CameraLookAt* Action);
	void ClientCameraLookAtFinished(class USeqAct_CameraLookAt* Action);
	void SetFocusPoint(bool bFromKismet, class AActor* FocusActor, const struct FVector2D& InterpSpeedRange, const struct FVector2D& InFocusFOV, float CameraFOV, bool bAlwaysFocus, bool bAdjustCamera, bool bIgnoreTrace, const struct FName& FocusBoneName);
	void ClientProcessCameraLookAt(class USeqAct_CameraLookAt* Action, class AActor* FocusActor);
	void ProcessCameraLookAt(class USeqAct_CameraLookAt* Action, class AActor* FocusActor);
	void OnCameraLookAt(class USeqAct_CameraLookAt* Action);
	bool WantsSpectatorUI();
	void ServerSetBattleCamPath(int Id);
	void CacheBattleCamPath();
	void ServerViewBestPlayer();
	void ServerViewPrevSpectatorPoint();
	void ServerViewNextSpectatorPoint();
	void ServerViewFirstSpectatorPoint();
	void ViewPrevSpectatorPoint();
	void ViewNextSpectatorPoint();
	void ViewFirstSpectatorPoint();
	void PickPrevViewTarget();
	void PickNextViewTarget();
	void PickInitialViewTarget();
	bool IsSpectatorCamMovingOnBattleCamPath();
	void ServerUnPossess();
	void ClientColorFade(const struct FColor& FadeColor, unsigned char FromAlpha, unsigned char ToAlpha, float FadeTime);
	void ClientTeleportFade();
	bool InStagingHangar();
	void TransitionToStagingHangar();
	void TransitionFromDeadState();
	void ServerSpectate(const struct FName& SpectateType);
	void ClientTransitionToSpectate(const struct FName& SpectateType);
	void TransitionToSpectate(const struct FName& SpectateType);
	bool IsSpecializedSpectateType(const struct FName& SpectateType);
	bool IsValidSpectatingType(const struct FName& SpectateType);
	void ShowVictoryBackgroundBlurPost(bool On);
	void WaitForRespawn();
	bool IsDead();
	void OnKickWarningDialogClosed(int InDialogId, int SelectionIdx);
	void OnTimerKickWarning();
	void ClientShowKickWarningDialog();
	void KickWarning();
	void AskForPawn();
	void RotateMechPreview();
	void ServerGetMapList();
	void ServerVoteMapIndex(int MapIndex);
	void VoteMap(int MapIndex);
	void ServerResignGame();
	void ResignGame();
	void UpdateDOF(float FocusDistance);
	void EndGetHitEffect();
	void StartPostGetHitEffect();
	void ClientReset();
	void ClientHearSound(class USoundCue* ASound, class AActor* SourceActor, const struct FVector& SourceLocation, bool bStopWhenOwnerDestroyed, bool bIsOccluded);
	void CheckBulletWhip(class USoundCue* BulletWhip, const struct FVector& FireLocation, const struct FVector& FireDir, const struct FVector& HitLocation, float MaxDistanceSqr);
	void DeadWaitingStuff();
	void PlayerTick(float DeltaTime);
	void ClientOnHitEnemy(bool bKilled);
	void ClientEndZoom();
	void EndZoomNonlinear(float ZoomInterpSpeed);
	void EndZoomInstant();
	void EndZoom();
	void StopZoom();
	void StartZoomNonlinear(float NewDesiredFOV, float NewZoomInterpSpeed);
	void StartZoom(float NewDesiredFOV, float NewZoomRate, bool bUseZoomUI);
	void SetVisorUIMode(TEnumAsByte<EVisorUIMode> NewMode);
	void AdjustFOV(float DeltaTime);
	void OnLeaveVoiceChannelGameEndedComplete(bool bWasSuccessful);
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	void GameHasEnded(class AActor* EndGameFocus, bool bIsWinner);
	void ClientDoCarouselAction(const struct FString& PlayerName, TEnumAsByte<ECarouselActions_e> ActionType, int TauntType);
	void ServerDoCarouselAction(TEnumAsByte<ECarouselActions_e> ActionType);
	void SetHangarCameraPosition(TEnumAsByte<EMechHangarCamera_e> NewCameraPosition, float TransitionTime);
	void SetGaragePanelOpened(bool bOpen);
	bool CanDoCarouselAction();
	void DemoViewFromActor(class AActor* A);
	bool MoveMatches(class USavedMove* CurMove);
	void R_LongClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ, float NewThrusterEnergy, TEnumAsByte<ERobotMoveState> NewMoveState);
	void R_VeryShortClientAdjustPosition(float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase, float NewThrusterEnergy, TEnumAsByte<ERobotMoveState> NewMoveState);
	void R_ShortClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase, float NewThrusterEnergy, TEnumAsByte<ERobotMoveState> NewMoveState);
	void R_ClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewThrusterEnergy, TEnumAsByte<ERobotMoveState> NewMoveState);
	void ServerMoveHandleClientError(float TimeStamp, const struct FVector& Accel, const struct FVector& ClientLoc);
	void SendClientAdjustment();
	void MoveAutonomous(float DeltaTime, unsigned char CompressedFlags, const struct FVector& newAccel, const struct FRotator& DeltaRot);
	void OnHawkenSpeedHackDetection();
	float GetServerMoveDeltaTime(float TimeStamp);
	void OnSpeedHackDetection(float ClientDeltaTime);
	void ServerVolunteerForAutoBalance();
	void VolunteerForAutoBalance();
	void SwitchItem(unsigned char I);
	bool ShouldAutoRestockConsumableResource(TEnumAsByte<EInventoryItemType> ConsumableType);
	bool CanActivatePassiveConsumable(bool bUseLocalPlayerCollection);
	void ClientActivatePassiveConsumable();
	bool CanTriggerHoloTaunt(bool bUseLocalPlayerCollection);
	void UsePassiveConsumable();
	struct FVector GetOrbitCamLocation();
	struct FRotator GetOrbitCamRotation();
	float GetOrbitTargetYaw();
	void StopAltFireMode(unsigned char FireModeNum);
	void StartAltFireMode(unsigned char FireModeNum);
	void ServerUseAbility();
	void NotifyDetonatedItemExploded(const struct FName& DepletedItemClassName);
	void ServerUseItem(int UsedItemIndex, float ChargeTime);
	void ClientCycleItem(int DepletedItemIndex);
	void CycleToFirstAvailableItem();
	void DoUseItemUp();
	void ItemWaitTime();
	void DoUseItemDown();
	void ActivateNearestInteractiveObject();
	void ReceivedGameClass(class UClass* GameClass);
	void TeamSay(const struct FString& msg);
	void Say(const struct FString& msg);
	bool SendGameChat(const struct FString& msg, int Channel);
	void QuitToMainMenu(bool bLeaveParty);
	void InitInputSystem();
	void CharacterProcessingComplete();
	void ClientSetBehindView(bool bNewBehindView);
	void SetBehindView(bool bNewBehindView);
	bool InBehindView();
	bool IsBehindViewCommandAllowed();
	void BehindView();
	void SetUseFixedRadar(bool setting);
	TScriptInterface<class UInteractiveObject> FindClosestInteractiveObject(float interactDistanceToCheck, float MinCosine);
	bool IsLocationWithinRange(const struct FVector& TargetLocation, float MaxRange);
	bool IsLookingAtLocation(const struct FVector& TargetLocation, float MinDotResult, float* OutAngle);
	void ServerActionPressed();
	void ServerCancelPressed();
	void ActionPressed();
	int GetNextItemIndex(int ItemIndex);
	int GetPrevItemIndex(int ItemIndex);
	void PrevItem(bool bCheckCooldown);
	void NextItem(bool bCheckCooldown);
	bool HaveItemForIndex(int itemSlot, bool bCheckCooldown);
	void UpdateReplicatedItemIndex();
	void LocallySetActiveItemIndex(int NewItemIndex);
	void ServerChangeActiveItemIndex(int NewItemIndex);
	void SetActiveItemIndex(int NewItemIndex);
	void DeployHoloTaunt(float ChargeTime, int TauntType);
	bool ServerRequestHoloTaunt(float ChargeTime, bool bDoDeploy);
	void CleanupPawn();
	void CleanupPRI();
	void ForceShutdownWeapons();
	void PrintActiveParticlePool();
	void TestPlayerStartCollision();
	void TestRatePlayerSpawnSpeed();
	void SwitchToBestWeapon(bool bForceNewWeapon);
	void ServerTrackConnectionRequestId(const struct FString& ConnectionRequestId);
	void ClientTrackConnectionRequestId();
	void PostBeginPlay();
};


// Class HawkenGame.R_PlayerInput
// 0x0010 (0x04B0 - 0x04A0)
class UR_PlayerInput : public UMobilePlayerInput
{
public:
	float                                              DirHoldTime;                                              // 0x04A0(0x0004)
	TEnumAsByte<EDoubleClickDir>                       PrevDoubleClickMove;                                      // 0x04A4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04A5(0x0003) MISSED OFFSET
	unsigned long                                      bDisableAllInput : 1;                                     // 0x04A8(0x0004) (Transient)
	float                                              ReEnableInputFailSafeTime;                                // 0x04AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PlayerInput");
		return ptr;
	}


	void PlayerInput(float DeltaTime);
	int RemoveBinding(const struct FName& BindingName);
	int GetBindingIndex(const struct FName& BindingName);
	void DisableInputFailSafe();
	void DisableAllInputProcessing(bool bDisable, bool bDisableFailSafe);
	TEnumAsByte<EDoubleClickDir> GetButtonBoostDoubleClickMove(float StickMag, float DeltaTime);
	TEnumAsByte<EDoubleClickDir> CheckForDoubleClickMove(float DeltaTime);
	void ResetKeyBindings();
	void GetBindingsForCommand(const struct FString& Command, const struct FCommandBindingModifiers& ResultModifier, bool IgnoreReplacement, TArray<struct FString>* BindingList);
};


// Class HawkenGame.R_PlayerInventory
// 0x0000 (0x003C - 0x003C)
class UR_PlayerInventory : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PlayerInventory");
		return ptr;
	}


	TEnumAsByte<EInventoryItemType> GetPartInventoryType(int MechType, TEnumAsByte<EPartLocation> Location);
};


// Class HawkenGame.R_Proj_Tracer
// 0x0028 (0x0274 - 0x024C)
class AR_Proj_Tracer : public AUDKProjectile
{
public:
	class UStaticMeshComponent*                        TracerMesh;                                               // 0x024C(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              MeshScaleUpTime;                                          // 0x0250(0x0004) (Edit)
	float                                              MeshScaleDownTime;                                        // 0x0254(0x0004) (Transient)
	unsigned long                                      bScalingDown : 1;                                         // 0x0258(0x0004)
	float                                              CurScale;                                                 // 0x025C(0x0004)
	struct FVector                                     EndLoc;                                                   // 0x0260(0x000C)
	float                                              TracerSpeed;                                              // 0x026C(0x0004) (Const)
	float                                              MaxMeshScale;                                             // 0x0270(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Tracer");
		return ptr;
	}


	void ScaleDownFinishedNotify();
	void KillProjectile();
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void DoSetup(const struct FVector& NewStartLoc, const struct FVector& NewEndLoc);
};


// Class HawkenGame.R_ProjectileBase
// 0x0070 (0x02BC - 0x024C)
class AR_ProjectileBase : public AUDKProjectile
{
public:
	unsigned long                                      bSuppressSounds : 1;                                      // 0x024C(0x0004)
	unsigned long                                      bImportantAmbientSound : 1;                               // 0x024C(0x0004)
	unsigned long                                      bZeroRotationPitch : 1;                                   // 0x024C(0x0004) (Const)
	unsigned long                                      bAdvanceExplosionEffect : 1;                              // 0x024C(0x0004)
	unsigned long                                      bSuppressExplosionFX : 1;                                 // 0x024C(0x0004)
	unsigned long                                      bWaitForEffects : 1;                                      // 0x024C(0x0004)
	unsigned long                                      bAttachExplosionToVehicles : 1;                           // 0x024C(0x0004)
	unsigned long                                      bHaveTrackedHit : 1;                                      // 0x024C(0x0004)
	unsigned long                                      bBreakHomingIfMissed : 1;                                 // 0x024C(0x0004) (Const)
	class USoundCue*                                   AmbientSound;                                             // 0x0250(0x0004)
	class UAudioComponent*                             AmbientComponent;                                         // 0x0254(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    ProjEffects;                                              // 0x0258(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             ProjFlightTemplate;                                       // 0x025C(0x0004)
	class UParticleSystem*                             ProjFlightSnowTemplate;                                   // 0x0260(0x0004)
	class UParticleSystem*                             ProjExplosionTemplate;                                    // 0x0264(0x0004)
	class UMaterialInterface*                          ExplosionDecal;                                           // 0x0268(0x0004)
	float                                              DecalWidth;                                               // 0x026C(0x0004)
	float                                              DecalHeight;                                              // 0x0270(0x0004)
	float                                              DurationOfDecal;                                          // 0x0274(0x0004)
	struct FName                                       DecalDissolveParamName;                                   // 0x0278(0x0008)
	float                                              MaxEffectDistance;                                        // 0x0280(0x0004)
	float                                              TossZ;                                                    // 0x0284(0x0004)
	float                                              GlobalCheckRadiusTweak;                                   // 0x0288(0x0004)
	class UClass*                                      ProjectileLightClass;                                     // 0x028C(0x0004)
	class UPointLightComponent*                        ProjectileLight;                                          // 0x0290(0x0004) (ExportObject, Component, EditInline)
	class UClass*                                      ExplosionLightClass;                                      // 0x0294(0x0004)
	float                                              MaxExplosionLightDistance;                                // 0x0298(0x0004)
	float                                              ExplosionCameraShakeRadius;                               // 0x029C(0x0004)
	int                                                WeaponHandFiredFrom;                                      // 0x02A0(0x0004)
	struct FVector                                     TearOffVelocity;                                          // 0x02A4(0x000C) (Net)
	float                                              HomingStrength;                                           // 0x02B0(0x0004)
	int                                                AccelMode;                                                // 0x02B4(0x0004)
	class AActor*                                      HomingTarget;                                             // 0x02B8(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ProjectileBase");
		return ptr;
	}


	float STATIC_GetRange();
	float GetTimeToLocation(const struct FVector& TargetLoc);
	float STATIC_StaticGetTimeToLocation(const struct FVector& TargetLoc, const struct FVector& StartLoc, class AController* RequestedBy);
	float STATIC_CalculateTravelTime(float Dist, float MoveSpeed, float MaxMoveSpeed, float AccelMag);
	bool CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void MyOnParticleSystemFinished(class UParticleSystemComponent* PSC);
	void Destroyed();
	void HideProjectile();
	void TornOff();
	struct FVector GetNormalForDecal();
	void ShutDown();
	void TearOffTimer();
	bool ShouldSpawnExplosionLight(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SpawnExplosionEffects(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SetExplosionEffectParameters(class UParticleSystemComponent* ProjExplosion);
	void SpawnFlightEffects();
	bool TrackHit(class AActor* HitActor, bool bIgnoreHitActor);
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Init(const struct FVector& Direction);
	void SetInitialState();
	void PostBeginPlay();
	void PreBeginPlay();
	bool CanSplash();
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void CreateProjectileLight();
};


// Class HawkenGame.R_Projectile
// 0x006D (0x0329 - 0x02BC)
class AR_Projectile : public AR_ProjectileBase
{
public:
	struct FString                                     PropSheetName;                                            // 0x02BC(0x000C) (Const, NeedCtorLink)
	struct FString                                     PropPrefix;                                               // 0x02C8(0x000C) (Const, NeedCtorLink)
	int                                                PropSheetIdx;                                             // 0x02D4(0x0004)
	int                                                ItemPropSheetIdx;                                         // 0x02D8(0x0004)
	unsigned long                                      bBlockedByTurret : 1;                                     // 0x02DC(0x0004)
	unsigned long                                      bIsGrenade : 1;                                           // 0x02DC(0x0004) (Const)
	unsigned long                                      bDamageFracturedOnTrace : 1;                              // 0x02DC(0x0004) (Const)
	unsigned long                                      bIgnoreShields : 1;                                       // 0x02DC(0x0004)
	class USoundCue*                                   ImpactSoundConcrete;                                      // 0x02E0(0x0004)
	class USoundCue*                                   ImpactSoundWater;                                         // 0x02E4(0x0004)
	class AActor*                                      ActorInstigator;                                          // 0x02E8(0x0004)
	class URadialBlurComponent*                        ExplosionRadialBlur;                                      // 0x02EC(0x0004) (ExportObject, Component, EditInline)
	float                                              RadialBlurFadeTimeRemaining;                              // 0x02F0(0x0004)
	float                                              RadialBlurFadeTime;                                       // 0x02F4(0x0004)
	float                                              RadialBlurMaxBlurAmount;                                  // 0x02F8(0x0004)
	class ULensFlareComponent*                         LensFlare;                                                // 0x02FC(0x0004) (ExportObject, Component, EditInline)
	float                                              LensFlareTimeRemaining;                                   // 0x0300(0x0004)
	class UParticleSystem*                             ProjExplosionAirTemplate;                                 // 0x0304(0x0004)
	float                                              ExplosionScale;                                           // 0x0308(0x0004)
	float                                              SpeedDefault;                                             // 0x030C(0x0004)
	float                                              MaxSpeedDefault;                                          // 0x0310(0x0004)
	float                                              AccelRateDefault;                                         // 0x0314(0x0004)
	float                                              DamageDefault;                                            // 0x0318(0x0004)
	float                                              DamageRadiusDefault;                                      // 0x031C(0x0004)
	float                                              InnerDamageRadius;                                        // 0x0320(0x0004)
	float                                              MinDamage;                                                // 0x0324(0x0004)
	TEnumAsByte<ExplosiveImpactType_e>                 ExplosiveImpactType;                                      // 0x0328(0x0001) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Projectile");
		return ptr;
	}


	void AdjustTowards(const struct FVector& TargetLocation, float DeltaTime);
	struct FVector GetHomingAccel(const struct FVector& DeltaPos, float DeltaTime);
	class UParticleSystem* GetExplosionForPhysicsMaterial(class UR_PhysicalMaterialProperty* MaterialEffects, int Index);
	void SpawnRadialBlur();
	bool HurtRadius(float BaseDamage, float HurtDamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage);
	float GetAdjustedRadius(float Inradius);
	float CalcRadiusDamage(class AActor* HitActor, const struct FVector& HurtOrigin);
	class AActor* GetDamageCauser();
	class UParticleSystemComponent* SpawnExplosionParticles(class UParticleSystem* ExplosionTemplate, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SpawnExplosionEffects(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void DoExtraExplosionEffects();
	struct FName GetPhysMaterialName(class UPhysicalMaterial* PhysMaterial);
	float STATIC_StaticGetTimeToLocation(const struct FVector& TargetLoc, const struct FVector& StartLoc, class AController* RequestedBy);
	float STATIC_GetDamage();
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
	void SetItemProjectileDefaults(class UR_ItemDatabaseProps* Props, int ItemSheetIdx);
	void PreBeginPlay();
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool ShouldTouch(class AActor* Other, const struct FVector& HitNormal, struct FVector* HitLocation);
};


// Class HawkenGame.R_Proj_AntiBaseReactorMissile
// 0x004F (0x0378 - 0x0329)
class AR_Proj_AntiBaseReactorMissile : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	struct FVector                                     TargetOffset;                                             // 0x032C(0x000C) (Net)
	float                                              StartHomingStrength;                                      // 0x0338(0x0004)
	float                                              EndHomingStrength;                                        // 0x033C(0x0004)
	float                                              StartHomingTime;                                          // 0x0340(0x0004)
	float                                              HomingStrengthLerpTime;                                   // 0x0344(0x0004)
	float                                              DamageToBase;                                             // 0x0348(0x0004)
	float                                              PotentialTargetOffsetX;                                   // 0x034C(0x0004) (Const)
	float                                              PotentialTargetOffsetY;                                   // 0x0350(0x0004) (Const)
	float                                              PotentialTargetOffsetZ;                                   // 0x0354(0x0004) (Const)
	float                                              OffsetLerpOutTime;                                        // 0x0358(0x0004) (Const)
	float                                              TimeActive;                                               // 0x035C(0x0004)
	int                                                TeamIndex;                                                // 0x0360(0x0004)
	struct FVector                                     VisualOffset;                                             // 0x0364(0x000C) (Net)
	float                                              VisualLerpTime;                                           // 0x0370(0x0004)
	float                                              VisualLerpStartTime;                                      // 0x0374(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_AntiBaseReactorMissile");
		return ptr;
	}


	void SetHomingTarget(class AActor* Target);
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Tick(float DeltaTime);
};


// Class HawkenGame.R_StatusEffect_Base
// 0x006C (0x0240 - 0x01D4)
class AR_StatusEffect_Base : public AActor
{
public:
	class AR_Pawn*                                     HawkenOwner;                                              // 0x01D4(0x0004) (Edit, Net, EditConst)
	class AR_Pawn*                                     HawkenInstigator;                                         // 0x01D8(0x0004) (Edit, Net, EditConst)
	class AR_StatusEffect_Base*                        NextEffect;                                               // 0x01DC(0x0004) (Edit, Net, EditConst)
	class AR_SE_EffectChain*                           ParentEffect;                                             // 0x01E0(0x0004) (Edit, Net, EditConst)
	class UClass*                                      DelayedEffectForNextPawn;                                 // 0x01E4(0x0004) (Edit, EditConst)
	unsigned long                                      bTriggered : 1;                                           // 0x01E8(0x0004) (Transient)
	unsigned long                                      bInfiniteDuration : 1;                                    // 0x01E8(0x0004) (Edit)
	unsigned long                                      bInstantDuration : 1;                                     // 0x01E8(0x0004) (Edit)
	unsigned long                                      bAffectsSelf : 1;                                         // 0x01E8(0x0004) (Edit)
	unsigned long                                      bAffectsEnemies : 1;                                      // 0x01E8(0x0004) (Edit)
	unsigned long                                      bAffectsAllies : 1;                                       // 0x01E8(0x0004) (Edit)
	unsigned long                                      bRequiresTarget : 1;                                      // 0x01E8(0x0004) (Edit)
	unsigned long                                      bIsRadialEffect : 1;                                      // 0x01E8(0x0004) (Edit)
	unsigned long                                      bIsToggleEffect : 1;                                      // 0x01E8(0x0004) (Edit)
	unsigned long                                      bAllowedInCombat : 1;                                     // 0x01E8(0x0004) (Edit)
	unsigned long                                      bCanActivateFromStealth : 1;                              // 0x01E8(0x0004) (Edit)
	unsigned long                                      bRequiresStealth : 1;                                     // 0x01E8(0x0004) (Edit)
	unsigned long                                      bRequiresStealthToActivate : 1;                           // 0x01E8(0x0004) (Edit)
	unsigned long                                      bRequiresBehindTarget : 1;                                // 0x01E8(0x0004) (Edit)
	unsigned long                                      bRecentlyActive : 1;                                      // 0x01E8(0x0004) (Net)
	class UClass*                                      AppliedFromInternalClass;                                 // 0x01EC(0x0004) (Net)
	TArray<struct FStatusEffectDuration>               EffectDuration;                                           // 0x01F0(0x000C) (NeedCtorLink)
	struct FStatusEffectPeriodicUpdate                 EffectPeriod;                                             // 0x01FC(0x000C) (Edit)
	struct FStatusEffectKillAssistInfo                 KillAssistInfo;                                           // 0x0208(0x0008) (Edit)
	float                                              EffectRadius;                                             // 0x0210(0x0004) (Edit)
	float                                              RequiredHealthRatio;                                      // 0x0214(0x0004) (Edit)
	struct FStatusEffectFlags                          EffectOwnerFlags;                                         // 0x0218(0x0004) (Edit, Net, EditConst)
	struct FStatusEffectFlags                          EffectInstigatorFlags;                                    // 0x021C(0x0004) (Edit, Net, EditConst)
	TArray<class AR_StatusEffect_Base*>                DependentEffects;                                         // 0x0220(0x000C) (Const, NeedCtorLink)
	float                                              PersistentEffectDelay;                                    // 0x022C(0x0004)
	float                                              ActiveTimeoutLength;                                      // 0x0230(0x0004) (Const)
	struct FScriptDelegate                             __OnQueryMovementModifier__Delegate;                      // 0x0234(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_StatusEffect_Base");
		return ptr;
	}


	bool GetIsActiveForHUD();
	void RecentlyActiveTimer();
	void ClearRecentlyActive();
	void SetRecentlyActive();
	void DisplayEffectDebug(class AHUD* H, float* YL, float* YPos, struct FFontRenderInfo* FontRI);
	bool STATIC_StaticShouldToggleEffect();
	bool ShouldToggleEffect();
	struct FName GetPeriodicTimerCallback();
	struct FName GetExpirationTimerCallback();
	float GetSafeTimedDuration();
	float GetDuration();
	float STATIC_StaticGetEffectRadius();
	float GetEffectRadius();
	bool STATIC_StaticIsRadialEffect();
	bool IsRadialEffect();
	bool STATIC_IsAttackerBehindTarget(class AR_Pawn* AttackerPawn, class AR_Pawn* TargetPawn, float MaxRange);
	bool ShouldAffectTarget(class AR_Pawn* TargetPawn, class AR_Pawn* InstigatorPawn);
	bool STATIC_HasRequiredHealthRatio(class AR_Pawn* TargetPawn, class AR_Pawn* InstigatorPawn);
	bool STATIC_IsValidForTarget(class AR_PawnBase* TargetPawnBase, class AR_PawnBase* InstigatorPawnBase);
	bool IsStackableWith(class AR_StatusEffect_Base* Other);
	bool IsActive();
	void SetInstigator(class APawn* InInstigator);
	void CacheOwner();
	void RemovedFromChain(class AR_StatusEffect_Base* ChainOwner);
	bool ClearChain();
	bool RemoveChainedEffect(class AR_StatusEffect_Base* EffectToRemove);
	bool AddChainedEffect(class AR_StatusEffect_Base* EffectToAdd);
	void SpawnPersistentVFX();
	void SpawnInitialVFX(class AR_PawnBase* TriggerPawn);
	void AdjustEnergyTransferAmount(float EnergyUnitsIn, TEnumAsByte<EnergyPickupType_e> PickupType, bool bEnergyStation, float* out_EnergyUnitsToGain, float* out_EnergyUnitsToRemoveFromSource);
	void AdjustIncomingDamage(class UClass* dmgType, class AController* DmgInstigator, class APawn* InstigatorPawn, class AActor* DamageCauser, float OriginalDamage, float* out_Damage, struct FVector* out_Momentum, struct FTraceHitInfo* out_HitInfo);
	bool EnablesAirDodge();
	bool EnablesAir180();
	bool PreventDeath(class AR_Pawn* DyingPawn, class AController* Killer, class UClass* KillingBlowDamageType, const struct FVector& KillingBlowLocation);
	void HandleOwnerDied(class AR_Pawn* PawnOwner);
	void HandleApplied(class AR_Pawn* PawnOwner);
	void NotifyAACaptured();
	void NotifyEUDelivered(int Amount);
	void NotifySiloCaptured();
	void NotifyAssistMade();
	void NotifyKillMade();
	void NotifyDamageDealt(float Damage, class UClass* dmgType, class APawn* DamagedPawn);
	void NotifyDamageTaken(float Damage, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, class UClass* dmgType, class AController* DmgInstigator, class APawn* InstigatorPawn, class AActor* DamageCauser);
	void PeriodicCallback();
	bool StartPeriodicTimer();
	float GetPeriodicTimerDuration();
	void TimedEffectComplete();
	void StartEffectTimer();
	void InitTimers();
	bool HasDurationMode(TEnumAsByte<EEffectDurationType> DurationType, float* DurationValue);
	void EffectExpired();
	void StopEffect();
	void StartEffect();
	void TriggerEffect();
	void ReplicatedEvent(const struct FName& VarName);
	void TriggerIfReady();
	bool IsReadyForClientToTrigger();
	void Destroyed();
	void SetInternalClass(class UClass* RIB);
	void PostBeginPlay();
	float OnQueryMovementModifier();
};


// Class HawkenGame.R_SE_EffectChain
// 0x0014 (0x0254 - 0x0240)
class AR_SE_EffectChain : public AR_StatusEffect_Base
{
public:
	TArray<struct FSlaveEffectInfo>                    SlaveEffects;                                             // 0x0240(0x000C) (Edit, NeedCtorLink)
	class AR_StatusEffect_Base*                        FirstSlaveEffect;                                         // 0x024C(0x0004) (Edit, Net, EditConst)
	unsigned long                                      bWaitingForSlaveExpiration : 1;                           // 0x0250(0x0004) (Edit, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_EffectChain");
		return ptr;
	}


	void DisplayEffectDebug(class AHUD* H, float* YL, float* YPos, struct FFontRenderInfo* FontRI);
	float GetMovementSpeedModifier();
	float GetDuration();
	float STATIC_StaticGetEffectRadius();
	float GetEffectRadius();
	bool STATIC_StaticIsRadialEffect();
	bool IsRadialEffect();
	bool ShouldAffectTarget(class AR_Pawn* TargetPawn, class AR_Pawn* InstigatorPawn);
	bool STATIC_IsValidForTarget(class AR_PawnBase* TargetPawnBase, class AR_PawnBase* InstigatorPawnBase);
	bool IsStackableWith(class AR_StatusEffect_Base* Other);
	bool NotifySlaveEffectStopped(class AR_StatusEffect_Base* Effect);
	void RemovedFromChain(class AR_StatusEffect_Base* ChainOwner);
	bool ClearChain();
	void UpdatePendingRemovals();
	void TimedEffectComplete();
	void InitTimers();
	void TriggerEffect();
	bool HasActiveSlaveEffectOfClass(class UClass* EffectClass, class AR_StatusEffect_Base** out_RSE);
	bool HasActiveSlaveEffect(class AR_StatusEffect_Base* Effect);
	bool RemoveSlaveEffect(class AR_StatusEffect_Base* EffectToRemove);
	bool AddSlaveEffect(class AR_StatusEffect_Base* EffectToAdd);
	void MergeFlags(class AR_StatusEffect_Base* RSE);
	void StartSlaveEffects();
	void InitializeSlaveEffects();
	void CreateSlaveEffects();
	void AdjustIncomingDamage(class UClass* dmgType, class AController* DmgInstigator, class APawn* InstigatorPawn, class AActor* DamageCauser, float OriginalDamage, float* out_Damage, struct FVector* out_Momentum, struct FTraceHitInfo* out_HitInfo);
	void Tick(float DeltaTime);
	bool SyncSlaveArray(class AR_StatusEffect_Base* RSE);
	void ReplicatedEvent(const struct FName& VarName);
	bool IsReadyForClientToTrigger();
};


// Class HawkenGame.R_TeamInfo
// 0x00A4 (0x0294 - 0x01F0)
class AR_TeamInfo : public ATeamInfo
{
public:
	int                                                Energy;                                                   // 0x01F0(0x0004) (Net)
	int                                                EnergyToLaunchShip;                                       // 0x01F4(0x0004) (Net)
	int                                                BaseHealth;                                               // 0x01F8(0x0004) (Net)
	int                                                BaseMaxHealth;                                            // 0x01FC(0x0004) (Net)
	TEnumAsByte<EbattleshipState_e>                    BattleShipState;                                          // 0x0200(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0201(0x0003) MISSED OFFSET
	unsigned long                                      bBaseDestroyed : 1;                                       // 0x0204(0x0004) (Net)
	unsigned long                                      bBattleshipEngaging : 1;                                  // 0x0204(0x0004) (Net)
	unsigned long                                      bBaseUnderAttack : 1;                                     // 0x0204(0x0004) (Net)
	unsigned long                                      bResignVoteStarted : 1;                                   // 0x0204(0x0004)
	int                                                BattleShipsLaunched;                                      // 0x0208(0x0004) (Net)
	int                                                BattleShipsDestroyed;                                     // 0x020C(0x0004)
	int                                                BattleShipHealth;                                         // 0x0210(0x0004) (Net)
	int                                                BattleShipMaxHealth;                                      // 0x0214(0x0004) (Net)
	int                                                BattleShipTurrets;                                        // 0x0218(0x0004) (Net)
	float                                              BattleshipDistanceTraveled;                               // 0x021C(0x0004) (Net)
	float                                              BattleshipDistanceTotal;                                  // 0x0220(0x0004) (Net)
	float                                              BattleshipDistancePercent;                                // 0x0224(0x0004) (Net)
	float                                              BattleshipAATime;                                         // 0x0228(0x0004) (Net)
	int                                                BattleshipTeamAntiAirIndex;                               // 0x022C(0x0004) (Net)
	int                                                BattleshipEnemyAntiAirIndex;                              // 0x0230(0x0004) (Net)
	int                                                ActiveAntiAirIndex;                                       // 0x0234(0x0004)
	int                                                EnergyDeliveredToBase;                                    // 0x0238(0x0004) (Net)
	int                                                TeamEnergyCollected;                                      // 0x023C(0x0004) (Net)
	int                                                TeamXP;                                                   // 0x0240(0x0004) (Net)
	int                                                TeamKills;                                                // 0x0244(0x0004) (Net)
	int                                                TeamDeaths;                                               // 0x0248(0x0004) (Net)
	int                                                TeamAssists;                                              // 0x024C(0x0004) (Net)
	int                                                TeamRoundsWon;                                            // 0x0250(0x0004) (Net)
	int                                                FlagCaptures;                                             // 0x0254(0x0004) (Net)
	struct FString                                     TeamNames[0x4];                                           // 0x0258(0x000C) (Const, Localized, NeedCtorLink)
	int                                                AntiAirShotsFired;                                        // 0x0288(0x0004) (Net)
	float                                              AntiAirControlTime;                                       // 0x028C(0x0004)
	float                                              CurrentAntiAirControlHeldTime;                            // 0x0290(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_TeamInfo");
		return ptr;
	}


	struct FString GetHumanReadableName();
	float GetBattleshipTimeLeft();
	void ResetBattleshipState();
	bool IsBattleshipEngaging();
	bool AllowAntiAirControlDefender();
	bool AllowAntiAirControlAttacker();
	void TurretReactivateTimer();
};


// Class HawkenGame.R_TeamPlayerStart
// 0x00AC (0x0378 - 0x02CC)
class AR_TeamPlayerStart : public AUDKTeamPlayerStart
{
public:
	struct FTeamPSManualOverrideProperties             ManualProperties;                                         // 0x02CC(0x00A0) (Edit)
	int                                                AntiAirSpawnIdx;                                          // 0x036C(0x0004) (Edit)
	TEnumAsByte<EeSpawnType>                           Type;                                                     // 0x0370(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0371(0x0003) MISSED OFFSET
	unsigned long                                      bEnabledForDeathmatchMode : 1;                            // 0x0374(0x0004) (Edit)
	unsigned long                                      bEnabledForTeamDeathmatchMode : 1;                        // 0x0374(0x0004) (Edit)
	unsigned long                                      bEnabledForMissileAssaultMode : 1;                        // 0x0374(0x0004) (Edit)
	unsigned long                                      bEnabledForSiegeMode : 1;                                 // 0x0374(0x0004) (Edit)
	unsigned long                                      bInitialStart : 1;                                        // 0x0374(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_TeamPlayerStart");
		return ptr;
	}


	struct FString GetDebugName();
	bool IsEnabledForGameMode(int GameType);
};


// Class HawkenGame.R_TestDriveMechData
// 0x000C (0x0048 - 0x003C)
class UR_TestDriveMechData : public UObject
{
public:
	TArray<struct FMechPreset>                         Presets;                                                  // 0x003C(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_TestDriveMechData");
		return ptr;
	}


	int STATIC_GetPresetIndexFromSubtype(int SubType);
};


// Class HawkenGame.R_Turret_AntiAir
// 0x00D4 (0x02A8 - 0x01D4)
class AR_Turret_AntiAir : public AActor
{
public:
	float                                              teamControl;                                              // 0x01D4(0x0004) (Net)
	TArray<float>                                      ControlPerSecond;                                         // 0x01D8(0x000C) (NeedCtorLink)
	int                                                StageControl[0x4];                                        // 0x01E4(0x0004)
	float                                              CooldownTime;                                             // 0x01F4(0x0004)
	float                                              MaxDistance;                                              // 0x01F8(0x0004) (Edit)
	float                                              LastFireTime;                                             // 0x01FC(0x0004)
	float                                              MaxTeamControl[0x2];                                      // 0x0200(0x0004) (Net)
	class UParticleSystem*                             FireEffect;                                               // 0x0208(0x0004)
	class UParticleSystem*                             SmokeFallEffect[0x2];                                     // 0x020C(0x0004)
	struct FName                                       SmokeFallSocket[0xC];                                     // 0x0214(0x0008)
	class USoundCue*                                   FireSnd;                                                  // 0x0274(0x0004) (Edit)
	class UStaticMeshComponent*                        LightsMesh;                                               // 0x0278(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      LaunchTest : 1;                                           // 0x027C(0x0004) (Edit)
	unsigned long                                      bFireToggle : 1;                                          // 0x027C(0x0004) (Net)
	unsigned long                                      bTriggerVolumeColorUpdate : 1;                            // 0x027C(0x0004) (Net)
	unsigned char                                      FirstTeam;                                                // 0x0280(0x0001) (Net)
	unsigned char                                      SecondTeam;                                               // 0x0281(0x0001) (Net)
	TEnumAsByte<EAntiAirStage_e>                       Stage;                                                    // 0x0282(0x0001) (Net)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0283(0x0001) MISSED OFFSET
	class UMaterialInstanceConstant*                   LightsMaterialInstance;                                   // 0x0284(0x0004) (Transient)
	class UAnimNodeSlot*                               TurretSlot;                                               // 0x0288(0x0004)
	class USkeletalMeshComponent*                      TurretMesh;                                               // 0x028C(0x0004) (ExportObject, Component, EditInline)
	class UAnimNodeBlendList*                          StateList;                                                // 0x0290(0x0004)
	class AStaticMeshActor*                            CaptureMesh;                                              // 0x0294(0x0004) (Edit)
	class AVolume*                                     CaptureVolume;                                            // 0x0298(0x0004) (Edit)
	class UMaterialInstanceConstant*                   CaptureMeshMatInst;                                       // 0x029C(0x0004)
	struct FName                                       CapTag;                                                   // 0x02A0(0x0008) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Turret_AntiAir");
		return ptr;
	}


	class AProjectile* FireProjectileIntoAir(class AActor* EnemyBattleship);
	void SetLights();
	void DoFireEffects();
	void FireAtReactor(int Team);
	void FireAtBattleShip(int Team);
	void DoAntiAirLaunch(int Team, int OppTeam);
	bool IsTeamControl(int Team);
	float GetTeamControlProgress();
	void ServerSideTick(float DeltaTime);
	void AdjustTeamControl(float DeltaTime);
	bool IsActive();
	bool IsTeamGame();
	void Tick(float DeltaTime);
	void CooldownTimer();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void SetObjectiveVolumeColor(float siloState);
	void PostBeginPlay();
	void TriggerVolumeColorUpdate();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Turret_BaseMissile
// 0x011C (0x02F0 - 0x01D4)
class AR_Turret_BaseMissile : public AActor
{
public:
	float                                              teamControl;                                              // 0x01D4(0x0004) (Net)
	float                                              NaturalState;                                             // 0x01D8(0x0004) (Net)
	float                                              PreviousState;                                            // 0x01DC(0x0004)
	TArray<float>                                      ControlPerSecond;                                         // 0x01E0(0x000C) (NeedCtorLink)
	float                                              MaxControl;                                               // 0x01EC(0x0004)
	float                                              CooldownTime;                                             // 0x01F0(0x0004)
	float                                              CooldownTimeFastFireMode;                                 // 0x01F4(0x0004)
	float                                              MaxDistance;                                              // 0x01F8(0x0004) (Edit)
	float                                              MaxVertDistance;                                          // 0x01FC(0x0004) (Edit)
	unsigned long                                      bGameIsEnding : 1;                                        // 0x0200(0x0004)
	unsigned long                                      bInFastFireMode : 1;                                      // 0x0200(0x0004) (Net)
	unsigned long                                      bFireToggle : 1;                                          // 0x0200(0x0004) (Net)
	unsigned long                                      bFireMode : 1;                                            // 0x0200(0x0004)
	unsigned long                                      bTriggerVolumeColorUpdate : 1;                            // 0x0200(0x0004) (Net)
	unsigned long                                      bUpdateColorFromTeamSwitch : 1;                           // 0x0200(0x0004)
	int                                                LauncherIndex;                                            // 0x0204(0x0004) (Edit, Net)
	float                                              LastFireTime;                                             // 0x0208(0x0004)
	class UParticleSystem*                             FlashEffect;                                              // 0x020C(0x0004) (Edit)
	class UParticleSystem*                             BlastSmokeEffect;                                         // 0x0210(0x0004) (Edit)
	class USoundCue*                                   FireSnd;                                                  // 0x0214(0x0004) (Edit)
	class USoundCue*                                   MissileLaunchedVoiceCue;                                  // 0x0218(0x0004) (Edit)
	unsigned char                                      FirstTeam;                                                // 0x021C(0x0001) (Net)
	unsigned char                                      SecondTeam;                                               // 0x021D(0x0001) (Net)
	TEnumAsByte<ESiloFireStage_e>                      Stage;                                                    // 0x021E(0x0001) (Net)
	TEnumAsByte<ESiloTurnStage_e>                      AnimStage;                                                // 0x021F(0x0001) (Net)
	class UMaterialInstanceConstant*                   LightsMaterialInstance;                                   // 0x0220(0x0004) (Transient)
	float                                              ProjectileSpeedDefault;                                   // 0x0224(0x0004) (Edit)
	float                                              ProjectileMaxSpeedDefault;                                // 0x0228(0x0004) (Edit)
	float                                              ProjectileAccelRateDefault;                               // 0x022C(0x0004) (Edit)
	float                                              ProjectileStartHomingStrength;                            // 0x0230(0x0004) (Edit)
	float                                              ProjectileEndHomingStrength;                              // 0x0234(0x0004) (Edit)
	float                                              ProjectileStartHomingTime;                                // 0x0238(0x0004) (Edit)
	float                                              ProjectileHomingStrengthLerpTime;                         // 0x023C(0x0004) (Edit)
	float                                              ProjectileDamageToBase;                                   // 0x0240(0x0004) (Edit)
	TArray<class AR_TeamPlayerStart*>                  InfluencedSpawns;                                         // 0x0244(0x000C) (Transient, NeedCtorLink)
	class AR_TeamPlayerStart*                          Spawn0;                                                   // 0x0250(0x0004) (Edit)
	class AR_TeamPlayerStart*                          Spawn1;                                                   // 0x0254(0x0004) (Edit)
	class AR_TeamPlayerStart*                          Spawn2;                                                   // 0x0258(0x0004) (Edit)
	class AR_TeamPlayerStart*                          Spawn3;                                                   // 0x025C(0x0004) (Edit)
	class AR_TeamPlayerStart*                          Spawn4;                                                   // 0x0260(0x0004) (Edit)
	class AR_TeamPlayerStart*                          Spawn5;                                                   // 0x0264(0x0004) (Edit)
	class AR_TeamPlayerStart*                          Spawn6;                                                   // 0x0268(0x0004) (Edit)
	class AR_TeamPlayerStart*                          Spawn7;                                                   // 0x026C(0x0004) (Edit)
	class AR_TeamPlayerStart*                          Spawn8;                                                   // 0x0270(0x0004) (Edit)
	class AR_TeamPlayerStart*                          Spawn9;                                                   // 0x0274(0x0004) (Edit)
	class AR_TeamPlayerStart*                          Spawn10;                                                  // 0x0278(0x0004) (Edit)
	class AR_TeamPlayerStart*                          Spawn11;                                                  // 0x027C(0x0004) (Edit)
	class AR_TeamPlayerStart*                          Spawn12;                                                  // 0x0280(0x0004) (Edit)
	class AR_TeamPlayerStart*                          Spawn13;                                                  // 0x0284(0x0004) (Edit)
	class AR_TeamPlayerStart*                          Spawn14;                                                  // 0x0288(0x0004) (Edit)
	float                                              FireAnimControl;                                          // 0x028C(0x0004)
	int                                                CurrentFiringTeam;                                        // 0x0290(0x0004)
	int                                                TeamLastFiredMissile;                                     // 0x0294(0x0004)
	class USkeletalMeshComponent*                      TurretMesh;                                               // 0x0298(0x0004) (ExportObject, Component, EditInline)
	class AStaticMeshActor*                            CaptureMesh;                                              // 0x029C(0x0004) (Edit)
	class AVolume*                                     CaptureVolume;                                            // 0x02A0(0x0004) (Edit)
	class UStaticMeshComponent*                        MissileMeshLeft;                                          // 0x02A4(0x0004) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        MissileMeshRight;                                         // 0x02A8(0x0004) (ExportObject, Component, EditInline)
	class UUDKSkelControl_Rotate*                      BaseRotateControl;                                        // 0x02AC(0x0004)
	class UAnimNodeSlot*                               TurretSlot;                                               // 0x02B0(0x0004)
	class UAnimNodeBlendList*                          StateList;                                                // 0x02B4(0x0004)
	class UAnimNodeSequence*                           MainAnim;                                                 // 0x02B8(0x0004)
	class UAnimNodeSequence*                           FireAnim;                                                 // 0x02BC(0x0004)
	float                                              CurrentYaw;                                               // 0x02C0(0x0004)
	float                                              TargetYaw;                                                // 0x02C4(0x0004)
	float                                              StartTurnTime;                                            // 0x02C8(0x0004) (Const)
	float                                              FireAnimBegin;                                            // 0x02CC(0x0004) (Const)
	float                                              FireAnimLength;                                           // 0x02D0(0x0004) (Const)
	class AR_BaseReactor_MA*                           BaseReactor[0x2];                                         // 0x02D4(0x0004)
	class AActor*                                      TargetBaseReactor;                                        // 0x02DC(0x0004)
	class UClass*                                      ReactorMissileClass;                                      // 0x02E0(0x0004)
	class UMaterialInstanceConstant*                   CaptureMeshMatInst;                                       // 0x02E4(0x0004)
	struct FName                                       CapTag;                                                   // 0x02E8(0x0008) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Turret_BaseMissile");
		return ptr;
	}


	void SetMissileOverrides(class AR_Proj_AntiBaseReactorMissile** SpawnedProjectile);
	class AProjectile* FireProjectileIntoAir(class AActor* EnemyBaseReactor);
	void DoFireEffects();
	void FireAtBaseReactor(int FiringTeam, int TargetTeam);
	class AR_BaseReactor_MA* GetBaseReactor(int TargetTeam);
	void DoMissileLaunch();
	void BeginMissileLaunch(int FiringTeam);
	float GetCooldownTime();
	void FireAnimDone();
	void SetStage(TEnumAsByte<ESiloFireStage_e> NewStage);
	void ServerSideTick(float DeltaTime);
	void UpdateAnimation(float DeltaTime);
	void SetFastFireMode(bool bActive);
	void SetObjectiveVolumeColor(float siloState);
	bool IsTeamInControl(int TeamIndex);
	struct FString GetIndicatorColorForTeam(int TeamIndex);
	struct FString GetIndicatorProgressColorForTeam(int TeamIndex);
	float GetIndicatorScaledControlForTeam(int TeamIndex);
	float GetIndicatorScaledControl();
	void SendAlert(float NewNaturalState, float OldNaturalState);
	void ScoreMissileFiredPointsForTeam(int TeamIndex);
	void ScoreControlPointsForTeam(int TeamIndex);
	void AdjustTeamControl(float DeltaTime);
	bool IsActive();
	bool IsTeamGame();
	void Tick(float DeltaTime);
	void CooldownTimer();
	float AngleLerp(float From, float To, float Amount);
	void UpdateAim(float DeltaTime);
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void InitCustomizedMaterial();
	void InitInfluencedSpawns();
	void RegisterInfluencedSpawn(class AR_TeamPlayerStart* SpawnToRegister);
	void PostBeginPlay();
	void TriggerVolumeColorUpdate();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Util
// 0x0004 (0x0040 - 0x003C)
class UR_Util : public UObject
{
public:
	class UTexture2D*                                  PlaceholderIcon;                                          // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Util");
		return ptr;
	}


	float STATIC_PsuedoRand(int Num);
	float STATIC_GetSafeKDRatio(int Kills, int Deaths);
	void STATIC_SetMICForMesh(int Section, class USkeletalMeshComponent* MeshComp, class UMaterialInstanceConstant* MIC, class UMaterialInstanceConstant* ParentMIC);
	void STATIC_ClearPostProcessSettingsOverrides(struct FPostProcessSettings* PostProcess);
	void STATIC_GetGameInfoForItemType(const struct FString& ItemTypeGUID, int* invType, int* Index);
	struct FString STATIC_GetPlaceholderIconPath();
	struct FString STATIC_GetStructMember(const struct FString& MemberName, struct FString* FullString);
	void STATIC_LocalizeStructArrayDisplayInfo(const struct FString& SectionName, const struct FString& ArrayName, int Index, struct FString* DisplayName, struct FString* loreText, struct FString* Description);
	struct FString STATIC_LocalizeStructArray(const struct FString& SectionName, const struct FString& ArrayName, int Index, const struct FString& MemberName);
	void STATIC_BuildLocalizedStringFromLineEntries(const struct FString& SectionName, const struct FString& PackageName, struct FString* finalString);
	bool STATIC_NextLine(int CurrentLineNumber, const struct FString& SectionName, const struct FString& PackageName, struct FString* OutCurrentLine);
	bool STATIC_IsDataFound(struct FString* TestMe);
	class UOnlineGameItemType* STATIC_GetGlobals();
	bool STATIC_GetIsChinaBuild();
	void STATIC_SetDebugDrawColor(class UCanvas* C, const struct FName& DebugTag);
	void STATIC_DebugAddStringAtLocation(class UCanvas* C, const struct FString& Text, float X, float YL, const struct FFontRenderInfo& FontRI, float* Y);
	void STATIC_DebugAddLine(class UCanvas* C, const struct FString& Text, float YL, const struct FFontRenderInfo& FontRI, float* Y);
	struct FString STATIC_RotatorToString(const struct FRotator& InputRotator, bool bTagged, bool bClamp, bool bConvertToDegrees);
	struct FRotator STATIC_iDegreesToRotator(float Yaw, float Pitch, float Roll);
	struct FRotator STATIC_DegreesToRotator(const struct FVector& RotationInDegrees);
	struct FVector STATIC_RotatorToDegrees(const struct FRotator& InputRotator);
	float STATIC_ConvertUnrealToRads(int AngleInUnrealSpokes);
	int STATIC_ConvertRadsToUnreal(float AngleInRadians);
	int STATIC_ConvertUnrealToEuler(int AngleInUnrealSpokes);
	int STATIC_ConvertEulerToUnreal(int AngleInDegrees);
	struct FString STATIC_ConvertFloatInDisplayString(const struct FString& InputDisplayString, float InputValue, int ValueConversionDecimalDigits, TEnumAsByte<EValueDisplayConversion> ValueConversion);
	struct FString STATIC_VectorToString(const struct FVector& InputVector, bool bTagged, int PrecisionX, int PrecisionY, int PrecisionZ);
	struct FString STATIC_FloatToString(float inputFloat, int Precision);
	struct FString STATIC_FormatTime(int Seconds);
	void STATIC_CameraShakeAllControllers(class AActor* A, class UCameraAnim* Anim, float Scale);
	void STATIC_CameraShakeNearbyPawns(class AActor* A, float Radius, class UCameraAnim* Anim, float Scale);
	float STATIC_GetSplineLength(class ASplineActor* StartS);
	class AR_Pickup* STATIC_SpawnPickup(float EnergyUnits, const struct FVector& pos, class AActor* Parent, TEnumAsByte<EnergyPickupType_e> EPT, bool bAddVelocity, float Speed, bool bFromItem);
	struct FRotator STATIC_AddSpread(const struct FRotator& BaseAim, float CurrentSpread);
	struct FRotator STATIC_ConcatRotations(const struct FRotator& R1, const struct FRotator& R2);
	int STATIC_BlendRot(int currentVal, int TargetVal, float DeltaTime);
	void STATIC_NativeScriptDebugHelper(const struct FString& FunctionName, const struct FString& ScriptCallStack, const struct FString& AdditionalInfo);
	float STATIC_FindClosestPawn(class UClass* Type, const struct FVector& Location, unsigned char TeamIndex, class APawn* IgnorePawn, class APawn** FoundPawn);
	struct FVector STATIC_CalculateTrajectory(const struct FVector& Start, const struct FVector& End, float Speed, float Gravity, float* Time);
	float STATIC_GetAnimLength(class UAnimSet* Anims, const struct FName& AnimName);
	int STATIC_GetGraphicsQualityRecommendation();
	bool STATIC_GetIs64bitOS();
	void STATIC_UtcTimeToLocalTime(int utcYear, int utcMonth, int utcDay, int utcHour, int utcMin, int utcSec, int utcMSec, int* outYear, int* outMonth, int* outDay, int* outHour, int* outMin, int* outSec, int* outMSec);
	struct FString STATIC_VerifyMsgString(const struct FString& thisString);
	struct FString STATIC_GetUTCTimeString();
	void STATIC_OpenURL(const struct FString& URL);
	bool STATIC_FollowSplineCached(float TravelDistance, class ASplineActor* StartS, const struct FColor& DesiredSplineColor, struct FVector* pos, struct FVector* Heading, class ASplineActor** LastSplinePoint, class ASplineActor** LastNextSplinePoint, float* LastSplinePointDistance);
	struct FVector STATIC_CreateVect(float X, float Y, float Z);
	int STATIC_RLagRot(int Target, int Current, int turnAmount, int maxDiff, int Center);
	int STATIC_GetAngleDeltaSigned(int A1, int A2);
	int STATIC_GetAngleDelta(int A1, int A2);
	int STATIC_GetClosestAngle(int A1, int A2);
};


// Class HawkenGame.AIChatterManager
// 0x00D4 (0x0110 - 0x003C)
class UAIChatterManager : public UObject
{
public:
	TArray<struct FDialoguePlayback>                   ActiveDialogues;                                          // 0x003C(0x000C) (NeedCtorLink)
	TArray<struct FChatterLine>                        ActiveChatter;                                            // 0x0048(0x000C) (NeedCtorLink)
	struct FSpeakerSet                                 RegisteredSpeakers[0xB];                                  // 0x0054(0x000C) (NeedCtorLink)
	float                                              GameFrameTime;                                            // 0x00D8(0x0004) (Transient)
	int                                                NextDialogueSessionID;                                    // 0x00DC(0x0004)
	float                                              ActivityTimeStamp;                                        // 0x00E0(0x0004) (Const)
	struct FName                                       SoundModeForDucking;                                      // 0x00E4(0x0008)
	TArray<struct FName>                               SuperiorSoundModes;                                       // 0x00EC(0x000C) (NeedCtorLink)
	TArray<struct FQueuedChatterPlayback>              ChattersToTrigger;                                        // 0x00F8(0x000C) (Const, AlwaysInit, NeedCtorLink)
	int                                                MaxConcurentChatters;                                     // 0x0104(0x0004) (Config)
	float                                              DummyAudioPlaybackDuration;                               // 0x0108(0x0004) (Config)
	unsigned long                                      bChatterSystemEnabled : 1;                                // 0x010C(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.AIChatterManager");
		return ptr;
	}


	class UAIChatterManager* STATIC_GetInstance();
	void RandomizeEventTimeouts(struct FChatterSpeakerData* Speaker);
	void LinePlaybackStarted(class UAudioComponent* Line, struct FChatterSpeakerData* Speaker, struct FSpeakLineInfo* LineParams);
	void LinePlaybackFinished(struct FChatterSpeakerData* Speaker);
	bool CanPlayVocalLine(TEnumAsByte<ESpeechPriority> Priority, unsigned char EventID, int DialogueSessionId, struct FChatterSpeakerData* Speaker);
	void StopDialog(int SessionId);
	void TriggerDialogue(unsigned char EventID, unsigned char Priority);
	void TriggerEvent(unsigned char EventID, class AR_PawnNative* Instigator, class AR_PawnNative* Target, unsigned char Priority, bool bUseTargetSpecificCue, float Delay, TArray<class AR_PawnNative*>* OtherSpeakers);
	bool UnRegisterSpeaker(struct FChatterSpeakerData* Speaker);
	void RegisterSpeaker(struct FChatterSpeakerData* Speaker);
	void Init();
};


// Class HawkenGame.R_PawnBase
// 0x0228 (0x0980 - 0x0758)
class AR_PawnBase : public ABaseAIPawn
{
public:
	class USkeletalMeshComponent*                      RagdollMesh;                                              // 0x0758(0x0004) (ExportObject, Component, EditInline)
	unsigned long                                      bStopAnimsOnDeath : 1;                                    // 0x075C(0x0004)
	unsigned long                                      bHideOnListenServer : 1;                                  // 0x075C(0x0004)
	unsigned long                                      bIsAI : 1;                                                // 0x075C(0x0004) (Transient)
	unsigned long                                      bWasAI : 1;                                               // 0x075C(0x0004) (Transient)
	unsigned long                                      bInvisibleForEnemy : 1;                                   // 0x075C(0x0004) (Transient)
	unsigned long                                      bCanSlide : 1;                                            // 0x075C(0x0004) (Const)
	unsigned long                                      bInterceptTakeDamage : 1;                                 // 0x075C(0x0004)
	unsigned long                                      bCanBeUnsuccessfullyShotAt : 1;                           // 0x075C(0x0004)
	float                                              DodgeSpeed;                                               // 0x0760(0x0004)
	float                                              MaxJumpSoundDistSq;                                       // 0x0764(0x0004)
	float                                              MaxFootstepDistSq;                                        // 0x0768(0x0004)
	float                                              RagdollLifespan;                                          // 0x076C(0x0004)
	float                                              HeroCameraPitch;                                          // 0x0770(0x0004) (Edit)
	TArray<int>                                        EndCamRot;                                                // 0x0774(0x000C) (Const, NeedCtorLink)
	struct FVector                                     WalkBob;                                                  // 0x0780(0x000C)
	class UForceFeedbackWaveform*                      FallingDamageWaveForm;                                    // 0x078C(0x0004)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x0790(0x0004) (ExportObject, Component, EditInline)
	class UCylinderComponent*                          HitCylinderComponent;                                     // 0x0794(0x0004) (ExportObject, Component, EditInline)
	unsigned char                                      StoredTeamNumber;                                         // 0x0798(0x0001)
	TEnumAsByte<EChatterSpeaker>                       ChatterSpeakerType;                                       // 0x0799(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x079A(0x0002) MISSED OFFSET
	class AHawkenAi_ControllerBase*                    MyHawkenAi;                                               // 0x079C(0x0004) (Transient)
	class UHawkenPawnPluginWeapon*                     AiLeftWeaponUsagePlugin;                                  // 0x07A0(0x0004) (Const, Transient)
	class UHawkenPawnPluginWeapon*                     AiRightWeaponUsagePlugin;                                 // 0x07A4(0x0004) (Const, Transient)
	struct FName                                       SightBoneName;                                            // 0x07A8(0x0008)
	struct FChatterSpeakerData                         ChatterSpeaker;                                           // 0x07B0(0x0194) (Config, NeedCtorLink)
	class UChatterTemplate*                            ChatterArchetype;                                         // 0x0944(0x0004) (Edit)
	struct FModifierValue                              ServerModifiers[0x4];                                     // 0x0948(0x0008)
	struct FModifierValue                              ReplicatedModifiers[0x3];                                 // 0x0968(0x0008) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PawnBase");
		return ptr;
	}


	void DrawWeaponDebug(class AR_HUD* HUD, const struct FName& Category);
	void DrawDebug(class AR_HUD* HUD, const struct FName& Category);
	void ModifiersUpdated();
	void ResetAllMods();
	float GetServerModFloat(TEnumAsByte<EPawnServerModifiers> Mod, float DefaultValue);
	bool GetModBool(class UClass* Mod, bool DefaultValue);
	float GetModFloat(class UClass* Mod, float DefaultValue);
	int GetModInt(class UClass* Mod, int DefaultValue);
	void ApplyMods(TArray<class UR_PawnModifier*>* Mods);
	void ApplyMod(class UR_PawnModifier* Mod);
	void OnAITargetChanged(class AActor* Target);
	void OnAIBeginFireAtTarget(class AActor* Target);
	void OnAIAdjustProperties(class UHawkenSeqAct_AIAdjustProperties* Action);
	unsigned char ScriptGetTeamNum();
	void DrawAnimSequence(class AHUD* H, const struct FFontRenderInfo& FontRI, class UAnimSequence* RootSequence, float* YL, float* YPos);
	void DrawAnimNodeLeaf(class AHUD* H, const struct FFontRenderInfo& FontRI, class UAnimNode* Node, float CurrentWeight, float DefaultWeight, const struct FString& IndentStr, float* YL, float* YPos);
	void DrawAnimNodeBranch(class AHUD* H, const struct FFontRenderInfo& FontRI, class UAnimNodeBlendBase* BranchParent, const struct FString& IndentStr, float* YL, float* YPos);
	void DrawAnimTree(class AHUD* H, const struct FFontRenderInfo& FontRI, class UAnimTree* RootNode, float* YL, float* YPos);
	void DisplayCameraDebug(class AHUD* H, const struct FFontRenderInfo& FontRI, float* YL, float* YPos);
	void DisplayAnimNodeSlotDebug(class AHUD* H, const struct FFontRenderInfo& FontRI, float* YL, float* YPos);
	void DisplayPawnDebug(class AHUD* H, float* YL, float* YPos);
	void DisplayActorDebug(class AHUD* H, float* YL, float* YPos);
	void SetDebugDrawColor(class UCanvas* C, const struct FName& DebugTag);
	void DisplayDebug(class AHUD* H, float* YL, float* YPos);
	void FindGoodEndView(class APlayerController* InPC, struct FRotator* GoodRotation);
	bool CameraTrace(const struct FRotator& TestRot, float TestDistance, struct FVector* TestLoc);
	void NotifyTeamChanged();
	void SetMechType(int NewMechType, int NewMechSubType, class UR_NPC_Template* NewMechTemplate);
	float GetDamageMultiplier(class UClass* DamageType);
	void AdjustDamageFloat(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, float* InDamage, struct FVector* Momentum);
	void ActuallyPlayFootstepSound(int FootDown);
	class UR_PhysicalMaterialProperty* GetMaterialBelowFeet();
	class UR_PhysicalMaterialProperty* GetPhysMaterialProps(class UPhysicalMaterial* PhysMaterial);
	struct FName GetPhysMaterialName(class UPhysicalMaterial* PhysMaterial);
	void PlayFootStepSound(int FootDown);
	void TurnOff();
	void RecordActualDamageTaken(float actualDamage, class AController* EventInstigator, class UClass* dmgType);
	void TakeDamage(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* dmgType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void SetTakeDamageInterception(bool bTurnOnInterception);
	void PlayRagdoll();
	bool PlayDeathAnim();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void ResetCharPhysState();
	void SetPawnRBChannels(bool bRagdollMode);
	void UnPossessed();
	void TurnOffPawn();
	void PlayJumpingSound();
	struct FVector GetWeaponStartTraceLocation(class AWeapon* CurrentWeapon);
	bool IsPlayingDemo();
	bool IsRecordingDemo();
	bool IsLocalHumanControlled();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_PawnNative
// 0x0600 (0x0F80 - 0x0980)
class AR_PawnNative : public AR_PawnBase
{
public:
	struct FRMovementStateVars                         MovementStateVars;                                        // 0x0980(0x0030)
	int                                                TargetOutlineTime;                                        // 0x09B0(0x0004)
	float                                              ShowOnRadarAfterFireTime;                                 // 0x09B4(0x0004)
	float                                              ShowOnRadarAfterHitFireTime;                              // 0x09B8(0x0004)
	float                                              ShowOnRadarAfterBoostTime;                                // 0x09BC(0x0004)
	float                                              RadarSignatureDistanceReduction[0xA];                     // 0x09C0(0x0004)
	float                                              RadarSignatureDistanceIncrease[0xA];                      // 0x09E8(0x0004)
	float                                              RadarDetectionDistanceIncrease[0xA];                      // 0x0A10(0x0004)
	float                                              LastFirstPersonMechUpdateTime;                            // 0x0A38(0x0004) (Transient)
	class UUDKSkeletalMeshComponent*                   FirstPersonMechMesh;                                      // 0x0A3C(0x0004) (ExportObject, Component, EditInline)
	class UUDKSkeletalMeshComponent*                   CockpitMesh;                                              // 0x0A40(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      ThirdPersonMesh;                                          // 0x0A44(0x0004) (ExportObject, Component, EditInline)
	TEnumAsByte<ERobotMoveState>                       MoveState;                                                // 0x0A48(0x0001)
	TEnumAsByte<EMoveSpeedLimit>                       SpeedLimit;                                               // 0x0A49(0x0001)
	TEnumAsByte<EPawnMaterialOverride>                 PawnMaterialOverride;                                     // 0x0A4A(0x0001)
	TEnumAsByte<EEnergyStatus>                         EnergyStatus;                                             // 0x0A4B(0x0001) (Net)
	unsigned char                                      InRadiusOfMissileLauncher;                                // 0x0A4C(0x0001) (Net)
	unsigned char                                      PrimaryWeaponUpgradeFlags;                                // 0x0A4D(0x0001)
	unsigned char                                      SecondaryWeaponUpgradeFlags;                              // 0x0A4E(0x0001)
	unsigned char                                      AbilityUpgradeFlags;                                      // 0x0A4F(0x0001)
	unsigned char                                      RemoteFeetYawRep;                                         // 0x0A50(0x0001) (Net)
	TEnumAsByte<ERadarState>                           RemoteRadarState;                                         // 0x0A51(0x0001) (Net)
	TEnumAsByte<EPawnScreenStatus>                     CachedScreenStatus;                                       // 0x0A52(0x0001) (Transient)
	unsigned char                                      OverHeatRepOwner;                                         // 0x0A53(0x0001) (Net)
	unsigned char                                      OverHeatRepRemote;                                        // 0x0A54(0x0001) (Net)
	TEnumAsByte<EDebuffType_e>                         ActiveDebuffs[0x3];                                       // 0x0A55(0x0001) (Net)
	TEnumAsByte<ESpokenLineType>                       SpokenLineType;                                           // 0x0A58(0x0001) (Transient)
	TEnumAsByte<ESpeechPriority>                       CurrentSpeechPriority;                                    // 0x0A59(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0A5A(0x0002) MISSED OFFSET
	float                                              SteeringModifier;                                         // 0x0A5C(0x0004) (Edit)
	unsigned long                                      bBoneCamera : 1;                                          // 0x0A60(0x0004)
	unsigned long                                      bCameraAnims : 1;                                         // 0x0A60(0x0004)
	unsigned long                                      bFootstepDecals : 1;                                      // 0x0A60(0x0004)
	unsigned long                                      bAllowStatic : 1;                                         // 0x0A60(0x0004)
	unsigned long                                      bDoPushOffCliff : 1;                                      // 0x0A60(0x0004)
	unsigned long                                      bAdjustZ : 1;                                             // 0x0A60(0x0004)
	unsigned long                                      bHasLanded : 1;                                           // 0x0A60(0x0004)
	unsigned long                                      bOverheated : 1;                                          // 0x0A60(0x0004) (Net)
	unsigned long                                      bWeaponsDown : 1;                                         // 0x0A60(0x0004)
	unsigned long                                      IsCammoMode : 1;                                          // 0x0A60(0x0004) (Net)
	unsigned long                                      bSpecMode : 1;                                            // 0x0A60(0x0004) (Net)
	unsigned long                                      bExitingHeal : 1;                                         // 0x0A60(0x0004) (Net)
	unsigned long                                      bHealthIncreasing : 1;                                    // 0x0A60(0x0004) (Net)
	unsigned long                                      bTouchingBase : 1;                                        // 0x0A60(0x0004)
	unsigned long                                      bBoostFireActive : 1;                                     // 0x0A60(0x0004) (Net)
	unsigned long                                      bMovementIncreaseActive : 1;                              // 0x0A60(0x0004)
	unsigned long                                      bMovementIncreaseActiveRep : 1;                           // 0x0A60(0x0004) (Net)
	unsigned long                                      bRadarScrambled : 1;                                      // 0x0A60(0x0004) (Net)
	unsigned long                                      bInRadiusOfAA : 1;                                        // 0x0A60(0x0004) (Net)
	unsigned long                                      bEnemyLockedOn : 1;                                       // 0x0A60(0x0004) (Net)
	unsigned long                                      bSpecialRadarLock : 1;                                    // 0x0A60(0x0004)
	unsigned long                                      bMissilesIncoming : 1;                                    // 0x0A60(0x0004) (Net)
	unsigned long                                      bNewMissilesIncoming : 1;                                 // 0x0A60(0x0004)
	unsigned long                                      bIsEnemyTarget : 1;                                       // 0x0A60(0x0004) (Net)
	unsigned long                                      bAtMaxHeight : 1;                                         // 0x0A60(0x0004) (Net)
	unsigned long                                      IsLevitating : 1;                                         // 0x0A60(0x0004)
	unsigned long                                      IsBoostingForward : 1;                                    // 0x0A60(0x0004)
	unsigned long                                      FinishedStartBoost : 1;                                   // 0x0A60(0x0004)
	unsigned long                                      IsFalling : 1;                                            // 0x0A60(0x0004)
	unsigned long                                      IsHealing : 1;                                            // 0x0A60(0x0004)
	unsigned long                                      IsDraining : 1;                                           // 0x0A60(0x0004)
	unsigned long                                      bAlternateFireMode : 1;                                   // 0x0A60(0x0004) (Net)
	unsigned long                                      IsWalkingBackwards : 1;                                   // 0x0A64(0x0004) (Net)
	unsigned long                                      IsIdle : 1;                                               // 0x0A64(0x0004) (Net)
	unsigned long                                      IsRunning : 1;                                            // 0x0A64(0x0004)
	unsigned long                                      IsStoppingRun : 1;                                        // 0x0A64(0x0004)
	unsigned long                                      bShowTeammateRadar : 1;                                   // 0x0A64(0x0004)
	unsigned long                                      bEnemyTeamRadar : 1;                                      // 0x0A64(0x0004)
	unsigned long                                      bVisibleCalculated : 1;                                   // 0x0A64(0x0004) (Transient)
	unsigned long                                      bCachedIsIndicatorVisible : 1;                            // 0x0A64(0x0004) (Transient)
	unsigned long                                      bCanBoost : 1;                                            // 0x0A64(0x0004)
	unsigned long                                      bCanDodge : 1;                                            // 0x0A64(0x0004)
	unsigned long                                      bCanAirDodge : 1;                                         // 0x0A64(0x0004)
	unsigned long                                      bCanAir180 : 1;                                           // 0x0A64(0x0004)
	unsigned long                                      bShowingMechOutline : 1;                                  // 0x0A64(0x0004)
	unsigned long                                      bUsingFootPlacement : 1;                                  // 0x0A64(0x0004)
	unsigned long                                      bCurrentDebuffEffect : 1;                                 // 0x0A64(0x0004)
	unsigned long                                      bCurrentHeatDebuffEffect : 1;                             // 0x0A64(0x0004)
	unsigned long                                      bEnableGenericChatter : 1;                                // 0x0A64(0x0004) (Config)
	unsigned long                                      bSpeaking : 1;                                            // 0x0A64(0x0004) (Transient)
	unsigned long                                      bDebugSpeech : 1;                                         // 0x0A64(0x0004) (Edit)
	unsigned long                                      bAlwaysDrawDebug : 1;                                     // 0x0A64(0x0004)
	unsigned long                                      bIsAiDebugTargeting : 1;                                  // 0x0A64(0x0004)
	unsigned long                                      bShowAbility : 1;                                         // 0x0A64(0x0004) (Net)
	unsigned long                                      bAIJumpLanding : 1;                                       // 0x0A64(0x0004) (Transient)
	unsigned long                                      bCanAIJump : 1;                                           // 0x0A64(0x0004) (Transient)
	unsigned long                                      bActivatedSpawnEffects : 1;                               // 0x0A64(0x0004) (Net, Transient)
	float                                              ModelAdjustZ;                                             // 0x0A68(0x0004)
	float                                              CurrentDeltaZ;                                            // 0x0A6C(0x0004)
	float                                              CurrentDeltaZBlendRate;                                   // 0x0A70(0x0004)
	float                                              FootPlantZ;                                               // 0x0A74(0x0004)
	struct FVector                                     LastLocation;                                             // 0x0A78(0x000C)
	float                                              LastDeltaZRate;                                           // 0x0A84(0x0004)
	float                                              LastDeltaZRatePrev;                                       // 0x0A88(0x0004)
	float                                              HeavyModeEyeHeight;                                       // 0x0A8C(0x0004) (Const)
	int                                                FootRotationTarget;                                       // 0x0A90(0x0004)
	float                                              FastRotationZAmount;                                      // 0x0A94(0x0004)
	int                                                BoostRotationSpeed;                                       // 0x0A98(0x0004)
	float                                              BlendPosZRate;                                            // 0x0A9C(0x0004)
	float                                              MaxBlendPosZRate;                                         // 0x0AA0(0x0004)
	float                                              BlendDeltaToIncreaseRate;                                 // 0x0AA4(0x0004)
	float                                              MaxBlendZDelta;                                           // 0x0AA8(0x0004)
	float                                              CriticalHealthVOPercent;                                  // 0x0AAC(0x0004) (Const)
	float                                              LowHealthBeepPercent;                                     // 0x0AB0(0x0004) (Const)
	float                                              NextBeepTime;                                             // 0x0AB4(0x0004)
	class UAudioComponent*                             LowHealthBeepSndComp;                                     // 0x0AB8(0x0004) (ExportObject, Component, EditInline)
	class UR_DamageTracking*                           DamageTracker;                                            // 0x0ABC(0x0004)
	float                                              DamageForFrame;                                           // 0x0AC0(0x0004)
	float                                              VisorColorShiftAmount;                                    // 0x0AC4(0x0004)
	class UMaterialInstanceConstant*                   CamoMaterialInstance;                                     // 0x0AC8(0x0004)
	float                                              CamoShaderTransition;                                     // 0x0ACC(0x0004)
	class USoundCue*                                   OverheatingVOCue;                                         // 0x0AD0(0x0004)
	class USoundCue*                                   OverheatRecoverSnd;                                       // 0x0AD4(0x0004)
	class USoundCue*                                   EnemyLockonNotifySnd;                                     // 0x0AD8(0x0004)
	class AController*                                 LastEMPInstigator;                                        // 0x0ADC(0x0004)
	struct FSItemDebuff                                ItemDebuff[0x2];                                          // 0x0AE0(0x0008)
	float                                              ItemDebuffTimeRep[0x2];                                   // 0x0AF0(0x0004) (Net)
	float                                              LastItemDebuffTimeRep[0x2];                               // 0x0AF8(0x0004)
	class AR_Ability_Base*                             Ability;                                                  // 0x0B00(0x0004) (Net)
	int                                                NumHealers;                                               // 0x0B04(0x0004)
	class AR_PawnNative*                               Healers[0x3];                                             // 0x0B08(0x0004)
	struct FAttachmentEffects                          WeaponAttachmentEffects[0x2];                             // 0x0B14(0x0008) (Net)
	float                                              HeavyModeNoDamageStartTime;                               // 0x0B24(0x0004)
	float                                              HeavyModeEndTime;                                         // 0x0B28(0x0004)
	int                                                HeavyModeRotationYawRate;                                 // 0x0B2C(0x0004)
	int                                                HeavyModeRotationPitchRate;                               // 0x0B30(0x0004)
	float                                              HeavyModeTime;                                            // 0x0B34(0x0004)
	float                                              HeavyModeStartTime;                                       // 0x0B38(0x0004)
	float                                              HeavyModeTransformTimeMultiplier;                         // 0x0B3C(0x0004) (Net)
	float                                              HeavyModeThrusterRate;                                    // 0x0B40(0x0004)
	float                                              UsingAbilityTimeRemaining;                                // 0x0B44(0x0004)
	float                                              UsingAbilityTime;                                         // 0x0B48(0x0004)
	float                                              UsingAbilityAnimLength;                                   // 0x0B4C(0x0004)
	float                                              HealTime;                                                 // 0x0B50(0x0004)
	float                                              LastGrimeHealth;                                          // 0x0B54(0x0004)
	float                                              HealExitTime;                                             // 0x0B58(0x0004) (Const)
	float                                              LastHealthIncreaseTime;                                   // 0x0B5C(0x0004)
	float                                              TauntAnimLength;                                          // 0x0B60(0x0004)
	float                                              TauntBlendOutTime;                                        // 0x0B64(0x0004) (Const)
	float                                              TauntMinTime;                                             // 0x0B68(0x0004) (Const)
	class UUDKParticleSystemComponent*                 MuzzleFlash_1R[0x2];                                      // 0x0B6C(0x0004) (ExportObject, Component, EditInline)
	class UUDKParticleSystemComponent*                 MuzzleFlash_3R[0x2];                                      // 0x0B74(0x0004) (ExportObject, Component, EditInline)
	int                                                EnergyUnitsHeldBeforeTransfer;                            // 0x0B7C(0x0004)
	int                                                EnergyUnitsHeld;                                          // 0x0B80(0x0004) (Net)
	int                                                MaxEnergyUnitsHeld;                                       // 0x0B84(0x0004)
	float                                              EnergyTransferTime;                                       // 0x0B88(0x0004)
	float                                              EnergyUnitsFromSource;                                    // 0x0B8C(0x0004)
	class AR_Weap_DualWield*                           DualWeapon;                                               // 0x0B90(0x0004) (Net)
	int                                                ZoomModeRotationPitchRate;                                // 0x0B94(0x0004)
	int                                                ZoomModeRotationYawRate;                                  // 0x0B98(0x0004)
	float                                              SpreadMultiplier;                                         // 0x0B9C(0x0004)
	float                                              BoostSpreadMultiplier;                                    // 0x0BA0(0x0004)
	struct FVector                                     RadarScramblerPosition;                                   // 0x0BA4(0x000C) (Net)
	class AActor*                                      SpecialLockonTarget;                                      // 0x0BB0(0x0004) (Net)
	class AActor*                                      CurrentTarget;                                            // 0x0BB4(0x0004)
	float                                              ThrusterEnergy;                                           // 0x0BB8(0x0004)
	float                                              MaxThrusterEnergy;                                        // 0x0BBC(0x0004)
	float                                              ThrusterRegenRate;                                        // 0x0BC0(0x0004)
	float                                              TempThrusterRegenRate;                                    // 0x0BC4(0x0004)
	float                                              ThrusterRateBoostForward;                                 // 0x0BC8(0x0004)
	float                                              ThrusterRateHover;                                        // 0x0BCC(0x0004)
	float                                              ThrusterJumpEnergy;                                       // 0x0BD0(0x0004)
	float                                              ThrusterDoubleJumpEnergy;                                 // 0x0BD4(0x0004)
	float                                              ThrusterBoostSideEnergy;                                  // 0x0BD8(0x0004)
	float                                              ThrusterBoostForwardEnergy;                               // 0x0BDC(0x0004)
	float                                              ThrusterAirDodgeEnergy;                                   // 0x0BE0(0x0004) (Const)
	float                                              ThrusterAir180Energy;                                     // 0x0BE4(0x0004) (Const)
	float                                              SideBoostCooldownTime;                                    // 0x0BE8(0x0004)
	float                                              SideBoostThrusterRegenTime;                               // 0x0BEC(0x0004) (Const)
	float                                              PostLandSpeed;                                            // 0x0BF0(0x0004) (Const)
	float                                              HeavyModeSpeed;                                           // 0x0BF4(0x0004) (Net)
	float                                              HeavyModeBoostSpeed;                                      // 0x0BF8(0x0004) (Net)
	struct FVector                                     DodgeDir;                                                 // 0x0BFC(0x000C)
	float                                              DodgeDistance;                                            // 0x0C08(0x0004)
	float                                              TimeToFireAfterForwardBoost;                              // 0x0C0C(0x0004) (Const)
	float                                              BaseThrusterJumpHeight;                                   // 0x0C10(0x0004)
	float                                              BoostSpeedWhenEnteredAir;                                 // 0x0C14(0x0004)
	float                                              BoostToAirSpeedTransitionTime;                            // 0x0C18(0x0004) (Const)
	float                                              HoverWaveHeight;                                          // 0x0C1C(0x0004) (Const)
	float                                              HoverWaveTime;                                            // 0x0C20(0x0004)
	float                                              MaxThrusterJumpHeight;                                    // 0x0C24(0x0004) (Const)
	float                                              ThrusterVerticalSpeed;                                    // 0x0C28(0x0004) (Const)
	float                                              ThrusterVerticalAcceleration;                             // 0x0C2C(0x0004) (Const)
	float                                              ThrusterDescendingSpeed;                                  // 0x0C30(0x0004) (Const)
	float                                              AirSpeedPerEfficiencyPoint;                               // 0x0C34(0x0004) (Const)
	float                                              MaxThrusterJumpHeightPerEfficiencyPoint;                  // 0x0C38(0x0004) (Const)
	float                                              ThrusterVerticalSpeedPerEfficiencyPoint;                  // 0x0C3C(0x0004) (Const)
	float                                              AirEfficiency;                                            // 0x0C40(0x0004)
	float                                              LevitateSpeedZ;                                           // 0x0C44(0x0004)
	float                                              LevitateAccelZ;                                           // 0x0C48(0x0004)
	float                                              IsJumpIdle;                                               // 0x0C4C(0x0004)
	float                                              ThrustingBlend;                                           // 0x0C50(0x0004)
	float                                              FallingBlend;                                             // 0x0C54(0x0004)
	int                                                RemoteFeetYaw;                                            // 0x0C58(0x0004)
	struct FCockpitDecorationInstanceData              CockpitDecorationData[0x3];                               // 0x0C5C(0x0018) (Component)
	struct FRotator                                    BlendedAimRotation;                                       // 0x0CA4(0x000C)
	struct FRotator                                    BlendedFeetRotation;                                      // 0x0CB0(0x000C)
	float                                              LastFireTime;                                             // 0x0CBC(0x0004)
	float                                              LastHitFireTime;                                          // 0x0CC0(0x0004)
	class AR_PawnNative*                               LastHitPawn;                                              // 0x0CC4(0x0004) (Net)
	float                                              LastBoostTime;                                            // 0x0CC8(0x0004)
	class AR_Radar_Base*                               RadarItemTargeting;                                       // 0x0CCC(0x0004)
	class AR_Radar_Base*                               RadarScramblerItemTargeting;                              // 0x0CD0(0x0004)
	float                                              LockOnTimeOverload;                                       // 0x0CD4(0x0004)
	struct FVector                                     CachedScreenLocation;                                     // 0x0CD8(0x000C) (Transient)
	float                                              IndicatorVisibleGracePeriod;                              // 0x0CE4(0x0004) (Const)
	float                                              TimeSinceLastFire;                                        // 0x0CE8(0x0004)
	float                                              OverHeat;                                                 // 0x0CEC(0x0004)
	float                                              OverHeatDownTime;                                         // 0x0CF0(0x0004)
	int                                                OverheatMaterialBlend;                                    // 0x0CF4(0x0004)
	float                                              DecreaseHeat_TimeToWaitAfterLastFire;                     // 0x0CF8(0x0004)
	float                                              DecreaseHeat_TimeToWaitAfterLastFire_Flush;               // 0x0CFC(0x0004)
	float                                              DecreaseHeat_AmountPerSecond;                             // 0x0D00(0x0004)
	float                                              DecreaseHeat_AmountPerSecond_Flush;                       // 0x0D04(0x0004)
	float                                              WeaponRaiseAnimTime;                                      // 0x0D08(0x0004) (Const)
	float                                              WeaponRaiseFireTime;                                      // 0x0D0C(0x0004) (Const)
	float                                              BeltRunTime;                                              // 0x0D10(0x0004)
	class UMaterialInstanceConstant*                   FirstWeaponRightMaterialInstance;                         // 0x0D14(0x0004) (Transient)
	class UMaterialInstanceConstant*                   WeaponFPS_MIC[0x2];                                       // 0x0D18(0x0004) (Transient)
	class UMaterialInstanceConstant*                   WeaponTPS_MIC[0x4];                                       // 0x0D20(0x0004) (Transient)
	class UMaterialInstanceConstant*                   Visor_MIC;                                                // 0x0D30(0x0004) (Transient)
	float                                              DamageStaticFlicker;                                      // 0x0D34(0x0004)
	int                                                CurrentNumDamageEffects;                                  // 0x0D38(0x0004)
	class UMaterialInstanceConstant*                   CockpitUI_MIC;                                            // 0x0D3C(0x0004)
	class UMaterialInstanceConstant*                   Cockpit_MIC;                                              // 0x0D40(0x0004)
	float                                              LastDamageFXTime;                                         // 0x0D44(0x0004)
	float                                              LastBigDamageFXTime;                                      // 0x0D48(0x0004)
	class UAnimNodeAimOffset*                          RAimNode;                                                 // 0x0D4C(0x0004) (EditConst)
	class UAnimNodeSequence*                           BoostFAnimNode;                                           // 0x0D50(0x0004) (EditConst)
	class UAnimNodeSequence*                           HeavyModeAnimNode;                                        // 0x0D54(0x0004) (EditConst)
	class UAnimNodeSequence*                           BoostFAnimNodeFPS_CP;                                     // 0x0D58(0x0004) (EditConst)
	class UAnimNodeSequence*                           BoostFAnimNodeFPS_FPM;                                    // 0x0D5C(0x0004) (EditConst)
	float                                              LastPlayerTargetTime;                                     // 0x0D60(0x0004)
	float                                              FirstPlayerTargetTime;                                    // 0x0D64(0x0004)
	float                                              LastPlayerHealTime;                                       // 0x0D68(0x0004)
	float                                              FirstPlayerHealTime;                                      // 0x0D6C(0x0004)
	class USkelControlFootPlacement*                   RLeftLegControl;                                          // 0x0D70(0x0004)
	class USkelControlFootPlacement*                   RRightLegControl;                                         // 0x0D74(0x0004)
	float                                              CoolantHeatReductionRate;                                 // 0x0D78(0x0004)
	struct FVector                                     LocationWhenKilled;                                       // 0x0D7C(0x000C) (Transient)
	struct FRotator                                    RotationWhenKilled;                                       // 0x0D88(0x000C) (Transient)
	float                                              TimeOfDeath;                                              // 0x0D94(0x0004) (Transient)
	class AR_BaseLifter*                               CurrentBaseLifter;                                        // 0x0D98(0x0004)
	struct FVector                                     LastTrackedLocation;                                      // 0x0D9C(0x000C)
	float                                              distanceAccumulator;                                      // 0x0DA8(0x0004)
	float                                              DefaultCollisionCylinderRadius;                           // 0x0DAC(0x0004)
	float                                              DefaultCollisionCylinderHeight;                           // 0x0DB0(0x0004)
	struct FDebuff                                     Debuffs[0x3];                                             // 0x0DB4(0x0010)
	float                                              DebuffMultiplier;                                         // 0x0DE4(0x0004)
	class AR_StatusEffect_Base*                        CurrentEffect;                                            // 0x0DE8(0x0004) (Net)
	struct FWeaponIndices                              WeapIndices;                                              // 0x0DEC(0x0004)
	float                                              GenericChatterMinTimeInterval;                            // 0x0DF0(0x0004)
	float                                              GenericChatterMaxTimeInterval;                            // 0x0DF4(0x0004)
	struct FSpeakLineInfo                              ReplicatedSpeakLineParams;                                // 0x0DF8(0x0038) (Net, NeedCtorLink)
	struct FSpeakLineInfo                              QueuedSpeakLineParams;                                    // 0x0E30(0x0038) (NeedCtorLink)
	struct FSpeakLineInfo                              CurrentSpeakLineParams;                                   // 0x0E68(0x0038) (NeedCtorLink)
	class UAudioComponent*                             CurrentlySpeakingLine;                                    // 0x0EA0(0x0004) (ExportObject, Component, EditInline)
	float                                              SpeechPitchMultiplier;                                    // 0x0EA4(0x0004)
	float                                              TargetLocationOffsetZ;                                    // 0x0EA8(0x0004)
	struct FVector                                     DebugRootMotionExtractedTranslation;                      // 0x0EAC(0x000C) (Transient)
	struct FMechMeshes                                 MechMeshData;                                             // 0x0EB8(0x0060) (Component)
	struct FAIJumpState                                CurrentAIJumpState;                                       // 0x0F18(0x0030) (Net, Transient)
	class UObject*                                     AIJumpObserver;                                           // 0x0F48(0x0004) (Transient)
	class AHawkenJumpNode*                             ClaimedJumpStart;                                         // 0x0F4C(0x0004) (Transient)
	int                                                ClaimedJumpLinkIdx;                                       // 0x0F50(0x0004) (Transient)
	float                                              JumpOverWallScaleZ;                                       // 0x0F54(0x0004)
	float                                              StuckCheckMinSpeed;                                       // 0x0F58(0x0004) (Transient)
	float                                              StuckCheckLoiterDistance;                                 // 0x0F5C(0x0004) (Transient)
	float                                              StuckCheckTimer;                                          // 0x0F60(0x0004) (Transient)
	float                                              StuckCheckLoiterTimer;                                    // 0x0F64(0x0004) (Transient)
	struct FVector                                     StuckCheckLastLocation;                                   // 0x0F68(0x000C) (Transient)
	struct FVector                                     StuckCheckLoiterLocation;                                 // 0x0F74(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PawnNative");
		return ptr;
	}


	void DrawDebug(class AR_HUD* HUD, const struct FName& Category);
	void PlaySpawning();
	void EndSpawnEffects();
	void ActivateSpawnEffects();
	struct FVector GetIndicatorPosition();
	void GetIndicatorSize(float* Width, float* Height);
	struct FVector GetHitboxCenter();
	class USoundCue* GetPawnSpecificChatterCue(TEnumAsByte<EChatterEvent> EventID, class AR_PawnNative* Speaker);
	void TriggerChargeChatter();
	void PlayDelayedGenericChatter();
	void StopGenericChatter();
	void StartGenericChatter();
	void UpdateSpeakerProxies();
	void TriggerChatterEvent(TEnumAsByte<EChatterEvent> EventID, unsigned char PriorityOverride, class AR_PawnNative* Target, bool bUseTargetSpecificCue, float Delay, TArray<class AR_PawnNative*>* OtherSpeakers);
	void TriggerReadability(TEnumAsByte<EBaseAIReadability> Readability, class AActor* MainRef, TArray<class AActor*>* References);
	void SpeakLineFinished();
	void PlayQueuedSpeakLine();
	void InterruptChatter(TEnumAsByte<EChatterEvent> EventID);
	void InterruptVocalSound(TEnumAsByte<ESoundVocal> VocalID);
	bool ShouldFilterOutSpeech(TEnumAsByte<ESpeakLineBroadcastFilter> Filter, class AR_PawnNative* Addressee);
	bool ShouldSuppressSubtitlesForQueuedSpeakLine(bool bVersusMulti);
	bool SpeakLine(TEnumAsByte<ESpeechInterruptCondition> IntCondition, bool bClientSide, struct FSpeakLineInfo* LineInfo);
	void Silence();
	bool DoHitReaction();
	bool HasHitReaction();
	void RegisterNearHitMiss(class UClass* inDamageType, struct FImpactInfo* Impact);
	bool IsValidTargetFor(class AController* C);
	bool IsStationary();
	void SetSpeedLimit(TEnumAsByte<EMoveSpeedLimit> DesiredSpeedLimit);
	void SetMoveStateInternal(TEnumAsByte<ERobotMoveState> NewState);
	void SetMoveState(TEnumAsByte<ERobotMoveState> NewState);
	void UpdateWeaponModels();
	void SpawnHeldItems(struct FItemsInfo* MechItems);
	void SetMechUpgrades(bool bApplyInternals);
	void PostPlayerSpawn();
	void SetWeapons(int PrimaryIdx, int SecondaryIdx);
	bool CheckStuck(float DeltaTime);
	void InitStuckCheck(float MinSpeed, float LoiterDistance);
	void UnclaimJumpPath();
	void ClaimJumpPath(class AHawkenJumpNode* Node, int LinkIdx);
	struct FVector2D GetAIJumpSpeed();
	bool IsAIJumping();
	TEnumAsByte<EAIJumpPhase> UpdateAIJump(float DeltaTime);
	void StopAIJump();
	void StartAIJump(class UObject* Observer, struct FVector* Start, struct FVector* End, struct FParabola* Parabola);
	void EndAIJumpLanding();
	void HandleAirMovementAI(float DeltaTime);
	bool DoJumpAI(class UObject* Observer, struct FVector* Start, struct FVector* End, struct FParabola* Parabola);
	bool IsPostLand();
	void PostLandTimer();
	void CheckJumpOrHealOrTaunt(bool bPressedJump, bool bHeal, bool bTaunt, bool bUpdating);
	void HandleAirMovement(const struct FVector& newAccel, float DeltaTime);
	void HandleGroundMovement(const struct FVector& AccelTwo, TEnumAsByte<EDoubleClickDir> DoubleClickMove, float DeltaTime);
	bool HandleAcceleration(const struct FVector& newAccel);
	void HandleIdle(const struct FVector& newAccel);
	void HandleTurning(const struct FVector& AccelTwo, float DeltaTime);
	void HandleAllMovement(const struct FVector& newAccel, float DeltaTime, TEnumAsByte<EDoubleClickDir> DoubleClickMove, bool bPressedJump, bool bHeal, bool bTaunt, bool bUpdating);
	void StartNetworkAnim(unsigned char NewAnim);
	void PlayAnimationLocal(unsigned char PlayAnim, bool playFPSAnim);
	bool Dodge(TEnumAsByte<EDoubleClickDir> DoubleClickMove);
	bool DoTaunt();
	void EndHeal();
	void StartMoving();
	void StopMoving();
	float GetMaxThrusterJumpHeight();
	float GetThrusterVerticalSpeed();
	float GetDodgeSpeed();
	void SetIsNotIdle();
	void SetIsIdle();
	bool GetIsIdle();
	void SetBoostForwardSpeed(float NewBoostSpeed);
	float GetBoostForwardSpeed();
	void SetRunSpeed(float NewRunSpeed);
	float GetRunSpeed();
	float GetAirSpeed();
	void SetWeapon(class AWeapon* NewWeapon, int Hand);
	bool IsStealthActive();
	void CancelStealth();
	void InstigatedEffectStopped(class AR_StatusEffect_Base* RSE, class AR_PawnBase* EffectTarget);
	void InstigatedEffectStarted(class AR_StatusEffect_Base* RSE, class AR_PawnBase* EffectTarget);
	void RefreshAppliedEffectFlags();
	bool UnlinkStatusEffect(class AR_StatusEffect_Base* EffectToRemove);
	bool LinkStatusEffect(class AR_StatusEffect_Base* EffectToAdd);
	int RemoveStatusEffectOfClass(class UClass* ClassToRemove);
	bool RemoveStatusEffect(class AR_StatusEffect_Base* EffectToRemove);
	bool AddStatusEffect(class UClass* EffectClass, class AR_PawnBase* EffectInstigator, class AR_StatusEffect_Base** out_RSE);
	bool HasActiveStatusEffectOfClass(class UClass* EffectClass, class AR_Pawn* EffectOwner, class AR_StatusEffect_Base** out_RSE);
	bool HasActiveStatusEffect(class AR_StatusEffect_Base* Effect);
	struct FName GetCurrentMechSubTypeName();
	void DisplayCameraDebug(class AHUD* H, const struct FFontRenderInfo& FontRI, float* YL, float* YPos);
	void TrackDistanceTraveled();
	float TransferEnergyFromSource(float EnergyUnits, TEnumAsByte<EnergyPickupType_e> PickupType, bool bEnergyStation);
	void DoEnergyTransfer(float DeltaTime);
	struct FRotator GetBoneCameraRotation();
	bool ShouldUseBoneCamera();
	void BecomeViewTarget(class APlayerController* PC);
	float AngleLerp(float From, float To, float Amount);
	bool IsFirstPerson();
	void FaceRotation(const struct FRotator& NewRotation, float DeltaTime);
	struct FVector GetDeathCamFocusLoc();
	struct FName GetDeathCamFocusBone();
	struct FVector GetRagdollCamFocusLoc();
	struct FName GetRagdollCamFocusBone();
	void UpdateMechPosition();
	void PushOffCliff(float DeltaTime);
	void CalcBaseThrusterJumpHeight(bool bInitialJump);
	void ExitHealBlendOutTimer();
	void TauntBlendOutTimer();
	bool IsRadarScrambled();
	void SendOverheatStoppedTrackingEvent();
	void SendOverheatStartedTrackingEvent();
	void OnOverheatEnd();
	void OnOverheat();
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void SetGameplayMaterialOverride(TEnumAsByte<EPawnMaterialOverride> NewPawnMaterialOverride, bool bForceUpdate);
	void UpdateGrimeOverlays();
	void UpdateAmbientSound();
	void DoTakeDamageEffects();
	void ShowMechOutline(bool show, const struct FLinearColor& HightlightColor);
	void DoHealing(float DeltaTime, bool showDrone, bool checkStartupTime);
	float CalcDamageDebuffs();
	void ApplyDebuff(TEnumAsByte<EDebuffType_e> NewDebuff, float Duration, float debuffAmount);
	void AdjustDamageFloat(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, float* InDamage, struct FVector* Momentum);
	void RecordHealerDamage(class AController* DamagerController, float actualDamage);
	void OnEMPBlast(class AController* ProjectileInstigator, float Duration, bool bSetTime);
	void OnDisruptorBlast(class AController* ProjectileInstigator, float Duration, bool bSetTime);
	void OnItemDebuffEnd(int Idx);
	void OnItemDebuffStart(int Idx, class AController* ProjectileInstigator, float Duration, bool SetTime);
	void UpdateHeatDebuffEffects(bool Debuffed);
	void UpdateDebuffEffects(bool Debuffed);
	void UpdateDamageEffects(int NewNumDamageEffects);
	void ToggleFootPlacement(bool bEnabled);
	void UpdateCockpitPanelStates(bool bStaggered, bool bForceDown);
	void NotifyVisorBootingUpdated();
	bool IsVisorBooting();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EndHealExitState();
	void ActiveStatusEffects(class UClass* BaseClass, class AR_StatusEffect_Base** RSE);
	bool CheckScreenLocation(class UR_Gfx_VisorNative* CheckVisor, class UCanvas* ProjectionCanvas, bool bClipToScreen);
	bool IsInRadiusOfMissileLauncher(int LauncherIndex);
	void SetIsInRadiusOfMissileLauncher(int LauncherIndex, bool bIsInRadius);
	float GetWeaponSpread(TEnumAsByte<EWeaponHands> Hand);
	float GetChargeTime();
	int GetSecondaryWeaponMode(float* ModeSwitchTime);
	float GetCooldownTime(TEnumAsByte<EWeaponHands> Hand);
	bool IsInSight(class AR_PawnNative* CheckPawn, bool bIsNPC);
	void ClearCachedHUDCheck();
	struct FString GetPawnPropsDesc();
	bool HawkenHasPawnProp(TEnumAsByte<EHawkenPawnProp> Prop);
	void HawkenSetPawnProp(TEnumAsByte<EHawkenPawnProp> Prop, bool bValue);
	bool STATIC_IsRepairBeamMode(TEnumAsByte<EHealBeamMode_e> BeamMode);
	void SetIsBeingHealed();
	void SetRemoteFeetYaw(int NewYaw);
	int GetWeaponUpgradeFlags(int Hand);
	bool AllowHomingLockon();
	bool GetIsAffectedByEMPorDisruptor();
	float GetDebuffTotal(TEnumAsByte<EDebuffType_e> Type);
	int GetNumDebuffs(TEnumAsByte<EDebuffType_e> Type);
	void UpdateActiveDebuffs();
	struct FVector GetThirdPersonLocation();
	void UpdateDeltaZ(float DeltaSeconds);
	float GetDefaultCollisionCylinderRadius();
	void CalcVelocity(float DeltaTime, float MaxSpeed, float Friction, int bFluid, int bBrake, int bBuoyant, struct FVector* accelDir);
	void UpdateFootPlacement();
	void UpdateMechCamoMaterial(float DeltaTime);
	void UpdateMechHighlighting();
	float GetDarkenAmount();
	float GetCrazynessAmount();
	void UpdateCockpitDecorations(float DeltaTime);
	void UpdateWeaponMaterials(float RightBeltRunTime);
	void OverheatWeaponMaterial(float Amount, float Max, class UMaterialInstanceConstant* Weap_MIC);
	int GetNumDamageEffects();
	void AdjustModelZ(float DeltaTime);
	bool IsTauntLocked();
	bool IsZoomed();
	float GetStaticAmount();
	void UpdateThirdPersonMesh(float FeetRotation);
	void UpdateItemDebuffs(float DeltaTime);
	void UpdateOverheatRep(float Value);
	void DecreaseHeat(float NumUnits);
	void DecreaseHeatOverTime(float DeltaTime, bool bIgnoreOverheatDecreaseTimer);
	void UpdateRadarStatus();
	void UpdateAnimationVariables(float DeltaTime);
	void UpdateAim(const struct FRotator& LookRotation, float DeltaTime, float FootYaw);
	void UpdateLockedOnStatus();
	void UpdateTargetingStatus();
	void UseThrust(float ThrustAmount);
	void RegainThrusterEnergy(float DeltaTime);
	bool CanFireWeapon();
	bool IsPawnRotationLocked();
	bool IsHeavyModeState(TEnumAsByte<ERobotMoveState> CheckState);
	bool IsHeavyModeTransforming();
};


// Class HawkenGame.R_Weap_DualWield
// 0x0020 (0x0304 - 0x02E4)
class AR_Weap_DualWield : public AUDKWeapon
{
public:
	class AR_Weap_Base*                                HandWeap[0x4];                                            // 0x02E4(0x0004) (Net)
	int                                                ActiveWeaponsIdx;                                         // 0x02F4(0x0004)
	unsigned long                                      bShowCrosshair : 1;                                       // 0x02F8(0x0004)
	unsigned long                                      bThirdPersonCrosshair : 1;                                // 0x02F8(0x0004)
	unsigned long                                      bShutdown : 1;                                            // 0x02F8(0x0004)
	unsigned long                                      bServerCanFire : 1;                                       // 0x02F8(0x0004) (Net, Transient)
	unsigned long                                      bClientShutdown : 1;                                      // 0x02F8(0x0004) (Transient)
	float                                              ClientCanFireTimeStamp;                                   // 0x02FC(0x0004) (Transient)
	float                                              ServerCanFireTimeStamp;                                   // 0x0300(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_DualWield");
		return ptr;
	}


	void DrawWeaponCrosshair(class UCanvas* C);
	void DrawTempUI(class UCanvas* C);
	void SetThirdPerson(bool isThird);
	void FireAmmunition();
	class AR_Weap_Base* GetWeaponForDamageType(class UClass* dmgType);
	class AR_Weap_Base* GetWeapon(int Hand);
	bool IsZoomed();
	int GetSecondaryWeaponMode(float* ModeSwitchTime);
	float GetChargeTime();
	float GetWeaponSpreadSecondary();
	float GetWeaponSpreadPrimary();
	float GetCooldownTimePrimary();
	float GetCooldownTimeSecondary();
	bool IsStartingLockOn();
	bool IsLockingOn(float* Percent);
	bool IsLockedOn();
	class AActor* GetLockOnTarget();
	void ServerRestartWeapons();
	void ServerShutdownWeapons();
	void RestartWeapons();
	void ShutdownWeapons();
	void ChangeCanFire(bool bCanFireWeapon);
	bool LocalCanFire(bool bPawnCanFire);
	void UpdateCanFire();
	void EndFireTimer1();
	void EndFireTimer0();
	void ServerStopFireExtended(unsigned char FireModeNum, bool bRecentFire);
	void ServerStartFire(unsigned char FireModeNum);
	bool ShouldRefireHand(int Hand);
	void SendToFiringState(unsigned char FireModeNum);
	bool HasAmmo(unsigned char FireModeNum, int Amount);
	void OnOverheat();
	void OnAbilityActivated();
	void OnSetZoom(bool bNewZoomState);
	void EndAltFire();
	void BeginAltFire();
	void BeginFire(unsigned char FireModeNum);
	void SetHandWeaponForHand(int Hand, class AInventory* NewWeapon);
	void InternalSetWeapon(class AInventory* NewWeapon, int Hand, class AR_Weap_Base** WeapVar);
	void Destroyed();
	void SetActiveWeaponsIdx(int NewIdx);
	void StopFire(unsigned char FireModeNum);
	void StartFire(unsigned char FireModeNum);
	void PlayFireEffects(unsigned char FireModeNum, const struct FVector& HitLocation);
	void SpawnHandWeapons(const struct FWeaponIndices& NewWeapIndices);
	void STATIC_SetWeaponMesh(class USkeletalMeshComponent* WeapMesh, int GunIndex, bool bThirdPerson, class AWorldInfo* WI, bool bSetMeshMIC);
	class UClass* STATIC_GetWeaponClass(int GunIndex);
};


// Class HawkenGame.TutorialPOI
// 0x0020 (0x01F4 - 0x01D4)
class ATutorialPOI : public AInfo
{
public:
	struct FString                                     POILabel;                                                 // 0x01D4(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     POICaption;                                               // 0x01E0(0x000C) (Edit, Const, Localized, NeedCtorLink)
	float                                              DisplayScale;                                             // 0x01EC(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x01F0(0x0004) (Edit, Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.TutorialPOI");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class HawkenGame.ChatterTemplate
// 0x03F8 (0x0434 - 0x003C)
class UChatterTemplate : public UObject
{
public:
	struct FAIChatterEventSetup                        Events;                                                   // 0x003C(0x03F0) (Edit)
	float                                              ChargeEventRetriggerTimeMin;                              // 0x042C(0x0004) (Edit)
	float                                              ChargeEventRetriggerTimeMax;                              // 0x0430(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.ChatterTemplate");
		return ptr;
	}

};


// Class HawkenGame.DialogueTemplate
// 0x00C0 (0x00FC - 0x003C)
class UDialogueTemplate : public UObject
{
public:
	struct FDialogueSet                                EnteredCombat;                                            // 0x003C(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                KilledEnemyGeneric;                                       // 0x0048(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                KilledEnemyMelee;                                         // 0x0054(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                DamagedEnemy;                                             // 0x0060(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                DamagedByTeammate;                                        // 0x006C(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                TransToKamikazeAI;                                        // 0x0078(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                NoticedManyEnemies;                                       // 0x0084(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                NoticedLavagunner;                                        // 0x0090(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                NoticedChaingunner;                                       // 0x009C(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                NoticedEnemyGeneric;                                      // 0x00A8(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                NoticedReinforcements;                                    // 0x00B4(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                BeingAimedAtByPlayer;                                     // 0x00C0(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                ShotByPlayer;                                             // 0x00CC(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                EnemyPerceptionSight;                                     // 0x00D8(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                EnemyPerceptionNonSight;                                  // 0x00E4(0x000C) (Edit, NeedCtorLink)
	struct FDialogueSet                                Charge;                                                   // 0x00F0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.DialogueTemplate");
		return ptr;
	}

};


// Class HawkenGame.SeqAct_SetupLevelChatter
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_SetupLevelChatter : public USequenceAction
{
public:
	TArray<struct FChatterSpeakerConfig>               Setup;                                                    // 0x00FC(0x000C) (Edit, NeedCtorLink)
	TArray<class UDialogueTemplate*>                   Dialogs;                                                  // 0x0108(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_SetupLevelChatter");
		return ptr;
	}

};


// Class HawkenGame.BTDecoratorConditionBoolProperty
// 0x0008 (0x0074 - 0x006C)
class UBTDecoratorConditionBoolProperty : public UBTDecoratorCondition
{
public:
	TEnumAsByte<EBoolPropContext>                      context;                                                  // 0x006C(0x0001) (Edit)
	TEnumAsByte<EPawnProp>                             BoolProperty;                                             // 0x006D(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x006E(0x0002) MISSED OFFSET
	unsigned long                                      Value : 1;                                                // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTDecoratorConditionBoolProperty");
		return ptr;
	}

};


// Class HawkenGame.BTDecoratorConditionEnemyLookingAtMe
// 0x0004 (0x0070 - 0x006C)
class UBTDecoratorConditionEnemyLookingAtMe : public UBTDecoratorCondition
{
public:
	float                                              DotVal;                                                   // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTDecoratorConditionEnemyLookingAtMe");
		return ptr;
	}

};


// Class HawkenGame.BTDecoratorIsEnemyInWeaponRange
// 0x0004 (0x0050 - 0x004C)
class UBTDecoratorIsEnemyInWeaponRange : public UBTDecorator
{
public:
	unsigned long                                      bRequireInRange : 1;                                      // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTDecoratorIsEnemyInWeaponRange");
		return ptr;
	}


	struct FString GetDecoratorDescription();
};


// Class HawkenGame.BTHawkenTaskFollowSpline
// 0x0002 (0x0072 - 0x0070)
class UBTHawkenTaskFollowSpline : public UBTTask
{
public:
	TEnumAsByte<EBaseMoveMood>                         MovementMood;                                             // 0x0070(0x0001) (Edit)
	TEnumAsByte<EBaseMoveType>                         MovementType;                                             // 0x0071(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTHawkenTaskFollowSpline");
		return ptr;
	}

};


// Class HawkenGame.BTHawkenTaskHeal
// 0x0008 (0x007C - 0x0074)
class UBTHawkenTaskHeal : public UBTTaskLatentBase
{
public:
	float                                              DoneHealingAtThisPercentMin;                              // 0x0074(0x0004) (Edit)
	float                                              DoneHealingAtThisPercentMax;                              // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTHawkenTaskHeal");
		return ptr;
	}

};


// Class HawkenGame.BTHawkenTaskJump
// 0x0002 (0x0072 - 0x0070)
class UBTHawkenTaskJump : public UBTTask
{
public:
	TEnumAsByte<EWSKProp>                              DestPropertyKey;                                          // 0x0070(0x0001) (Edit)
	TEnumAsByte<EDestinationSelectionMethod>           DestSelectionMethod;                                      // 0x0071(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTHawkenTaskJump");
		return ptr;
	}

};


// Class HawkenGame.BTHawkenTaskSummon
// 0x0011 (0x0085 - 0x0074)
class UBTHawkenTaskSummon : public UBTTaskLatentBase
{
public:
	class AR_PawnBase*                                 SummonArchetype;                                          // 0x0074(0x0004) (Edit)
	int                                                SummonCount;                                              // 0x0078(0x0004) (Edit)
	float                                              SummonDelay;                                              // 0x007C(0x0004) (Edit)
	float                                              SummonInterval;                                           // 0x0080(0x0004) (Edit)
	TEnumAsByte<ENetworkAnimation>                     SummonAnimation;                                          // 0x0084(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTHawkenTaskSummon");
		return ptr;
	}


	void FindSpawnPoint(class ABaseAIController* AI, int Index, struct FVector* Loc, struct FRotator* Rot);
	bool DoSummon(class ABaseAIController* AI, int Index);
	float PlaySummonAnimation(class ABaseAIController* AI);
};


// Class HawkenGame.BTHawkenTaskUseAbility
// 0x0001 (0x0071 - 0x0070)
class UBTHawkenTaskUseAbility : public UBTTask
{
public:
	TEnumAsByte<EAbilityUseType>                       UseType;                                                  // 0x0070(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTHawkenTaskUseAbility");
		return ptr;
	}


	TEnumAsByte<EBTResult> OnExecute(class UBTPersonalInstance* PersonalBT);
};


// Class HawkenGame.BTHawkenTaskUseHolotaunt
// 0x0008 (0x0078 - 0x0070)
class UBTHawkenTaskUseHolotaunt : public UBTTask
{
public:
	int                                                HolotauntIndex;                                           // 0x0070(0x0004) (Edit)
	float                                              ChargeTime;                                               // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTHawkenTaskUseHolotaunt");
		return ptr;
	}


	TEnumAsByte<EBTResult> OnExecute(class UBTPersonalInstance* PersonalBT);
};


// Class HawkenGame.BTHawkenTaskUseItem
// 0x0008 (0x0078 - 0x0070)
class UBTHawkenTaskUseItem : public UBTTask
{
public:
	int                                                ItemIndex;                                                // 0x0070(0x0004) (Edit)
	float                                              ChargeTime;                                               // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTHawkenTaskUseItem");
		return ptr;
	}


	TEnumAsByte<EBTResult> OnExecute(class UBTPersonalInstance* PersonalBT);
};


// Class HawkenGame.BTTaskGoto
// 0x001C (0x008C - 0x0070)
class UBTTaskGoto : public UBTTask
{
public:
	struct FPointer                                    VfTable_ISOObserver;                                      // 0x0070(0x0004) (Const, Native, NoExport)
	TEnumAsByte<EWSKProp>                              PropertyKey;                                              // 0x0074(0x0001) (Edit)
	TEnumAsByte<EBaseMoveMood>                         MovementMood;                                             // 0x0075(0x0001) (Edit)
	TEnumAsByte<EBaseMoveType>                         MovementType;                                             // 0x0076(0x0001) (Edit)
	TEnumAsByte<EETQNamedValue>                        AcceptableDistanceClass;                                  // 0x0077(0x0001) (Edit)
	TEnumAsByte<EDestinationSelectionMethod>           DestinationSelectionMethod;                               // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	unsigned long                                      bMindLeaderDistance : 1;                                  // 0x007C(0x0004) (Edit)
	unsigned long                                      bUseDestination : 1;                                      // 0x007C(0x0004) (Edit)
	unsigned long                                      bMovementCanBeInaccurate : 1;                             // 0x007C(0x0004) (Edit)
	unsigned long                                      bForceAnyMove : 1;                                        // 0x007C(0x0004) (Edit)
	unsigned long                                      bConsiderAllDestinations : 1;                             // 0x007C(0x0004) (Edit)
	unsigned long                                      bStopAtEndOfMovement : 1;                                 // 0x007C(0x0004) (Edit)
	unsigned long                                      bRequestEmergencyStopOnAbort : 1;                         // 0x007C(0x0004) (Edit)
	unsigned long                                      bRetryOnFail : 1;                                         // 0x007C(0x0004) (Edit)
	float                                              AcceptableDistance;                                       // 0x0080(0x0004) (Edit)
	float                                              MaxMovementDeltaForMoveGoalDuringBeforeRePathNeeded;      // 0x0084(0x0004) (Edit)
	float                                              MaxMovementDeltaForMoveGoalDuringFinalApprochBeforeRePathNeeded;// 0x0088(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTTaskGoto");
		return ptr;
	}


	void OnSOFinished(class USmartObjectComponent* SO, int EntryIndex, class ABaseAIPawn* User);
};


// Class HawkenGame.BTHawkenTaskGotoFiringPosition
// 0x0000 (0x008C - 0x008C)
class UBTHawkenTaskGotoFiringPosition : public UBTTaskGoto
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTHawkenTaskGotoFiringPosition");
		return ptr;
	}

};


// Class HawkenGame.BTHawkenTaskGotoHidingSpot
// 0x0004 (0x0090 - 0x008C)
class UBTHawkenTaskGotoHidingSpot : public UBTTaskGoto
{
public:
	float                                              DistanceFromEnemy;                                        // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTHawkenTaskGotoHidingSpot");
		return ptr;
	}

};


// Class HawkenGame.BTHawkenTaskWander
// 0x0000 (0x008C - 0x008C)
class UBTHawkenTaskWander : public UBTTaskGoto
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTHawkenTaskWander");
		return ptr;
	}

};


// Class HawkenGame.BTTaskLookAt
// 0x0001 (0x0071 - 0x0070)
class UBTTaskLookAt : public UBTTask
{
public:
	TEnumAsByte<EWSKProp>                              PropertyKey;                                              // 0x0070(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTTaskLookAt");
		return ptr;
	}

};


// Class HawkenGame.BTTaskPlayAnim
// 0x000C (0x0080 - 0x0074)
class UBTTaskPlayAnim : public UBTTaskLatentBase
{
public:
	struct FName                                       AnimName;                                                 // 0x0074(0x0008) (Edit)
	unsigned long                                      bLoop : 1;                                                // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTTaskPlayAnim");
		return ptr;
	}

};


// Class HawkenGame.BTTaskSetGoalEx
// 0x0001 (0x0071 - 0x0070)
class UBTTaskSetGoalEx : public UBTTask
{
public:
	TEnumAsByte<EBTGoal>                               Goal;                                                     // 0x0070(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTTaskSetGoalEx");
		return ptr;
	}

};


// Class HawkenGame.BTTaskStepAside
// 0x000C (0x007C - 0x0070)
class UBTTaskStepAside : public UBTTask
{
public:
	unsigned long                                      bDelayStep : 1;                                           // 0x0070(0x0004) (Edit)
	unsigned long                                      bRandom : 1;                                              // 0x0070(0x0004) (Edit)
	unsigned long                                      bMoveForwardIfPossible : 1;                               // 0x0070(0x0004) (Edit)
	unsigned long                                      bMoveBackwardIfPossible : 1;                              // 0x0070(0x0004) (Edit)
	struct FName                                       StepAsideQuery;                                           // 0x0074(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTTaskStepAside");
		return ptr;
	}

};


// Class HawkenGame.BTTaskWaitUntilStop
// 0x000C (0x0080 - 0x0074)
class UBTTaskWaitUntilStop : public UBTTaskLatentBase
{
public:
	float                                              MaxSpeedPercent;                                          // 0x0074(0x0004) (Edit)
	float                                              ExtraDelayMin;                                            // 0x0078(0x0004) (Edit)
	float                                              ExtraDelayMax;                                            // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTTaskWaitUntilStop");
		return ptr;
	}

};


// Class HawkenGame.BTTaskWeaponWait
// 0x0028 (0x009C - 0x0074)
class UBTTaskWeaponWait : public UBTTaskLatentBase
{
public:
	unsigned long                                      bCheckIfCanRefire : 1;                                    // 0x0074(0x0004) (Edit)
	unsigned long                                      bCheckIfCanFireWeapon : 1;                                // 0x0074(0x0004) (Edit)
	unsigned long                                      bLimitRequests : 1;                                       // 0x0074(0x0004) (Edit)
	unsigned long                                      bUseHalfDefaultCollisionExtentForHasValidAttackLane : 1;  // 0x0074(0x0004) (Edit)
	unsigned long                                      bCollisionExtentForHasValidAttackLaneSetUp : 1;           // 0x0074(0x0004)
	struct FVector2D                                   MaxRequests;                                              // 0x0078(0x0008) (Edit)
	float                                              WarmupTime;                                               // 0x0080(0x0004) (Edit)
	struct FVector                                     CustomCollisionExtentForHasValidAttackLane;               // 0x0084(0x000C) (Edit)
	struct FVector                                     CollisionExtentForHasValidAttackLane;                     // 0x0090(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTTaskWeaponWait");
		return ptr;
	}

};


// Class HawkenGame.HawkenAi_ControllerBase
// 0x06BC (0x0C50 - 0x0594)
class AHawkenAi_ControllerBase : public ABaseAIController
{
public:
	struct FPointer                                    VfTable_ILatentActionObserver;                            // 0x0594(0x0004) (Const, Native, NoExport)
	class UHawkenAIDefinition*                         HawkenDef;                                                // 0x0598(0x0004) (Transient)
	float                                              LastGetPlayerViewTimestamp;                               // 0x059C(0x0004) (Transient)
	struct FVector                                     LastPlayerViewPoint;                                      // 0x05A0(0x000C) (Transient)
	struct FRotator                                    LastPlayerViewRotation;                                   // 0x05AC(0x000C) (Transient)
	TArray<class AActor*>                              KismetTargets;                                            // 0x05B8(0x000C) (NeedCtorLink)
	unsigned long                                      bInCinematicMode : 1;                                     // 0x05C4(0x0004) (Transient)
	unsigned long                                      bFirstSpawn : 1;                                          // 0x05C4(0x0004)
	unsigned long                                      bStopAI : 1;                                              // 0x05C4(0x0004)
	unsigned long                                      bIsBoss : 1;                                              // 0x05C4(0x0004)
	unsigned long                                      bFillBot : 1;                                             // 0x05C4(0x0004) (Transient)
	unsigned long                                      bSpawnedInit : 1;                                         // 0x05C4(0x0004)
	unsigned long                                      bMoveLockToggleMovement : 1;                              // 0x05C4(0x0004) (Transient)
	unsigned long                                      bMoveLockToggleCombat : 1;                                // 0x05C4(0x0004) (Transient)
	unsigned long                                      bGoToEnemiesOutsideNavmesh : 1;                           // 0x05C4(0x0004)
	unsigned long                                      bExecutingMovementPlugingMoveRequest : 1;                 // 0x05C4(0x0004) (Transient)
	unsigned long                                      bSuccessfulMovementPlugingMoveRequest : 1;                // 0x05C4(0x0004) (Transient)
	unsigned long                                      bDisableCharge : 1;                                       // 0x05C4(0x0004) (Transient)
	unsigned long                                      bForceContinuousFire : 1;                                 // 0x05C4(0x0004) (Transient)
	unsigned long                                      bDistanceBasedFlankingReaction : 1;                       // 0x05C4(0x0004)
	unsigned long                                      bUseBumpMelee : 1;                                        // 0x05C4(0x0004)
	unsigned long                                      bUseReceivedDamage : 1;                                   // 0x05C4(0x0004)
	unsigned long                                      bUpdateBodyState : 1;                                     // 0x05C4(0x0004)
	unsigned long                                      bMindLeader : 1;                                          // 0x05C4(0x0004)
	unsigned long                                      bManualRespawning : 1;                                    // 0x05C4(0x0004)
	unsigned long                                      bUnableToTrackEnemy : 1;                                  // 0x05C4(0x0004) (Transient)
	unsigned long                                      bWasFiring : 1;                                           // 0x05C4(0x0004)
	unsigned long                                      bUseAdjustedAimForFiring : 1;                             // 0x05C4(0x0004)
	unsigned long                                      bCanCritShot : 1;                                         // 0x05C4(0x0004) (Edit, Config)
	unsigned long                                      bFireOnlyAtCrowd : 1;                                     // 0x05C4(0x0004)
	unsigned long                                      bHasCrowdTargets : 1;                                     // 0x05C4(0x0004) (Transient)
	unsigned long                                      bVerboseNavDebug : 1;                                     // 0x05C4(0x0004) (Transient)
	unsigned long                                      bCanChat : 1;                                             // 0x05C4(0x0004)
	float                                              DeathTime;                                                // 0x05C8(0x0004)
	class AR_PawnNative*                               MyHawkAiPawn;                                             // 0x05CC(0x0004)
	int                                                GroupIndex;                                               // 0x05D0(0x0004)
	int                                                WaveIndex;                                                // 0x05D4(0x0004)
	TEnumAsByte<EBotDifficultyLevels>                  BotLevel;                                                 // 0x05D8(0x0001) (Edit)
	unsigned char                                      MyAIType;                                                 // 0x05D9(0x0001)
	TEnumAsByte<EPerceptionMood>                       PerceptionMood;                                           // 0x05DA(0x0001) (Edit)
	TEnumAsByte<ECombatMood>                           CombatMood;                                               // 0x05DB(0x0001) (Edit)
	TEnumAsByte<EFireAtCrowdOption>                    FireAtCrowd;                                              // 0x05DC(0x0001)
	TEnumAsByte<ECoopUpgradeCategory>                  NextUpgradeType;                                          // 0x05DD(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x05DE(0x0002) MISSED OFFSET
	int                                                FillBotIndex;                                             // 0x05E0(0x0004) (Transient)
	int                                                MoveAsideLastDirection;                                   // 0x05E4(0x0004)
	class UActorFactoryAI*                             SpawnFactory;                                             // 0x05E8(0x0004)
	class UR_NPC_Template*                             TemplateToSpawnedFrom;                                    // 0x05EC(0x0004)
	struct FMechPreset                                 PresetBuiltFromTemplate;                                  // 0x05F0(0x0384) (NeedCtorLink)
	class AR_SpawningVolume*                           SafeSpawnVolume;                                          // 0x0974(0x0004)
	struct FVector                                     PostCinematicLocation;                                    // 0x0978(0x000C)
	class UHawkenAIPluginFireControl*                  FireControlPlugin;                                        // 0x0984(0x0004) (ExportObject, Transient, NeedCtorLink, EditInline)
	class UClass*                                      FireControlPluginClass;                                   // 0x0988(0x0004)
	float                                              TargetLostDuration;                                       // 0x098C(0x0004) (Transient)
	float                                              LoseFocusDelay;                                           // 0x0990(0x0004) (Config)
	float                                              EnemyDistance_Close;                                      // 0x0994(0x0004) (Config)
	float                                              EnemyDistance_Medium;                                     // 0x0998(0x0004) (Config)
	float                                              EnemyDistance_Large;                                      // 0x099C(0x0004) (Config)
	float                                              EnemyDistance_Melee;                                      // 0x09A0(0x0004) (Config)
	float                                              EnemyDistance_Hear;                                       // 0x09A4(0x0004) (Config)
	float                                              DistanceBasedFlankingReactionTriggerAt;                   // 0x09A8(0x0004) (Config)
	float                                              WeaponDamageOverride;                                     // 0x09AC(0x0004)
	float                                              WeaponRangeOverride;                                      // 0x09B0(0x0004)
	float                                              ShootingRange;                                            // 0x09B4(0x0004) (Config)
	float                                              GlobalHolotauntCooldown;                                  // 0x09B8(0x0004) (Config)
	float                                              HolotauntChance;                                          // 0x09BC(0x0004) (Config)
	float                                              PostHolotauntPause;                                       // 0x09C0(0x0004) (Config)
	float                                              DodgeCheckCooldown;                                       // 0x09C4(0x0004) (Transient)
	float                                              DodgeProjectileCooldown;                                  // 0x09C8(0x0004) (Transient)
	float                                              DodgeCheckEndTime;                                        // 0x09CC(0x0004) (Transient)
	float                                              NextSpinTime;                                             // 0x09D0(0x0004) (Transient)
	float                                              SpinChance;                                               // 0x09D4(0x0004) (Config)
	float                                              SpinCooldown;                                             // 0x09D8(0x0004) (Config)
	float                                              KillingNavmeshZDelta;                                     // 0x09DC(0x0004) (Config)
	class USeqAct_AIMove*                              CurrentMoveAction;                                        // 0x09E0(0x0004) (Transient)
	struct FVector                                     LastLeaderPosOffset;                                      // 0x09E4(0x000C)
	TArray<struct FString>                             BotNames;                                                 // 0x09F0(0x000C) (Config, NeedCtorLink)
	TArray<struct FString>                             Verbs;                                                    // 0x09FC(0x000C) (Config, NeedCtorLink)
	TArray<struct FString>                             Adjectives;                                               // 0x0A08(0x000C) (Config, NeedCtorLink)
	int                                                NumRespawns;                                              // 0x0A14(0x0004)
	float                                              MinDelayBetweenInGameRespawns;                            // 0x0A18(0x0004) (Config)
	float                                              MaxDelayBetweenInGameRespawns;                            // 0x0A1C(0x0004) (Config)
	float                                              ThisDeathRespawnDelay;                                    // 0x0A20(0x0004)
	int                                                PrevTeamIndex;                                            // 0x0A24(0x0004)
	class AHawkenSquad*                                Squad;                                                    // 0x0A28(0x0004)
	class UClass*                                      DesiredTeamClass;                                         // 0x0A2C(0x0004)
	float                                              MaxDistanceToLeader;                                      // 0x0A30(0x0004) (Config)
	float                                              MinDistanceToLeader;                                      // 0x0A34(0x0004) (Config)
	float                                              LastHealthPercentage;                                     // 0x0A38(0x0004)
	float                                              LastDamageReceivedTime;                                   // 0x0A3C(0x0004)
	float                                              HeavyDamage;                                              // 0x0A40(0x0004) (Transient)
	float                                              HeavyDamageStartTime;                                     // 0x0A44(0x0004) (Transient)
	float                                              FrontalDamageTime;                                        // 0x0A48(0x0004) (Transient)
	float                                              LastHitTime;                                              // 0x0A4C(0x0004) (Transient)
	float                                              DamagePerSecond;                                          // 0x0A50(0x0004) (Transient)
	float                                              DPSLevels[0x4];                                           // 0x0A54(0x0004) (Transient)
	float                                              HealingStartTime;                                         // 0x0A64(0x0004) (Transient)
	float                                              NextHitReactionTime;                                      // 0x0A68(0x0004) (Transient)
	int                                                AccumulatedHitReactionDamage;                             // 0x0A6C(0x0004) (Transient)
	struct FPerceptionStatusInfo                       PerceptionStatus[0x6];                                    // 0x0A70(0x0004) (Transient)
	float                                              ThreatRegenRate;                                          // 0x0A88(0x0004) (Config)
	float                                              ThreatMaxPlayer;                                          // 0x0A8C(0x0004) (Config)
	float                                              ThreatMaxAI;                                              // 0x0A90(0x0004) (Config)
	float                                              ThreatGainOnProximityPlayer;                              // 0x0A94(0x0004) (Config)
	float                                              ThreatGainOnProximityAI;                                  // 0x0A98(0x0004) (Config)
	float                                              ThreatProximityDistance;                                  // 0x0A9C(0x0004) (Config)
	float                                              TargetLockTimePlayer;                                     // 0x0AA0(0x0004) (Config)
	float                                              TargetLockTimeAI;                                         // 0x0AA4(0x0004) (Config)
	float                                              TargetLockTime;                                           // 0x0AA8(0x0004) (Transient)
	TArray<struct FSecondaryTarget>                    SecondaryTargets;                                         // 0x0AAC(0x000C) (Transient, NeedCtorLink)
	float                                              NextScriptPollPawnStatus;                                 // 0x0AB8(0x0004) (Transient)
	float                                              LowInjuredThreshold;                                      // 0x0ABC(0x0004) (Config)
	float                                              InjuredThreshold;                                         // 0x0AC0(0x0004) (Config)
	float                                              SeverelyWoundedThreshold;                                 // 0x0AC4(0x0004) (Config)
	float                                              StartFiringTime;                                          // 0x0AC8(0x0004)
	float                                              StopFiringTime;                                           // 0x0ACC(0x0004)
	float                                              LastActionTransitionTime;                                 // 0x0AD0(0x0004)
	float                                              SMFireWeaponTime;                                         // 0x0AD4(0x0004) (Transient)
	TArray<class APawn*>                               PawnsInDynamicAvoidRange;                                 // 0x0AD8(0x000C) (Transient, NeedCtorLink)
	class APawn*                                       ClosestPawnForDynamicAvoid;                               // 0x0AE4(0x0004) (Transient)
	class APawn*                                       ClosestPawnInFrontSafeArea;                               // 0x0AE8(0x0004) (Transient)
	float                                              RangeToClosestPawnForDynamicAvoid;                        // 0x0AEC(0x0004) (Transient)
	float                                              RangeToClosestPawnInFrontSafeArea;                        // 0x0AF0(0x0004) (Transient)
	float                                              Dot2ClosestPawnInFrontSafeArea;                           // 0x0AF4(0x0004) (Transient)
	struct FVector                                     Vec2ClosestPawnInFrontSafeArea;                           // 0x0AF8(0x000C) (Transient)
	float                                              LastClosestPawnDynamicForceFactor;                        // 0x0B04(0x0004) (Transient)
	struct FVector                                     LastClosestPawnDynamicForce;                              // 0x0B08(0x000C) (Transient)
	struct FVector                                     LastDynAvoidAdjustLoc;                                    // 0x0B14(0x000C) (Transient)
	struct FVector                                     LastOffsetLocForDynAvoidConeOrgin;                        // 0x0B20(0x000C) (Transient)
	float                                              MaxRangeToConsiderPawnsForDynAvoid;                       // 0x0B2C(0x0004) (Config)
	float                                              DotToBeMoreThanToBeInFrontSafeArea;                       // 0x0B30(0x0004) (Config)
	float                                              MaxRangeToConsiderPawnsForFrontSafeArea;                  // 0x0B34(0x0004) (Config)
	float                                              RangeOfBackwardsOffsetForFrontSafeAreaConeOrgin;          // 0x0B38(0x0004) (Config)
	float                                              MaxRangeToConsiderPawnsForClosestPawnDynAvoid;            // 0x0B3C(0x0004) (Config)
	float                                              MaxForcePerSecForClosestDynamicAvoidPawn;                 // 0x0B40(0x0004) (Config)
	float                                              ForceScalingFactorForClosestDynamicAvoidPawn;             // 0x0B44(0x0004) (Config)
	float                                              PickUpRangeScalingFactorForClosestDynamicAvoidPawn;       // 0x0B48(0x0004) (Config)
	float                                              ForceSoftingFactorForClosestDynamicAvoidPawn;             // 0x0B4C(0x0004) (Config)
	float                                              ForceFactorForClosestPawnInFrontSafeArea;                 // 0x0B50(0x0004) (Config)
	float                                              ForceFactorForSigmaDynamicAvoidPawn;                      // 0x0B54(0x0004) (Config)
	TArray<TEnumAsByte<ETriBool>>                      SupportedAITricks;                                        // 0x0B58(0x000C) (NeedCtorLink)
	int                                                NextUpgradeCost;                                          // 0x0B64(0x0004)
	TArray<struct FString>                             GoodGameMsg;                                              // 0x0B68(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             GoodGamePostMsg;                                          // 0x0B74(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             CloseGameMsg;                                             // 0x0B80(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             LostGameMsg;                                              // 0x0B8C(0x000C) (Const, Localized, NeedCtorLink)
	int                                                CloseGameScoreThreshold;                                  // 0x0B98(0x0004)
	int                                                OneSideGameScoreThreshold;                                // 0x0B9C(0x0004)
	float                                              TalkativeRate;                                            // 0x0BA0(0x0004)
	int                                                MMR;                                                      // 0x0BA4(0x0004)
	TArray<struct FString>                             MMRMsg;                                                   // 0x0BA8(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             SpamMMRMsg;                                               // 0x0BB4(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             CloseKillMsg;                                             // 0x0BC0(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             KillMsg;                                                  // 0x0BCC(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             KilledMsg;                                                // 0x0BD8(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             CombatReportMsg;                                          // 0x0BE4(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             StupidAIReplyMsg;                                         // 0x0BF0(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             MuteCommandReplyMsg;                                      // 0x0BFC(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             UnMuteCommandReplyMsg;                                    // 0x0C08(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             InvalidDifficultyComplainMsg;                             // 0x0C14(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             InvalidEasyComplainMsg;                                   // 0x0C20(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             ValidEasyComplainMsg;                                     // 0x0C2C(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             InvalidHardComplainMsg;                                   // 0x0C38(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             ValidHardComplainMsg;                                     // 0x0C44(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAi_ControllerBase");
		return ptr;
	}


	void DeployHoloTaunt(float ChargeTime, int TauntType, bool bIgnoreCooldown);
	void HolotauntCooldownTimer();
	void DelayedCarouselTaunt();
	void DoCarouselTaunt();
	bool ReplyToHardComplain(bool bValid, TArray<struct FString>* UsedMsgs);
	bool ReplyToEasyComplain(bool bValid, TArray<struct FString>* UsedMsgs);
	bool ReplyToInvalidDifficultyComplain(TArray<struct FString>* UsedMsgs);
	void SayCombatReports();
	void SayBotMMR(int MatchMMR, bool bIsSpam, TArray<struct FString>* UsedMsgs);
	void ChatEndGame(int scoreDiff, TArray<struct FString>* EndGameBotMsgs);
	struct FString GetGoodGameMsg(TArray<struct FString>* UsedMsgs);
	void ChatOnKillEvent();
	void NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType);
	struct FString GetRandomMsg(TArray<struct FString> Msgs, bool bUseDefault, TArray<struct FString>* UsedMsgs);
	struct FString GetSimpleRandomMsg(TArray<struct FString> Msgs);
	bool ShouldChat(float talkRate);
	void Say(const struct FString& msg);
	void TimerRevertDesiredSpeed();
	void InitMoveDirection(const struct FVector& Dir, float SpeedScale);
	void MoveInDirection(const struct FVector& Dir, float SpeedScale);
	void FinishMoving();
	void SpeedDebugUpdate();
	void VerboseNavDebugUpdate();
	void Tick(float DeltaTime);
	void HandleClosestPawnAvoid(float DeltaTime);
	void HandleFrontSafeAreaPawnAvoid(float DeltaTime);
	void HandleDynamicAvoid(float DeltaTime);
	bool IsFromSpawnPoint();
	void CopyTo(class AHawkenAi_ControllerBase* NewController);
	bool ShouldFilterOutChatterEvent(TEnumAsByte<EChatterEvent> EventID);
	void DrawDebugDifficulty(class AHUD* H);
	void DrawDebugCombat(class AHUD* H);
	void DrawDebugWeapon(class AHUD* H, const struct FName& Category);
	void DrawDebugETQ(class UCanvas* DrawCanvas);
	void DrawDebugBT(class UCanvas* DrawCanvas);
	void DrawDebugTargets(class AR_HUD* HUD);
	void DrawDebugPreconditions(class UCanvas* DrawCanvas);
	void DrawDebugBlackBoard(class UCanvas* DrawCanvas);
	void DrawJustBT_LeefTaskInfo(class AR_HUD* HUD);
	void DrawDebugAccuracy(class AR_HUD* HUD);
	void DrawDebugPlayerShooting(class AR_HUD* HUD);
	void DrawDebugDynamicAvoid(class AR_HUD* HUD);
	void DrawDebugPathFollowing(class AR_HUD* HUD);
	void DebugDrawTarget(class AR_HUD* HUD);
	void DrawIconOverhead(class AR_HUD* HUD, class UTexture2D* Icon, bool bSimple);
	void DrawDebug(class AR_HUD* HUD, const struct FName& Category);
	void DismountTurret();
	void MountTurret();
	float GetMobility();
	float GetAccuracy();
	void SetNextUpgrade(TEnumAsByte<ECoopUpgradeCategory> UpgradeType);
	void ReceivedEnergyUnits(int TotalEU);
	void InitializeUpgrades();
	void ScriptPollPawnStatus();
	bool IsOutsideRecoverArea(const struct FVector& TestLocation, struct FVector* PointOnNavMesh);
	bool IsOutsideNavigation(const struct FVector& TestLocation, bool bIncludeDisabled, struct FVector* PointOnNavMesh);
	void RestartAI();
	bool AllowHealthRecharge();
	void RestoreResponseTime();
	float GetEnemyVisibleDuration(class APawn* EnemyPawn);
	float TimeSinceLastSeenEnemy(class APawn* EnemyPawn, bool bUnseenIfNotFound);
	void ClearChargeLock();
	void OnChargeLock();
	bool GoalCleanUp(const struct FName& Goal);
	bool GoalSetUp(TEnumAsByte<EBTGoal> Goal);
	float AdjustAimError(float TargetDist, bool bInstantProj);
	void RestoreAccuracyAfterEngagement();
	void OnInitialWeaponUse();
	void DamageMemoryExpired();
	void RefreshDamageMemory();
	void OnReceivedDamage(int Damage, class APawn* DamageInstigator, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void CheckHitReaction(int Damage);
	void ClearDPS();
	void UpdateDPS(int Damage);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	struct FRotator GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc);
	struct FVector GetViewLocation();
	void GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	void BeginFireAtTarget(class AActor* Target);
	void OnTargetChange(class AActor* NewTarget);
	class AActor* GetFinalTarget(class AActor* targ);
	bool HasValidTarget(class AActor* TestTarget);
	void OnToggleCinematicMode(class USeqAct_ToggleCinematicMode* Action);
	void OnToggleHidden(class USeqAct_ToggleHidden* Action);
	void OnAIAdjustProperties(class UHawkenSeqAct_AIAdjustProperties* Action);
	void ChaosBanzai();
	void OnAIBanzai(class USeqAct_AIBanzai* Action);
	void OnAIToggleCombat(class USeqAct_AIToggleCombat* Action);
	void ShowPawn();
	void HidePawn(float Duration);
	void PauseMovement(bool bShouldPause, float Duration);
	void TimerResumeFromPause();
	void ApplyKismetPause(bool bShouldPause, float Duration);
	void OnGlobalPauseChanged(bool bPaused);
	void TimerUnblockMovement();
	void SetAutomaticMovementUnblock(bool bLock, float MovementBlockTimeLength);
	void SetConfusedRangesAndFiring();
	void OnAIConfused();
	void OnAISetTarget(class USeqAct_AISetTarget* inAction);
	void OnAILookAt(class USeqAct_AILookAt* inAction);
	void OnAIMoveToActor(class USeqAct_AIMoveToActor* Action);
	void OnPostTeleport(class USequenceAction* Action);
	void OnLatentFinished(class ABaseAIController* Observer, class UObject* Action, unsigned char FinishResult);
	void OnKismetMovementFinish();
	void ForceKismetMovementFinish();
	void StoreCurrentKismetMoveRequest(class USeqAct_AIMove* Action);
	void OnAIMove(class USeqAct_AIMove* Action);
	void OnToggleGenericChatter(class USeqAct_ToggleGenericChatter* Action);
	void ClearGoal(const struct FName& Goal, bool bAny);
	void SetGoal(const struct FName& Goal, bool bForce, bool bAbortMovement);
	void OnAISetBT(class USeqAct_AISetBT* inAction);
	bool TeleportToLocation(const struct FVector& NewLoc, const struct FRotator& NewRot);
	bool FollowSpline(class UObject* MoveObserver, TEnumAsByte<EActionPriority> ActionPriority, TEnumAsByte<EBaseMoveMood> InMM, bool bAllowedToFire);
	bool Wander(class UObject* MoveObserver, TEnumAsByte<EActionPriority> ActionPriority, TEnumAsByte<EBaseMoveMood> InMM, bool bAllowedToFire, bool bStopAtEnd);
	bool MoveToFiringPositionUponEnemy(class UObject* MoveObserver, TEnumAsByte<EActionPriority> ActionPriority, TEnumAsByte<EBaseMoveMood> InMM, float MaxMovementDeltaForMoveGoalDuringBeforeRePathNeeded, float MaxMovementDeltaForMoveGoalDuringFinalApprochBeforeRePathNeeded, bool bAllowedToFire, bool bStopAtEnd, float AcceptableDistance, struct FVector* InFirePosLocation);
	bool HideFromEnemy(class UObject* MoveObserver, class APawn* MoveGoal, TEnumAsByte<EActionPriority> ActionPriority, TEnumAsByte<EBaseMoveMood> InMM, float DistAwayFromEnemy, float MaxMovementDeltaForMoveGoalDuringBeforeRePathNeeded, float MaxMovementDeltaForMoveGoalDuringFinalApprochBeforeRePathNeeded, bool bAllowedToFire, bool bStopAtEnd);
	bool MoveToSquadLeader(class UObject* MoveObserver, float AcceptableDistance, float MaxMovementDeltaForMoveGoalDuringBeforeRePathNeeded, float MaxMovementDeltaForMoveGoalDuringFinalApprochBeforeRePathNeeded);
	bool MoveToPawn(class UObject* MoveObserver, class APawn* MoveGoal, TEnumAsByte<EActionPriority> ActionPriority, bool bAllowedToFire, float AcceptableDistance, float MaxMovementDeltaForMoveGoalDuringBeforeRePathNeeded, float MaxMovementDeltaForMoveGoalDuringFinalApprochBeforeRePathNeeded, const struct FVector& DestOffset, bool bStopAtEnd);
	bool MoveToEnemy(class UObject* MoveObserver, TEnumAsByte<EActionPriority> ActionPriority, bool bAllowedToFire, float AcceptableDistance, float MaxMovementDeltaForMoveGoalDuringBeforeRePathNeeded, float MaxMovementDeltaForMoveGoalDuringFinalApprochBeforeRePathNeeded);
	bool MoveIsInterruptable(bool bForce);
	bool GeneratePathToLocation(const struct FVector& Goal, float WithinDistance, bool bAllowPartialPath);
	bool NotifyBump(class AActor* Other, const struct FVector& HitNormal);
	bool FindValidPointOnNavMesh(float SearchHeight, struct FVector* SearchLocation, struct FVector* ResultLocation);
	bool IsOnNavMesh();
	struct FVector GetDesiredMoveTargetOffset();
	bool IsThereValidPathToThisEnemy(class APawn* NewEnemy);
	void AutoAquireEnemy();
	void SetCombatMood(TEnumAsByte<ECombatMood> InMood, class APawn* MoodInstigator);
	void NotifyEnemyHeard(class APawn* HeardEnemy, const struct FName& NoiseType);
	bool NotifyAbortingCombatHealing();
	bool StartCombatHealing();
	float GetHealthPercentage();
	void SetSquadName(const struct FName& NewSquadName, bool bLeader);
	struct FName GetSquadName();
	void UpdateFireTicketsInfo();
	void HandleBotLoadingMechPreset(class UR_MechSetup* MechSetup2Use);
	void HandleBotPresetSetup(class UR_MechSetup* MechSetup2Use);
	void HandleBotStartingMechsOffline(class UR_MechSetup* MechSetup2Use);
	void NpcServerSetStartMech(const struct FString& Mech_InstanceId, int PrimaryWeapon, int PassiveConsumeable, int HoloTauntType, class UR_NPC_Template* Template, struct FMechPreset* preset);
	struct FMechPreset BuildMechPresetFromTemplate(class UR_NPC_Template* TemplateToSpawnFrom);
	void SetupMechAndWeapsFromTemplate(class UR_NPC_Template* TemplateToSpawnFrom);
	void InitPawnSpeed();
	void SetupFromTemplate(class UR_NPC_Template* TemplateToSpawnFrom);
	void AddDefaultInventory();
	void PostSpawned();
	void SpawnedFromTemplate(class UR_NPC_Template* TemplateToSpawnFrom);
	void AssignTemplate(class UR_NPC_Template* Template);
	void GenerateAndSetNameForThisLittleKiller();
	struct FString STATIC_GenerateName();
	void SpawnedByKismet();
	unsigned char GetTeamNum();
	float GetRespawnTimeAfterInGameDeath();
	bool Respawn();
	void KillThisBot();
	void FakeDeath();
	void InitPlayerReplicationInfo();
	void UnPossess();
	void Possess(class APawn* inPawn, bool bVehicleTransition);
	void InitFromDef();
	void PostBeginPlay();
	void InitializeBlackBoard();
	void ScriptToNativeDebugHelper();
	int BroadcastEnemyKnowledge(class APawn* EnemyPawn, TEnumAsByte<EWSPerceptionMode> Perception);
};


// Class HawkenGame.HawkenAi_MechBase
// 0x0028 (0x0C78 - 0x0C50)
class AHawkenAi_MechBase : public AHawkenAi_ControllerBase
{
public:
	class ABaseAISquad*                                SquadInstance;                                            // 0x0C50(0x0004)
	float                                              EnemyDistance_MeleeCharge;                                // 0x0C54(0x0004) (Config)
	float                                              EnemyDistance_BossAvoid;                                  // 0x0C58(0x0004) (Config)
	struct FVector2D                                   ReFireDelay;                                              // 0x0C5C(0x0008) (Config)
	float                                              ValidFireDot;                                             // 0x0C64(0x0004)
	float                                              FireCooldownDelay;                                        // 0x0C68(0x0004)
	struct FName                                       PreTurretBT;                                              // 0x0C6C(0x0008) (Transient)
	unsigned long                                      bReselectOnPerceptionChange : 1;                          // 0x0C74(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAi_MechBase");
		return ptr;
	}


	bool ShouldFilterOutChatterEvent(TEnumAsByte<EChatterEvent> EventID);
	void NoticedEnemy(class APawn* NewEnemy);
	void NotifyLostEnemyVisibility(class APawn* LostEnemy);
	void NotifyEnemyBecameVisible(class APawn* VisibleEnemy, float TimeSinceLastVisible);
};


// Class HawkenGame.HawkenAi_MechHeavy
// 0x0000 (0x0C78 - 0x0C78)
class AHawkenAi_MechHeavy : public AHawkenAi_MechBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAi_MechHeavy");
		return ptr;
	}

};


// Class HawkenGame.HawkenAi_MechLight
// 0x0004 (0x0C7C - 0x0C78)
class AHawkenAi_MechLight : public AHawkenAi_MechBase
{
public:
	unsigned long                                      bLastStoppedBecauseOfNewPathDirectionChange : 1;          // 0x0C78(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAi_MechLight");
		return ptr;
	}


	bool ShouldFilterOutChatterEvent(TEnumAsByte<EChatterEvent> EventID);
	void OnTargetChange(class AActor* NewTarget);
};


// Class HawkenGame.HawkenAi_MechMedium
// 0x0000 (0x0C78 - 0x0C78)
class AHawkenAi_MechMedium : public AHawkenAi_MechBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAi_MechMedium");
		return ptr;
	}

};


// Class HawkenGame.HawkenAi_Rookie
// 0x0000 (0x0C78 - 0x0C78)
class AHawkenAi_Rookie : public AHawkenAi_MechMedium
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAi_Rookie");
		return ptr;
	}


	void OnAIConfused();
	void Possess(class APawn* inPawn, bool bVehicleTransition);
};


// Class HawkenGame.HawkenAi_NPC
// 0x0000 (0x0C78 - 0x0C78)
class AHawkenAi_NPC : public AHawkenAi_Rookie
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAi_NPC");
		return ptr;
	}


	void GenerateAndSetNameForThisLittleKiller();
	void PostBeginPlay();
};


// Class HawkenGame.HawkenAIDefinition
// 0x005C (0x00A4 - 0x0048)
class UHawkenAIDefinition : public UBaseAIDefinition
{
public:
	float                                              Mobility;                                                 // 0x0048(0x0004) (Edit)
	TEnumAsByte<EHitReactionTrigger>                   HitReactionTrigger;                                       // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	float                                              HitReactionThreshold;                                     // 0x0050(0x0004) (Edit)
	float                                              HitReactionChance;                                        // 0x0054(0x0004) (Edit)
	float                                              HitReactionCooldownMin;                                   // 0x0058(0x0004) (Edit)
	float                                              HitReactionCooldownMax;                                   // 0x005C(0x0004) (Edit)
	float                                              DodgeChance;                                              // 0x0060(0x0004) (Edit)
	float                                              DodgeProjectileChance;                                    // 0x0064(0x0004) (Edit)
	float                                              DodgeCooldownMin;                                         // 0x0068(0x0004) (Edit)
	float                                              DodgeCooldownMax;                                         // 0x006C(0x0004) (Edit)
	float                                              DodgeCooldownFail;                                        // 0x0070(0x0004) (Edit)
	float                                              DodgeCooldownReroll;                                      // 0x0074(0x0004) (Edit)
	float                                              DodgeCooldownProjectile;                                  // 0x0078(0x0004) (Edit)
	float                                              DodgeChance_HighMobility;                                 // 0x007C(0x0004) (Edit)
	float                                              DodgeCooldownScale_LowMobility;                           // 0x0080(0x0004) (Edit)
	float                                              DodgeCooldownScale_HighMobility;                          // 0x0084(0x0004) (Edit)
	float                                              ProjectileDetonationChance;                               // 0x0088(0x0004) (Edit)
	float                                              ProjectileDetonationDelayMin;                             // 0x008C(0x0004) (Edit)
	float                                              ProjectileDetonationDelayMax;                             // 0x0090(0x0004) (Edit)
	float                                              DPS_Low;                                                  // 0x0094(0x0004) (Edit)
	float                                              DPS_Med;                                                  // 0x0098(0x0004) (Edit)
	float                                              DPS_High;                                                 // 0x009C(0x0004) (Edit)
	float                                              OverheatChance;                                           // 0x00A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAIDefinition");
		return ptr;
	}

};


// Class HawkenGame.HawkenAISystem
// 0x0024 (0x00E8 - 0x00C4)
class UHawkenAISystem : public UBaseAISubsystem
{
public:
	float                                              SniperDodgeDelay_Regular;                                 // 0x00C4(0x0004) (Config)
	float                                              SniperDodgeDelay_Easy;                                    // 0x00C8(0x0004) (Config)
	TArray<struct FDelayedExplotion>                   DelayedExplosions;                                        // 0x00CC(0x000C) (AlwaysInit, NeedCtorLink)
	float                                              DelayedExplosionSpan;                                     // 0x00D8(0x0004)
	unsigned long                                      bDoDelayedExplosions : 1;                                 // 0x00DC(0x0004)
	float                                              GameFrameTime;                                            // 0x00E0(0x0004) (Transient)
	float                                              NextAllowedDeath;                                         // 0x00E4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAISystem");
		return ptr;
	}


	void STATIC_SetDebugLogContext(class AActor* act);
	float STATIC_GetSniperDodgeDelay(bool bEasy);
	void STATIC_TriggerAITrick(TEnumAsByte<EBSAITrick> Trick, class AR_PawnNative* Instigator, class AActor* context);
};


// Class HawkenGame.R_NPC_Template
// 0x00DC (0x0118 - 0x003C)
class UR_NPC_Template : public UObject
{
public:
	class UClass*                                      PawnType;                                                 // 0x003C(0x0004) (Edit)
	class UClass*                                      ControllerType;                                           // 0x0040(0x0004) (Edit)
	struct FString                                     BotName;                                                  // 0x0044(0x000C) (Edit, NeedCtorLink)
	struct FString                                     MechSubTypeName;                                          // 0x0050(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<EAbilities>                            AbilityIconType;                                          // 0x005C(0x0001) (Edit)
	TEnumAsByte<EBotDifficultyLevels>                  BotLevel;                                                 // 0x005D(0x0001) (Edit)
	TEnumAsByte<EeNPC_MECH_CAT>                        MechCat;                                                  // 0x005E(0x0001) (Edit)
	TEnumAsByte<EeNPC_MECH_TYPE>                       MechType;                                                 // 0x005F(0x0001) (Edit)
	TEnumAsByte<EeNPC_MECH_PRIMARY_WEAPON>             MechPrimaryWeapon;                                        // 0x0060(0x0001) (Edit)
	TEnumAsByte<ENPC_MECH_SECONDARY_WEAPON>            MechSecondaryWeapon;                                      // 0x0061(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0062(0x0002) MISSED OFFSET
	unsigned long                                      bIsBoss : 1;                                              // 0x0064(0x0004) (Edit)
	unsigned long                                      bDropEnergy : 1;                                          // 0x0064(0x0004) (Edit)
	class UHawkenAIDefinition*                         BotAIDef;                                                 // 0x0068(0x0004) (Edit, EditInline, EditInlineUse)
	class UBTTemplate*                                 BehaviorTreeTemplateToUse;                                // 0x006C(0x0004) (Edit)
	int                                                TeamIndex;                                                // 0x0070(0x0004) (Edit)
	struct FNpcVisualInfo                              MechVisualInfo;                                           // 0x0074(0x0030) (Edit, NeedCtorLink)
	TArray<struct FNpcVisualInfo>                      BotVisualPresets;                                         // 0x00A4(0x000C) (Edit, NeedCtorLink)
	float                                              TotalVisualPresetWeights;                                 // 0x00B0(0x0004)
	float                                              SpeedMultiplier;                                          // 0x00B4(0x0004) (Edit)
	float                                              BoostSpeedOverride;                                       // 0x00B8(0x0004) (Edit)
	float                                              RunSpeedOverride;                                         // 0x00BC(0x0004) (Edit)
	float                                              WalkSpeedOverride;                                        // 0x00C0(0x0004) (Edit)
	float                                              AirSpeedOverride;                                         // 0x00C4(0x0004) (Edit)
	float                                              HealthMultiplier;                                         // 0x00C8(0x0004) (Edit)
	float                                              HealthOverride;                                           // 0x00CC(0x0004) (Edit)
	float                                              SpreadMultiplier;                                         // 0x00D0(0x0004) (Edit)
	float                                              DamageMultiplier;                                         // 0x00D4(0x0004) (Edit)
	float                                              FireRateMultiplier;                                       // 0x00D8(0x0004) (Edit)
	float                                              HeatMultiplier;                                           // 0x00DC(0x0004) (Edit)
	int                                                EnergyUnits;                                              // 0x00E0(0x0004) (Edit)
	int                                                NumEnergyDrops;                                           // 0x00E4(0x0004) (Edit)
	float                                              EnergySpreadSpeed;                                        // 0x00E8(0x0004) (Edit)
	TArray<class UClass*>                              Items;                                                    // 0x00EC(0x000C) (Edit, NeedCtorLink)
	TArray<unsigned char>                              CachedItemIndices;                                        // 0x00F8(0x000C) (Transient, NeedCtorLink)
	TArray<struct FName>                               DeathAnims;                                               // 0x0104(0x000C) (Edit, NeedCtorLink)
	struct FName                                       HitReactionAnim;                                          // 0x0110(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_NPC_Template");
		return ptr;
	}


	void ChooseRandomVisualPreset();
	void RandomizeTemplate();
	unsigned char GetItemIndex(int SlotIndex);
	void SetupBehaviorTree(class AHawkenAi_ControllerBase* newAiCtrl);
	class ABaseAIController* SpawnTemplateController();
	void SpawnController(class AR_PawnBase* newNPC);
	void OverloadProperties(class AR_Pawn* P);
};


// Class HawkenGame.Targetable
// 0x0000 (0x003C - 0x003C)
class UTargetable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.Targetable");
		return ptr;
	}


	class APawn* GetTargetOwner();
	TEnumAsByte<ETargetPriority> GetTargetPriority();
};


// Class HawkenGame.HawkenAIPluginMovement_MechSimple
// 0x011C (0x01EC - 0x00D0)
class UHawkenAIPluginMovement_MechSimple : public UAIPluginMovement
{
public:
	class AHawkenAi_MechBase*                          MyHawkenController;                                       // 0x00D0(0x0004) (Transient)
	struct FVector                                     DestLocation;                                             // 0x00D4(0x000C)
	class UNavigationPath*                             Path;                                                     // 0x00E0(0x0004)
	class UNavigationPath*                             SuspendedPath;                                            // 0x00E4(0x0004)
	unsigned long                                      bPathFoundAtStart : 1;                                    // 0x00E8(0x0004)
	unsigned long                                      bPerformActionWhileFollowingPath : 1;                     // 0x00E8(0x0004)
	unsigned long                                      bGetAsCloseToDestinationAsPossible : 1;                   // 0x00E8(0x0004)
	unsigned long                                      bFinalApproach : 1;                                       // 0x00E8(0x0004)
	unsigned long                                      bPrevFocusSet : 1;                                        // 0x00E8(0x0004) (Transient)
	unsigned long                                      bBoosting : 1;                                            // 0x00E8(0x0004) (Transient)
	class AActor*                                      GoalActor;                                                // 0x00EC(0x0004)
	class AActor*                                      ActorToHideFrom;                                          // 0x00F0(0x0004)
	struct FVector                                     ActorOfConcernLocationAtLastPathGen;                      // 0x00F4(0x000C) (Transient)
	struct FVector                                     PawnLocationLastTimeTestedForMovementAdjestmentStuck;     // 0x0100(0x000C) (Transient)
	float                                              LastTimeTestedForMovementAdjestmentStuck;                 // 0x010C(0x0004) (Transient)
	struct FVector                                     PawnLocationLastTimeTestedForNormalMovementStuck;         // 0x0110(0x000C) (Transient)
	float                                              LastTimeTestedForNormalMovementStuck;                     // 0x011C(0x0004) (Transient)
	float                                              ActorAvoidanceRadius;                                     // 0x0120(0x0004)
	struct FVector                                     NextPoint;                                                // 0x0124(0x000C) (Transient)
	struct FVector                                     NextPointRaw;                                             // 0x0130(0x000C) (Transient)
	struct FVector                                     LastMovePoint;                                            // 0x013C(0x000C) (Transient)
	int                                                NumMovePointFails;                                        // 0x0148(0x0004) (Transient)
	int                                                MaxMovePointFails;                                        // 0x014C(0x0004)
	class UNavigationSystem*                           NavSys;                                                   // 0x0150(0x0004) (Transient)
	struct FBasedPosition                              LastActorLocation;                                        // 0x0154(0x0034) (Transient)
	float                                              TargetCollisionRadius;                                    // 0x0188(0x0004) (Transient)
	float                                              CurrentDistanceToGoalSq;                                  // 0x018C(0x0004) (Transient)
	struct FName                                       PrevState;                                                // 0x0190(0x0008) (Transient)
	class AActor*                                      PrevFocus;                                                // 0x0198(0x0004) (Transient)
	class AActor*                                      CauseOfPause;                                             // 0x019C(0x0004) (Transient)
	struct FVector                                     CurrentOffsetMoveToLocationFromEnemy;                     // 0x01A0(0x000C) (Transient)
	TEnumAsByte<ESerpentineMoveDirection>              SerpentineDirection;                                      // 0x01AC(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01AD(0x0003) MISSED OFFSET
	struct FVector                                     SerperntineStart;                                         // 0x01B0(0x000C) (Transient)
	struct FVector                                     SerperntineEnd;                                           // 0x01BC(0x000C) (Transient)
	float                                              SerpentineBounds;                                         // 0x01C8(0x0004) (Transient)
	float                                              DodgeEndRemaining;                                        // 0x01CC(0x0004) (Transient)
	TArray<struct FBreadcrumb>                         Breadcrumbs;                                              // 0x01D0(0x000C) (Transient, NeedCtorLink)
	int                                                LastBreadcrumb;                                           // 0x01DC(0x0004) (Transient)
	struct FString                                     DebugStatus;                                              // 0x01E0(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAIPluginMovement_MechSimple");
		return ptr;
	}


	void LogFailedPath(class UNavigationPath* PathToDraw);
	void DrawDebugBreadcrumbs(class AHUD* H);
	void DrawDebug(class AHUD* H, const struct FName& Category);
	TEnumAsByte<ECtrlMovementMonitorResult> ProcessCtrlMovementToNextPointMonitor();
	bool IsOutOfControl();
	bool IsStuckInNormalMovement();
	bool IsStuckAdjusting();
	bool ProcessForNeedToRepathAfterFinalApprochStarted();
	bool ProcessForNeedToRepath();
	bool ProcessForNeedToRepathBasedOnMovementPhase();
	bool ProcessForNeedToAbort();
	bool ShouldDisengageFromCombat();
	struct FVector CalcMovePointFocus(const struct FVector& MovePoint);
	TEnumAsByte<EFocusPriority> GetMoveFocus(class AActor** MoveFocus, struct FVector* MoveFocalPoint);
	bool GetIfShouldWalkDurringCurrentMovementPhase();
	float GetOffsetForCurrentMovePhase();
	class AActor* GetFocusForForCurrentMovePhase();
	struct FVector GetPointMovingToForCurrentMovePhase();
	struct FVector GetLocationForFinalMoveTowards();
	class AActor* GetFocusForFinalMoveTowards();
	bool BuildWanderRoute();
	bool IsTherePathToDesiredVectorDest();
	bool IsTherePathToFiringPositionUponEnemy();
	void SetDestinationLocationFromNavMeshGoalEvaluator(class UNavMeshPathGoalEvaluator* EvaluatorGivingLoc, struct FVector* PlaceToGo);
	bool IsTherePathHidingFromEnemy();
	bool IsTherePathToGoalActor();
	bool IsValidReferenceActor(class AActor* CheckActor);
	void UpdateActorGoal(class AActor* ActorDestination);
	void PostProcessPath(class UNavigationPath** outPath, struct FMoveParameters* MoveParams);
	bool IsCloseEnoughToFinalWanderLocation();
	bool IsCloseEnoughToDesiredVectorDest();
	bool IsCloseEnoughToDesiredFirePostion();
	bool IsCloseEnoughToHideLocation();
	bool CloseEnoughToNextPoint();
	bool BasicDistanceCheckToGoalActor();
	TEnumAsByte<EDoubleClickDir> CheckForDoubleClickMove();
	void HandlePawnMovement(float DeltaTime);
	void HandleDodgeInertia(float DeltaTime);
	struct FVector GetDodgeDest(TEnumAsByte<EDoubleClickDir> Dir);
	bool DoDodge(TEnumAsByte<EDoubleClickDir> Dir);
	bool IsPointOnAnchorPoly(struct FVector* Point);
	void AssignPath(class UNavigationPath* InPath);
	void Failure();
	void Success();
	void PauseMove(class AActor* Blocker);
	bool AbortMove(bool bNewRequest);
};


// Class HawkenGame.HawkenAITickablePlugin
// 0x0004 (0x0054 - 0x0050)
class UHawkenAITickablePlugin : public UAITickablePlugin
{
public:
	class AHawkenAi_MechBase*                          MyHawkenController;                                       // 0x0050(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAITickablePlugin");
		return ptr;
	}

};


// Class HawkenGame.HawkenAIPluginFireControl
// 0x00B0 (0x0104 - 0x0054)
class UHawkenAIPluginFireControl : public UHawkenAITickablePlugin
{
public:
	class AActor*                                      TrackingTarget;                                           // 0x0054(0x0004) (Transient)
	float                                              Accuracy;                                                 // 0x0058(0x0004) (Transient)
	float                                              AccuracyRate;                                             // 0x005C(0x0004)
	float                                              MinDotError;                                              // 0x0060(0x0004) (Transient)
	struct FVector                                     TargetTrackingPoint;                                      // 0x0064(0x000C) (Transient)
	struct FVector                                     CurrentTrackingPoint;                                     // 0x0070(0x000C) (Transient)
	float                                              TrackingDelay;                                            // 0x007C(0x0004) (Transient)
	float                                              TrackingTime;                                             // 0x0080(0x0004) (Transient)
	TEnumAsByte<EHeatManagementStatus>                 HeatManageStatus;                                         // 0x0084(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	struct FVector                                     LastTrackingPoint;                                        // 0x0088(0x000C) (Transient)
	struct FVector                                     LastTargetPoint;                                          // 0x0094(0x000C) (Transient)
	struct FVector                                     LastSpreadPoint;                                          // 0x00A0(0x000C) (Transient)
	struct FVector                                     LastStaticPoint;                                          // 0x00AC(0x000C) (Transient)
	float                                              LastDeviation;                                            // 0x00B8(0x0004) (Transient)
	float                                              LastSpread;                                               // 0x00BC(0x0004) (Transient)
	float                                              LastErrorAngle;                                           // 0x00C0(0x0004) (Transient)
	float                                              LastFinalAngle;                                           // 0x00C4(0x0004) (Transient)
	float                                              LastTrackingTime;                                         // 0x00C8(0x0004) (Transient)
	float                                              MinTrackingSpeed;                                         // 0x00CC(0x0004)
	float                                              MaxTrackingSpeed;                                         // 0x00D0(0x0004)
	float                                              FarTrackingDelay;                                         // 0x00D4(0x0004)
	float                                              CloseTrackingDelay;                                       // 0x00D8(0x0004)
	float                                              Spread_LowAccuracy;                                       // 0x00DC(0x0004)
	float                                              Spread_HighAccuracy;                                      // 0x00E0(0x0004)
	float                                              Deviation_LowAccuracy;                                    // 0x00E4(0x0004)
	float                                              Deviation_HighAccuracy;                                   // 0x00E8(0x0004)
	float                                              Leading_LowAccuracy;                                      // 0x00EC(0x0004)
	float                                              Leading_HighAccuracy;                                     // 0x00F0(0x0004)
	float                                              TrackingTime_LowAccuracy;                                 // 0x00F4(0x0004)
	float                                              TrackingTime_HighAccuracy;                                // 0x00F8(0x0004)
	float                                              TrackingDelay_LowAccuracy;                                // 0x00FC(0x0004)
	float                                              TrackingDelay_HighAccuracy;                               // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAIPluginFireControl");
		return ptr;
	}


	void DrawDebug(class AHUD* H, const struct FName& Category);
	struct FVector GetWeaponAimDir(struct FVector* TargetPoint);
	struct FVector GetAimDir();
	void DisableTracking();
	void EnableTracking(class AActor* Target);
};


// Class HawkenGame.HawkenPawnPlugin
// 0x0004 (0x0044 - 0x0040)
class UHawkenPawnPlugin : public UPawnPlugin
{
public:
	class AR_PawnNative*                               PawnOwner;                                                // 0x0040(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPlugin");
		return ptr;
	}


	void Init();
};


// Class HawkenGame.HawkenPawnPluginMelee
// 0x00AC (0x00F0 - 0x0044)
class UHawkenPawnPluginMelee : public UHawkenPawnPlugin
{
public:
	float                                              AdhesionRotationSpeed;                                    // 0x0044(0x0004) (Config)
	float                                              AdhesionSpread;                                           // 0x0048(0x0004) (Config)
	unsigned long                                      bAllowFriendlyFire : 1;                                   // 0x004C(0x0004)
	unsigned long                                      bDebugLines : 1;                                          // 0x004C(0x0004)
	unsigned long                                      bForceMeleeDamage : 1;                                    // 0x004C(0x0004) (Transient)
	unsigned long                                      bForceDamageType : 1;                                     // 0x004C(0x0004) (Transient)
	unsigned long                                      bForceSingleHitTarget : 1;                                // 0x004C(0x0004) (Transient)
	unsigned long                                      bContinuousAttack : 1;                                    // 0x004C(0x0004) (Transient)
	unsigned long                                      bIsTargetInFront : 1;                                     // 0x004C(0x0004) (Transient)
	unsigned long                                      bUseMeleeAdhesion : 1;                                    // 0x004C(0x0004) (Transient)
	unsigned long                                      bAdhesionUsed : 1;                                        // 0x004C(0x0004) (Transient)
	unsigned long                                      bAttractorFound : 1;                                      // 0x004C(0x0004) (Transient)
	unsigned long                                      bAttractorTooCloseForBT : 1;                              // 0x004C(0x0004) (Transient)
	unsigned long                                      bSlideShouldUseThrowHelper : 1;                           // 0x004C(0x0004) (Config)
	float                                              CheckFOVSpread;                                           // 0x0050(0x0004)
	float                                              CheckFOVSpreadPawn;                                       // 0x0054(0x0004)
	int                                                ForceMeleeDamage;                                         // 0x0058(0x0004) (Transient)
	class UClass*                                      ForceDamageType;                                          // 0x005C(0x0004) (Transient)
	class AActor*                                      SingleHitTarget;                                          // 0x0060(0x0004) (Transient)
	struct FVector                                     SingleHitLocation;                                        // 0x0064(0x000C) (Transient)
	struct FVector                                     SingleHitDirection;                                       // 0x0070(0x000C) (Transient)
	float                                              SingleHitRange;                                           // 0x007C(0x0004) (Transient)
	TArray<class AActor*>                              AttackedActors;                                           // 0x0080(0x000C) (Transient, NeedCtorLink)
	TArray<struct FName>                               WeaponPartNames;                                          // 0x008C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FVector>                             PrevWeaponPartLocations;                                  // 0x0098(0x000C) (Transient, NeedCtorLink)
	TArray<struct FName>                               BodyPartNames;                                            // 0x00A4(0x000C) (Transient, NeedCtorLink)
	TArray<struct FVector>                             PrevBodyPartLocations;                                    // 0x00B0(0x000C) (Transient, NeedCtorLink)
	struct FTraceHitInfo                               MeleeHitInfo;                                             // 0x00BC(0x001C) (Transient, Component)
	float                                              LastMeleeAttemptTime;                                     // 0x00D8(0x0004) (Transient)
	float                                              LastMeleeHitTime;                                         // 0x00DC(0x0004) (Transient)
	float                                              MinBTAttractionDistance;                                  // 0x00E0(0x0004) (Config)
	struct FScriptDelegate                             __GiveMeleeDamageTo__Delegate;                            // 0x00E4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginMelee");
		return ptr;
	}


	void ExecuteSingleAttack(class AActor* MeleeTarget, int MeleeDamage, const struct FVector& AttackDir, class UClass* DamageType);
	void ReleaseAttack();
	void PrepareContinuousAttack(TArray<struct FName> WeaponParts, TArray<struct FName> BodyParts, const struct FScriptDelegate& OnDamage, bool bInForceMeleeDamage, int InForceMeleeDamage, bool bInForceDamageType, class UClass* InForceDamageType);
	void PrepareSingleAttack(float AttackRange, class AActor* ForceMeleeTarget, bool bInUseMeleeAdhesion, const struct FScriptDelegate& OnDamage, bool bInForceMeleeDamage, int InForceMeleeDamage, bool bInForceDamageType, class UClass* InForceDamageType);
	void UpdateSingleHitLocation();
	void SingleHitDirectionSet();
	void OnStopContinuous();
	void OnStartContinuous();
	void OnSingleHit();
	bool AttemptMeleeAdhesion(class AActor* Victim, bool bInterpActorsOnly, struct FVector* Direction);
	bool FindTargetInFront();
	void FindTarget();
	bool CanBeAttacked(class AActor* TestActor, const struct FVector& AttackDirection);
	class AActor* TraceIgnoringVolumesAndTriggers(class APawn* TraceOwner, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, class AActor* PreciseCollisionFor, struct FVector* HitLocation, struct FTraceHitInfo* HitInfo);
	void FireMeleeEffectEvent(class AActor* HitActor);
	void SpawnImpactEffects(class UClass* DamageType, class AActor* TargetActor);
	class UPhysicalMaterial* GetPhysMatFrom(class URB_BodyInstance* RBI);
	void DoMeleeAttack(class AActor* TargetActor, int AttackDamage, const struct FVector& AttackDirection, class UClass* AttackDamageType, const struct FVector& HitLocation);
	void MeleeDamageTo(class AActor* TargetActor, const struct FVector& HitLocation, const struct FVector& HitDirection);
	bool GiveMeleeDamageTo(class AActor* Victim, const struct FVector& HitLocation, struct FVector* HitDirection, int* AttackDamage, class UClass** AttackDamageType);
};


// Class HawkenGame.HawkenPawnPluginWeapon
// 0x000C (0x0050 - 0x0044)
class UHawkenPawnPluginWeapon : public UHawkenPawnPlugin
{
public:
	class AR_Weap_Base*                                WeaponControlling;                                        // 0x0044(0x0004) (Transient)
	int                                                IndexOfWeapon;                                            // 0x0048(0x0004) (Transient)
	unsigned long                                      bUseShootingAnimations : 1;                               // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon");
		return ptr;
	}


	void SetupProjectile(class AProjectile* SpawnedProjectile);
	void DrawFiringDebug(class UCanvas* DrawCanvas);
	bool GetAimDir(struct FVector* StartLoc, struct FRotator* RawAimDir, struct FRotator* OutAimDir);
	void HandlePostLaunchCleanUp();
	bool CanFireWeapon(TEnumAsByte<EWeaponFireMode> FireMode);
	void HandleWeaponFiring();
};


// Class HawkenGame.HawkenPawnPluginWeapon_AI
// 0x0040 (0x0090 - 0x0050)
class UHawkenPawnPluginWeapon_AI : public UHawkenPawnPluginWeapon
{
public:
	unsigned long                                      bShouldRefireDuringMovement : 1;                          // 0x0050(0x0004)
	unsigned long                                      bUseReFireDelay : 1;                                      // 0x0050(0x0004)
	unsigned long                                      bCustomLOSCheck : 1;                                      // 0x0050(0x0004)
	unsigned long                                      bAllowGunAdjustor : 1;                                    // 0x0050(0x0004)
	unsigned long                                      bCheckOwnersPhysics : 1;                                  // 0x0050(0x0004)
	unsigned long                                      bShouldOpenFire : 1;                                      // 0x0050(0x0004) (Transient)
	unsigned long                                      bCanFire : 1;                                             // 0x0050(0x0004) (Transient)
	unsigned long                                      bInCooldown : 1;                                          // 0x0050(0x0004) (Transient)
	unsigned long                                      bWasBeingReloaded : 1;                                    // 0x0050(0x0004) (Transient)
	unsigned long                                      bIsFiring : 1;                                            // 0x0050(0x0004) (Transient)
	class AActor*                                      LockOnTarget;                                             // 0x0054(0x0004) (Transient)
	float                                              AimDotError;                                              // 0x0058(0x0004) (Transient)
	int                                                NumRequestedOSA;                                          // 0x005C(0x0004) (Transient)
	float                                              CooldownTime;                                             // 0x0060(0x0004) (Transient)
	float                                              CooldownDelay;                                            // 0x0064(0x0004)
	float                                              ValidFireDot;                                             // 0x0068(0x0004)
	class UObject*                                     Observer;                                                 // 0x006C(0x0004) (Transient)
	struct FString                                     LastFailedTest;                                           // 0x0070(0x000C) (Transient, AlwaysInit, NeedCtorLink)
	float                                              ReFireDelayMin;                                           // 0x007C(0x0004) (Config)
	float                                              ReFireDelayMax;                                           // 0x0080(0x0004) (Config)
	float                                              ReFireTime;                                               // 0x0084(0x0004) (Transient)
	float                                              RefireReleaseTime;                                        // 0x0088(0x0004) (Transient)
	float                                              ReTriggerTime;                                            // 0x008C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon_AI");
		return ptr;
	}


	void DrawFiringDebug(class UCanvas* DrawCanvas);
	void Init();
	bool CanFireWeaponEx(TEnumAsByte<EWeaponFireMode> FireMode, bool bSkipAngleCheck);
};


// Class HawkenGame.HawkenPawnPluginWeapon_GunAI
// 0x0004 (0x0094 - 0x0090)
class UHawkenPawnPluginWeapon_GunAI : public UHawkenPawnPluginWeapon_AI
{
public:
	unsigned long                                      bWasShooting : 1;                                         // 0x0090(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon_GunAI");
		return ptr;
	}

};


// Class HawkenGame.HawkenPawnPluginWeapon_HomingAI
// 0x0000 (0x0094 - 0x0094)
class UHawkenPawnPluginWeapon_HomingAI : public UHawkenPawnPluginWeapon_GunAI
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon_HomingAI");
		return ptr;
	}


	void InitHomingWeapon();
	void Init();
};


// Class HawkenGame.HawkenPawnPluginWeapon_Sniper
// 0x0000 (0x0094 - 0x0094)
class UHawkenPawnPluginWeapon_Sniper : public UHawkenPawnPluginWeapon_GunAI
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon_Sniper");
		return ptr;
	}


	bool CanFireWeapon(TEnumAsByte<EWeaponFireMode> FireMode);
};


// Class HawkenGame.HawkenPawnPluginWeapon_MachinegunAI
// 0x0008 (0x0098 - 0x0090)
class UHawkenPawnPluginWeapon_MachinegunAI : public UHawkenPawnPluginWeapon_AI
{
public:
	float                                              MaxBurstDuration;                                         // 0x0090(0x0004) (Config)
	float                                              BurstEndTime;                                             // 0x0094(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon_MachinegunAI");
		return ptr;
	}

};


// Class HawkenGame.HawkenPawnPluginWeapon_ProjectileAI
// 0x0010 (0x00A0 - 0x0090)
class UHawkenPawnPluginWeapon_ProjectileAI : public UHawkenPawnPluginWeapon_AI
{
public:
	TArray<struct FPluginProjectileInfo>               CachedProjectileInfos;                                    // 0x0090(0x000C) (Transient, NeedCtorLink)
	float                                              ProjectileSpeedScale;                                     // 0x009C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon_ProjectileAI");
		return ptr;
	}


	void DrawFiringDebug(class UCanvas* DrawCanvas);
	void SetupProjectile(class AProjectile* SpawnedProjectile);
	struct FPluginProjectileInfo GetProjectileInfo(int Mode);
};


// Class HawkenGame.HawkenPawnPluginWeapon_MissileAI
// 0x0024 (0x00C4 - 0x00A0)
class UHawkenPawnPluginWeapon_MissileAI : public UHawkenPawnPluginWeapon_ProjectileAI
{
public:
	class AR_Weap_MissileLauncher*                     ControllingMissleLauncher;                                // 0x00A0(0x0004) (Transient)
	float                                              ExplodeDistance;                                          // 0x00A4(0x0004) (Config)
	struct FVector2D                                   ExplodeDistanceDelay;                                     // 0x00A8(0x0008) (Config)
	float                                              ExplodeDot;                                               // 0x00B0(0x0004) (Config)
	struct FVector2D                                   ExplodeDotDelay;                                          // 0x00B4(0x0008) (Config)
	float                                              MinRangeToEnemy;                                          // 0x00BC(0x0004) (Config)
	float                                              MinRangeToEnemySq;                                        // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon_MissileAI");
		return ptr;
	}


	void HandlePostLaunchCleanUp();
	void NotifyCurrentProjectileShutdown();
	void ExplodeProjectile();
	void Init();
};


// Class HawkenGame.HawkenPawnPluginWeapon_MultiMissileAI
// 0x0000 (0x00C4 - 0x00C4)
class UHawkenPawnPluginWeapon_MultiMissileAI : public UHawkenPawnPluginWeapon_MissileAI
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon_MultiMissileAI");
		return ptr;
	}

};


// Class HawkenGame.HawkenPawnPluginWeapon_MultiModeProjectileAI
// 0x0008 (0x00A8 - 0x00A0)
class UHawkenPawnPluginWeapon_MultiModeProjectileAI : public UHawkenPawnPluginWeapon_ProjectileAI
{
public:
	int                                                DesiredMode;                                              // 0x00A0(0x0004) (Transient)
	float                                              ModeSwitchTime;                                           // 0x00A4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon_MultiModeProjectileAI");
		return ptr;
	}


	void DrawFiringDebug(class UCanvas* DrawCanvas);
	void DoModeSwitch(int Mode);
};


// Class HawkenGame.HawkenPawnPluginWeapon_ProjectileOwnerSightAI
// 0x0000 (0x00A0 - 0x00A0)
class UHawkenPawnPluginWeapon_ProjectileOwnerSightAI : public UHawkenPawnPluginWeapon_ProjectileAI
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon_ProjectileOwnerSightAI");
		return ptr;
	}

};


// Class HawkenGame.HawkenPawnPluginWeapon_ProximityProjectileAI
// 0x002C (0x00CC - 0x00A0)
class UHawkenPawnPluginWeapon_ProximityProjectileAI : public UHawkenPawnPluginWeapon_ProjectileAI
{
public:
	class AR_Projectile*                               LastShot;                                                 // 0x00A0(0x0004) (Transient)
	unsigned long                                      bCheckDetonation : 1;                                     // 0x00A4(0x0004) (Transient)
	float                                              DetonationProximity;                                      // 0x00A8(0x0004) (Transient)
	float                                              DetonationDelay;                                          // 0x00AC(0x0004) (Transient)
	float                                              DetonationTime;                                           // 0x00B0(0x0004) (Transient)
	struct FString                                     LastDetonationResult;                                     // 0x00B4(0x000C) (Transient, NeedCtorLink)
	struct FString                                     CurrentDetonationResult;                                  // 0x00C0(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon_ProximityProjectileAI");
		return ptr;
	}


	void DrawFiringDebug(class UCanvas* DrawCanvas);
	void Detonate();
	void SetupProjectile(class AProjectile* SpawnedProjectile);
};


// Class HawkenGame.HawkenPawnPluginWeapon_StaticAI
// 0x0000 (0x00A0 - 0x00A0)
class UHawkenPawnPluginWeapon_StaticAI : public UHawkenPawnPluginWeapon_ProjectileAI
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon_StaticAI");
		return ptr;
	}

};


// Class HawkenGame.HawkenPawnPluginWeapon_Gun
// 0x0004 (0x0054 - 0x0050)
class UHawkenPawnPluginWeapon_Gun : public UHawkenPawnPluginWeapon
{
public:
	unsigned long                                      bHasFired : 1;                                            // 0x0050(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon_Gun");
		return ptr;
	}


	void HandleWeaponFiring();
};


// Class HawkenGame.HawkenAnimBlendByMoveState
// 0x000C (0x0134 - 0x0128)
class UHawkenAnimBlendByMoveState : public UUDKAnimBlendBase
{
public:
	TArray<TEnumAsByte<ERobotMoveState>>               MoveStates;                                               // 0x0128(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAnimBlendByMoveState");
		return ptr;
	}

};


// Class HawkenGame.HawkenCameraBase
// 0x0004 (0x0048 - 0x0044)
class UHawkenCameraBase : public UGameCameraBase
{
public:
	struct FColor                                      HUDDebugColor;                                            // 0x0044(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraBase");
		return ptr;
	}


	void DisplayDebug(class AHUD* H, float* YL, float* YPos);
	bool IsUserZoomAllowed();
	bool IsUserOffsetAllowed();
	bool IsUserViewDistanceAllowed();
	void UpdatePlayerFOV(float PCOwnerFOV);
	void PostUpdateCamera(float DeltaTime, struct FTViewTarget* NewVT);
	void UpdateViewTargetMeshVisibility(class APawn* ViewTargetPawn);
	void NotifyViewTargetChanged(class AActor* OldViewTarget, class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams);
	void OnBecomeInActive(class APawn* ViewTargetPawn, class UGameCameraBase* NewCamera);
	void OnBecomeActive(class APawn* ViewTargetPawn, class UGameCameraBase* OldCamera);
	bool ShouldUseThirdPersonVisorMode();
	bool IsUsingBehindView();
	bool IsFreeCamView();
	bool CanShowFirstPersonMesh(class AR_Pawn* RP);
	bool IsThirdPersonView();
	bool IsFirstPersonView();
	class AR_Pawn* GetHawkenPawn(class APawn* inPawn);
	class AR_PlayerController_Base* GetHawkenPC();
	class AHawkenPlayerCamera* GetHawkenCam();
};


// Class HawkenGame.HawkenPawnCameraManager
// 0x0200 (0x0248 - 0x0048)
class UHawkenPawnCameraManager : public UHawkenCameraBase
{
public:
	float                                              WorstLocBlockedPct;                                       // 0x0048(0x0004)
	float                                              WorstLocPenetrationExtentScale;                           // 0x004C(0x0004) (Edit)
	float                                              PenetrationBlendOutTime;                                  // 0x0050(0x0004) (Edit)
	float                                              PenetrationBlendInTime;                                   // 0x0054(0x0004) (Edit)
	float                                              PenetrationBlockedPct;                                    // 0x0058(0x0004)
	float                                              PenetrationExtentScale;                                   // 0x005C(0x0004) (Edit)
	struct FVector                                     LastActualOriginOffset;                                   // 0x0060(0x000C) (Transient)
	struct FVector                                     LastActualCameraOrigin;                                   // 0x006C(0x000C) (Transient)
	struct FRotator                                    LastActualCameraOriginRot;                                // 0x0078(0x000C) (Transient)
	float                                              OriginOffsetInterpSpeed;                                  // 0x0084(0x0004) (Edit)
	struct FVector                                     LastViewOffset;                                           // 0x0088(0x000C) (Transient)
	float                                              LastCamFOV;                                               // 0x0094(0x0004) (Transient)
	struct FVector                                     LastIdealCameraOrigin;                                    // 0x0098(0x000C) (Transient)
	struct FRotator                                    LastIdealCameraOriginRot;                                 // 0x00A4(0x000C) (Transient)
	float                                              LastHeightAdjustment;                                     // 0x00B0(0x0004) (Transient)
	float                                              LastPitchAdjustment;                                      // 0x00B4(0x0004) (Transient)
	float                                              LastYawAdjustment;                                        // 0x00B8(0x0004) (Transient)
	float                                              LeftoverPitchAdjustment;                                  // 0x00BC(0x0004) (Transient)
	float                                              Focus_BackOffStrength;                                    // 0x00C0(0x0004) (Edit)
	float                                              Focus_StepHeightAdjustment;                               // 0x00C4(0x0004) (Edit)
	int                                                Focus_MaxTries;                                           // 0x00C8(0x0004) (Edit)
	float                                              Focus_FastAdjustKickInTime;                               // 0x00CC(0x0004) (Edit)
	float                                              LastFocusChangeTime;                                      // 0x00D0(0x0004) (Transient)
	struct FVector                                     ActualFocusPointWorldLoc;                                 // 0x00D4(0x000C) (Transient)
	struct FVector                                     LastFocusPointLoc;                                        // 0x00E0(0x000C) (Transient)
	struct FCamFocusPointParams                        FocusPoint;                                               // 0x00EC(0x0034) (Edit)
	unsigned long                                      bFocusPointSet : 1;                                       // 0x0120(0x0004)
	unsigned long                                      bFocusPointSuccessful : 1;                                // 0x0120(0x0004) (Transient)
	unsigned long                                      bDoingACameraTurn : 1;                                    // 0x0120(0x0004)
	unsigned long                                      bTurnAlignTargetWhenFinished : 1;                         // 0x0120(0x0004)
	unsigned long                                      bDrawDebug : 1;                                           // 0x0120(0x0004) (Edit)
	unsigned long                                      bDoingDirectLook : 1;                                     // 0x0120(0x0004) (Transient)
	unsigned long                                      bDebugChangedCameraMode : 1;                              // 0x0120(0x0004) (Edit)
	unsigned long                                      bDoSeamlessPivotTransition : 1;                           // 0x0120(0x0004) (Transient)
	float                                              TurnCurTime;                                              // 0x0124(0x0004)
	int                                                TurnStartAngle;                                           // 0x0128(0x0004)
	int                                                TurnEndAngle;                                             // 0x012C(0x0004)
	float                                              TurnTotalTime;                                            // 0x0130(0x0004)
	float                                              TurnDelay;                                                // 0x0134(0x0004)
	int                                                LastPostCamTurnYaw;                                       // 0x0138(0x0004) (Transient)
	int                                                DirectLookYaw;                                            // 0x013C(0x0004) (Transient)
	float                                              DirectLookInterpSpeed;                                    // 0x0140(0x0004) (Edit)
	float                                              WorstLocInterpSpeed;                                      // 0x0144(0x0004) (Edit)
	struct FVector                                     LastWorstLocationLocal;                                   // 0x0148(0x000C) (Transient)
	struct FVector                                     LastWorstLocation;                                        // 0x0154(0x000C) (Transient)
	struct FVector                                     LastPreModifierCameraLoc;                                 // 0x0160(0x000C) (Transient)
	struct FRotator                                    LastPreModifierCameraRot;                                 // 0x016C(0x000C) (Transient)
	struct FVector                                     HideViewTargetExtent;                                     // 0x0178(0x000C) (Edit, Const)
	struct FVector                                     HideViewTargetExtent_FlickerBuffer;                       // 0x0184(0x000C) (Edit, Const)
	TArray<struct FPenetrationAvoidanceFeeler>         PenetrationAvoidanceFeelers;                              // 0x0190(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     LastOffsetAdjustment;                                     // 0x019C(0x000C) (Transient)
	class UClass*                                      CockpitCameraModeClass;                                   // 0x01A8(0x0004)
	class UClass*                                      RiftCockpitCameraModeClass;                               // 0x01AC(0x0004)
	class UClass*                                      ChaseCameraModeClass;                                     // 0x01B0(0x0004)
	class UClass*                                      CoOpChaseCameraModeClass;                                 // 0x01B4(0x0004)
	class UClass*                                      DemoSpecCameraModeClass;                                  // 0x01B8(0x0004)
	class UClass*                                      KillerCameraModeClass;                                    // 0x01BC(0x0004)
	class UClass*                                      RiftKillerCameraModeClass;                                // 0x01C0(0x0004)
	class UClass*                                      HealCameraModeClass;                                      // 0x01C4(0x0004)
	class UClass*                                      RiftHealCameraModeClass;                                  // 0x01C8(0x0004)
	class UClass*                                      TauntCameraModeClass;                                     // 0x01CC(0x0004)
	class UClass*                                      TauntSpecCameraModeClass;                                 // 0x01D0(0x0004)
	class UClass*                                      BaseLifterCameraModeClass;                                // 0x01D4(0x0004)
	class UClass*                                      HeavyTurretCameraModeClass;                               // 0x01D8(0x0004)
	class UClass*                                      HeavyTransformCameraModeClass;                            // 0x01DC(0x0004)
	class UClass*                                      DeathCameraModeClass;                                     // 0x01E0(0x0004)
	class UClass*                                      RiftDeathCameraModeClass;                                 // 0x01E4(0x0004)
	class UClass*                                      HangarCameraModeClass;                                    // 0x01E8(0x0004)
	class UClass*                                      RagdollCameraModeClass;                                   // 0x01EC(0x0004)
	class UClass*                                      WinnerCameraModeClass;                                    // 0x01F0(0x0004)
	class UHawkenPawnCameraMode*                       CockpitCameraMode;                                        // 0x01F4(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       RiftCockpitCameraMode;                                    // 0x01F8(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       ChaseCameraMode;                                          // 0x01FC(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       CoOpChaseCameraMode;                                      // 0x0200(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       DemoSpecCameraMode;                                       // 0x0204(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       KillerCameraMode;                                         // 0x0208(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       RiftKillerCameraMode;                                     // 0x020C(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       HealCameraMode;                                           // 0x0210(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       RiftHealCameraMode;                                       // 0x0214(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       TauntCameraMode;                                          // 0x0218(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       TauntSpecCameraMode;                                      // 0x021C(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       BaseLifterCameraMode;                                     // 0x0220(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       HeavyTurretCameraMode;                                    // 0x0224(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       HeavyTransformCameraMode;                                 // 0x0228(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       DeathCameraMode;                                          // 0x022C(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       RiftDeathCameraMode;                                      // 0x0230(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       HangarCameraMode;                                         // 0x0234(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       RagdollCameraMode;                                        // 0x0238(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       WinnerCameraMode;                                         // 0x023C(0x0004) (Edit, EditInline)
	class UHawkenPawnCameraMode*                       CurrentCamMode;                                           // 0x0240(0x0004) (Edit, Transient, EditInline)
	class UHawkenPawnCameraMode*                       PreviousCamMode;                                          // 0x0244(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnCameraManager");
		return ptr;
	}


	void DisplayDebug(class AHUD* H, float* YL, float* YPos);
	void UpdatePlayerFOV(float PCOwnerFOV);
	bool IsUserZoomAllowed();
	bool IsUserOffsetAllowed();
	bool IsUserViewDistanceAllowed();
	bool ShouldUseThirdPersonVisorMode();
	bool IsFreeCamView();
	bool CanShowFirstPersonMesh(class AR_Pawn* RP);
	bool IsThirdPersonView();
	bool IsFirstPersonView();
	void ModifyPostProcessSettings(struct FPostProcessSettings* PP);
	void OnBecomeInActive(class APawn* ViewTargetPawn, class UGameCameraBase* NewCamera);
	void OnBecomeActive(class APawn* P, class UGameCameraBase* OldCamera);
	void NotifyViewTargetChanged(class AActor* OldViewTarget, class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams);
	void ProcessViewRotation(float DeltaTime, class AActor* ViewTarget, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	void UpdateCameraMode(class APawn* P);
	void OverrideCameraModeForRift(class UHawkenPawnCameraMode** ReplacementCameraMode);
	class UHawkenPawnCameraMode* FindBestCameraMode(class APawn* P);
	bool IsMatchOverState(TEnumAsByte<EPostMatchState_e> CheckState);
	class UHawkenPawnCameraMode* GetDefaultCameraMode(class AR_Pawn* RP);
	class UHawkenPawnCameraMode* GetDefaultCameraModeCheckShutdown(class AR_Pawn* RP);
	bool IsOverridingCameraMode(class APawn* P, class UHawkenPawnCameraMode** OverrideCamMode);
	void AdjustFocusPointInterpolation(const struct FRotator& Delta);
	struct FVector GetActualFocusLocation();
	void UpdateFocusPoint(class APawn* P);
	void ClearFocusPoint(bool bLeaveCameraRotation);
	class AActor* GetFocusActor();
	void SetFocusOnActor(class AActor* FocusActor, const struct FName& FocusBoneName, const struct FVector2D& InterpSpeedRange, const struct FVector2D& InFocusFOV, float CameraFOV, bool bAlwaysFocus, bool bAdjustCamera, bool bIgnoreTrace, float FocusPitchOffsetDeg);
	void SetFocusOnLoc(const struct FVector& FocusWorldLoc, const struct FVector2D& InterpSpeedRange, const struct FVector2D& InFocusFOV, float CameraFOV, bool bAlwaysFocus, bool bAdjustCamera, bool bIgnoreTrace, float FocusPitchOffsetDeg);
	void AdjustTurn(int AngleOffset);
	void EndTurn();
	void BeginTurn(int StartAngle, int EndAngle, float TimeSec, float DelaySec, bool bAlignTargetWhenFinished);
	void PostUpdateCamera(float DeltaTime, struct FTViewTarget* NewVT);
	void ApplyCameraModifiers(float DeltaTime, struct FTPOV* OutPOV);
	void PlayerUpdateCamera(class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT);
	void UpdateCamera(class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT);
	float GetDesiredFOV(class APawn* ViewedPawn);
	void ResetInterpolation();
	void Reset();
	void Init();
	class UHawkenPawnCameraMode* CreateCameraMode(class UClass* ModeClass);
	struct FRotator GetOriginRotThatPointsCameraAtPoint(const struct FVector& Pivot, const struct FRotator& PivotRot, const struct FVector& CameraPos, const struct FRotator& CameraRot, const struct FVector& LookatWorld);
};


// Class HawkenGame.HawkenPawnCameraMode
// 0x0224 (0x0260 - 0x003C)
class UHawkenPawnCameraMode : public UObject
{
public:
	class UHawkenPawnCameraManager*                    OwnerCam;                                                 // 0x003C(0x0004) (Transient)
	float                                              FOVAngle;                                                 // 0x0040(0x0004) (Edit, Const)
	float                                              BlendTime;                                                // 0x0044(0x0004) (Edit)
	unsigned long                                      bLockedToViewTarget : 1;                                  // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bUseControllerRotation : 1;                               // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bDirectLook : 1;                                          // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bFollowTarget : 1;                                        // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bInterpLocation : 1;                                      // 0x0048(0x0004) (Edit)
	unsigned long                                      bUsePerAxisOriginLocInterp : 1;                           // 0x0048(0x0004) (Edit)
	unsigned long                                      bInterpRotation : 1;                                      // 0x0048(0x0004) (Edit)
	unsigned long                                      bRotInterpSpeedConstant : 1;                              // 0x0048(0x0004) (Edit)
	unsigned long                                      bDoPredictiveAvoidance : 1;                               // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bValidateWorstLoc : 1;                                    // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bWorstLocIgnoreTargetPawn : 1;                            // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bHideOverlappingPawn : 1;                                 // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bSkipCameraCollision : 1;                                 // 0x0048(0x0004) (Edit)
	unsigned long                                      bSmoothViewOffsetPitchChanges : 1;                        // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bApplyDeltaViewOffset : 1;                                // 0x0048(0x0004) (Edit)
	unsigned long                                      bAdjustDOF : 1;                                           // 0x0048(0x0004) (Edit, Const)
	unsigned long                                      bDOFUpdated : 1;                                          // 0x0048(0x0004) (Transient)
	unsigned long                                      bNoFOVPostProcess : 1;                                    // 0x0048(0x0004)
	unsigned long                                      bInterpViewOffsetOnlyForCamTransition : 1;                // 0x0048(0x0004) (Edit)
	unsigned long                                      bTemporaryPivotInterp : 1;                                // 0x0048(0x0004) (Transient)
	float                                              FollowingInterpSpeed_Pitch;                               // 0x004C(0x0004) (Edit, Const)
	float                                              FollowingInterpSpeed_Yaw;                                 // 0x0050(0x0004) (Edit, Const)
	float                                              FollowingInterpSpeed_Roll;                                // 0x0054(0x0004) (Edit, Const)
	float                                              FollowingCameraVelThreshold;                              // 0x0058(0x0004) (Edit, Const)
	float                                              OriginLocInterpSpeed;                                     // 0x005C(0x0004) (Edit)
	struct FVector                                     PerAxisOriginLocInterpSpeed;                              // 0x0060(0x000C) (Edit)
	float                                              OriginRotInterpSpeed;                                     // 0x006C(0x0004) (Edit)
	struct FVector                                     StrafeLeftAdjustment;                                     // 0x0070(0x000C) (Edit, Const)
	struct FVector                                     StrafeRightAdjustment;                                    // 0x007C(0x000C) (Edit, Const)
	float                                              StrafeOffsetScalingThreshold;                             // 0x0088(0x0004) (Edit, Const)
	float                                              StrafeOffsetInterpSpeedIn;                                // 0x008C(0x0004) (Edit, Const)
	float                                              StrafeOffsetInterpSpeedOut;                               // 0x0090(0x0004) (Edit, Const)
	struct FVector                                     LastStrafeOffset;                                         // 0x0094(0x000C) (Transient)
	struct FVector                                     RunFwdAdjustment;                                         // 0x00A0(0x000C) (Edit, Const)
	struct FVector                                     RunBackAdjustment;                                        // 0x00AC(0x000C) (Edit, Const)
	float                                              RunOffsetScalingThreshold;                                // 0x00B8(0x0004) (Edit, Const)
	float                                              RunOffsetInterpSpeedIn;                                   // 0x00BC(0x0004) (Edit, Const)
	float                                              RunOffsetInterpSpeedOut;                                  // 0x00C0(0x0004) (Edit, Const)
	struct FVector                                     LastRunOffset;                                            // 0x00C4(0x000C) (Transient)
	struct FVector                                     WorstLocOffset;                                           // 0x00D0(0x000C) (Edit)
	struct FVector                                     TargetRelativeCameraOriginOffset;                         // 0x00DC(0x000C) (Edit, Const)
	struct FViewOffsetData                             ViewOffset;                                               // 0x00E8(0x0024) (Edit, Const)
	struct FViewOffsetData                             ViewOffset_ViewportAdjustments[0x6];                      // 0x010C(0x0024) (Edit, Const)
	float                                              DOF_FalloffExponent;                                      // 0x01E4(0x0004) (Edit, Const)
	float                                              DOF_BlurKernelSize;                                       // 0x01E8(0x0004) (Edit, Const)
	float                                              DOF_FocusInnerRadius;                                     // 0x01EC(0x0004) (Edit, Const)
	float                                              DOF_MaxNearBlurAmount;                                    // 0x01F0(0x0004) (Edit, Const)
	float                                              DOF_MaxFarBlurAmount;                                     // 0x01F4(0x0004) (Edit, Const)
	float                                              LastDOFRadius;                                            // 0x01F8(0x0004) (Transient)
	float                                              LastDOFDistance;                                          // 0x01FC(0x0004) (Transient)
	float                                              DOFDistanceInterpSpeed;                                   // 0x0200(0x0004) (Edit, Const)
	struct FVector                                     DOFTraceExtent;                                           // 0x0204(0x000C) (Edit, Const)
	float                                              DOF_RadiusFalloff;                                        // 0x0210(0x0004) (Edit, Const)
	struct FVector2D                                   DOF_RadiusRange;                                          // 0x0214(0x0008) (Edit, Const)
	struct FVector2D                                   DOF_RadiusDistRange;                                      // 0x021C(0x0008) (Edit, Const)
	float                                              ViewOffsetInterp;                                         // 0x0224(0x0004)
	float                                              OffsetAdjustmentInterpSpeed;                              // 0x0228(0x0004) (Edit)
	TEnumAsByte<ECameraViewportTypes>                  CurrentViewportType;                                      // 0x022C(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x022D(0x0003) MISSED OFFSET
	float                                              TemporaryPivotInterpSpeed;                                // 0x0230(0x0004) (Edit, Const)
	float                                              LastTemporaryPivotInterpAlpha;                            // 0x0234(0x0004) (Transient)
	struct FRotator                                    TemporaryPivotInterpStartingRotation;                     // 0x0238(0x000C) (Transient)
	struct FRotator                                    OriginRotationModifier;                                   // 0x0244(0x000C) (Edit)
	struct FVector                                     HideViewTargetExtentOverride;                             // 0x0250(0x000C) (Edit, Const)
	float                                              SpectatorCameraRotInterpSpeed;                            // 0x025C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnCameraMode");
		return ptr;
	}


	void DisplayDebug(class AHUD* H, float* YL, float* YPos);
	void DisplayDebugWrapper(class AHUD* H, float* YL, float* YPos);
	struct FName GetFocusBoneName(class APawn* TargetPawn, struct FVector* out_BoneLocation);
	void StartTransitionPivotInterp();
	bool IsShuttingDown(class APawn* P);
	bool IsUserZoomAllowed();
	bool IsUserOffsetAllowed();
	bool IsUserViewDistanceAllowed();
	bool ShouldUseThirdPersonVisorMode();
	bool IsFreeCamView();
	bool IsThirdPersonView();
	bool IsFirstPersonView();
	bool CanShowFirstPersonMesh(class AR_Pawn* RP);
	void ModifyPostProcessSettings(struct FPostProcessSettings* PP);
	void UpdatePostProcess(float DeltaTime, struct FTViewTarget* VT);
	struct FVector DOFTrace(class AActor* TraceOwner, const struct FVector& StartTrace, const struct FVector& EndTrace);
	struct FVector GetDOFFocusLoc(class AActor* TraceOwner, const struct FVector& StartTrace, const struct FVector& EndTrace);
	void ProcessViewRotation(float DeltaTime, class AActor* ViewTarget, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	void NotifyViewTargetChanged(class AActor* OldViewTarget, class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams);
	bool SetFocusPoint(class APawn* ViewedPawn);
	struct FVector GetCameraWorstCaseLoc(class APawn* TargetPawn, const struct FTViewTarget& CurrentViewTarget);
	struct FVector AdjustViewOffset(class APawn* P, float DeltaTime, const struct FVector& offset);
	float GetFOVBlendTime(class APawn* ViewedPawn);
	float GetDesiredFOV(class APawn* ViewedPawn);
	void UpdatePlayerFOV(float PCOwnerFOV);
	void PostUpdateCamera(float DeltaTime, struct FTViewTarget* NewVT);
	bool OverrideUpdateCamera(class APawn* P, class AHawkenPlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT);
	class AR_Pawn* GetHawkenPawn(class APawn* P);
	class AR_PlayerController* GetHawkenPC();
	void OnBecomeInActive(class APawn* TargetPawn, class UHawkenPawnCameraMode* NewMode);
	void OnBecomeActive(class APawn* TargetPawn, class UHawkenPawnCameraMode* PrevMode);
	void InitCameraMode(class UHawkenPawnCameraManager* InOwnerCam);
	void SetViewOffset(struct FViewOffsetData* NewViewOffset);
};


// Class HawkenGame.HawkenCameraMode_Death
// 0x0008 (0x0268 - 0x0260)
class UHawkenCameraMode_Death : public UHawkenPawnCameraMode
{
public:
	float                                              FocusPointInterpSpeedDecaySpeed;                          // 0x0260(0x0004) (Edit, Const)
	float                                              FocusPointInterpSpeed;                                    // 0x0264(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_Death");
		return ptr;
	}


	void DisplayDebug(class AHUD* H, float* YL, float* YPos);
	struct FVector GetCameraWorstCaseLoc(class APawn* TargetPawn, const struct FTViewTarget& CurrentViewTarget);
	bool SetFocusPoint(class APawn* ViewedPawn);
	void OnBecomeInActive(class APawn* TargetPawn, class UHawkenPawnCameraMode* NewMode);
	void OnBecomeActive(class APawn* TargetPawn, class UHawkenPawnCameraMode* PrevMode);
	bool IsFreeCamView();
	bool IsThirdPersonView();
	bool IsFirstPersonView();
};


// Class HawkenGame.HawkenCameraMode_Default
// 0x0004 (0x0264 - 0x0260)
class UHawkenCameraMode_Default : public UHawkenPawnCameraMode
{
public:
	float                                              CurrentPlayerFOV;                                         // 0x0260(0x0004) (Edit, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_Default");
		return ptr;
	}


	float GetDesiredFOV(class APawn* ViewedPawn);
	void UpdatePlayerFOV(float PCOwnerFOV);
	bool IsZoomed();
	void ProcessViewRotation(float DeltaTime, class AActor* ViewTarget, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	void OnBecomeInActive(class APawn* TargetPawn, class UHawkenPawnCameraMode* NewMode);
	void OnBecomeActive(class APawn* TargetPawn, class UHawkenPawnCameraMode* PrevMode);
};


// Class HawkenGame.HawkenCockpitCameraMode
// 0x0010 (0x0274 - 0x0264)
class UHawkenCockpitCameraMode : public UHawkenCameraMode_Default
{
public:
	unsigned long                                      bCachedFirstPerson : 1;                                   // 0x0264(0x0004) (Transient)
	unsigned long                                      bCachedThirdPerson : 1;                                   // 0x0264(0x0004) (Transient)
	unsigned long                                      bSetFocusPointNextTick : 1;                               // 0x0264(0x0004) (Transient)
	float                                              FirstPersonViewOffsetThreshold;                           // 0x0268(0x0004) (Edit)
	float                                              ThirdPersonViewOffsetThreshold;                           // 0x026C(0x0004) (Edit)
	class AActor*                                      LastFocusActor;                                           // 0x0270(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCockpitCameraMode");
		return ptr;
	}


	void PostUpdateCamera(float DeltaTime, struct FTViewTarget* NewVT);
	void UpdatePostProcess(float DeltaTime, struct FTViewTarget* VT);
	bool SetFocusPoint(class APawn* ViewedPawn);
	bool ShouldInterpOriginRot(class UHawkenPawnCameraMode* PrevMode);
	bool OverrideUpdateCamera(class APawn* CurrentVT, class AHawkenPlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT);
	bool IsThirdPersonView();
	bool IsFirstPersonView();
	void OnBecomeActive(class APawn* TargetPawn, class UHawkenPawnCameraMode* PrevMode);
};


// Class HawkenGame.HawkenPlayerCamera
// 0x007C (0x059C - 0x0520)
class AHawkenPlayerCamera : public AGamePlayerCamera
{
public:
	class AR_PlayerController_Base*                    HawkenPC;                                                 // 0x0520(0x0004) (Transient)
	class UClass*                                      DummyCameraClass;                                         // 0x0524(0x0004)
	class UHawkenGameCamera*                           DummyCam;                                                 // 0x0528(0x0004) (Edit, Transient, EditInline)
	class UClass*                                      SpectatorCameraClass;                                     // 0x052C(0x0004)
	class UHawkenSpectatorCamera*                      SpectatorCam;                                             // 0x0530(0x0004) (Edit, Transient, EditInline)
	class UClass*                                      OrbitCameraClass;                                         // 0x0534(0x0004)
	class UHawkenOrbitCamera*                          OrbitCam;                                                 // 0x0538(0x0004) (Edit, Transient, EditInline)
	class UClass*                                      AssetViewerCameraClass;                                   // 0x053C(0x0004)
	class UHawkenAssetViewerCamera*                    AssetViewerCamera;                                        // 0x0540(0x0004) (Edit, Transient, EditInline)
	class UCameraModifier*                             HawkenCamMod_CameraBone;                                  // 0x0544(0x0004) (Edit, EditInline)
	struct FVector                                     User_ViewOffset_Dest;                                     // 0x0548(0x000C) (Transient)
	struct FVector                                     User_ViewOffset_Last;                                     // 0x0554(0x000C) (Transient)
	struct FVector                                     User_ViewOffset_Max;                                      // 0x0560(0x000C) (Edit, Config)
	float                                              User_ViewOffset_InterpSpeed;                              // 0x056C(0x0004) (Edit, Config)
	float                                              User_ViewDistance_Dest;                                   // 0x0570(0x0004) (Transient)
	float                                              User_ViewDistance_Last;                                   // 0x0574(0x0004) (Transient)
	float                                              User_ViewDistance_Min;                                    // 0x0578(0x0004) (Edit, Config)
	float                                              User_ViewDistance_Max;                                    // 0x057C(0x0004) (Edit, Config)
	float                                              User_ViewDistance_InterpSpeed;                            // 0x0580(0x0004) (Edit, Config)
	float                                              User_FOV_Dest;                                            // 0x0584(0x0004) (Transient)
	float                                              User_FOV_Last;                                            // 0x0588(0x0004) (Transient)
	int                                                User_FOV_Min;                                             // 0x058C(0x0004) (Edit, Config)
	int                                                User_FOV_Max;                                             // 0x0590(0x0004) (Edit, Config)
	float                                              User_FOV_InterpSpeed;                                     // 0x0594(0x0004) (Edit, Config)
	struct FColor                                      HUDDebugColor;                                            // 0x0598(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPlayerCamera");
		return ptr;
	}


	void TickUserInterp(float DeltaTime, struct FTViewTarget* OutVT);
	bool IsUserZoomAllowed();
	bool IsUserOffsetAllowed();
	bool IsUserViewDistanceAllowed();
	void CamAdjust_SaveUserValues();
	void CamAdjust_ViewDistanceStop();
	void CamAdjust_ViewDistanceOut();
	void CamAdjust_ViewDistanceIn();
	void CamAdjust_OffsetStop();
	void CamAdjust_OffsetOut();
	void CamAdjust_OffsetIn();
	void CamAdjust_OffsetRight();
	void CamAdjust_OffsetLeft();
	void CamAdjust_OffsetDown();
	void CamAdjust_OffsetUp();
	void CamAdjust_ZoomStop();
	void CamAdjust_ZoomOut();
	void CamAdjust_ZoomIn();
	float ClampToValidUserFOV(float UnclampedFOV);
	struct FString GetDebugName();
	void SetDebugDrawColor(class UCanvas* C, const struct FName& DebugTag);
	bool ShouldDisplayDebug(class AHUD* H, const struct FName& DebugTag);
	void DisplayDebug(class AHUD* H, float* YL, float* YPos);
	void UpdateVisorUIMode(class APawn* ViewTargetPawn);
	void UpdateVisorVisibility(class APawn* ViewTargetPawn);
	bool ShouldUseThirdPersonVisorMode();
	bool ShouldVisorBeHidden(class AR_Pawn* TargetPawn);
	void SyncViewTargetMeshVisibility(class APawn* PawnVT);
	void UpdatePlayerFOV(float PCOwnerFOV);
	void ProcessViewRotation(float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	void PostUpdateCamera(float DeltaTime, struct FTViewTarget* NewVT);
	void PostCameraCacheUpdate(struct FTViewTarget* OutVT);
	void UpdateViewTarget(float DeltaTime, struct FTViewTarget* OutVT);
	void NotifyViewTargetChanged(class AActor* OldViewTarget, class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams);
	bool IsFreeCam();
	bool IsThirdPerson();
	bool IsFirstPerson();
	bool CanShowFirstPersonMesh(class AR_Pawn* RP);
	class UGameCameraBase* FindBestCameraType(class AActor* CameraTarget);
	void Destroyed();
	void InitializeFor(class APlayerController* PC);
	void PostBeginPlay();
};


// Class HawkenGame.HawkenSpectatorPoint
// 0x001C (0x035C - 0x0340)
class AHawkenSpectatorPoint : public ACameraActor
{
public:
	struct FName                                       DisplayTextLocTag;                                        // 0x0340(0x0008) (Edit)
	int                                                CyclePosition;                                            // 0x0348(0x0004) (Edit)
	struct FRotator                                    UserRotationRange;                                        // 0x034C(0x000C) (Edit, Const)
	float                                              MaxRotationRate;                                          // 0x0358(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenSpectatorPoint");
		return ptr;
	}


	struct FString GetDisplayText(const struct FString& LocalizationPath);
};


// Class HawkenGame.HawkenGameEngine
// 0x0014 (0x07EC - 0x07D8)
class UHawkenGameEngine : public UGameEngine
{
public:
	int                                                CurrentFrameNum;                                          // 0x07D8(0x0004) (Transient)
	float                                              CurrentFrameDelta;                                        // 0x07DC(0x0004) (Transient)
	TArray<struct FPerMapLoadingMovie>                 LoadMapMovieLookup;                                       // 0x07E0(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenGameEngine");
		return ptr;
	}


	struct FString FindLoadingMovieByMapName(const struct FString& MapName);
	void PostEngineTick(int FrameNum, float DeltaTime);
	void PreEngineTick(int FrameNum, float DeltaTime);
	void StopAllSounds(bool bShouldStopUISounds);
	struct FString STATIC_GetCommandLine();
};


// Class HawkenGame.HawkenGameplayEventsHandlerMCP
// 0x0004 (0x005C - 0x0058)
class UHawkenGameplayEventsHandlerMCP : public UGameplayEventsHandler
{
public:
	struct FPointer                                    MemoryArchive;                                            // 0x0058(0x0004) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenGameplayEventsHandlerMCP");
		return ptr;
	}


	void PostProcessStream();
	void PreProcessStream();
};


// Class HawkenGame.HawkenGameplayEventsMCPUploader
// 0x0080 (0x01F4 - 0x0174)
class UHawkenGameplayEventsMCPUploader : public UGameplayEventsReader
{
public:
	struct FString                                     FileToUpload;                                             // 0x0174(0x000C) (NeedCtorLink)
	struct FGameplayEventsHeader                       MCPHeader;                                                // 0x0180(0x002C) (NeedCtorLink)
	TArray<unsigned char>                              DataPayload;                                              // 0x01AC(0x000C) (AlwaysInit, NeedCtorLink)
	struct FPointer                                    MemoryArchive;                                            // 0x01B8(0x0004) (Const, Native)
	class UHawkenGameStateObject*                      HawkenGameState;                                          // 0x01BC(0x0004)
	class UHawkenGameplayEventsHandlerMCP*             StatsHandler;                                             // 0x01C0(0x0004)
	class UHawkenGameStatsAggregatorMCP*               AggregateHandler;                                         // 0x01C4(0x0004)
	struct FString                                     AggregatorClassName;                                      // 0x01C8(0x000C) (Config, NeedCtorLink)
	int                                                MaxFileSizeToUpload;                                      // 0x01D4(0x0004) (Config)
	int                                                ForceLODUpload;                                           // 0x01D8(0x0004) (Config)
	TArray<int>                                        LODPercent;                                               // 0x01DC(0x000C) (Config, NeedCtorLink)
	TArray<struct FString>                             EventHandlerDetail;                                       // 0x01E8(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenGameplayEventsMCPUploader");
		return ptr;
	}


	void SerializeFooterMCP();
	void SerializeHeaderMCP();
	void UploadGameplayStats(class UOnlineEventsInterfaceMcp* MCPInterface);
	bool IsFinishedFlushing();
	void Flush();
	void Init(class UHawkenGameplayEventsWriter* Writer);
};


// Class HawkenGame.HawkenGameplayEventsWriter
// 0x0000 (0x016C - 0x016C)
class UHawkenGameplayEventsWriter : public UGameplayEventsWriter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenGameplayEventsWriter");
		return ptr;
	}


	void AppendInfoLine(const struct FString& Key, const struct FString& Value, struct FString* InfoString);
	struct FString ResolveTeamSprite(unsigned char TeamNum);
	struct FVector ResolveTeamColor(unsigned char TeamNum);
	int GetPlaylistId();
	int GetGameTypeId();
	void LogItemFloatEvent(int EventID, class AController* Player, class AR_Item_Base* ItemType, float Value);
	void LogItemIntEvent(int EventID, class AController* Player, class AR_Item_Base* ItemType, int Value);
	void LogProjectileFloatEvent(int EventID, class AController* Player, class AProjectile* Proj, float Value, bool bUseProjectileLocation);
	void LogAllPlayerPositionsEvent(int EventID);
	void CloseStatsFile();
};


// Class HawkenGame.HawkenGameStateObject
// 0x0000 (0x0080 - 0x0080)
class UHawkenGameStateObject : public UGameStateObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenGameStateObject");
		return ptr;
	}


	void Reset();
	void PreProcessStream();
};


// Class HawkenGame.HawkenGameStatsAggregator
// 0x001C (0x0294 - 0x0278)
class UHawkenGameStatsAggregator : public UGameStatsAggregator
{
public:
	class UHawkenGameStateObject*                      HawkenGameState;                                          // 0x0278(0x0004)
	TArray<int>                                        AwardIDs;                                                 // 0x027C(0x000C) (Const, NeedCtorLink)
	TArray<struct FGameEvents>                         AllPlayerAwardsEvents;                                    // 0x0288(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenGameStatsAggregator");
		return ptr;
	}


	void Reset();
	void PreProcessStream();
};


// Class HawkenGame.HawkenGameStatsAggregatorMCP
// 0x0058 (0x02EC - 0x0294)
class UHawkenGameStatsAggregatorMCP : public UHawkenGameStatsAggregator
{
public:
	unsigned long                                      bIncludeAllTimeTotals : 1;                                // 0x0294(0x0004) (Config)
	unsigned long                                      bIncludeRollups : 1;                                      // 0x0294(0x0004) (Config)
	TArray<int>                                        PlayerStatsAggregates;                                    // 0x0298(0x000C) (NeedCtorLink)
	TArray<int>                                        WeaponStatsAggregates;                                    // 0x02A4(0x000C) (NeedCtorLink)
	TArray<int>                                        DamageStatsAggregates;                                    // 0x02B0(0x000C) (NeedCtorLink)
	TArray<int>                                        ProjectileStatsAggregates;                                // 0x02BC(0x000C) (NeedCtorLink)
	TArray<int>                                        PawnStatsAggregates;                                      // 0x02C8(0x000C) (NeedCtorLink)
	TArray<int>                                        ItemStatsAggregates;                                      // 0x02D4(0x000C) (NeedCtorLink)
	TArray<int>                                        AggregatesBlacklist;                                      // 0x02E0(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenGameStatsAggregatorMCP");
		return ptr;
	}


	void PreProcessStream();
};


// Class HawkenGame.HawkenJumpNode
// 0x0028 (0x01FC - 0x01D4)
class AHawkenJumpNode : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x01D4(0x0004) (Const, Native, NoExport)
	TArray<struct FJumpNodeLink>                       Links;                                                    // 0x01D8(0x000C) (Edit, Const, EditFixedSize, NeedCtorLink)
	unsigned long                                      bHasCrossLevelLinks : 1;                                  // 0x01E4(0x0004) (Const)
	struct FGuid                                       NodeGuid;                                                 // 0x01E8(0x0010) (Edit, Const, EditConst, DuplicateTransient)
	float                                              DefaultLinkHeight;                                        // 0x01F8(0x0004) (Const, Config, GlobalConfig)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenJumpNode");
		return ptr;
	}

};


// Class HawkenGame.HawkenJumpNodeRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class UHawkenJumpNodeRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenJumpNodeRenderingComponent");
		return ptr;
	}

};


// Class HawkenGame.HawkenNavigationHandle
// 0x0000 (0x0158 - 0x0158)
class UHawkenNavigationHandle : public UNavigationHandle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenNavigationHandle");
		return ptr;
	}

};


// Class HawkenGame.HawkenNavMeshGoal_HidenFrom
// 0x0034 (0x0088 - 0x0054)
class UHawkenNavMeshGoal_HidenFrom : public UNavMeshPathGoalEvaluator
{
public:
	struct FPointer                                    GoalPoly;                                                 // 0x0054(0x0004) (Native)
	struct FVector                                     LocationToBeOutOfView;                                    // 0x0058(0x000C)
	struct FVector                                     ExtentOfAreaNeededToHideIn;                               // 0x0064(0x000C)
	class UHawkenAIPluginMovement_MechSimple*          OwningPlugIn;                                             // 0x0070(0x0004)
	float                                              OutOfRadiusSq;                                            // 0x0074(0x0004)
	unsigned long                                      bGoodAtStart : 1;                                         // 0x0078(0x0004) (Transient)
	unsigned long                                      bShowDebug : 1;                                           // 0x0078(0x0004)
	struct FVector                                     GoodStartLocation;                                        // 0x007C(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenNavMeshGoal_HidenFrom");
		return ptr;
	}


	void Recycle();
	bool STATIC_MustBeHiddenFromThisPoint(class UNavigationHandle* NavHandle, const struct FVector& InOutOfViewLocation, const struct FVector& InExtentOfAreaNeededToHideIn, float InOutOfRadius, class UHawkenAIPluginMovement_MechSimple* InOwningPlugIn);
	void RecycleNative();
};


// Class HawkenGame.HawkenNavMeshPath_Random
// 0x0004 (0x0054 - 0x0050)
class UHawkenNavMeshPath_Random : public UNavMeshPathConstraint
{
public:
	int                                                MaxRandCost;                                              // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenNavMeshPath_Random");
		return ptr;
	}


	void Recycle();
	bool STATIC_DeviateFromPath(class UNavigationHandle* NavHandle, const struct FVector& From, const struct FVector& To);
	bool STATIC_Randomize(class UNavigationHandle* NavHandle, int RandCost);
};


// Class HawkenGame.HawkenSeqAct_AIPause
// 0x0000 (0x00FC - 0x00FC)
class UHawkenSeqAct_AIPause : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenSeqAct_AIPause");
		return ptr;
	}

};


// Class HawkenGame.SeqAct_AIMove
// 0x006C (0x0168 - 0x00FC)
class USeqAct_AIMove : public USequenceAction
{
public:
	struct FPointer                                    VfTable_ILatentActionObserver;                            // 0x00FC(0x0004) (Const, Native, NoExport)
	float                                              TetherDistance;                                           // 0x0100(0x0004) (Edit)
	TEnumAsByte<ERouteDirection>                       RouteDirection;                                           // 0x0104(0x0001) (Edit)
	TEnumAsByte<EAIMoveStyle>                          MovementStyle;                                            // 0x0105(0x0001)
	TEnumAsByte<EAIMoveMood>                           MovementMood;                                             // 0x0106(0x0001)
	TEnumAsByte<EAIInterruptRange>                     InterruptRange;                                           // 0x0107(0x0001) (Edit)
	TEnumAsByte<EBaseMoveMood>                         MoveSpeed;                                                // 0x0108(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0109(0x0003) MISSED OFFSET
	TArray<class AActor*>                              MoveTargets;                                              // 0x010C(0x000C) (Edit, NeedCtorLink)
	TArray<class AActor*>                              FocusTarget;                                              // 0x0118(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bInterruptable : 1;                                       // 0x0124(0x0004) (Edit)
	unsigned long                                      bClearTetherOnArrival : 1;                                // 0x0124(0x0004) (Edit)
	unsigned long                                      bInAllowedToFire : 1;                                     // 0x0124(0x0004) (Edit)
	unsigned long                                      bStopAtEnd : 1;                                           // 0x0124(0x0004) (Edit)
	unsigned long                                      bRotateAtEnd : 1;                                         // 0x0124(0x0004) (Edit)
	unsigned long                                      bBlockMovementAtEnd : 1;                                  // 0x0124(0x0004) (Edit)
	unsigned long                                      bTeleport : 1;                                            // 0x0124(0x0004) (Edit)
	unsigned long                                      bDisableAI : 1;                                           // 0x0124(0x0004) (Edit)
	unsigned long                                      bForcePlayerStepAside : 1;                                // 0x0124(0x0004)
	unsigned long                                      bWaitForPlayerMoveAwayWhenBlocked : 1;                    // 0x0124(0x0004) (Edit)
	unsigned long                                      bAllowMovedOutput : 1;                                    // 0x0124(0x0004) (Transient)
	TArray<class AAIController*>                       AITargets;                                                // 0x0128(0x000C) (NeedCtorLink)
	TArray<class AAIController*>                       AIReachedGoal;                                            // 0x0134(0x000C) (NeedCtorLink)
	TArray<float>                                      InterruptRangeValues;                                     // 0x0140(0x000C) (NeedCtorLink)
	float                                              MovementBlockTimeLength;                                  // 0x014C(0x0004) (Edit)
	int                                                DestinationSlotIndex;                                     // 0x0150(0x0004) (Edit)
	TArray<class AActor*>                              AvailableTethers;                                         // 0x0154(0x000C) (NeedCtorLink)
	float                                              TeleportTime;                                             // 0x0160(0x0004) (Edit)
	float                                              AcceptableDistance;                                       // 0x0164(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_AIMove");
		return ptr;
	}


	void VersionUpdated(int OldVersion, int NewVersion);
	int STATIC_GetObjClassVersion();
	void OnLatentFinished(class ABaseAIController* Observer, class UObject* Action, unsigned char FinishResult);
	void ReachedGoal(class AAIController* AI);
};


// Class HawkenGame.SeqAct_HawkenGfx
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_HawkenGfx : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_HawkenGfx");
		return ptr;
	}

};


// Class HawkenGame.SeqAct_SpectatorCameraPath
// 0x0030 (0x020C - 0x01DC)
class USeqAct_SpectatorCameraPath : public USeqAct_Interp
{
public:
	float                                              TravelTimeBetweenStops;                                   // 0x01DC(0x0004) (Edit, Const)
	unsigned long                                      bSwapForwardAndReverse : 1;                               // 0x01E0(0x0004) (Edit, Const)
	unsigned long                                      bAutomaticFraming : 1;                                    // 0x01E0(0x0004) (Edit, Const)
	unsigned long                                      bCachedInterpData : 1;                                    // 0x01E0(0x0004) (Transient)
	class ACameraActor*                                CachedCameraActor;                                        // 0x01E4(0x0004) (Transient)
	class UInterpTrackMove*                            CachedMoveTrack;                                          // 0x01E8(0x0004) (Transient)
	class UInterpTrackInstMove*                        CachedMoveTrackInst;                                      // 0x01EC(0x0004) (Transient)
	class UInterpTrackEvent*                           CachedEventTrack;                                         // 0x01F0(0x0004) (Transient)
	class UInterpTrackInstEvent*                       CachedEventTrackInst;                                     // 0x01F4(0x0004) (Transient)
	class UInterpTrackFloatProp*                       CachedFOVTrack;                                           // 0x01F8(0x0004) (Transient)
	class UInterpTrackInstFloatProp*                   CachedFOVTrackInst;                                       // 0x01FC(0x0004) (Transient)
	int                                                LastStopIdx;                                              // 0x0200(0x0004) (Const, Transient)
	int                                                DestinationStopIdx;                                       // 0x0204(0x0004) (Const, Transient)
	float                                              InterpTimeToNextStop;                                     // 0x0208(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_SpectatorCameraPath");
		return ptr;
	}


	void UpdateCameraPosition(float DeltaTime);
	void ResetToStartingPosition();
	class ACameraActor* GetAssociatedCameraActor();
	void TeleportToStop(int StopIndex);
	void MoveToPrevStop();
	void MoveToNextStop();
};


// Class HawkenGame.SeqEvent_CockpitInitialized
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_CockpitInitialized : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqEvent_CockpitInitialized");
		return ptr;
	}

};


// Class HawkenGame.SeqEvent_VisorInitialized
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_VisorInitialized : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqEvent_VisorInitialized");
		return ptr;
	}

};


// Class HawkenGame.HawkenSquad
// 0x0030 (0x0218 - 0x01E8)
class AHawkenSquad : public ABaseAISquad
{
public:
	struct FName                                       SquadName;                                                // 0x01E8(0x0008) (Edit, EditConst)
	class AR_TeamInfo*                                 Team;                                                     // 0x01F0(0x0004)
	TArray<struct FSquadMemberInfo>                    SquadMembers;                                             // 0x01F4(0x000C) (NeedCtorLink)
	TArray<struct FCommonEnemyInfo>                    EnemyList;                                                // 0x0200(0x000C) (NeedCtorLink)
	unsigned long                                      bInterSquadCommunication : 1;                             // 0x020C(0x0004)
	int                                                lastBurnoutTauntIdx;                                      // 0x0210(0x0004)
	float                                              AssignedTargetPersistanceTime;                            // 0x0214(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenSquad");
		return ptr;
	}


	void DrawDebug(class AR_HUD* HUD, const struct FName& Category);
	bool NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn);
	int GetSquadMemberCount();
	void UpdateLeader(class AController* inLeader);
	struct FVector GetDestinationOffset(class AHawkenAi_ControllerBase* SquadMember, class APawn* MoveGoal);
	struct FVector GetDestinationOffset_KillThemAll(class AHawkenAi_ControllerBase* SquadMember, class APawn* MoveGoal);
	struct FVector GetDestinationOffset_Berserker(class AHawkenAi_ControllerBase* SquadMember, class APawn* MoveGoal);
	bool IsMidPointDynamic(class AHawkenAi_ControllerBase* SquadMember, class APawn* MoveGoal);
	bool CanPerformCloseCombatAttackFromOffset(class AHawkenAi_ControllerBase* SquadMember, class APawn* MoveGoal, const struct FVector& offsetLocation);
	bool IsActiveBerserkerJumpAttack();
	bool CanPerformBerserkerTaunt();
	bool CanPerformBerserkerAttack();
	void UnclaimDestinationOffset(class AHawkenAi_ControllerBase* SquadMember);
	void GetMembers(TArray<class AController*>* out_Members);
	void UnregisterSquadMember(class AController* OldMember);
	void RegisterSquadMember(class AController* NewMember, bool bLeader);
	bool AllowLeaderChange(class AController* NewMember);
	int GetNumEnemies();
	void AllMembers(class UClass* BaseClass, class AController** C);
	void AllEnemies(class UClass* BaseClass, class AController* Asker, class APawn** P);
	struct FVector GetSquadCentroid();
	struct FVector GetSquadLeaderLocation();
	class AActor* GetSquadLeaderPosition();
	struct FCoverInfo GetEnemyCoverByIndex(int Idx);
	struct FCoverInfo GetEnemyCoverByPawn(class APawn* Enemy);
	struct FVector GetEnemyLocationByIndex(int EnemyIdx, TEnumAsByte<ELocationType> LT);
	struct FVector GetEnemyLocation(class APawn* Enemy, TEnumAsByte<ELocationType> LT);
	float GetEnemyLastContactTime(class APawn* Enemy);
	void FillLocalEnemyList(class AHawkenAi_ControllerBase* NewMember);
	void RemoveEnemy(class APawn* Enemy);
	int GetEnemyIndex(class APawn* Enemy);
	int AddEnemy(class AHawkenAi_ControllerBase* NoticedBy, class APawn* NewEnemy);
};


// Class HawkenGame.HawkenSquad_Melee
// 0x0004 (0x021C - 0x0218)
class AHawkenSquad_Melee : public AHawkenSquad
{
public:
	int                                                MinMembersToAttackPlayer;                                 // 0x0218(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenSquad_Melee");
		return ptr;
	}

};


// Class HawkenGame.R_Hologram
// 0x01E8 (0x03BC - 0x01D4)
class AR_Hologram : public AActor
{
public:
	struct FPointer                                    VfTable_ITargetable;                                      // 0x01D4(0x0004) (Const, Native, NoExport)
	unsigned char                                      MechType;                                                 // 0x01D8(0x0001)
	unsigned char                                      Deactivated;                                              // 0x01D9(0x0001) (Net)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01DA(0x0002) MISSED OFFSET
	class USkeletalMeshComponent*                      ThirdPersonWeaponMeshSecondary;                           // 0x01DC(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      ThirdPersonWeaponMeshPrimary;                             // 0x01E0(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       WeaponSocketRight;                                        // 0x01E4(0x0008)
	struct FName                                       WeaponSocketLeft;                                         // 0x01EC(0x0008)
	class UParticleSystemComponent*                    ThrusterEffect_L;                                         // 0x01F4(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    ThrusterEffect_R;                                         // 0x01F8(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      DroneMesh;                                                // 0x01FC(0x0004) (ExportObject, Component, EditInline)
	class UAnimNodeSequence*                           HealAnim_Drone;                                           // 0x0200(0x0004)
	class UMaterialInstanceConstant*                   DroneMIC;                                                 // 0x0204(0x0004)
	class UParticleSystemComponent*                    HealDroneEffect[0xB];                                     // 0x0208(0x0004) (ExportObject, Component, EditInline)
	int                                                bHealEffectActive;                                        // 0x0234(0x0004)
	struct FDroneType                                  CurrentDroneType;                                         // 0x0238(0x00AC)
	class UAnimNodeAimOffset*                          RAimNode;                                                 // 0x02E4(0x0004)
	class UAnimNodeSlot*                               ThrustAnimSlot;                                           // 0x02E8(0x0004)
	class UMaterialInstanceConstant*                   HologramWeapLeftMIC;                                      // 0x02EC(0x0004) (Transient)
	class UMaterialInstanceConstant*                   HologramWeapRightMIC;                                     // 0x02F0(0x0004) (Transient)
	class UMaterialInstanceConstant*                   HologramThrusterLeftMIC;                                  // 0x02F4(0x0004) (Transient)
	class UMaterialInstanceConstant*                   HologramThrusterRightMIC;                                 // 0x02F8(0x0004) (Transient)
	class UMaterialInstanceConstant*                   HologramArmorMIC;                                         // 0x02FC(0x0004) (Transient)
	class UMaterialInstanceConstant*                   HologramDefaultMaterial;                                  // 0x0300(0x0004) (Const)
	struct FMechMeshes                                 MechMeshData;                                             // 0x0304(0x0060) (Component)
	struct FWeaponIndices                              WeapIndices;                                              // 0x0364(0x0004)
	class UAudioComponent*                             LoopingSound;                                             // 0x0368(0x0004) (ExportObject, Component, EditInline)
	unsigned long                                      bHealing : 1;                                             // 0x036C(0x0004)
	unsigned long                                      IsHealing : 1;                                            // 0x036C(0x0004)
	unsigned long                                      IsBoostingForward : 1;                                    // 0x036C(0x0004)
	unsigned long                                      IsFalling : 1;                                            // 0x036C(0x0004)
	unsigned long                                      IsWalkingBackwards : 1;                                   // 0x036C(0x0004)
	unsigned long                                      IsIdle : 1;                                               // 0x036C(0x0004)
	unsigned long                                      IsDraining : 1;                                           // 0x036C(0x0004)
	unsigned long                                      IsHeavyMode : 1;                                          // 0x036C(0x0004)
	float                                              FootYaw;                                                  // 0x0370(0x0004) (Net)
	float                                              ThrustingBlend;                                           // 0x0374(0x0004)
	float                                              FallingBlend;                                             // 0x0378(0x0004)
	float                                              OnHitFlickerAmount;                                       // 0x037C(0x0004) (Const)
	int                                                OldMoveState;                                             // 0x0380(0x0004)
	float                                              Health;                                                   // 0x0384(0x0004) (Net)
	float                                              HealthMax;                                                // 0x0388(0x0004)
	int                                                HologramType;                                             // 0x038C(0x0004)
	class AR_PawnNative*                               OwnerPawn;                                                // 0x0390(0x0004) (Net)
	int                                                TeamNum;                                                  // 0x0394(0x0004) (Net)
	struct FString                                     DisplayName;                                              // 0x0398(0x000C) (Net, NeedCtorLink)
	struct FVector                                     IndicatorOffset;                                          // 0x03A4(0x000C) (Net)
	float                                              AIDetectionTimeMin;                                       // 0x03B0(0x0004)
	float                                              AIDetectionTimeMax;                                       // 0x03B4(0x0004)
	float                                              AIIgnoreChance;                                           // 0x03B8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Hologram");
		return ptr;
	}


	class APawn* GetTargetOwner();
	TEnumAsByte<ETargetPriority> GetTargetPriority();
	void AttachWeapons();
	void SetMechType(int NewMechType);
	void HologramStartTimer();
	void SetTeam(int NewTeamIndex, class AR_PawnNative* NewHologramOwner);
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void SetShaderValues(float Opacity);
	void OnShot();
	void HologramFlickerTimer();
	void UpdateShaderOpacity();
	void UpdateMechAnimation(float DeltaTime);
	void Tick(float DeltaTime);
	void UpdateAim(const struct FRotator& LookRotation, float DeltaTime);
	void Deactivate();
	void OnEMPBlast(float Duration);
	void Reset();
	void UpdateHologramWeaponThrusterMaterials();
	void UpdateDroneFX();
	void ShowHealingDrone(int DroneIdx);
	void HideHealingDrone();
	void StartLoopAnimation();
	void ClearHealTimers();
	void UpdateHologramMaterialStaticMesh(class UStaticMeshComponent* SMC, class UMaterialInstanceConstant** MIC);
	void UpdateHologramMaterial(class USkeletalMeshComponent* SMC, class UMaterialInstanceConstant** MIC);
	void PostBeginPlay();
	void OnOwnerDestroyed();
	bool IsDead();
	bool CanBeHealed();
	void OnPawnTouch(class APawn* P);
	bool WasDeployedByPawn(class APawn* P);
	bool IsFriendly(bool bTeamGame, class APawn* P);
	struct FString GetDisplayName();
	float GetHealthPercent();
	bool ShowDefaultIndicator(struct FVector* retIndicatorLoc, struct FVector* retIndicatorSize, struct FString* retDisplayName, float* retHealthPercent, float* retHealthMax);
	struct FVector GetIndicatorPosition();
	unsigned char GetTeamNum();
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void SetItemHologramDefaults(class UR_ItemDatabaseProps* Props, int ItemSheetIdx);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Mech_CamoPresets
// 0x1C9C (0x1CD8 - 0x003C)
class UR_Mech_CamoPresets : public UObject
{
public:
	int                                                BaseCamoPatternIndex;                                     // 0x003C(0x0004) (Const)
	TArray<struct FSCamoPatternInfo>                   CamoPatternNames;                                         // 0x0040(0x000C) (NeedCtorLink)
	struct FCamoPattern                                CamoPatterns[0x5B];                                       // 0x004C(0x0050)
	float                                              CamoPatternScale[0x7];                                    // 0x1CBC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Mech_CamoPresets");
		return ptr;
	}


	void STATIC_SetMaterialConstants(class UMaterialInstanceConstant* Material, const struct FVisualInfo& MechStyle, const struct FPartVisualInfo& PartStyle, float CamoPartScale);
	void STATIC_ClampVisualInfoValues(struct FVisualInfo* MechStyle);
	struct FLinearColor STATIC_HSVToRGB(float H, float S, float V);
};


// Class HawkenGame.R_PreviewMech
// 0x020C (0x03E0 - 0x01D4)
class AR_PreviewMech : public AActor
{
public:
	unsigned long                                      bPreloadPresetTextures : 1;                               // 0x01D4(0x0004) (Config)
	unsigned long                                      IsHealing : 1;                                            // 0x01D4(0x0004)
	unsigned long                                      IsIdle : 1;                                               // 0x01D4(0x0004)
	unsigned long                                      IsDraining : 1;                                           // 0x01D4(0x0004)
	unsigned long                                      IsHeavyMode : 1;                                          // 0x01D4(0x0004)
	unsigned long                                      IsWalkingBackwards : 1;                                   // 0x01D4(0x0004)
	unsigned long                                      bBoostersOn : 1;                                          // 0x01D4(0x0004)
	unsigned long                                      bMovementIncreaseActiveRep : 1;                           // 0x01D4(0x0004)
	unsigned long                                      bAlternateFireMode : 1;                                   // 0x01D4(0x0004)
	unsigned long                                      bOneHealLoop : 1;                                         // 0x01D4(0x0004)
	unsigned long                                      bUsePartChangeMaterial : 1;                               // 0x01D4(0x0004)
	class UUDKSkeletalMeshComponent*                   WeaponLeft;                                               // 0x01D8(0x0004) (ExportObject, Component, EditInline)
	class UUDKSkeletalMeshComponent*                   WeaponRight;                                              // 0x01DC(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    ThrusterEffect_L;                                         // 0x01E0(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    ThrusterEffect_R;                                         // 0x01E4(0x0004) (ExportObject, Component, EditInline)
	float                                              ThrustingBlend;                                           // 0x01E8(0x0004)
	float                                              FallingBlend;                                             // 0x01EC(0x0004)
	struct FName                                       WeaponSocketRight;                                        // 0x01F0(0x0008)
	struct FName                                       WeaponSocketLeft;                                         // 0x01F8(0x0008)
	int                                                MechType;                                                 // 0x0200(0x0004)
	class USkelControlFootPlacement*                   RLeftLegControl;                                          // 0x0204(0x0004)
	class USkelControlFootPlacement*                   RRightLegControl;                                         // 0x0208(0x0004)
	class UAnimNodeBlendByProperty*                    HealPropertyBlend;                                        // 0x020C(0x0004)
	struct FLightingChannelContainer                   PreviewLightingChannel;                                   // 0x0210(0x0004)
	class UDynamicLightEnvironmentComponent*           LightEnv;                                                 // 0x0214(0x0004) (ExportObject, Component, EditInline)
	struct FMechMeshes                                 MechMeshData;                                             // 0x0218(0x0060) (Component)
	class UStaticMeshComponent*                        BaseStandMesh;                                            // 0x0278(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      DroneMesh;                                                // 0x027C(0x0004) (ExportObject, Component, EditInline)
	class UAnimNodeSequence*                           HealAnim_Drone;                                           // 0x0280(0x0004)
	class UMaterialInstanceConstant*                   DroneMIC;                                                 // 0x0284(0x0004)
	class UParticleSystemComponent*                    HealDroneEffect[0xB];                                     // 0x0288(0x0004) (ExportObject, Component, EditInline)
	int                                                bHealEffectActive;                                        // 0x02B4(0x0004)
	struct FDroneType                                  CurrentDroneType;                                         // 0x02B8(0x00AC)
	class UAudioComponent*                             HealLoopSndComp;                                          // 0x0364(0x0004) (ExportObject, Component, EditInline)
	class UAnimNodeSlot*                               SelectAnimSlot;                                           // 0x0368(0x0004)
	class UAnimNodeSlot*                               ThrustAnimSlot;                                           // 0x036C(0x0004)
	class UAnimNodeSequence*                           IdleAnim;                                                 // 0x0370(0x0004)
	class UAnimNodeBlendByProperty*                    IsHeavyModePropertyBlend;                                 // 0x0374(0x0004)
	class AR_Taunt*                                    PreviewHoloTaunt;                                         // 0x0378(0x0004)
	float                                              HoloTauntOffsetZ;                                         // 0x037C(0x0004) (Const)
	class UMaterialInterface*                          PartChangeMat;                                            // 0x0380(0x0004)
	struct FVisualInfo                                 CurrentMechStyle;                                         // 0x0384(0x003C)
	class UMaterialInterface*                          WeaponChangeMat;                                          // 0x03C0(0x0004)
	class UMaterialInstanceConstant*                   WeaponLeftMIC;                                            // 0x03C4(0x0004)
	class UMaterialInstanceConstant*                   WeaponRightMIC;                                           // 0x03C8(0x0004)
	int                                                currentPrimaryIndex;                                      // 0x03CC(0x0004)
	int                                                currentSecondaryIndex;                                    // 0x03D0(0x0004)
	struct FString                                     PlayerName;                                               // 0x03D4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PreviewMech");
		return ptr;
	}


	struct FName GetFocusBoneName();
	void FinishOneJumpLoop();
	void PlayOneJumpLoop();
	void FinishHeavyModeLoop();
	void UpdateHeavyModeAnimNode();
	void PlayOneHeavyModeLoop();
	void PlayGroundSlam();
	void PlayAbility(int AbilityIdx);
	void PlayOneHealLoop(int DroneIdx);
	void SetIsHealing(bool bHealing, bool bPlayAnims);
	void SetSecondaryWeaponType(int secondaryIndex, bool bSinglePartSwap);
	void SetPrimaryWeaponType(int primaryIndex, bool bSinglePartSwap);
	void SetWeaponTypes(int primaryIndex, int secondaryIndex);
	class UMaterialInstanceConstant* GetWeaponOverloadMIC(int WeapIdx);
	void OnPurchasePrestigeWeapon();
	void SetMechType(int NewMechType, int TorosIdx, int MidIdx, int LowerIdx, int ArmsIdx, int BoosterIdx, int ArmorIdx, bool bPlayStartupAnim);
	void PreloadTexturesOff();
	void PreloadPresetTextures(class UR_MechSetup* MechSetup, float Seconds);
	void PreloadAllTextures();
	void PartChanged(TEnumAsByte<EInventoryItemType> invType, int Index, bool bSinglePartSwap);
	void SetCamoPattern(const struct FVisualInfo& MechStyle);
	void SetAppearanceFromMechStyle(int NewMechType, const struct FVisualInfo& MechStyle, bool bPlayStartupAnim);
	void SetAppearanceFromPreset(const struct FMechPreset& preset);
	void Tick(float DeltaTime);
	void OnMechChanged();
	void HealEndTimer();
	void EndAnimTimer();
	void StartLoopAnimation();
	void ShowHealingDrone(int DroneIdx);
	void EndHealWhenDone();
	void ClearHealTimers();
	void UpdateHoloTaunt();
	void HideHoloTaunt();
	void DestroyHoloTaunt();
	void PlayHoloTaunt(int TauntIndex);
	bool IsPlayingAnim();
	void PlayTauntAnimation(int TauntIndex, bool bRestartIfPlaying);
	void ThrusterEffectEndTimer();
	void PlayThrusterEffect(float activeTime);
	void AttachThrusters();
	void OverloadUpdateWeaponMaterial(class UUDKSkeletalMeshComponent* Mesh, class UMaterialInterface* ShimmerOverloadBaseMat, class UMaterialInstanceConstant* WeapOverloadMIC, class UMaterialInstanceConstant** OutMIC);
	void AttachWeapons();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
};


// Class HawkenGame.R_NPC
// 0x01AC (0x112C - 0x0F80)
class AR_NPC : public AR_PawnNative
{
public:
	float                                              HeightScale;                                              // 0x0F80(0x0004)
	struct FString                                     DisplayName;                                              // 0x0F84(0x000C) (Edit, NeedCtorLink)
	unsigned char                                      TeamIndex;                                                // 0x0F90(0x0001) (Net)
	TEnumAsByte<EBotDifficultyLevels>                  BotLevel;                                                 // 0x0F91(0x0001) (Edit)
	TEnumAsByte<ENPCPhysOverride>                      PhysOverride;                                             // 0x0F92(0x0001) (Edit)
	TEnumAsByte<ESplineMode>                           SplineMode;                                               // 0x0F93(0x0001) (Net)
	TEnumAsByte<ERobotMoveState>                       RemoteMoveState;                                          // 0x0F94(0x0001) (Net)
	TEnumAsByte<ERobotMoveState>                       PrevMoveState;                                            // 0x0F95(0x0001) (Transient)
	TEnumAsByte<ERadarIndicatorType>                   RadarIndicatorType;                                       // 0x0F96(0x0001) (Edit)
	TEnumAsByte<ERadarDistance>                        RadarDistance;                                            // 0x0F97(0x0001) (Edit)
	class UBTTemplate*                                 NPCBehaviorTreeTemplate;                                  // 0x0F98(0x0004) (Edit)
	class UETQTemplate*                                NPCETQTemplate;                                           // 0x0F9C(0x0004) (Edit)
	class UHawkenAIDefinition*                         NPCAIDef;                                                 // 0x0FA0(0x0004) (Edit, EditInline, EditInlineUse)
	struct FString                                     BotTypeString;                                            // 0x0FA4(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bIsBoss : 1;                                              // 0x0FB0(0x0004) (Edit)
	unsigned long                                      bCanShoot : 1;                                            // 0x0FB0(0x0004) (Edit)
	unsigned long                                      bFaceEnemy : 1;                                           // 0x0FB0(0x0004) (Edit)
	unsigned long                                      bApproachEnemies : 1;                                     // 0x0FB0(0x0004) (Edit)
	unsigned long                                      bCanFollowSpline : 1;                                     // 0x0FB0(0x0004)
	unsigned long                                      bCanSelfDestruct : 1;                                     // 0x0FB0(0x0004)
	unsigned long                                      bStationaryOnly : 1;                                      // 0x0FB0(0x0004) (Edit)
	unsigned long                                      bFollowOnly : 1;                                          // 0x0FB0(0x0004) (Edit)
	unsigned long                                      bAttackNPCs : 1;                                          // 0x0FB0(0x0004) (Edit)
	unsigned long                                      bTakeNPCdamage : 1;                                       // 0x0FB0(0x0004) (Edit)
	unsigned long                                      bAfraid : 1;                                              // 0x0FB0(0x0004) (Edit)
	unsigned long                                      bRandomizeMissShots : 1;                                  // 0x0FB0(0x0004) (Edit)
	unsigned long                                      bRandomizeMissSpread : 1;                                 // 0x0FB0(0x0004) (Edit)
	unsigned long                                      bDropRepairCharge : 1;                                    // 0x0FB0(0x0004) (Edit)
	unsigned long                                      bDropEnergy : 1;                                          // 0x0FB0(0x0004) (Edit)
	unsigned long                                      bInvulnerable : 1;                                        // 0x0FB0(0x0004)
	float                                              NearbyDistance;                                           // 0x0FB4(0x0004) (Edit)
	float                                              NumRespawns;                                              // 0x0FB8(0x0004) (Edit)
	float                                              ExplosionDamage;                                          // 0x0FBC(0x0004) (Edit)
	float                                              ExplodeDistance;                                          // 0x0FC0(0x0004) (Edit)
	float                                              FightingRadius;                                           // 0x0FC4(0x0004) (Edit)
	float                                              MoveSpeed;                                                // 0x0FC8(0x0004) (Edit)
	float                                              BoostAccelScale;                                          // 0x0FCC(0x0004) (Edit)
	int                                                MaxLives;                                                 // 0x0FD0(0x0004) (Edit)
	class USoundCue*                                   ExplosionSound;                                           // 0x0FD4(0x0004) (Edit)
	class UParticleSystem*                             ExplosionEffectPS;                                        // 0x0FD8(0x0004) (Edit)
	struct FName                                       ExplosionSocket;                                          // 0x0FDC(0x0008) (Edit)
	struct FName                                       DeathAnim;                                                // 0x0FE4(0x0008) (Edit)
	class UParticleSystem*                             DamageEffectPS;                                           // 0x0FEC(0x0004) (Edit)
	class USoundCue*                                   DamageSpeech;                                             // 0x0FF0(0x0004) (Edit)
	class UAnimNodeAdditiveBlending*                   DamageBlendNode;                                          // 0x0FF4(0x0004) (Transient)
	class UAnimNodeSequence*                           DamageBlendAnim;                                          // 0x0FF8(0x0004) (Transient)
	float                                              NextDamageAnimTime;                                       // 0x0FFC(0x0004) (Transient)
	class AR_PlayerController*                         LastPlayerDamageInstigator;                               // 0x1000(0x0004)
	float                                              LastDamageTime;                                           // 0x1004(0x0004)
	struct FHitEffectsInfo                             LastHitEffectsInfo;                                       // 0x1008(0x001C) (Net)
	struct FAttachedEffectInfo                         DamageDebuffEffect;                                       // 0x1024(0x0010) (Edit, Component)
	struct FAttachedEffectInfo                         EMPEffect;                                                // 0x1034(0x0010) (Edit, Component)
	TArray<class UParticleSystemComponent*>            StatusEffectsPSCs;                                        // 0x1044(0x000C) (ExportObject, Transient, Component, NeedCtorLink, EditInline)
	class USoundCue*                                   WallImpactSoundLG;                                        // 0x1050(0x0004) (Edit)
	class USoundCue*                                   WallImpactSoundMed;                                       // 0x1054(0x0004) (Edit)
	class UAnimNodeSlot*                               FullBodyAnimSlot;                                         // 0x1058(0x0004) (Transient)
	class UAnimNodeSlot*                               DeathAnimSlot;                                            // 0x105C(0x0004) (Transient)
	struct FName                                       DeathAnimSlotName;                                        // 0x1060(0x0008) (Edit)
	struct FName                                       HitReactionAnim;                                          // 0x1068(0x0008) (Edit)
	class USoundCue*                                   HitReactionSpeech;                                        // 0x1070(0x0004) (Edit)
	class UAudioComponent*                             SpeechAudioComp;                                          // 0x1074(0x0004) (ExportObject, Transient, Component, EditInline)
	class USoundCue*                                   QueuedSpeech;                                             // 0x1078(0x0004) (Transient)
	float                                              FireRate;                                                 // 0x107C(0x0004) (Edit)
	float                                              DamagePerShot;                                            // 0x1080(0x0004) (Edit)
	float                                              FireSpread;                                               // 0x1084(0x0004) (Edit)
	int                                                MissEveryXShots;                                          // 0x1088(0x0004) (Edit)
	float                                              MissSpread;                                               // 0x108C(0x0004) (Edit)
	class UClass*                                      NPCWeaponClass;                                           // 0x1090(0x0004) (Edit)
	struct FName                                       WeaponSocketName;                                         // 0x1094(0x0008) (Edit)
	class AR_NPC_Weapon*                               NPCWeapon;                                                // 0x109C(0x0004) (Net)
	class USkeletalMeshComponent*                      WeaponMesh;                                               // 0x10A0(0x0004) (ExportObject, Transient, Component, EditInline)
	float                                              Scale;                                                    // 0x10A4(0x0004) (Edit)
	class UMaterial*                                   HighlightMaterial;                                        // 0x10A8(0x0004) (Edit)
	class UMaterialInstanceConstant*                   HighlightMaterialInstance;                                // 0x10AC(0x0004) (Transient)
	class USkeletalMeshComponent*                      HighlightMesh;                                            // 0x10B0(0x0004) (ExportObject, Transient, Component, EditInline)
	int                                                RepairUnits;                                              // 0x10B4(0x0004) (Edit)
	int                                                EnergyUnits;                                              // 0x10B8(0x0004) (Edit)
	float                                              InvulnerabilityTime;                                      // 0x10BC(0x0004)
	class UMaterialInstanceConstant*                   SpawningMaterial;                                         // 0x10C0(0x0004)
	class UMaterialInstanceConstant*                   SpawningMaterialInstance;                                 // 0x10C4(0x0004)
	float                                              SplineMoveSpeed;                                          // 0x10C8(0x0004)
	float                                              TravelDistance;                                           // 0x10CC(0x0004)
	class ASplineActor*                                StartSplineActor;                                         // 0x10D0(0x0004)
	class ASplineActor*                                LastSplinePoint;                                          // 0x10D4(0x0004)
	class ASplineActor*                                LastNextSplinePoint;                                      // 0x10D8(0x0004)
	float                                              LastSplinePointDistance;                                  // 0x10DC(0x0004)
	struct FVector                                     SplineOffset;                                             // 0x10E0(0x000C) (Edit)
	struct FColor                                      SplineColor;                                              // 0x10EC(0x0004)
	struct FColor                                      NormalSplineColor;                                        // 0x10F0(0x0004) (Edit)
	struct FColor                                      SafeSplineColor;                                          // 0x10F4(0x0004) (Edit)
	TArray<struct FCosmeticInfo>                       Cosmetics;                                                // 0x10F8(0x000C) (Edit, Component, NeedCtorLink)
	float                                              IndicatorWidth;                                           // 0x1104(0x0004) (Edit)
	float                                              IndicatorHeight;                                          // 0x1108(0x0004) (Edit)
	struct FName                                       IndicatorSocket;                                          // 0x110C(0x0008) (Edit)
	struct FString                                     KillAssistStat;                                           // 0x1114(0x000C) (Edit, NeedCtorLink)
	struct FString                                     KillAssistXPName;                                         // 0x1120(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_NPC");
		return ptr;
	}


	void ModifiersUpdated();
	void DetachAllStatusEffects();
	void UpdateStatusEffects(bool bActive, TArray<struct FAttachedEffectInfo>* Effects);
	void UpdateStatusEffect(bool bActive, struct FAttachedEffectInfo* Effect);
	void UpdateDebuffEffects(bool bDebuffed);
	void OnEMPEnd();
	void OnEMPStart();
	void OnEMPBlast(class AController* ProjectileInstigator, float Duration, bool bSetTime);
	void OnDisruptorBlast(class AController* ProjectileInstigator, float Duration, bool bSetTime);
	void StartItemDebuff(TEnumAsByte<EItemDebuffType> DebuffType, float Duration);
	void OnItemDebuffEnd(int Idx);
	void OnItemDebuffStart(int Idx, class AController* ProjectileInstigator, float Duration, bool SetTime);
	void GetIndicatorSize(float* Width, float* Height);
	struct FVector GetIndicatorPosition();
	bool HasHitReaction();
	void OnEndHitReaction();
	void OnBeginHitReaction();
	float GetBoostForwardSpeed();
	float GetRunSpeed();
	void SetMoveStateInternal(TEnumAsByte<ERobotMoveState> NewState);
	void HandleGroundMovement(const struct FVector& AccelTwo, TEnumAsByte<EDoubleClickDir> DoubleClickMove, float DeltaTime);
	float PlayFullBodyAnim(const struct FName& AnimName);
	void StopSound(class USoundCue* Sound, float FadeOutTime);
	void OnSpeechAudioFinished(class UAudioComponent* AC);
	bool CanPlaySpeech();
	void TerminateSpeech();
	void StopLoopingSpeech(class USoundCue* SoundToStop, float FadeOutTime);
	bool QueueLoopingSpeech(class USoundCue* Sound);
	bool IsPlayingSpeech(class USoundCue* SoundToCheck);
	void StopSpeech(class USoundCue* SoundToStop, float FadeOutTime);
	bool PlaySpeech(class USoundCue* Sound);
	void StopLoopingSound(class UAudioComponent* AudioComp, float FadeOutTime);
	void StartLoopingSound(class UAudioComponent* AudioComp, class USoundCue* Sound);
	void SetSplineType(TEnumAsByte<ESplineType> SplineType);
	struct FVector GetSplineAnchor();
	void EndSplineMode();
	void StartSplineMode(class ASplineActor* StartPoint);
	void DoPlayEmote(const struct FName& InEmoteTag, int InPlayerID);
	void ThrowActiveWeapon(bool bDestroyWeap);
	void SelfDestruct();
	void SetNpcMaterial(class UMaterialInstanceConstant* NewMIC, bool bCopyParams);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent);
	void RemoveGun();
	void StartWeaponAnimByIndex(int Hand, int Index);
	void StopFire(unsigned char FireModeNum);
	void StartFire(unsigned char FireModeNum);
	bool StopFiring();
	void PlayDeathFX();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	struct FName GetDeathAnim();
	bool PlayDeathAnim();
	void PlayExplodeEffects();
	void IncrementKillStats();
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void OnEnemyAcquire();
	void OnEnemyNearby(const struct FVector& EnemyLoc);
	void OnEnemyApproach();
	void OnTakeDamage();
	void RecordActualDamageTaken(float actualDamage, class AController* EventInstigator, class UClass* dmgType);
	void ApplyDebuffFromDamage(class AController* EventInstigator, class UClass* dmgType);
	void TakeDamage(float Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* dmgType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void PlayTakeHitEffects(class APawn* PawnHitInstigator, const struct FVector& HitLocation, const struct FVector& Momentum);
	void WallBumpTimer();
	class UR_PhysicalMaterialProperty* GetWallMaterial(const struct FVector& WallHitNormal);
	struct FVector GetTouchingPoint(const struct FVector& HitNormal, float RadiusScale, float offset);
	void PlayWallImpactEffects(const struct FVector& HitNormal, class AActor* Wall);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void CrushedBy(class APawn* OtherPawn);
	void Tick(float DeltaTime);
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void AttachCosmetics();
	void ShowMechOutline(bool bShowOutline, const struct FLinearColor& HighlightColor);
	void CleanUpHighlightMaterial();
	void InitHighlightMaterial();
	void LerpSpawningMaterial();
	void TurnOffInvulnerabilty();
	void SetupBehaviorTreeNPC();
	void SpawnDefaultController();
	void PostBeginPlay();
	void PreBeginPlay();
	unsigned char GetTeamNum();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_NPC_Drone
// 0x006C (0x1198 - 0x112C)
class AR_NPC_Drone : public AR_NPC
{
public:
	float                                              BobSpeed;                                                 // 0x112C(0x0004)
	float                                              BobScale;                                                 // 0x1130(0x0004)
	float                                              BobPos;                                                   // 0x1134(0x0004) (Transient)
	struct FVector                                     MeshBaseTranslation;                                      // 0x1138(0x000C) (Transient)
	TArray<struct FAttachedEffectInfo>                 MovingEffects;                                            // 0x1144(0x000C) (Edit, Component, NeedCtorLink)
	TArray<struct FAttachedEffectInfo>                 HoveringEffects;                                          // 0x1150(0x000C) (Edit, Component, NeedCtorLink)
	class UParticleSystem*                             SpawnTrailEffect;                                         // 0x115C(0x0004) (Edit)
	class UParticleSystemComponent*                    SpawnTrailComponent;                                      // 0x1160(0x0004) (ExportObject, Transient, Component, EditInline)
	struct FName                                       SpawnTrailEffectSocket;                                   // 0x1164(0x0008) (Edit)
	class USoundCue*                                   FlyingSound;                                              // 0x116C(0x0004) (Edit)
	class UAudioComponent*                             FlyingAudioComp;                                          // 0x1170(0x0004) (ExportObject, Transient, Component, EditInline)
	class USoundCue*                                   WarningSound;                                             // 0x1174(0x0004) (Edit)
	float                                              AscendSpeedScale;                                         // 0x1178(0x0004) (Edit)
	float                                              DescendSpeedScale;                                        // 0x117C(0x0004) (Edit)
	int                                                MinBodyPitch;                                             // 0x1180(0x0004) (Edit)
	int                                                MaxBodyPitch;                                             // 0x1184(0x0004) (Edit)
	float                                              HoverDistance;                                            // 0x1188(0x0004) (Edit)
	struct FName                                       WeaponSkelCtrlName;                                       // 0x118C(0x0008) (Edit)
	class USkelControlLookAt*                          WeaponSkelCtrl;                                           // 0x1194(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_NPC_Drone");
		return ptr;
	}


	void SetGameplayMaterialOverride(TEnumAsByte<EPawnMaterialOverride> NewPawnMaterialOverride, bool bForceUpdate);
	void OnAITargetChanged(class AActor* Target);
	void Tick(float DeltaTime);
	void PlaySpawning();
	void PostBeginPlay();
	void ActivateEffectList(TArray<struct FAttachedEffectInfo> EffectInfos, bool bActivate);
	void AttachEffects(bool bAutoActivate, TArray<struct FAttachedEffectInfo>* EffectInfos);
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
};


// Class HawkenGame.R_Radar_Base
// 0x0040 (0x0214 - 0x01D4)
class AR_Radar_Base : public AActor
{
public:
	struct FPointer                                    VfTable_ITargetable;                                      // 0x01D4(0x0004) (Const, Native, NoExport)
	float                                              Health;                                                   // 0x01D8(0x0004) (Net)
	float                                              HealthMax;                                                // 0x01DC(0x0004)
	class AR_PawnNative*                               OwnerPawn;                                                // 0x01E0(0x0004) (Net)
	int                                                TeamNum;                                                  // 0x01E4(0x0004) (Net)
	struct FVector                                     IndicatorOffset;                                          // 0x01E8(0x000C)
	class USkeletalMeshComponent*                      RadarMesh;                                                // 0x01F4(0x0004) (ExportObject, Component, EditInline)
	float                                              EmpShutdownTime;                                          // 0x01F8(0x0004) (Net)
	float                                              DetectDistance;                                           // 0x01FC(0x0004) (Net)
	class UParticleSystem*                             ExplosionTemplate;                                        // 0x0200(0x0004)
	class USoundCue*                                   ExplosionSnd;                                             // 0x0204(0x0004)
	class UAnimNodeSlot*                               DeploySlot;                                               // 0x0208(0x0004)
	unsigned long                                      bDeployed : 1;                                            // 0x020C(0x0004)
	unsigned long                                      bInActive : 1;                                            // 0x020C(0x0004)
	class UClass*                                      ItemClass;                                                // 0x0210(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Radar_Base");
		return ptr;
	}


	class APawn* GetTargetOwner();
	TEnumAsByte<ETargetPriority> GetTargetPriority();
	void OnEMPBlast(float Duration);
	bool IsTargetingPawn(class AR_PawnNative* P);
	void Destroyed();
	void Deactivate();
	void PostBeginPlay();
	struct FString GetDisplayName();
	float GetHealthPercent();
	bool ShowDefaultIndicator(struct FVector* retIndicatorLoc, struct FVector* retIndicatorSize, struct FString* retDisplayName, float* retHealthPercent, float* retHealthMax);
	void OnOwnerDestroyed();
	bool IsDead();
	bool CanBeHealed();
	void OnPawnTouch(class APawn* P);
	bool WasDeployedByPawn(class APawn* P);
	bool IsFriendly(bool bTeamGame, class APawn* P);
	unsigned char GetTeamNum();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	bool HealDamage(float Amount, class AController* Healer, class UClass* DamageType);
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void SetRadarProperties(int PropSheetIdx);
	void SetOwnerPawn(class AR_Pawn* NewOwner, int NewTeamNum);
};


// Class HawkenGame.R_Turret_Base
// 0x0134 (0x0308 - 0x01D4)
class AR_Turret_Base : public AActor
{
public:
	struct FPointer                                    VfTable_ITargetable;                                      // 0x01D4(0x0004) (Const, Native, NoExport)
	class USkeletalMeshComponent*                      TurretMesh;                                               // 0x01D8(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      WeaponMesh;                                               // 0x01DC(0x0004) (ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           TurretLightEnv;                                           // 0x01E0(0x0004) (ExportObject, Component, EditInline)
	float                                              FireCooldownTime;                                         // 0x01E4(0x0004) (Edit)
	float                                              FireCooldownTimeHoming;                                   // 0x01E8(0x0004) (Edit)
	float                                              MachineGunFireCooldownTime;                               // 0x01EC(0x0004) (Edit)
	float                                              timeToShot;                                               // 0x01F0(0x0004)
	float                                              MachineGunSpread;                                         // 0x01F4(0x0004)
	float                                              MachineGunDamage;                                         // 0x01F8(0x0004)
	int                                                Health;                                                   // 0x01FC(0x0004) (Net)
	int                                                HealthMax;                                                // 0x0200(0x0004) (Net)
	class UParticleSystem*                             MachineTurretMuzzleFlash;                                 // 0x0204(0x0004)
	class UParticleSystem*                             RocketTurretMuzzleFlash;                                  // 0x0208(0x0004)
	class UClass*                                      HomingMissileProjectile;                                  // 0x020C(0x0004) (Edit)
	class UClass*                                      RocketProjectile;                                         // 0x0210(0x0004) (Edit)
	class UClass*                                      MachineGunDamageType;                                     // 0x0214(0x0004) (Edit)
	class USoundCue*                                   FireSnd;                                                  // 0x0218(0x0004) (Edit)
	float                                              RotateSpeedHorizontal;                                    // 0x021C(0x0004) (Edit)
	float                                              RotateSpeedVertical;                                      // 0x0220(0x0004) (Edit)
	TEnumAsByte<ETurretType>                           Type;                                                     // 0x0224(0x0001) (Edit, Net)
	unsigned char                                      TeamIndex;                                                // 0x0225(0x0001) (Edit, Net)
	TEnumAsByte<ETargetPriority>                       TargetPriority;                                           // 0x0226(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0227(0x0001) MISSED OFFSET
	int                                                NumHomingMissilesFired;                                   // 0x0228(0x0004) (Edit)
	int                                                MaxTargetDistance;                                        // 0x022C(0x0004)
	unsigned long                                      bTargetDistanceNoZ : 1;                                   // 0x0230(0x0004) (Const)
	unsigned long                                      bDetectsStealthedPawns : 1;                               // 0x0230(0x0004) (Const)
	unsigned long                                      bIsTurretStation : 1;                                     // 0x0230(0x0004) (Const)
	unsigned long                                      IsRagdoll : 1;                                            // 0x0230(0x0004)
	unsigned long                                      IsTurning : 1;                                            // 0x0230(0x0004)
	unsigned long                                      bActive : 1;                                              // 0x0230(0x0004) (Net)
	unsigned long                                      bInvertPitch : 1;                                         // 0x0230(0x0004) (Edit)
	unsigned long                                      bPlayedDeploy : 1;                                        // 0x0230(0x0004)
	unsigned long                                      bLoopingFire : 1;                                         // 0x0230(0x0004) (Net)
	unsigned long                                      bMissileFire : 1;                                         // 0x0230(0x0004) (Net)
	float                                              LastTurnYaw;                                              // 0x0234(0x0004)
	int                                                YawAdjust;                                                // 0x0238(0x0004)
	struct FVector                                     TurretLocation;                                           // 0x023C(0x000C) (Net)
	struct FRotator                                    TurretRotation;                                           // 0x0248(0x000C) (Net)
	int                                                EnergyUnits;                                              // 0x0254(0x0004)
	float                                              CurrentBuildTime;                                         // 0x0258(0x0004) (Net)
	float                                              BuildTime;                                                // 0x025C(0x0004)
	float                                              ShakeTime;                                                // 0x0260(0x0004)
	float                                              ShutdownTime;                                             // 0x0264(0x0004) (Net)
	float                                              FireAngle;                                                // 0x0268(0x0004)
	float                                              FireHeight;                                               // 0x026C(0x0004)
	float                                              TargetRadiusLock;                                         // 0x0270(0x0004)
	float                                              LastFireTime;                                             // 0x0274(0x0004)
	class AR_PawnNative*                               TurretOwner;                                              // 0x0278(0x0004) (Net)
	struct FName                                       DeployAnim;                                               // 0x027C(0x0008)
	struct FName                                       InactiveAnim;                                             // 0x0284(0x0008)
	class UUDKSkelControl_Rotate*                      BaseRotateControl;                                        // 0x028C(0x0004)
	class UAnimNodeSequenceBlendByAim*                 AimNode;                                                  // 0x0290(0x0004)
	class UAnimNodeAimOffset*                          Station_AimNode;                                          // 0x0294(0x0004)
	class UAnimNodeSlot*                               DeploySlot;                                               // 0x0298(0x0004)
	class UAnimNodeSequence*                           WeaponAnimNode;                                           // 0x029C(0x0004)
	class USoundCue*                                   ExplosionSnd;                                             // 0x02A0(0x0004)
	class UParticleSystem*                             ExplosionTemplate;                                        // 0x02A4(0x0004)
	class UParticleSystemComponent*                    DestroyedEffect;                                          // 0x02A8(0x0004) (ExportObject, Component, EditInline)
	class UUDKParticleSystemComponent*                 MuzzleFlashEffect;                                        // 0x02AC(0x0004) (ExportObject, Component, EditInline)
	class UUDKExplosionLight*                          MuzzleFlashLight;                                         // 0x02B0(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       MuzzleSocket;                                             // 0x02B4(0x0008)
	struct FName                                       WeaponMuzzleSocket;                                       // 0x02BC(0x0008)
	class AR_Weap_Base*                                MachineGun;                                               // 0x02C4(0x0004)
	class UAudioComponent*                             LoopFireSndComp;                                          // 0x02C8(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       LoopingFireStopAnim;                                      // 0x02CC(0x0008)
	float                                              UpdateTargetTime;                                         // 0x02D4(0x0004)
	float                                              UpdateTargetRate;                                         // 0x02D8(0x0004)
	float                                              TimeTilFirstFire;                                         // 0x02DC(0x0004)
	class AActor*                                      LastTarget;                                               // 0x02E0(0x0004)
	float                                              IndicatorWidth;                                           // 0x02E4(0x0004)
	float                                              IndicatorHeight;                                          // 0x02E8(0x0004)
	class UR_DamageTracking*                           DamageTracker;                                            // 0x02EC(0x0004)
	float                                              DamageTrackingExpireTime;                                 // 0x02F0(0x0004) (Const)
	float                                              DamageTrackingAssistTime;                                 // 0x02F4(0x0004) (Const)
	int                                                ItemSheetIdx;                                             // 0x02F8(0x0004)
	struct FString                                     DisplayName;                                              // 0x02FC(0x000C) (Net, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Turret_Base");
		return ptr;
	}


	class APawn* GetTargetOwner();
	TEnumAsByte<ETargetPriority> GetTargetPriority();
	void SendOutDamageXPOnDeath();
	void CauseMuzzleFlashLight();
	void AttachMuzzleFlash(class UParticleSystem* MuzzleEffect);
	void SetTurretMuzzleFlashContent();
	void SetTurretMesh();
	void UpdateTurretLocation(const struct FVector& NewLocation);
	void UpdateTurretData(int NewTeamIndex);
	void Tick(float DeltaTime);
	void UndeployedState(float DeltaTime);
	void TurretAttackTick(float DeltaTime);
	void DoTurretFire(class AActor* Target, const struct FVector& ActualTargetPos);
	float GetProjectileTimeToLocation(const struct FVector& TargetPos, const struct FVector& StartPos);
	void ResetTimeToShot();
	void SetBaseRotate(float Yaw);
	void UpdateSkeletonAim();
	class AActor* FindTarget();
	bool HasLineOfSight(class AActor* Target);
	struct FVector GetFireLocation();
	float GetFireHeight();
	bool IsActive();
	bool IsFriendly(bool bTeamGame, class APawn* Pawn);
	bool IsValidEnemy(class AActor* P);
	struct FVector FaceTarget(class AActor* Target, float DeltaTime);
	class AProjectile* FireProjectileAtTarget(const struct FVector& TargetLocation, class UClass* ProjectileClass, float Spread);
	struct FVector GetStartLocation(const struct FVector& AimDir);
	void FireAtTarget(class AActor* Target, const struct FVector& TargetLocation);
	void PlayMissileFire();
	void StopLoopingFire();
	void MachineGunMuzzleFlashTimer();
	void StartLoopingFire();
	void StopLoopingFireSound(bool bHardEnd);
	void StartLoopingFireSound();
	void OnEMPBlast(float Duration);
	void Deactivate();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void OnDeath();
	void GoRagdoll();
	void ImpactEffectsTimeout();
	void PlayImpactEffect(class UParticleSystem* ImpactParticles, const struct FVector& HitLocation, const struct FRotator& Orientation);
	bool HealDamage(float Amount, class AController* Healer, class UClass* DamageType);
	void ReduceHealth(int DamageAmount, class AController* EventInstigator);
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void Destroyed();
	void Reset();
	void SetItemTurretDefaults(class UR_ItemDatabaseProps* Props, int NewItemSheetIdx);
	void OverrideMachineGunDamageType(class UClass* DamageTypeOverride);
	void PostBeginPlay();
	void UpdateMachineGunDamage();
	struct FString GetDisplayName();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Turret_Battleship
// 0x0004 (0x030C - 0x0308)
class AR_Turret_Battleship : public AR_Turret_Base
{
public:
	unsigned long                                      bIsActive : 1;                                            // 0x0308(0x0004)
	unsigned long                                      bTurnToDefault : 1;                                       // 0x0308(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Turret_Battleship");
		return ptr;
	}


	class AActor* FindSiegeTarget();
	class AActor* FindTarget();
	void SendOutDamageXPOnDeath();
	void GoRagdoll();
	void ReduceHealth(int DamageAmount, class AController* EventInstigator);
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void UpdateTurretLocation(const struct FVector& NewLocation);
	void Reset();
	void SetBaseRotate(float Yaw);
};


// Class HawkenGame.R_Turret_Deployed
// 0x0008 (0x0310 - 0x0308)
class AR_Turret_Deployed : public AR_Turret_Base
{
public:
	class USoundCue*                                   DeploySnd;                                                // 0x0308(0x0004)
	float                                              TurretScale;                                              // 0x030C(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Turret_Deployed");
		return ptr;
	}


	void SendOutDamageXPOnDeath();
	void UndeployedState(float DeltaTime);
	void UpdateTurretScale(float NewTurretScale);
	void SetTurretMesh();
	bool IsDead();
	bool CanBeHealed();
	bool WasDeployedByPawn(class APawn* P);
	void OnPawnTouch(class APawn* P);
	float GetHealthPercent();
	bool ShowDefaultIndicator(struct FVector* retIndicatorLoc, struct FVector* retIndicatorSize, struct FString* retDisplayName, float* retHealthPercent, float* retHealthMax);
	void OnOwnerDestroyed();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Turret_Station
// 0x0048 (0x0350 - 0x0308)
class AR_Turret_Station : public AR_Turret_Base
{
public:
	int                                                MaxEnergyUnits;                                           // 0x0308(0x0004) (Edit)
	unsigned long                                      bIsActive : 1;                                            // 0x030C(0x0004) (Edit, Net)
	unsigned long                                      bAtBase : 1;                                              // 0x030C(0x0004) (Edit, Net)
	unsigned long                                      bTurnToDefault : 1;                                       // 0x030C(0x0004)
	unsigned long                                      bIsDeactivating : 1;                                      // 0x030C(0x0004)
	unsigned long                                      EnergyAdded : 1;                                          // 0x030C(0x0004) (Net)
	int                                                DamagePerEnergyUnit;                                      // 0x0310(0x0004) (Edit)
	int                                                SecondsPerEnergyUnit;                                     // 0x0314(0x0004) (Edit)
	class UParticleSystem*                             DeactivateEffect;                                         // 0x0318(0x0004) (Edit)
	float                                              TransitionLight;                                          // 0x031C(0x0004) (Edit)
	class UMaterialInstanceConstant*                   LightsMaterialInstance;                                   // 0x0320(0x0004) (Transient)
	class UStaticMeshComponent*                        MeshLightLeft;                                            // 0x0324(0x0004) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        MeshLightRight;                                           // 0x0328(0x0004) (Edit, ExportObject, Component, EditInline)
	class UMaterialInterface*                          LightsMaterial;                                           // 0x032C(0x0004) (Edit)
	int                                                PowerEnergyUnits;                                         // 0x0330(0x0004) (Net)
	int                                                DamageTaken;                                              // 0x0334(0x0004)
	float                                              TimePowered;                                              // 0x0338(0x0004)
	class USoundCue*                                   DeploySound;                                              // 0x033C(0x0004)
	class USoundCue*                                   DeactivateSound;                                          // 0x0340(0x0004)
	class USoundCue*                                   UndeploySound;                                            // 0x0344(0x0004)
	class AR_Pawn*                                     LastActivator;                                            // 0x0348(0x0004) (Net)
	class UStaticMeshComponent*                        BaseMesh;                                                 // 0x034C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Turret_Station");
		return ptr;
	}


	void OnSetMaterial(class USeqAct_SetMaterial* Action);
	bool Interactive_Activate(class AActor* EventInstigator);
	bool Interactive_IsValidFor(class AActor* A);
	float Interactive_GetMaxInteractiveDist();
	float Interactive_GetMinInteractiveAngle();
	struct FRotator Interactive_GetRotation();
	struct FVector Interactive_GetLocation(const struct FVector& TraceHitLoc);
	class AR_Pawn* GetActivatorPawn(class AActor* Activator);
	class AR_PlayerController* GetActivatorController(class AActor* Activator);
	void SendOutDamageXPOnDeath();
	struct FVector GetHintTestLocation(const struct FVector& TraceHitLoc);
	float GetHintRange();
	TEnumAsByte<EHintType> GetHint(class AR_Pawn* RPawn);
	void UpdateTurretData(int NewTeamIndex);
	void PlayMissileFire();
	void StopLoopingFire();
	void StartLoopingFire();
	void FireAtTarget(class AActor* Target, const struct FVector& TargetLocation);
	void DeactivateFinished();
	void Tick(float DeltaTime);
	void UndeployedState(float DeltaTime);
	void SpawnNewBeams(class AR_Pawn* RPawn);
	void SetBaseRotate(float Yaw);
	void Activate(class AController* EventInstigator);
	bool ValidActivateTeam(int TeamNum);
	void FinishDeactivate();
	void OnDeactivate();
	bool IsActive();
	void Deactivate();
	bool OnActivate();
	void SetLightsOff(float DeltaTime);
	void SetLightsOn(float DeltaTime);
	void BaseTurret();
	void DecreasePowerEnergyUnits(int adjust);
	void InitCustomizedMaterial();
	void PostBeginPlay();
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Weap_Base
// 0x0308 (0x05CC - 0x02C4)
class AR_Weap_Base : public AWeapon
{
public:
	class AActor*                                      ActorInstigator;                                          // 0x02C4(0x0004)
	unsigned long                                      bMirrored : 1;                                            // 0x02C8(0x0004) (Const)
	unsigned long                                      bSpreadDec : 1;                                           // 0x02C8(0x0004)
	unsigned long                                      bUseSpecialRadarLock : 1;                                 // 0x02C8(0x0004)
	unsigned long                                      bUseSpreadRange : 1;                                      // 0x02C8(0x0004) (Const)
	unsigned long                                      bDecreaseSpreadWhileFiring : 1;                           // 0x02C8(0x0004) (Const)
	unsigned long                                      bAlignToSurfaceNormal : 1;                                // 0x02C8(0x0004)
	unsigned long                                      bSkipBeamForReflectShot : 1;                              // 0x02C8(0x0004) (Const)
	unsigned long                                      bLoopMuzzleFlash : 1;                                     // 0x02C8(0x0004) (Const)
	unsigned long                                      bLoopBulletEffect : 1;                                    // 0x02C8(0x0004) (Const)
	unsigned long                                      bLoopAnims : 1;                                           // 0x02C8(0x0004) (Const)
	unsigned long                                      bLoopCameraAnims : 1;                                     // 0x02C8(0x0004) (Const)
	unsigned long                                      bFireToCrosshair : 1;                                     // 0x02C8(0x0004) (Const)
	unsigned long                                      bUseTracerProj : 1;                                       // 0x02C8(0x0004) (Const)
	unsigned long                                      bHasBarrelSwitch : 1;                                     // 0x02C8(0x0004) (Const)
	unsigned long                                      bShowCrosshairInfo : 1;                                   // 0x02C8(0x0004)
	unsigned long                                      bHasLockOnMode : 1;                                       // 0x02C8(0x0004)
	unsigned long                                      bZoomed : 1;                                              // 0x02C8(0x0004)
	unsigned long                                      bSupportsZoom : 1;                                        // 0x02C8(0x0004) (Const)
	unsigned long                                      bUseZoomUI : 1;                                           // 0x02C8(0x0004) (Const)
	unsigned long                                      bServerClientMatchSpread : 1;                             // 0x02C8(0x0004) (Const)
	unsigned long                                      bUsingAimingHelp : 1;                                     // 0x02C8(0x0004)
	unsigned long                                      bRandomFireAnim : 1;                                      // 0x02C8(0x0004)
	unsigned long                                      bPlayFireAnimOnFireAmmunition : 1;                        // 0x02C8(0x0004)
	unsigned long                                      bPlayFiringSound : 1;                                     // 0x02C8(0x0004)
	unsigned long                                      bChargeWeapon : 1;                                        // 0x02C8(0x0004)
	unsigned long                                      bFireOnRelease : 1;                                       // 0x02C8(0x0004)
	unsigned long                                      bRescaleFireAnimToFireRate : 1;                           // 0x02C8(0x0004)
	unsigned long                                      bCantHoldFire : 1;                                        // 0x02C8(0x0004) (Const)
	unsigned long                                      bCantQueueFire : 1;                                       // 0x02C8(0x0004) (Const)
	unsigned long                                      bQueuedFire : 1;                                          // 0x02C8(0x0004)
	unsigned long                                      bBlockedByShield : 1;                                     // 0x02C8(0x0004) (Const)
	unsigned long                                      bHasMaterialInstance : 1;                                 // 0x02C8(0x0004)
	unsigned long                                      bFireDuringWarmup : 1;                                    // 0x02CC(0x0004)
	unsigned long                                      bDualMuzzleFlashes : 1;                                   // 0x02CC(0x0004)
	unsigned long                                      bSkipFracturedOnTrace : 1;                                // 0x02CC(0x0004)
	unsigned long                                      bIsTurret : 1;                                            // 0x02CC(0x0004)
	struct FString                                     DisplayName;                                              // 0x02D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x02DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     tooltipText;                                              // 0x02E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     loreText;                                                 // 0x02F4(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             UpgradeName;                                              // 0x0300(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             UpgradeDescription;                                       // 0x030C(0x000C) (Const, Localized, NeedCtorLink)
	class UTexture2D*                                  WeaponIcon;                                               // 0x0318(0x0004) (Const)
	float                                              RefireRateDefault;                                        // 0x031C(0x0004)
	float                                              SpreadDefault;                                            // 0x0320(0x0004)
	float                                              WeaponRangeDefault;                                       // 0x0324(0x0004)
	float                                              InstantHitDamageDefault;                                  // 0x0328(0x0004)
	float                                              HeatPerShotDefault;                                       // 0x032C(0x0004)
	float                                              AimHelpDistDefault;                                       // 0x0330(0x0004)
	float                                              EffectiveRangeForUI;                                      // 0x0334(0x0004)
	float                                              AccuracyForUI;                                            // 0x0338(0x0004)
	float                                              DamageForUI;                                              // 0x033C(0x0004)
	float                                              RefireRateForUI;                                          // 0x0340(0x0004)
	float                                              HeatForUI;                                                // 0x0344(0x0004)
	float                                              MinHoldTime;                                              // 0x0348(0x0004)
	float                                              MaxHoldTime;                                              // 0x034C(0x0004)
	float                                              ExtraLoadTime;                                            // 0x0350(0x0004)
	float                                              WarmupTime;                                               // 0x0354(0x0004)
	float                                              HeatPerShot;                                              // 0x0358(0x0004)
	float                                              WeapAimHelpDist;                                          // 0x035C(0x0004)
	float                                              SpreadLow;                                                // 0x0360(0x0004)
	float                                              SpreadHigh;                                               // 0x0364(0x0004)
	float                                              SpreadInc;                                                // 0x0368(0x0004)
	float                                              SpreadDecRate;                                            // 0x036C(0x0004)
	float                                              InstantHitDamageFar;                                      // 0x0370(0x0004)
	int                                                FallOffBeginDist;                                         // 0x0374(0x0004)
	int                                                FallOffEndDist;                                           // 0x0378(0x0004)
	float                                              RicochetDistance;                                         // 0x037C(0x0004)
	int                                                upgradeFlags;                                             // 0x0380(0x0004)
	int                                                WeaponHand;                                               // 0x0384(0x0004)
	int                                                ClassIndex;                                               // 0x0388(0x0004)
	struct FString                                     PropSheetName;                                            // 0x038C(0x000C) (Const, NeedCtorLink)
	int                                                PropSheetIdx;                                             // 0x0398(0x0004)
	float                                              MaxImpactEffectDistance;                                  // 0x039C(0x0004)
	TArray<struct FMaterialImpactEffect>               ImpactEffects;                                            // 0x03A0(0x000C) (NeedCtorLink)
	struct FMaterialImpactEffect                       DefaultImpactEffect;                                      // 0x03AC(0x0030) (NeedCtorLink)
	class UParticleSystem*                             MuzzleFlashParticles;                                     // 0x03DC(0x0004) (Const)
	class UParticleSystem*                             MuzzleFlashParticles_TPS;                                 // 0x03E0(0x0004) (Const)
	class UParticleSystem*                             BulletEffect_FPS;                                         // 0x03E4(0x0004) (Const)
	class UParticleSystem*                             BulletEffect_TPS;                                         // 0x03E8(0x0004) (Const)
	class UParticleSystem*                             TraceBeamEffect_FPS;                                      // 0x03EC(0x0004) (Const)
	class UParticleSystem*                             TraceBeamEffect_TPS;                                      // 0x03F0(0x0004) (Const)
	class UParticleSystem*                             TraceBeamEffect_Extra_FPS;                                // 0x03F4(0x0004) (Const)
	class UParticleSystem*                             TraceBeamEffect_Extra_TPS;                                // 0x03F8(0x0004) (Const)
	class UParticleSystem*                             TraceBeamEffect_Winter_FPS;                               // 0x03FC(0x0004) (Const)
	class UParticleSystem*                             TraceBeamEffect_Winter_TPS;                               // 0x0400(0x0004) (Const)
	class UParticleSystem*                             PierceTraceBeamEffect;                                    // 0x0404(0x0004) (Const)
	class UParticleSystem*                             TraceBeamEffectPredatorVision;                            // 0x0408(0x0004) (Const)
	class UParticleSystem*                             ChainBeamFX;                                              // 0x040C(0x0004) (Const)
	class UParticleSystem*                             ChainImpactFX;                                            // 0x0410(0x0004) (Const)
	class USoundCue*                                   ChainImpactSnd;                                           // 0x0414(0x0004) (Const)
	float                                              TraceBeamSpread;                                          // 0x0418(0x0004) (Const)
	int                                                ShotsPerBeam;                                             // 0x041C(0x0004) (Const)
	class UClass*                                      MuzzleFlashLightClass;                                    // 0x0420(0x0004)
	class UClass*                                      BuffedProjectile;                                         // 0x0424(0x0004)
	TArray<float>                                      InRangeForCrosshair;                                      // 0x0428(0x000C) (NeedCtorLink)
	int                                                WeaponMode;                                               // 0x0434(0x0004)
	float                                              ChangeModeTime;                                           // 0x0438(0x0004)
	float                                              ChangeModeTimeDefault;                                    // 0x043C(0x0004)
	TArray<class USoundCue*>                           SwitchToModeSnd;                                          // 0x0440(0x000C) (NeedCtorLink)
	float                                              ZoomedTargetFOV;                                          // 0x044C(0x0004)
	float                                              DefaultTargetFOV;                                         // 0x0450(0x0004)
	float                                              ZoomedRate;                                               // 0x0454(0x0004)
	TEnumAsByte<EBulletImpactType_e>                   BulletImpactType;                                         // 0x0458(0x0001)
	TEnumAsByte<EBulletImpactType_e>                   BulletImpactType_Extra;                                   // 0x0459(0x0001)
	unsigned char                                      ImpactFireMode;                                           // 0x045A(0x0001)
	TEnumAsByte<EDebuffType_e>                         DebuffToApply;                                            // 0x045B(0x0001)
	class USoundCue*                                   WeaponFireSnd;                                            // 0x045C(0x0004)
	class USoundCue*                                   AltWeaponFireSnd;                                         // 0x0460(0x0004)
	class USoundCue*                                   BulletWhipSnd;                                            // 0x0464(0x0004)
	class USoundCue*                                   LoopingFireSnd;                                           // 0x0468(0x0004)
	class USoundCue*                                   AltLoopingFireSnd;                                        // 0x046C(0x0004)
	class USoundCue*                                   EnemyImpactSnd;                                           // 0x0470(0x0004)
	class USoundCue*                                   ZoomInSound;                                              // 0x0474(0x0004)
	class USoundCue*                                   ZoomOutSound;                                             // 0x0478(0x0004)
	float                                              LoopSndFadeOutTime;                                       // 0x047C(0x0004)
	class UForceFeedbackWaveform*                      WeaponFireWaveForm;                                       // 0x0480(0x0004)
	float                                              ProjectileSpawnOffset;                                    // 0x0484(0x0004)
	struct FName                                       FireAnim;                                                 // 0x0488(0x0008)
	struct FName                                       FireAnim2;                                                // 0x0490(0x0008)
	struct FName                                       FireAnim3;                                                // 0x0498(0x0008)
	struct FName                                       FireAltAnim;                                              // 0x04A0(0x0008)
	struct FName                                       StartFireAnim;                                            // 0x04A8(0x0008)
	struct FName                                       StopFireAnim;                                             // 0x04B0(0x0008)
	struct FName                                       StartFireAltAnim;                                         // 0x04B8(0x0008)
	struct FName                                       StopFireAltAnim;                                          // 0x04C0(0x0008)
	struct FName                                       StartChargeAnim;                                          // 0x04C8(0x0008)
	struct FName                                       ChargeIdleAnim;                                           // 0x04D0(0x0008)
	struct FName                                       BeginAltModeAnim;                                         // 0x04D8(0x0008)
	struct FName                                       EndAltModeAnim;                                           // 0x04E0(0x0008)
	struct FName                                       LockAnim;                                                 // 0x04E8(0x0008)
	struct FName                                       ArmRecoilAnim;                                            // 0x04F0(0x0008)
	struct FName                                       ArmStartAnim;                                             // 0x04F8(0x0008)
	struct FName                                       ArmStopAnim;                                              // 0x0500(0x0008)
	struct FName                                       ArmModeSwitchAnim;                                        // 0x0508(0x0008)
	struct FName                                       AnimNameForPlayRate;                                      // 0x0510(0x0008)
	class UCameraAnim*                                 OnFireCameraAnim;                                         // 0x0518(0x0004)
	class UCameraAnim*                                 OnFireAltCameraAnim;                                      // 0x051C(0x0004)
	class UCameraAnim*                                 OnFireEndCameraAnim;                                      // 0x0520(0x0004)
	class UCameraAnim*                                 OnFireEndAltCameraAnim;                                   // 0x0524(0x0004)
	float                                              OnFireCameraAnimScale;                                    // 0x0528(0x0004)
	float                                              OnFireCameraAnimBlendInTime;                              // 0x052C(0x0004)
	float                                              FireAnimScale;                                            // 0x0530(0x0004)
	float                                              ShieldDamageMultiplier;                                   // 0x0534(0x0004)
	float                                              MinAdjustmentTraceDist;                                   // 0x0538(0x0004) (Const)
	class AR_Weap_DualWield*                           DualWeapon;                                               // 0x053C(0x0004) (Net)
	class UAnimTree*                                   WeapAnimTree;                                             // 0x0540(0x0004)
	class UAnimSet*                                    WeapAnimSet3rd;                                           // 0x0544(0x0004)
	class UAnimSet*                                    WeapAnimSetFP;                                            // 0x0548(0x0004)
	class USkeletalMesh*                               WeapMesh3rd;                                              // 0x054C(0x0004)
	class USkeletalMesh*                               WeapMeshFP;                                               // 0x0550(0x0004)
	class USkeletalMesh*                               WeapMesh3rd_Winter;                                       // 0x0554(0x0004)
	class USkeletalMesh*                               WeapMeshFP_Winter;                                        // 0x0558(0x0004)
	class UMaterialInstanceConstant*                   WeapMesh3rd_MIC;                                          // 0x055C(0x0004)
	class UMaterialInstanceConstant*                   WeapMeshFP_MIC;                                           // 0x0560(0x0004)
	class UClass*                                      WeapAttachmentClass;                                      // 0x0564(0x0004)
	int                                                SectionIdx_FPS;                                           // 0x0568(0x0004)
	int                                                SectionIdx_TPS;                                           // 0x056C(0x0004)
	float                                              RescaleTPS;                                               // 0x0570(0x0004)
	float                                              RescaleFPS;                                               // 0x0574(0x0004)
	float                                              BeltRunTime;                                              // 0x0578(0x0004)
	float                                              PierceTraceDist;                                          // 0x057C(0x0004)
	float                                              DebuffDuration;                                           // 0x0580(0x0004)
	float                                              debuffAmount;                                             // 0x0584(0x0004)
	struct FName                                       WeaponTrackingName;                                       // 0x0588(0x0008) (Const)
	TArray<struct FString>                             ValidPropNameList;                                        // 0x0590(0x000C) (NeedCtorLink)
	int                                                AimAssistForDeathStreak[0x5];                             // 0x059C(0x0004)
	class UClass*                                      AIWeaponUsagePluginClass;                                 // 0x05B0(0x0004)
	class UHawkenPawnPluginWeapon*                     WeaponUsagePlugin;                                        // 0x05B4(0x0004) (Transient)
	float                                              MaxAngleErrorAllowedToFireInDegrees;                      // 0x05B8(0x0004)
	float                                              MinDotErrorAllowedToFire;                                 // 0x05BC(0x0004)
	float                                              MaxAngleErrorAllowedToFireInDegreesDefault;               // 0x05C0(0x0004)
	int                                                ServerFireCount;                                          // 0x05C4(0x0004) (Net, Transient)
	int                                                ClientFireCount;                                          // 0x05C8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Base");
		return ptr;
	}


	void OnAbilityActivated();
	void OnOverheat();
	void ModeSwitch();
	void ServerSwitchModes(int NewWeaponMode);
	void DoModeSwitch(int NewWeaponMode);
	class AProjectile* ProjectileFire();
	class UClass* GetProjectileClass();
	struct FVector GetPhysicalFireStartLoc(const struct FVector& AimDir);
	void BroadcastImpact(float Damage, class UClass* DamageType, class AProjectile* ProjectCauser, struct FImpactInfo* Impact, struct FVector* StartLoc);
	void ProcessInstantHitAdjusted(unsigned char FiringMode, const struct FImpactInfo& Impact, const struct FVector& StartLoc, int NumHits);
	float AdjustInstantHitDamage(float Distance, bool HitPawn);
	void InstantFireFrom(const struct FVector& StartTrace, const struct FVector& EndTrace, bool bSetFlashLocation, struct FImpactInfo* impInfo);
	void ProcessImpactList(const struct FVector& StartTrace, TArray<struct FImpactInfo>* ImpactList);
	void InstantFire();
	struct FImpactInfo InstantAimHelp(const struct FVector& StartTrace, const struct FVector& EndTrace, const struct FImpactInfo& RealImpact, class APawn* ShotTarget);
	int CalcAimAssist(bool bLog);
	float STATIC_GetPlayerAssistAimHelp(int DeathStreak, int GlickoRating, bool bLog);
	void STATIC_OnBeamSpawn(class UParticleSystemComponent* PSC, unsigned char FireType);
	struct FImpactInfo CalcWeaponFire(const struct FVector& StartTrace, const struct FVector& EndTrace, const struct FVector& Extent, TArray<struct FImpactInfo>* ImpactList);
	class AActor* GetTraceOwner();
	bool TracePassThrough(const struct FImpactInfo& Impact, bool bForLockOn, const struct FVector& StartTrace);
	bool PassThroughDamage(class AActor* HitActor);
	void PlayFiringSound();
	void WeaponPlaySound(class USoundCue* SoundToPlay, bool bNoRepToOwner);
	void EndZoom(class AR_PlayerController* PC);
	void UpdateZoomState(bool newZoomState);
	void SetFOVZoomed(class AR_PlayerController* PC, float NewFOV, bool bZoomedState);
	void StartZoom(class AR_PlayerController* PC);
	void EndAltFire();
	void BeginAltFire();
	void OnSetZoom(bool ZoomMode);
	void ServerSetZoom(bool ZoomMode);
	void OnStopRefire();
	void PlayFireAnimation();
	void StopFiringAnimation();
	void StartFiringAnimation();
	void DrawHUD(class AHUD* HUD, int Side, float TimerCount, float CooldownTimerCount);
	void STATIC_StopWeaponAnimationMesh(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap);
	struct FName STATIC_GetCurrentWeaponAnimationMesh(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap);
	void STATIC_PlaySpecialWeaponFire(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int BarrelSwitch, bool bPlaySound);
	void STATIC_PlayWeaponAnimationMesh(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, const struct FName& AnimName, float fRateScale, bool bLoop, int BarrelSwitch, int FireWeaponMode, bool bPlaySound);
	void STATIC_UpdateWeaponAnimationPlayRate(class USkeletalMeshComponent* WeapMesh, float fRateScale);
	void STATIC_StopWeaponAnims(class USkeletalMeshComponent* WeapMesh);
	void STATIC_StartWeaponAnimByIndex(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int Index, bool bPlaySound);
	void STATIC_PlayChainEffect(class AActor* SrcActor, class AActor* DstActor);
	bool IsAltFireAnim();
	void OnServerFireClientMisfire();
	void ClientSyncUpFireCount();
	void IncrementFireCount();
	void FireAmmunition();
	struct FRotator GetAdjustedAimSpreadOptional(const struct FVector& StartFireLoc, bool bAddSpread);
	struct FVector InstantFireEndTrace(const struct FVector& StartTrace, bool bAddSpread);
	struct FVector InstantFireStartTrace();
	void OnForceEndFire();
	void StartCooldownTimer();
	bool CanFireCharge(float TimerCount);
	void DoEndFire(bool ForceEnd);
	void StartSpreadDec();
	void StartRefireTimer();
	void StartLoadProjectileTimer();
	void WarmupTimer();
	float GetCooldownTime();
	void CooldownTimer();
	struct FRotator AddSpread(const struct FRotator& BaseAim);
	float GetWeaponSpread();
	float GetAdjustedSpread(float InSpread);
	struct FVector FixupThirdPersonAiming(const struct FVector& AimStart, const struct FVector& EndTrace, bool bAddSpread);
	void RefireCheckTimer();
	int STATIC_GetDamageType();
	float STATIC_GetHeatForUI();
	float STATIC_GetRefireRateForUI();
	float STATIC_GetDamageForUI();
	float STATIC_GetAccuracyForUI();
	float STATIC_GetEffectiveRangeForUI();
	float STATIC_GetSpreadProp();
	float GetFireInterval(unsigned char FireModeNum);
	void DoBeginFire();
	void BeginFire(unsigned char FireModeNum);
	void LoadedFire(float TimerCount);
	bool HasRecentlyFired();
	class AActor* GetLockOnTarget();
	bool IsStartingLockOn();
	bool IsLockedOn();
	bool IsLockingOn(float* Percent);
	float GetDamageMultiplierForZoom();
	void SetPosition(class AUDKPawn* Holder);
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewUpgradeFlags);
	void SetNewUpgradeFlags(int NewUpgradeFlags);
	bool IsWeaponInCoolDownState();
	void ApplyDebuff(class AR_PawnNative* Pawn);
	void UpdateWeaponSettings();
	void PrepareUsagePlugin(class AR_PawnNative* ForInstigator, int Hand);
	void PreBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Weap_Homing_Base
// 0x0044 (0x0610 - 0x05CC)
class AR_Weap_Homing_Base : public AR_Weap_Base
{
public:
	unsigned long                                      bLockOnBeforeFire : 1;                                    // 0x05CC(0x0004) (Const)
	unsigned long                                      bMiddleClickLockOn : 1;                                   // 0x05CC(0x0004) (Const)
	unsigned long                                      bStartLockOnMode : 1;                                     // 0x05CC(0x0004)
	float                                              FudgeLockonTime;                                          // 0x05D0(0x0004) (Const)
	class AActor*                                      LockOnTarget;                                             // 0x05D4(0x0004)
	float                                              LockOnSeconds;                                            // 0x05D8(0x0004)
	float                                              MaxTimeToStartLock;                                       // 0x05DC(0x0004)
	float                                              LockOnTimeRequired;                                       // 0x05E0(0x0004)
	float                                              TimeToLoseLockOn;                                         // 0x05E4(0x0004)
	float                                              LockonDegrees;                                            // 0x05E8(0x0004)
	float                                              KeepLockonDegrees;                                        // 0x05EC(0x0004)
	float                                              TargetRadiusLock;                                         // 0x05F0(0x0004)
	float                                              TargetRadiusNoLock;                                       // 0x05F4(0x0004)
	int                                                NumProjPerShot;                                           // 0x05F8(0x0004)
	float                                              ProjInterval;                                             // 0x05FC(0x0004)
	int                                                NumProjFired;                                             // 0x0600(0x0004)
	class APawn*                                       NearLockOnTarget;                                         // 0x0604(0x0004) (Net)
	class USoundCue*                                   StartLockingOnSound;                                      // 0x0608(0x0004) (Const)
	class USoundCue*                                   LockedOnSound;                                            // 0x060C(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Homing_Base");
		return ptr;
	}


	void FireAmmunition();
	struct FVector GetHomingLocation();
	void EndLockOn(const struct FString& Reason);
	void LoseLockonTimer();
	void UpdateLockonTarget(float DeltaTime);
	void PlayFoundLockSound();
	void MaintainLockonTarget(float DeltaTime);
	void AcquireLockonTarget();
	void Tick(float DeltaTime);
	bool ValidLockonTarget(class AActor* A);
	void NotifyLockonTarget(bool bLockedOn);
	void ClientEndLockOn();
	void ServerSetLockOn(class AActor* NewLockOnTarget);
	float GetLockOnTimeRequired();
	bool IsLockedOn();
	bool IsLockingOn(float* Percent);
	bool IsStartingLockOn();
	class AActor* GetLockOnTarget();
	void SetLockonTarget(class AActor* P);
	void OnFindLockEnd();
	void OnFindLockStart();
	void ServerStartLockon();
	void BeginAltFire();
	void EndZoom(class AR_PlayerController* PC);
	void StartZoom(class AR_PlayerController* PC);
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Weap_MissileLauncher
// 0x000C (0x05D8 - 0x05CC)
class AR_Weap_MissileLauncher : public AR_Weap_Base
{
public:
	class AR_Projectile*                               LastShot;                                                 // 0x05CC(0x0004) (Net)
	float                                              TimeSinceLastFire;                                        // 0x05D0(0x0004)
	class UHawkenPawnPluginWeapon_MissileAI*           WeaponUsagePlugin_MissileAi;                              // 0x05D4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_MissileLauncher");
		return ptr;
	}


	class AProjectile* ProjectileFire();
	void EndAltFire();
	void Tick(float DeltaTime);
	void ServerDetonateShot(class AR_Projectile* TheShot);
	void FireAmmunition();
	void TryDetonateShot(bool bFireButton);
	void BeginFire(unsigned char FireModeNum);
	void BeginAltFire();
};


// Class HawkenGame.SoundNodePOV
// 0x000C (0x0058 - 0x004C)
class USoundNodePOV : public USoundNode
{
public:
	unsigned long                                      bPreviewThirdPerson : 1;                                  // 0x004C(0x0004) (Edit, Transient)
	unsigned long                                      bOverridePreviewThirdPerson : 1;                          // 0x004C(0x0004) (Transient)
	float                                              InputVolume[0x2];                                         // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SoundNodePOV");
		return ptr;
	}

};


// Class HawkenGame.ActivationHintProvider
// 0x0000 (0x003C - 0x003C)
class UActivationHintProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.ActivationHintProvider");
		return ptr;
	}


	struct FVector GetHintTestLocation(const struct FVector& TraceHitLoc);
	float GetHintRange();
	TEnumAsByte<EHintType> GetHint(class AR_Pawn* HUDOwnerPawn);
};


// Class HawkenGame.R_Pawn
// 0x0A10 (0x1990 - 0x0F80)
class AR_Pawn : public AR_PawnNative
{
public:
	TArray<struct FSMoveStateTracking>                 MoveStateStats;                                           // 0x0F80(0x000C) (NeedCtorLink)
	unsigned long                                      bOverrideDeathCamFocusLoc : 1;                            // 0x0F8C(0x0004) (Transient)
	unsigned long                                      bWasHit : 1;                                              // 0x0F8C(0x0004)
	unsigned long                                      bCancelDraining : 1;                                      // 0x0F8C(0x0004)
	unsigned long                                      bSetupFromPRI : 1;                                        // 0x0F8C(0x0004)
	unsigned long                                      bTurnSpeedInfo : 1;                                       // 0x0F8C(0x0004)
	unsigned long                                      bBoostMomentum : 1;                                       // 0x0F8C(0x0004)
	unsigned long                                      bCombineMoves : 1;                                        // 0x0F8C(0x0004)
	unsigned long                                      bReplayingMoves : 1;                                      // 0x0F8C(0x0004)
	unsigned long                                      bReplayAnimStartMoving : 1;                               // 0x0F8C(0x0004) (Const)
	unsigned long                                      bForceClientAdjust : 1;                                   // 0x0F8C(0x0004)
	unsigned long                                      bHeavyAttackBoostOn : 1;                                  // 0x0F8C(0x0004)
	unsigned long                                      bShowCockpitCracks : 1;                                   // 0x0F8C(0x0004)
	unsigned long                                      bAllowCockpitCracks : 1;                                  // 0x0F8C(0x0004)
	unsigned long                                      bBoostersOn : 1;                                          // 0x0F8C(0x0004)
	unsigned long                                      IsHeavyMode : 1;                                          // 0x0F8C(0x0004) (Net)
	unsigned long                                      WeapLoopingPrimarySound : 1;                              // 0x0F8C(0x0004) (Net)
	unsigned long                                      WeapLoopingPrimaryAnim : 1;                               // 0x0F8C(0x0004) (Net)
	unsigned long                                      WeapLoopingSecondarySound : 1;                            // 0x0F8C(0x0004) (Net)
	unsigned long                                      WeapLoopingSecondaryAnim : 1;                             // 0x0F8C(0x0004) (Net)
	unsigned long                                      bSetUITextureDone : 1;                                    // 0x0F8C(0x0004)
	unsigned long                                      bAllowFlyTrails : 1;                                      // 0x0F8C(0x0004)
	unsigned long                                      bMuzzleFlashAttached : 1;                                 // 0x0F8C(0x0004)
	unsigned long                                      bSwapWeaponSides : 1;                                     // 0x0F8C(0x0004) (Edit)
	unsigned long                                      bNoBoostKnockBack : 1;                                    // 0x0F8C(0x0004)
	unsigned long                                      bWallHitSparks : 1;                                       // 0x0F8C(0x0004)
	unsigned long                                      bInAltitudeVolume : 1;                                    // 0x0F8C(0x0004)
	unsigned long                                      bCockpitTurning : 1;                                      // 0x0F8C(0x0004)
	unsigned long                                      IsCockpitRotating : 1;                                    // 0x0F8C(0x0004)
	unsigned long                                      bPlayingTurningSound : 1;                                 // 0x0F8C(0x0004)
	unsigned long                                      bForceUpdateBobbles : 1;                                  // 0x0F8C(0x0004)
	unsigned long                                      bExplodeOnDeath : 1;                                      // 0x0F8C(0x0004)
	unsigned long                                      bAffectedByCooling : 1;                                   // 0x0F8C(0x0004) (Net, Transient)
	unsigned long                                      bGatheringHeat : 1;                                       // 0x0F90(0x0004) (Net, Transient)
	unsigned long                                      bAffectedByExtinguisher : 1;                              // 0x0F90(0x0004) (Net, Transient)
	unsigned long                                      bMoonMode : 1;                                            // 0x0F90(0x0004)
	unsigned long                                      bSpentTimeAtCriticalHealthForKill : 1;                    // 0x0F90(0x0004)
	unsigned long                                      bSpentTimeAtCriticalHealthForHeal : 1;                    // 0x0F90(0x0004)
	unsigned long                                      bIsCoopBoss : 1;                                          // 0x0F90(0x0004) (Net)
	unsigned long                                      bPlayCoopSpawnEffects : 1;                                // 0x0F90(0x0004) (Net)
	unsigned long                                      bImmuneToEmp : 1;                                         // 0x0F90(0x0004) (Net)
	unsigned long                                      bClientMechSetupCompleted : 1;                            // 0x0F90(0x0004)
	class AR_Pawn*                                     DeathCamFocusPawn;                                        // 0x0F94(0x0004) (Transient)
	struct FName                                       DeathCamFocusBoneName;                                    // 0x0F98(0x0008) (Transient)
	class AR_Pawn*                                     KilledByPawn;                                             // 0x0FA0(0x0004) (Net)
	struct FTakeDamageEvent                            DamageEventArray[0x4];                                    // 0x0FA4(0x0014)
	float                                              MinDamageForFX;                                           // 0x0FF4(0x0004) (Const)
	class AR_WeapAttach_Base*                          CurrentWeaponAttachment[0x2];                             // 0x0FF8(0x0004)
	TArray<class AR_Pickup*>                           OwnedPickups;                                             // 0x1000(0x000C) (NeedCtorLink)
	unsigned char                                      MechSetupID;                                              // 0x100C(0x0001)
	unsigned char                                      MechType;                                                 // 0x100D(0x0001)
	unsigned char                                      MechSubType;                                              // 0x100E(0x0001)
	TEnumAsByte<EHintType>                             ShowHint;                                                 // 0x100F(0x0001)
	TEnumAsByte<EItemMonitorState_e>                   MonitorState[0x3];                                        // 0x1010(0x0001)
	TEnumAsByte<ERobotMoveState>                       RemoteMoveState;                                          // 0x1013(0x0001) (Net)
	unsigned char                                      FlashCountPrimary;                                        // 0x1014(0x0001) (Net)
	unsigned char                                      FlashCountSecondary;                                      // 0x1015(0x0001) (Net)
	unsigned char                                      NumPlayersGatheringHeatFrom;                              // 0x1016(0x0001) (Net, Transient)
	unsigned char                                      NetworkAnimIndex;                                         // 0x1017(0x0001) (Net)
	unsigned char                                      SecondaryWeapAnim;                                        // 0x1018(0x0001) (Net)
	unsigned char                                      PrimaryWeapAnim;                                          // 0x1019(0x0001) (Net)
	unsigned char                                      PrimaryWeaponAnim2;                                       // 0x101A(0x0001) (Net)
	unsigned char                                      RepLoopingFireAnimRate;                                   // 0x101B(0x0001) (Net)
	unsigned char                                      RepLoopingFireSoundRate;                                  // 0x101C(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x101D(0x0003) MISSED OFFSET
	int                                                LastTimeSeconds;                                          // 0x1020(0x0004)
	int                                                LastRot;                                                  // 0x1024(0x0004)
	float                                              InitialThrusterJumpHeight;                                // 0x1028(0x0004)
	float                                              HighestThrusterJumpHeight;                                // 0x102C(0x0004)
	float                                              InitialThrusterJumpTime;                                  // 0x1030(0x0004)
	float                                              BoostForwardSpeed;                                        // 0x1034(0x0004)
	float                                              RunSpeed;                                                 // 0x1038(0x0004)
	float                                              HealRate;                                                 // 0x103C(0x0004)
	float                                              HealStartupTime;                                          // 0x1040(0x0004)
	float                                              HealedAmount;                                             // 0x1044(0x0004)
	int                                                bHealEffectActive;                                        // 0x1048(0x0004)
	float                                              DamageMultiplier[0x3];                                    // 0x104C(0x0004)
	float                                              DamageMultiplierReduction[0x3];                           // 0x1058(0x0004)
	float                                              ExplosiveRadiusMultiplier;                                // 0x1064(0x0004)
	class UUDKSkeletalMeshComponent*                   FirstPersonWeaponMesh[0x2];                               // 0x1068(0x0004) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        CockpitCracksMesh;                                        // 0x1070(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMesh*                               SpecialAbilityHologramMesh;                               // 0x1074(0x0004)
	class USkeletalMeshComponent*                      ThirdPersonWeaponMesh[0x4];                               // 0x1078(0x0004) (ExportObject, Component, EditInline)
	class UUDKSkeletalMeshComponent*                   SpecialAbilityHologramComp;                               // 0x1088(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      DroneMesh;                                                // 0x108C(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    HealDroneEffect[0xB];                                     // 0x1090(0x0004) (ExportObject, Component, EditInline)
	struct FVector                                     HealDroneTranslation;                                     // 0x10BC(0x000C)
	TArray<struct FDeathAssistPlayerInfo>              DeathAssistInfo;                                          // 0x10C8(0x000C) (NeedCtorLink)
	int                                                KillerHealthAtTimeOfDeath;                                // 0x10D4(0x0004)
	int                                                FPSSlot;                                                  // 0x10D8(0x0004)
	float                                              MaxLandDelay;                                             // 0x10DC(0x0004)
	float                                              MaxLandVelocity;                                          // 0x10E0(0x0004)
	float                                              NoStickLandVelocity;                                      // 0x10E4(0x0004)
	float                                              HeavyModeFrontRadiusDamageReductionMultiplier;            // 0x10E8(0x0004)
	float                                              HeavyModeFrontOtherDamageReductionMultiplier;             // 0x10EC(0x0004)
	float                                              HeavyModeRearRadiusDamageReductionMultiplier;             // 0x10F0(0x0004)
	float                                              HeavyModeRearOtherDamageReductionMultiplier;              // 0x10F4(0x0004)
	class UMaterial*                                   CamoMaterial;                                             // 0x10F8(0x0004)
	int                                                curLoopingMoveSound;                                      // 0x10FC(0x0004)
	class UAudioComponent*                             LoopMovingSndComp[0x2];                                   // 0x1100(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             LoopTurningSndComp;                                       // 0x1108(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             LoopFireSndComp[0x2];                                     // 0x110C(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             WallScrapeSndComp;                                        // 0x1114(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             CockpitAmbientSndComp;                                    // 0x1118(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             SirenSndComp;                                             // 0x111C(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             ItemDebuffSndComp;                                        // 0x1120(0x0004) (ExportObject, Component, EditInline)
	class AR_Item_Base*                                Items[0x3];                                               // 0x1124(0x0004) (Net)
	class AR_Consumable_Base*                          ConsumablePassive;                                        // 0x1130(0x0004) (Net)
	class AApexAttractorActor*                         EnergyAttractorActor;                                     // 0x1134(0x0004)
	class AApexAttractorActor*                         HealthAttractorActor;                                     // 0x1138(0x0004)
	struct FName                                       EnergySocket;                                             // 0x113C(0x0008)
	class UApexJetComponent*                           PawnJetComp;                                              // 0x1144(0x0004) (ExportObject, Component, EditInline)
	class AApexJetActor*                               PawnJetActor;                                             // 0x1148(0x0004)
	class UApexJetComponent*                           DeathJetComp;                                             // 0x114C(0x0004) (ExportObject, Component, EditInline)
	class AApexEffect*                                 DeathTurbulenceEffect;                                    // 0x1150(0x0004)
	class UParticleSystem*                             CockpitSparkEffect;                                       // 0x1154(0x0004)
	float                                              LandShakeScale;                                           // 0x1158(0x0004)
	float                                              LandVelocity;                                             // 0x115C(0x0004) (Net)
	float                                              NextLandEffectTime;                                       // 0x1160(0x0004)
	float                                              LandEffectTimeout;                                        // 0x1164(0x0004) (Const)
	float                                              NextBoostSpinEffectTime;                                  // 0x1168(0x0004)
	float                                              BoostSpinEffectTimeout;                                   // 0x116C(0x0004) (Const)
	struct FMaterialImpactEffect                       SparkImpactEffect;                                        // 0x1170(0x0030) (NeedCtorLink)
	struct FMaterialImpactEffect                       EngineImpactEffect;                                       // 0x11A0(0x0030) (NeedCtorLink)
	class UParticleSystem*                             MechActualHitEffect;                                      // 0x11D0(0x0004)
	class UParticleSystem*                             MechTakeHitEffect;                                        // 0x11D4(0x0004)
	float                                              LastDamageEffectTime;                                     // 0x11D8(0x0004)
	float                                              LastDamageAnimTime;                                       // 0x11DC(0x0004)
	float                                              LastDamageSoundTime;                                      // 0x11E0(0x0004)
	float                                              LastDamageTimeServer;                                     // 0x11E4(0x0004)
	int                                                BeamEffectCount[0x2];                                     // 0x11E8(0x0004)
	int                                                LastBeamEffectTime[0x2];                                  // 0x11F0(0x0004)
	int                                                BarrelSwitchPrimary;                                      // 0x11F8(0x0004)
	float                                              BumpCooldownTime;                                         // 0x11FC(0x0004)
	float                                              CrushKillOtherDamage;                                     // 0x1200(0x0004)
	float                                              MinCrushDamage;                                           // 0x1204(0x0004)
	TArray<class AActor*>                              BumpedActors;                                             // 0x1208(0x000C) (Transient, NeedCtorLink)
	class UParticleSystem*                             BumpMapEdgeEffect;                                        // 0x1214(0x0004)
	float                                              FP_FOV_Overload;                                          // 0x1218(0x0004)
	class UMaterialInstanceConstant*                   WindshieldMIC;                                            // 0x121C(0x0004)
	class UMaterialInstanceConstant*                   CracksMIC;                                                // 0x1220(0x0004)
	class UMaterialInstanceConstant*                   DroneMIC;                                                 // 0x1224(0x0004)
	class UMaterialInstanceConstant*                   DestroyedMeshMIC[0x2];                                    // 0x1228(0x0004)
	class UParticleSystemComponent*                    DeathBurningEffect;                                       // 0x1230(0x0004) (ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   FriendSpecialAbilityHologramMIC;                          // 0x1234(0x0004) (Const)
	class UMaterialInstanceConstant*                   FoeSpecialAbilityHologramMIC;                             // 0x1238(0x0004) (Const)
	float                                              PushMaxVelocity;                                          // 0x123C(0x0004)
	float                                              PushMultiplier;                                           // 0x1240(0x0004)
	float                                              PushSpinMultiplier;                                       // 0x1244(0x0004)
	float                                              PushSpinMin;                                              // 0x1248(0x0004)
	float                                              PushSpinMax;                                              // 0x124C(0x0004)
	class APawn*                                       LastCrushPawn;                                            // 0x1250(0x0004)
	float                                              LastCrushSeconds;                                         // 0x1254(0x0004)
	float                                              StoredRotationYaw;                                        // 0x1258(0x0004)
	float                                              StoredRotationMax;                                        // 0x125C(0x0004)
	float                                              StoredRotationDecayRate;                                  // 0x1260(0x0004)
	float                                              CurrentRotationRate;                                      // 0x1264(0x0004)
	float                                              LastRotationRate[0x5];                                    // 0x1268(0x0004)
	class UR_NPC_Template*                             MechTemplate;                                             // 0x127C(0x0004)
	struct FDroneType                                  CurrentDroneType;                                         // 0x1280(0x00AC)
	struct FString                                     BotMechSubtypeName;                                       // 0x132C(0x000C) (Net, NeedCtorLink)
	struct FString                                     CustomHint;                                               // 0x1338(0x000C) (NeedCtorLink)
	int                                                WeaponFireTracking[0x2];                                  // 0x1344(0x0004)
	int                                                WeaponHitTracking[0x2];                                   // 0x134C(0x0004)
	class UParticleSystemComponent*                    LevelEffect;                                              // 0x1354(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    WallScrapeEffect;                                         // 0x1358(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             ThrusterEffect;                                           // 0x135C(0x0004)
	class UParticleSystemComponent*                    ThrusterEffect_L;                                         // 0x1360(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    ThrusterEffect_R;                                         // 0x1364(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             FlyTrailEffect;                                           // 0x1368(0x0004)
	class UParticleSystemComponent*                    FlyTrailEffect_L;                                         // 0x136C(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    FlyTrailEffect_R;                                         // 0x1370(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    BoostGroundEffectComp;                                    // 0x1374(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             MechDamagedEffects[0x4];                                  // 0x1378(0x0004)
	struct FName                                       MechDamagedSockets[0x4];                                  // 0x1388(0x0008)
	class UParticleSystemComponent*                    MechDamaged_PSC[0x3];                                     // 0x13A8(0x0004) (ExportObject, Component, EditInline)
	int                                                FirstSocket;                                              // 0x13B4(0x0004)
	struct FStatusFX                                   DebuffFX;                                                 // 0x13B8(0x0040) (Component)
	struct FStatusFX                                   EMPFX;                                                    // 0x13F8(0x0040) (Component)
	struct FStatusFX                                   BigDamageFX;                                              // 0x1438(0x0040) (Component)
	struct FStatusFX                                   LeftDamageFX;                                             // 0x1478(0x0040) (Component)
	struct FStatusFX                                   RightDamageFX;                                            // 0x14B8(0x0040) (Component)
	struct FStatusFX                                   HeatDebuffFX;                                             // 0x14F8(0x0040) (Component)
	class UUDKParticleSystemComponent*                 MuzzleFlash_1L;                                           // 0x1538(0x0004) (ExportObject, Component, EditInline)
	class UUDKParticleSystemComponent*                 MuzzleFlash_3L;                                           // 0x153C(0x0004) (ExportObject, Component, EditInline)
	class UUDKParticleSystemComponent*                 BulletFX_3R;                                              // 0x1540(0x0004) (ExportObject, Component, EditInline)
	class UUDKParticleSystemComponent*                 BulletFX_1R;                                              // 0x1544(0x0004) (ExportObject, Component, EditInline)
	class UUDKParticleSystemComponent*                 BulletFX_3L;                                              // 0x1548(0x0004) (ExportObject, Component, EditInline)
	class UUDKParticleSystemComponent*                 BulletFX_1L;                                              // 0x154C(0x0004) (ExportObject, Component, EditInline)
	int                                                ToggleFlash;                                              // 0x1550(0x0004)
	class UUDKExplosionLight*                          MuzzleFlashLightSecondary;                                // 0x1554(0x0004) (ExportObject, Component, EditInline)
	class UUDKExplosionLight*                          MuzzleFlashLightPrimary;                                  // 0x1558(0x0004) (ExportObject, Component, EditInline)
	class UAnimNodeSlot*                               ThrustAnimSlot;                                           // 0x155C(0x0004) (EditConst)
	class UAnimNodeSlot*                               AnimSlotFPS_CP;                                           // 0x1560(0x0004) (EditConst)
	class UAnimNodeSlot*                               AnimSlotFPS_FPM;                                          // 0x1564(0x0004) (EditConst)
	class UAnimNodeSlot*                               AnimSlotFPS2_CP;                                          // 0x1568(0x0004) (EditConst)
	class UAnimNodeSlot*                               AnimSlotFPS2_FPM;                                         // 0x156C(0x0004) (EditConst)
	class UAnimNodeMirror*                             MirrorAnimNode;                                           // 0x1570(0x0004) (EditConst)
	class UAnimNodeBlendByProperty*                    HealPropertyBlend;                                        // 0x1574(0x0004) (EditConst)
	class UAnimNodeBlendByProperty*                    IdlePropertyBlend;                                        // 0x1578(0x0004) (EditConst)
	class UAnimNodeBlendByProperty*                    BoostFireActivePropertyBlend;                             // 0x157C(0x0004) (EditConst)
	class UAnimNodeBlendByProperty*                    BoostFireActivePropertyBlend_FPM;                         // 0x1580(0x0004) (EditConst)
	class UAnimNodeBlendByProperty*                    IsHeavyModePropertyBlend;                                 // 0x1584(0x0004) (EditConst)
	class UAnimNodeAdditiveBlending*                   DamageBlendNode;                                          // 0x1588(0x0004) (EditConst)
	class UAnimNodeSequence*                           DamageBlendAnim;                                          // 0x158C(0x0004) (EditConst)
	class UAnimNodeAdditiveBlending*                   OverheatBlendNode;                                        // 0x1590(0x0004) (EditConst)
	class UAnimNodeAdditiveBlending*                   OverheatBlendNode_TPM;                                    // 0x1594(0x0004) (EditConst)
	class UAnimNodeSequence*                           OverheatBlendAnim;                                        // 0x1598(0x0004) (EditConst)
	class UAnimNodeSequence*                           OverheatBlendAnim_TPM;                                    // 0x159C(0x0004) (EditConst)
	class UAnimNodeAdditiveBlending*                   MonitorBlendNode[0x3];                                    // 0x15A0(0x0004) (EditConst)
	class UAnimNodeSequence*                           MonitorBlendAnim[0x3];                                    // 0x15AC(0x0004) (EditConst)
	class UAnimNodeAdditiveBlending*                   LeftFireBlendNode;                                        // 0x15B8(0x0004) (EditConst)
	class UAnimNodeAdditiveBlending*                   RightFireBlendNode;                                       // 0x15BC(0x0004) (EditConst)
	class UAnimNodeSequence*                           LeftFireBlendAnim;                                        // 0x15C0(0x0004) (EditConst)
	class UAnimNodeSequence*                           RightFireBlendAnim;                                       // 0x15C4(0x0004) (EditConst)
	class UAnimNodeSequence*                           WalkFPS_CP;                                               // 0x15C8(0x0004) (EditConst)
	class UAnimNodeSequence*                           RunFPS_CP;                                                // 0x15CC(0x0004) (EditConst)
	class UAnimNodeSequence*                           WalkFPS_FPM;                                              // 0x15D0(0x0004) (EditConst)
	class UAnimNodeSequence*                           RunFPS_FPM;                                               // 0x15D4(0x0004) (EditConst)
	class UAnimNodeSequence*                           Walk_TPM;                                                 // 0x15D8(0x0004) (EditConst)
	class UAnimNodeSequence*                           Run_TPM;                                                  // 0x15DC(0x0004) (EditConst)
	class UAnimNodeSequence*                           WalkB_TPM;                                                // 0x15E0(0x0004) (EditConst)
	class UAnimNodeSequence*                           RunB_TPM;                                                 // 0x15E4(0x0004) (EditConst)
	class UAnimNodeSequence*                           HealAnim_Drone;                                           // 0x15E8(0x0004) (EditConst)
	class UAnimNodeSlot*                               ThrusterAnimSlot_L;                                       // 0x15EC(0x0004)
	class UAnimNodeSlot*                               ThrusterAnimSlot_R;                                       // 0x15F0(0x0004)
	class UAnimNodeSlot*                               SpecialAbilitySlot;                                       // 0x15F4(0x0004)
	class UCameraAnim*                                 CamAnim_JumpShake;                                        // 0x15F8(0x0004)
	class UCameraAnim*                                 CamAnim_JumpIdleShake;                                    // 0x15FC(0x0004)
	class UCameraAnim*                                 CamAnim_LandShake;                                        // 0x1600(0x0004)
	class UCameraAnim*                                 CamAnim_BoostShakeR;                                      // 0x1604(0x0004)
	class UCameraAnim*                                 CamAnim_BoostShakeL;                                      // 0x1608(0x0004)
	class UCameraAnim*                                 CamAnim_BoostShakeF;                                      // 0x160C(0x0004)
	class UCameraAnim*                                 CamAnim_BoostShake180;                                    // 0x1610(0x0004)
	class UCameraAnim*                                 CurrentFireCameraAnim[0x4];                               // 0x1614(0x0004)
	int                                                bCurrentCameraAnimLoop[0x4];                              // 0x1624(0x0004)
	int                                                LockedCenterYaw;                                          // 0x1634(0x0004)
	struct FName                                       BoostForwardGroundEffectSocket;                           // 0x1638(0x0008)
	struct FName                                       BoostSideGroundEffectSocket;                              // 0x1640(0x0008)
	struct FName                                       WeaponSocket_3L;                                          // 0x1648(0x0008)
	struct FName                                       WeaponSocket_3R;                                          // 0x1650(0x0008)
	struct FName                                       WeaponSocket_1L;                                          // 0x1658(0x0008)
	struct FName                                       WeaponSocket_1R;                                          // 0x1660(0x0008)
	class USoundCue*                                   RagdollCollisionSound;                                    // 0x1668(0x0004)
	float                                              RagdollLastCollisionSoundTime;                            // 0x166C(0x0004)
	float                                              RagdollCollisionIntervalSecs;                             // 0x1670(0x0004) (Const)
	float                                              LastRotUpdate;                                            // 0x1674(0x0004)
	float                                              LastFOV;                                                  // 0x1678(0x0004)
	struct FRotator                                    MaxCockpitRotationLag;                                    // 0x167C(0x000C)
	struct FRotator                                    VisorRotation;                                            // 0x1688(0x000C)
	struct FRotator                                    MaxVisorRotationLag;                                      // 0x1694(0x000C)
	struct FRotator                                    VisorRotationRate;                                        // 0x16A0(0x000C)
	struct FRotator                                    WeaponsRotationRateCenter;                                // 0x16AC(0x000C)
	float                                              CockpitLagRecoverRate;                                    // 0x16B8(0x0004)
	float                                              CockpitLagTurnMaxRate;                                    // 0x16BC(0x0004)
	float                                              CockpitSettleShakeScale;                                  // 0x16C0(0x0004)
	struct FRotator                                    CockpitLag;                                               // 0x16C4(0x000C)
	struct FRotator                                    CockpitRotation;                                          // 0x16D0(0x000C)
	struct FRotator                                    PrevViewRotation[0x2];                                    // 0x16DC(0x000C)
	float                                              FootstepDecalSize;                                        // 0x16F4(0x0004)
	float                                              FootstepCameraShakeRadius;                                // 0x16F8(0x0004)
	float                                              LandCameraShakeRadius;                                    // 0x16FC(0x0004)
	float                                              HeatMultiplier;                                           // 0x1700(0x0004)
	float                                              MaxHeight;                                                // 0x1704(0x0004)
	float                                              MaxAltitudeHeight;                                        // 0x1708(0x0004)
	float                                              CooldownLeftMultiplier;                                   // 0x170C(0x0004)
	float                                              CooldownRightMultiplier;                                  // 0x1710(0x0004)
	float                                              HealRateMultiplier;                                       // 0x1714(0x0004)
	float                                              BeamDamageMultiplier;                                     // 0x1718(0x0004)
	float                                              LastHeatIncrease;                                         // 0x171C(0x0004)
	struct FFlashHitInfo                               FlashSecondary;                                           // 0x1720(0x0010) (Net)
	struct FVector                                     FlashLocationPrimary;                                     // 0x1730(0x000C) (Net)
	struct FVector                                     FlashLocationPrimaryExtra[0xE];                           // 0x173C(0x000C) (Net)
	struct FVector                                     StoredRelativeBeamStartLocation[0x2];                     // 0x17E4(0x000C)
	float                                              BeamStartLocScale;                                        // 0x17FC(0x0004) (Const)
	float                                              LastDamageCameraAnimTime;                                 // 0x1800(0x0004)
	struct FChainEffects                               ChainFXSecondary;                                         // 0x1804(0x000C) (Net)
	class ARadialBlurActor*                            BoostBlur;                                                // 0x1810(0x0004)
	class URadialBlurComponent*                        RadialBlur;                                               // 0x1814(0x0004) (ExportObject, Component, EditInline)
	int                                                HealthPerEnergyUnit;                                      // 0x1818(0x0004)
	int                                                HealthLostPerSecond;                                      // 0x181C(0x0004)
	struct FVector                                     DeathCamCenterPosition;                                   // 0x1820(0x000C)
	int                                                CurrentFootstep;                                          // 0x182C(0x0004)
	class UMaterialInstanceTimeVarying*                DeathExplosionDecalMaterial;                              // 0x1830(0x0004)
	class UMaterialInstanceTimeVarying*                DeathExplosionDecalMaterialSand;                          // 0x1834(0x0004)
	class USoundCue*                                   GlassCrackSound;                                          // 0x1838(0x0004) (Const)
	class USoundCue*                                   CockpitStressSound;                                       // 0x183C(0x0004) (Const)
	class USoundCue*                                   CockpitOverheat;                                          // 0x1840(0x0004) (Const)
	class USoundCue*                                   CockpitOverheatVoice;                                     // 0x1844(0x0004) (Const)
	class USoundCue*                                   CockpitStaticSound;                                       // 0x1848(0x0004) (Const)
	class USoundCue*                                   CockpitMalfunctionVoice;                                  // 0x184C(0x0004) (Const)
	class USoundCue*                                   CockpitSparksSound;                                       // 0x1850(0x0004) (Const)
	class USoundCue*                                   CockpitIncomingSound;                                     // 0x1854(0x0004) (Const)
	class USoundCue*                                   DisruptorCockpitSound;                                    // 0x1858(0x0004) (Const)
	class USoundCue*                                   Boost180Sound;                                            // 0x185C(0x0004) (Const)
	class USoundCue*                                   BoostForwardStartSound;                                   // 0x1860(0x0004) (Const)
	class USoundCue*                                   BoostForwardLoopSound;                                    // 0x1864(0x0004) (Const)
	class USoundCue*                                   BoostForwardEndSound;                                     // 0x1868(0x0004) (Const)
	class USoundCue*                                   BoostHoverStartSound;                                     // 0x186C(0x0004) (Const)
	class USoundCue*                                   BoostHoverLoopSound;                                      // 0x1870(0x0004) (Const)
	class USoundCue*                                   BoostHoverEndSound;                                       // 0x1874(0x0004) (Const)
	class USoundCue*                                   HealLoopSound;                                            // 0x1878(0x0004)
	class USoundCue*                                   DroneHealFinishSound;                                     // 0x187C(0x0004)
	class USoundCue*                                   HitLevelBarrierSound;                                     // 0x1880(0x0004) (Const)
	class USoundCue*                                   WallImpactSoundLG;                                        // 0x1884(0x0004) (Const)
	class USoundCue*                                   WallImpactSoundMed;                                       // 0x1888(0x0004) (Const)
	class USoundCue*                                   TransitionBackToCockpitSound;                             // 0x188C(0x0004) (Const)
	class USoundCue*                                   TurnSound_3PS;                                            // 0x1890(0x0004) (Const)
	class USoundCue*                                   TurnLoopSound_3PS;                                        // 0x1894(0x0004) (Const)
	class USoundCue*                                   WalkLoopSound_3PS;                                        // 0x1898(0x0004) (Const)
	class USoundCue*                                   RunLoopSound_3PS;                                         // 0x189C(0x0004) (Const)
	class USoundCue*                                   TurnLoopSound_FPS;                                        // 0x18A0(0x0004) (Const)
	class USoundCue*                                   WalkLoopSound_FPS;                                        // 0x18A4(0x0004) (Const)
	class USoundCue*                                   RunLoopSound_FPS;                                         // 0x18A8(0x0004) (Const)
	class USoundCue*                                   RotateSound_X_Loop;                                       // 0x18AC(0x0004) (Const)
	class USoundCue*                                   RotateSound_X_End;                                        // 0x18B0(0x0004) (Const)
	class USoundCue*                                   RotateSound_X_ChangeDir;                                  // 0x18B4(0x0004) (Const)
	class USoundCue*                                   HealthDangerouslyLowVO;                                   // 0x18B8(0x0004) (Const)
	class USoundCue*                                   KillEventVO_EndedKillStreak;                              // 0x18BC(0x0004) (Const)
	class USoundCue*                                   KillEventVO_DominatingPlayer;                             // 0x18C0(0x0004) (Const)
	class USoundCue*                                   KillEventVO_NewNemesis;                                   // 0x18C4(0x0004) (Const)
	class USoundCue*                                   KillEventVO_KilledNemesis;                                // 0x18C8(0x0004) (Const)
	class USoundCue*                                   KillEventVO_CrushingKill;                                 // 0x18CC(0x0004) (Const)
	class USoundCue*                                   KillEventVO_MultiKill_3;                                  // 0x18D0(0x0004) (Const)
	class USoundCue*                                   KillEventVO_MultiKill_4;                                  // 0x18D4(0x0004) (Const)
	class USoundCue*                                   KillEventVO_MultiKill_5;                                  // 0x18D8(0x0004) (Const)
	class USoundCue*                                   KillEventVO_MultiKill_6;                                  // 0x18DC(0x0004) (Const)
	class USoundCue*                                   KillEventVO_MultiKill_7;                                  // 0x18E0(0x0004) (Const)
	float                                              CockpitSettleTime;                                        // 0x18E4(0x0004)
	float                                              CockpitTurningTime;                                       // 0x18E8(0x0004)
	float                                              CockpitStoppedTurningTime;                                // 0x18EC(0x0004)
	TArray<class AR_Pawn*>                             BeingCooledBy;                                            // 0x18F0(0x000C) (Transient, NeedCtorLink)
	class AR_Pawn*                                     RepBeingCooledBy[0x3];                                    // 0x18FC(0x0004) (Net)
	float                                              UpdateCooledListInterval;                                 // 0x1908(0x0004) (Const)
	float                                              UpdateCooledListTime;                                     // 0x190C(0x0004) (Transient)
	struct FName                                       DeathAnim;                                                // 0x1910(0x0008)
	struct FName                                       HitReactionAnim;                                          // 0x1918(0x0008)
	class UDynamicLightEnvironmentComponent*           WeaponLightEnvironment;                                   // 0x1920(0x0004) (ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           CockpitLightEnvironment;                                  // 0x1924(0x0004) (ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           DroneLightEnvironment;                                    // 0x1928(0x0004) (ExportObject, Component, EditInline)
	float                                              MinLandVelocityForFX;                                     // 0x192C(0x0004) (Const)
	float                                              LastTimeHealthCriticalForKill;                            // 0x1930(0x0004)
	float                                              LastTimeHealthCriticalForHeal;                            // 0x1934(0x0004)
	float                                              TrackedTimePlayed;                                        // 0x1938(0x0004)
	int                                                numTimesToLogSpeed;                                       // 0x193C(0x0004) (Transient)
	class UParticleSystem*                             SpawnTrailEffect;                                         // 0x1940(0x0004)
	struct FName                                       SpawnTrailEffectSocket;                                   // 0x1944(0x0008)
	struct FName                                       LerpScalarMatName;                                        // 0x194C(0x0008)
	float                                              LerpScalarMatLerpValue;                                   // 0x1954(0x0004)
	float                                              LerpScalarMatEndValue;                                    // 0x1958(0x0004)
	class UMaterialInstanceConstant*                   CoopSpawnMaterial;                                        // 0x195C(0x0004)
	struct FVector                                     HmdCockpitOffset;                                         // 0x1960(0x000C)
	struct FVector                                     HmdArmOffset;                                             // 0x196C(0x000C)
	float                                              HmdCockpitScale;                                          // 0x1978(0x0004)
	float                                              HmdArmScale;                                              // 0x197C(0x0004)
	float                                              HealthUnitsDrop;                                          // 0x1980(0x0004)
	struct FScriptDelegate                             __LerpMaterialScalarParameterFinished__Delegate;          // 0x1984(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Pawn");
		return ptr;
	}


	void ModifiersUpdated();
	void DrawDebugUpgrades(class UCanvas* Canvas);
	void DrawWeaponDebug(class AR_HUD* HUD, const struct FName& Category);
	void DrawDebug(class AR_HUD* HUD, const struct FName& Category);
	void PlayHealthDangerouslyLowVoiceCue();
	void PlayMultiKillVoiceCue(int MultiKillLevel);
	void PlayCrushingKillVoiceCue();
	void PlayEndedKillStreakVoiceCue();
	void PlayKilledNemesisVoiceCue();
	void PlayNewNemesisVoiceCue();
	void PlayDominatingPlayerVoiceCue();
	void PlayUIVoiceMessage(int alertNum);
	void PlaySpawning();
	void PlayCoopSpawnEffects();
	void LogSpeedTimer();
	void SetLogSpeedTimer(int secondsToLog);
	struct FVector GetHitboxCenter();
	void SetAirSpeed(float NewAirSpeed);
	void SetBoostForwardSpeed(float NewBoostSpeed);
	void SetRunSpeed(float NewRunSpeed);
	void SetHealthTurbulenceEnabledForActor(class AActor* effectActor, bool bEnable);
	void SetEnergyTurbulenceEnabledForActor(class AActor* effectActor, bool bEnable);
	void DisplayAnimNodeSlotDebug(class AHUD* H, const struct FFontRenderInfo& FontRI, float* YL, float* YPos);
	void DisplayPawnDebug(class AHUD* H, float* YL, float* YPos);
	void STATIC_DebugLogEffectChain(class AR_Pawn* P);
	struct FString STATIC_GetEffectChainDebugStr(class AR_Pawn* P);
	void VerifySelectedPlayerStart();
	bool IsLocationWithinRange(const struct FVector& TargetLocation, float MaxRange);
	bool IsLookingAtLocation(const struct FVector& TargetLocation, float MinDotResult, float* ViewAngle);
	void EndLevitate();
	void StartLevitate(float SpeedZ, float AccelZ);
	void ShowLandEffect(class UParticleSystem* PartSys, const struct FVector& ForcePos);
	void ShowFootstepEffects(bool Left, bool Right, class UR_PhysicalMaterialProperty* MaterialEffects, float Scale);
	void PlayFootstepCameraAnim();
	void ActuallyPlayFootstepSound(int FootDown);
	void AttachCockpitDecoration(int Idx, int Slot);
	struct FVector GetIndicatorPosition();
	struct FVector GetDeathCamFocusLoc();
	struct FName GetDeathCamFocusBone();
	struct FName GetRagdollCamFocusBone();
	struct FVector GetPhysicsRootLocation();
	void FindGoodEndView(class APlayerController* InPC, struct FRotator* GoodRotation);
	bool CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	struct FRotator GetBaseAimRotation();
	void UpdateEyeHeight(float DeltaTime);
	bool InFreeCam();
	struct FVector GetPreOffsetCameraViewLocation(class APlayerController* ViewerPC);
	struct FVector GetPawnViewLocation();
	struct FName GetDefaultCameraMode(class APlayerController* RequestedBy);
	void PlayLandingShakeCameraAnim(float AnimScaleAmount, bool bReplicateToClient);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	class UR_PhysicalMaterialProperty* GetWallMaterial(const struct FVector& WallHitNormal);
	struct FVector GetTouchingPoint(const struct FVector& HitNormal, float distScale);
	void WallBumpEffectTimer();
	void WallBumpTimer();
	float GetDodgeSpeed();
	float GetBoostForwardSpeed();
	float GetRunSpeed();
	struct FVector2D GetAIJumpSpeed();
	void HandleMomentum(const struct FVector& Momentum, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void CalcBaseThrusterJumpHeight(bool bInitialJump);
	void UpdateAmbientSound();
	void EndBoostTimer();
	void DeactivateGroundEffects();
	void UpdateGroundEffect();
	void ActivateGroundEffects(TEnumAsByte<ERobotMoveState> NewState);
	class UClass* GetJumpPadClass();
	void AttachFlyTrailEffects();
	void ActivateThrusterEffects(bool bflyTrail);
	void DeactivateFlyTrailEffects();
	void DeactivateThrusterEffects();
	void PlayerChangedTeam();
	void SetWalking(bool bNewIsWalking);
	void KilledByForceField();
	void RecordTimePlayed();
	void RecordWeaponUseStats();
	void ClientReceiveDeathAssistInfo(const struct FDeathAssistPlayerInfo& MessageInfo, int killerHealth);
	void SendDeathAssists(class AController* Killer);
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void NotifyKilled(class AController* Killer);
	void NotifyStatusEffectsEUDelivered(int Amount);
	void NotifyStatusEffectsAACaptured();
	void NotifyStatusEffectsMissileSiloCaptured();
	void NotifyStatusEffectsOfDeath();
	void NotifyStatusEffectsOfSpawn();
	void NotifyStatusEffectsOfAssist();
	void NotifyStatusEffectsOfKill();
	void DeactivateDeployedItems();
	void HideDeadMech();
	void ExplodeMech();
	void AttachDeathAttractor();
	void AttachDeathJet();
	void ToggleDeathJet();
	void PlayRagdoll();
	bool IsPlayingDeathAnim();
	void OnDeathAnimFinished();
	bool PlayDeathAnim();
	void PlayDying(class UClass* dmgType, const struct FVector& HitLoc);
	void CleanupApexActors();
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void UnTouch(class AActor* Other);
	void BumpTimer();
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	float GetPushAmount();
	void StopFire(unsigned char FireModeNum);
	void StartFire(unsigned char FireModeNum);
	void UpdateEnergyCollectionStats(int EnergyUnitsCollected);
	void ReceivedEnergyUnits(int EU);
	float TransferEnergyFromSource(float EnergyUnits, TEnumAsByte<EnergyPickupType_e> PickupType, bool bEnergyStation);
	void EnergyTransferDone();
	void RandomizeGrimeOverlays();
	void GlassCrackTimer();
	void UpdateGrimeOverlays();
	void CheckFullHealAchievement();
	void OnEndHealState();
	void EndHealExitState();
	void EndHeal();
	void OnBeginHealState();
	void StartNextLoopAnim();
	void LoopAnimFinished();
	void DoHealing(float DeltaTime, bool showDrone, bool bCheckStartupTime);
	bool IsShuttingDownHeal();
	bool HealDamage(float Amount, class AController* Healer, class UClass* DamageType);
	void DeployAnimFinished();
	void HideHealingDrone();
	void ShowHealingDrone();
	void CrushedBy(class APawn* OtherPawn);
	void TakeFallingDamage();
	struct FVector SpawnFootstepDecal(const struct FVector& TraceStartLoc, float Size, class UMaterialInstanceTimeVarying* MITV);
	void PlayLandingEffect(float FallSpeed);
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void StuckFalling();
	void StuckOnPawnFinished(class APawn* OtherPawn);
	void StuckOnPawn(class APawn* OtherPawn);
	void JumpOffPawn();
	void BaseChange();
	void PushOffCliffTimer();
	void SetFirstPersonTransform(const struct FVector& FPLocation, const struct FRotator& FPRotation, const struct FRotator& VSRotation, const struct FRotator& FPArmRotation);
	void UpdateFOVForPAttachment(class UUDKParticleSystemComponent* AttachmentToUpdate, float NewFOV);
	void UpdateFOVForAttachment(class UUDKSkeletalMeshComponent* AttachmentToUpdate, float NewFOV);
	void UpdateAttachmentFOV(float CurrentFOV, float DefaultFOV);
	float GetFPFOV();
	void DoCockpitRotation(float DeltaTime, const struct FRotator& BaseRotation, struct FRotator* FinalCockpitRotation, struct FRotator* FinalArmRotation);
	void UpdateFirstPersonMeshes();
	void UpdateMechPosition();
	void ApplyRotationLimits(float DeltaTime, struct FRotator* DeltaRot);
	void ProcessViewRotation(float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	float GetEyeHeight();
	struct FVector WeaponBob(float BobDamping, float JumpDamping);
	float GetCoolingValue();
	bool IsFireFighterMech();
	void UpdateIsBeingCooled();
	bool IsPawnPrimaryCooler(class AR_Pawn* RPCooler);
	void UpdateReplicatedCooledByList();
	void RemovePawnBeingCooledBy(class AR_Pawn* RPCooler);
	void AddPawnBeingCooledBy(class AR_Pawn* RPCooler);
	void ShowAbilityHologram(bool bShow);
	void ShowMechOutline(bool bShowOutline, const struct FLinearColor& HightlightColor);
	void SetGameplayMaterialOverride(TEnumAsByte<EPawnMaterialOverride> NewPawnMaterialOverride, bool bForceUpdate);
	void UpdateCurrentMaterialStaticMesh(class UMaterialInstanceConstant* NewMIC, class UStaticMeshComponent* SMC);
	void UpdateCurrentMaterial(class UMaterialInstanceConstant* NewMIC, class USkeletalMeshComponent* SMC);
	void CoopMaterialLerpFinished();
	void SetCoopMechSpawnMaterial(class UMaterialInstanceConstant* NewMaterialInstance);
	void DoCoopMechSpawnEffects(bool bSkipSetup);
	void LerpMaterialScalarParameterTimer();
	void LerpMaterialScalarParameter(const struct FName& ScalarParamater, float StartValue, float EndValue, float LerpTime, float LerpTickRate, const struct FScriptDelegate& OnFinished);
	void LerpMaterialScalarParameterFinished();
	void SetTPSMeshVisibility(bool bVisible);
	void SetThirdPersonCamera(bool bNewBehindView);
	void TogglePawnHidden(float Duration);
	void ShowThirdPersonMesh(bool bShouldBeVisible);
	void HideFirstPersonMesh();
	void ShowFirstPersonMesh(bool bShouldBeVisible, bool bUpdateVisorVisibility);
	bool IsCenterCrosshairVisible();
	bool IsCrosshairVisible();
	bool IsVisorEnabled(class AR_PlayerController* VisorViewer);
	void OnEndJumpPadState();
	void CheckAchievements();
	void StopAllSoundComps();
	void EndViewTarget(class APlayerController* PC);
	void Tick(float DeltaTime);
	void DoTakeDamageEffects();
	void NotifyLockonTarget(bool bLockedOn);
	void NotifyIncomingMissile();
	void NotifyOwnedPickupsOfDeath();
	void RegisterSpawnedPickup(class AR_Pickup* RPickup);
	void StartChainEffect(class AActor* SrcActor, class AActor* DstActor, bool bViaReplication);
	void PlayWeaponAnimation(int Hand, unsigned char WeaponAnimIndex, float fRateScale, bool bLoop);
	void PlayArmAnimation(int Hand, const struct FName& AnimName, class UClass* WeapClass, bool bAllowLooping);
	void UpdateLoopingFireAnimationPlayRate(int Hand, float fRateScale);
	void StartWeaponAnimByIndex(int Hand, int Index);
	void StopWeaponAnims();
	void StopLoopingFire(int Hand, bool bHardEnd, float fRateScale, bool bStopSound, bool bStopAnim);
	void StartLoopingFireAnim(int Hand, float fRateScale);
	void UpdateLoopingWeaponSoundParam(int Hand, const struct FName& ParamName, float parmValue);
	void StartLoopingFireSound(int Hand);
	void StopLoopingMovementSound(bool bHardEnd);
	void StartLoopingMovementSound(class USoundCue* Sound);
	void StopLoopingSound(class UAudioComponent* SndComp, bool bHardEnd);
	void StartLoopingSound(class UAudioComponent* SndComp, class USoundCue* Sound);
	void SetHandAnim(unsigned char Anim, unsigned char* HandAnim);
	struct FName GetWeaponAnim(int Hand, unsigned char AnimIndex);
	void PlayNetworkWeaponAnim(int Hand, unsigned char PlayAnim);
	void SpawnLevelEffects();
	void ApplySubtypeOverrides();
	void SetMechType(int NewMechType, int NewMechSubType, class UR_NPC_Template* NewMechTemplate);
	void ResetMechStatUpgrades();
	void SetDefaultProperties();
	bool ShouldInitFirstPersonWeaponsHidden();
	void AttachThirdPersonWeapons(int PrimaryIdx, int SecondaryIdx);
	void AttachWeaponMeshCompFirst(int Hand);
	void AttachWeaponMeshCompThird(int Hand);
	void CreateFirstPersonSMCs();
	void GetIndicatorSize(float* Width, float* Height);
	void SetInternalsUpgrades();
	int GetCurrentMechTier();
	void OverloadWithModifiers();
	void SetMechUpgrades(bool bApplyInternals);
	bool IsAllowedOptimizations();
	bool IsAllowedInternals();
	void ApplyCoopUpgrades(class AR_PRI_Coop* RPRI);
	void SetUpgradeFlags(class AR_PlayerReplicationInfo* RPRI);
	void PrintMoveStateStats();
	void CheckMoveStateAchievements();
	void AddMoveStateStat(TEnumAsByte<ERobotMoveState> NewState);
	void UpdateMoveStateStats(TEnumAsByte<ERobotMoveState> OldState, TEnumAsByte<ERobotMoveState> NewState);
	void UpdateHeavyModeAnimNode();
	void UpdateGroundSpeed();
	void SetMoveStateInternal(TEnumAsByte<ERobotMoveState> NewState);
	void CheckMoveStateAchievement(TEnumAsByte<ERobotMoveState> NewState, TEnumAsByte<ERobotMoveState> OldState);
	void KeepFirstPersonWeaponTexturesResident();
	bool DoHitReaction();
	bool HasHitReaction();
	void OnBeginHitReaction();
	void OnEndTauntState();
	void OnBeginTauntState();
	bool GetShieldMaterialColor(struct FLinearColor* ShieldColor);
	bool SetShieldMaterialColor(const struct FLinearColor& ShieldColor);
	void OnBeginUsingAbility();
	void OnBeginBoostFly(TEnumAsByte<ERobotMoveState> OldState);
	void OnBeginBoostForward();
	void OnBeginDodgeState(TEnumAsByte<ERobotMoveState> NewState, unsigned char AnimToPlay);
	void OnBeginBoostSpin();
	void VerifyWeaponZoomState(bool NewValue);
	void EndWeaponZoom(class AController* InController);
	bool IsHealthIncreasing();
	void OnBoostForwardEndTimer();
	void ShutdownSoundTimer();
	bool IsBoostState(TEnumAsByte<ERobotMoveState> State);
	void UpdateCameraAnims(TEnumAsByte<ERobotMoveState> OldState, TEnumAsByte<ERobotMoveState> NewState);
	void JumpShakeDone();
	void SetRadialBlur(bool bShouldEnable);
	void TurnOn();
	void TurnOff();
	void OnAnimEnd(class UAnimNodeSequence* Seq, float PlayedTime, float ExcessTime);
	void StopCameraAnim(class UCameraAnim* Anim, bool bImmediate);
	void PlayCameraAnim(class UCameraAnim* Anim, float PlayScale, float Rate, float blendIn, float blendOut, bool Loop, bool localOnly);
	void PlayFireCameraAnim(int Hand, bool bEndFire);
	void SpinCamera();
	void StopFPSAnim(float blendOut);
	void PlayCustomAnimFPS(const struct FName& AnimName, float blendIn, float blendOut, bool CheckIdleTimer, int Slot, float playSpeed);
	void StartBoostForwardTimer();
	void StartIdleTimer();
	float GetCustomAnimDuration();
	void PlayCustomAnim(const struct FName& AnimName, float blendIn, float blendOut, bool bMirrored, float playSpeed);
	void PlayThrusterAnim(const struct FName& AnimName, float blendIn, float blendOut);
	void PlayAnimationLocal(unsigned char PlayAnim, bool playFPSAnim);
	void StartNetworkAnim(unsigned char NewAnim);
	bool PerformDodge(TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FVector& Dir, const struct FVector& Cross);
	void UpdateHeatDebuffEffects(bool bDebuffed);
	void UpdateEMPEffects(bool bEMPd);
	void UpdateDebuffEffects(bool bDebuffed);
	void UpdateStatusEffect(bool bActive, struct FStatusFX* InStatusFX);
	void AttachCockpitPSC(class UParticleSystem* ParticlesTemplate, const struct FName& SocketName, class UUDKParticleSystemComponent** PSC);
	bool CheatWalk();
	bool CheatGhost();
	void PrintAimAssist();
	void ToggleCameraAnims();
	void ToggleBoneCamera();
	void UpdateRotationRate(float YawCenter);
	void UpdateDamageEffects(int NewNumDamageEffects);
	float CalcHeatDebuffs();
	void ApplyHeatDebuff();
	void ApplyDamageDebuff();
	void FindDamageLocation(const struct FVector& HitLocation, class UClass* RDamage);
	void RecordActualDamageTaken(float actualDamage, class AController* EventInstigator, class UClass* dmgType);
	void PopOutgoingDamageAdjustment(float ScaleValue, TEnumAsByte<EDamageCategories> DmgCategory);
	void PushOutgoingDamageAdjustment(float ScaleValue, TEnumAsByte<EDamageCategories> DmgCategory);
	void NotifyStatusEffectsOfDamageTaken(float Damage, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, class UClass* dmgType, class AController* DmgInstigator, class APawn* InstigatorPawn, class AActor* DamageCauser);
	void NotifyStatusEffectsOfDamageDealt(float Damage, class UClass* dmgType, class APawn* DamagedPawn);
	void TakeDamage(float Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* dmgType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	bool HasTakenDamage(float Seconds);
	float GetDamageMultiplier(class UClass* DamageType);
	void AdjustDamageFloat(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, float* InDamage, struct FVector* Momentum);
	float CalcHeatReduceMultiplier();
	float CalcHandicapMultiplier(class APawn* P, bool Offensive);
	void AddDamageEvent(float HitRotation, float HitDistance, float Damage, class AActor* DamagingActor);
	void PostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir);
	void gibbedBy(class AActor* Other);
	void EncroachedBy(class AActor* Other);
	bool ShouldGib(class UClass* RDamageType);
	void ClientPostTeleport();
	void PostTeleport(class ATeleporter* OutTeleporter);
	bool DoTaunt();
	bool Dodge(TEnumAsByte<EDoubleClickDir> DoubleClickMove);
	void RefreshCanAirDodge();
	void RefreshCanAir180();
	bool DoJump(bool bUpdating);
	void Destroyed();
	class AR_Item_Base* GetItemForIndex(int ItemIndex);
	void ClientModifyAllItemCooldowns(float SecondsToAdd);
	void ModifyAllItemCooldowns(float SecondsToAdd);
	void ResetItems();
	void SpawnSingleHeldItem(int spawnIndex, int ItemIndex, float regenMultiplier);
	void SpawnHeldItems(struct FItemsInfo* MechItems);
	float GetItemRegenMultiplier(struct FItemsInfo* MechItems);
	void GlobalItemCooldownTimer();
	void ClientItemUnavailable();
	bool UseItem(int UsedItemIndex, float ChargeTime);
	void SpawnConsumable(int PassiveIndex);
	void SetBaseStats(float NewAccelRate, float NewRunSpeed, float NewBoostForwardSpeed, float NewDodgeSpeed, float NewDodgeDistance, float NewSideBoostCooldownTime, float NewAirSpeed, float NewThrusterRegenRate, float NewMaxThrusterEnergy, float NewHealth, float NewHealRate, float NewHealStartupTime, float NewHeatMultiplier, float NewThrusterJumpEnergy, float NewThrusterDoubleJumpEnergy, float NewThrusterBoostSideEnergy, float NewThrusterRateHover, float NewThrusterRateBoostForward, float NewJumpZ, float NewMaxEnergyUnitsHeld);
	void ClientModifyCurrentAbilityRegen(float PercentOfDefaultToAdd);
	void ModifyCurrentAbilityRegen(float PercentOfDefaultToAdd);
	void SpawnAbility(TEnumAsByte<EAbilities> AbilityIndex);
	void ClientAbilityUnavailable();
	void UseAbility();
	bool CanUseAbility();
	void DeactivateDamageReduction(float AddToDamageMultiplierReduction);
	void ActivateDamageReduction(float AddToDamageMultiplierReduction);
	void HeavyAttackBoostOff(float AddToDamageMultiplier, float ExplosiveRadiusIncrease);
	void HeavyAttackBoostOn(float AddToDamageMultiplier, float ExplosiveRadiusIncrease);
	void DeactivateMovementIncrease(float RunSpeedIncrease, float BoostSpeedIncrease, float InBoostSpreadMult, bool bBoostFire);
	void ActivateMovementIncrease(float RunSpeedIncrease, float BoostSpeedIncrease, float InBoostSpreadMult, bool bBoostFire);
	void AddFuelReserves(float FuelAmount);
	void UseCoolant(float HeatReductionRate, float OverheatReductionRate);
	void EndHeavyModeTimer();
	void SetHeavyMultipliers(bool bOn, float FrontRadiusDamageReductionMultiplier, float FrontOtherDamageReductionMultiplier, float RearRadiusDamageReductionMultiplier, float RearOtherDamageReductionMultiplier);
	void SetHeavyMode(bool newVal);
	void SetUsingAbilityMoveState();
	void AttackBoostOff(float AddDamageMultiplier);
	void AttackBoostOn(float AddDamageMultiplier);
	void PrecisionBoostOff();
	void PrecisionBoostOn(float NewSpreadMultiplier);
	void SetSpecMode(bool bNewSpecMode);
	void SetCammoModeOff();
	void SetCammoModeOn();
	void SetWeaponMaterial(class UMaterialInstanceConstant* NewMIC, TEnumAsByte<ESceneDepthPriorityGroup> NewSDPG);
	void SetCammoMode(bool CammoModeOn);
	float IncreaseHeat(float NumUnits, bool bUseHeatMultipliers);
	void OnEMPShutdownEnd();
	void OnEMPBlast(class AController* ProjectileInstigator, float Duration, bool bSetTime);
	void OnDisruptorEnd();
	void OnDisruptorBlast(class AController* ProjectileInstigator, float Duration, bool bSetTime);
	void OnItemDebuffEnd(int Idx);
	void OnItemDebuffStart(int Idx, class AController* ProjectileInstigator, float Duration, bool SetTime);
	void TestDisruptor();
	void TestEMP();
	void TestKillMessage();
	bool GetIsSecondaryWeaponZoomed();
	void OverheatEndTimer();
	void TimedRaiseWeaponsComplete();
	void BringUpWeapons(bool bFirstPerson, bool bThirdPerson);
	void OnOverheatEnd();
	void SendOverheatStoppedTrackingEvent();
	void SendOverheatStartedTrackingEvent();
	void OverheatDecreaseTimer();
	void OverheatTimer();
	void OnOverheat();
	void SetCenterMessage(const struct FString& msg, float Duration);
	class AR_HUD* GetMyHUD();
	class AR_PlayerController* GetHudOwnerPC();
	void StartWeaponsDownThirdPerson();
	void StartWeaponsDownFirstPerson();
	void CheckBulletWhip(int Hand, const struct FVector& FireDir, const struct FVector& HitLocation);
	void SpawnBulletImpactDecal(const struct FVector& HitLocation, const struct FVector& HitNormal, const struct FTraceHitInfo& HitInfo, TEnumAsByte<EBulletImpactType_e> BulletImpactType);
	void PlayImpactEffects(const struct FVector& HitLocation, int Hand, unsigned char FireMode);
	class USoundCue* GetImpactSoundCue(class AActor* HitActor, class UPhysicalMaterial* HitMaterial, const struct FMaterialImpactEffect& ImpactEffect, int WeapIndex);
	class UParticleSystem* GetImpactParticlesForSurface(class UPhysicalMaterial* PhysMaterial, const struct FMaterialImpactEffect& ImpactEffect, TEnumAsByte<EBulletImpactType_e> BulletImpactType);
	class UMaterialInterface* GetDecalMaterialForSurface(class UPhysicalMaterial* PhysMaterial, TEnumAsByte<EBulletImpactType_e> BulletImpactType, float* Scale, float* DecalDuration);
	float STATIC_GetMaxImpactEffectDistance(int WeapIndex);
	struct FMaterialImpactEffect GetEffectForSurface(class AActor* HitActor, class UPhysicalMaterial* HitMaterial, int WeapIndex);
	void PlayCockpitDamageFX(struct FStatusFX* DamageFX);
	void PlayTakeHitEffects();
	struct FVector CalculateHitEffectLocation(const struct FVector& HitLocation);
	void PlayHit(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo);
	class UClass* GetMuzzleFlashLightClass(int WeapIndex);
	bool GetBulletEffectLoop(int WeapIndex);
	bool GetFireAnimLoop(int WeapIndex);
	bool GetMuzzleLoop(int WeapIndex);
	float GetTraceBeamSpread(int WeapIndex);
	class UParticleSystem* GetTraceBeamEffect(int WeapIndex, bool IsFirstPerson, bool bExtraFX);
	class UParticleSystem* GetMuzzleEffect(int WeapIndex, bool IsFirstPerson);
	class UParticleSystem* GetBulletEffect(int WeapIndex, bool IsFirstPerson);
	bool AllowImpactEffects(class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PlayBeamEffect(int Hand, const struct FVector& HitLocation, class AActor* HitActor, unsigned char FireMode, const struct FVector& StartLocationParam);
	void SpawnTracer(const struct FVector& StartLocation, const struct FVector& EndLocation);
	void DoMuzzleFlash(int Hand);
	void UpdateStoredBeamStartLocation(int Hand);
	void CauseMuzzleFlashLight(int Hand);
	struct FName GetMuzzleFlashSocket(int Hand, int I);
	class UUDKParticleSystemComponent* AttachMuzzleFlash(class USkeletalMeshComponent* WeaponMesh, class UParticleSystem* MuzzleEffect, bool bFirstPerson, const struct FName& SocketName, class UUDKParticleSystemComponent** PSC);
	void WeaponStoppedFiringHand(int Hand);
	void DeactivateEffect(class UParticleSystemComponent* PSC);
	void RegisterWeaponHit(int WeaponHand, int numTimes);
	void RegisterWeaponFire(int WeaponHand, int numTimes);
	void WeaponFiredHand(int Hand, bool bViaReplication, const struct FVector& HitLocation, unsigned char FireMode);
	void WeaponFired(class AWeapon* InWeapon, bool bViaReplication, const struct FVector& HitLocation);
	void WeaponStoppedFiring(class AWeapon* InWeapon, bool bViaReplication);
	void ClearFlashHand(int Hand);
	void SetFlashLocation(class AWeapon* InWeapon, unsigned char InFiringMode, const struct FVector& NewLoc);
	void Internal_SetFlashLocation(class AWeapon* InWeapon, unsigned char InFiringMode, const struct FVector& NewLoc, struct FVector* out_FlashLocation);
	void IncrementFlashCount(class AWeapon* InWeapon, unsigned char InFiringMode);
	void Internal_IncrementFlashCount(class AWeapon* InWeapon, unsigned char InFiringMode, unsigned char* out_FlashCountVar);
	void AttachAllMuzzleFlashes();
	void UpdateWeaponModels();
	void UpdateWeaponAttachmentClass(class UClass* WeapClass, int Hand);
	bool ShouldAllowThirdPersonMeshes();
	bool ShouldAllowFirstPersonMeshes();
	void CreateWeaponMaterialInstance(class USkeletalMeshComponent* WeapMesh, int SectionIdx, class UMaterialInstanceConstant* ParentMIC, class UMaterialInstanceConstant** NewMIC);
	int GiveItem(int ItemType, int ItemAmount);
	void AddDefaultInventory();
	void CreateBlurActor(float BlurAmount);
	void AttachCracks();
	void SetCockpitWindshieldMaterials();
	void SetUITexture(class UTextureRenderTarget2D* CockpitUITex, class UMaterialInstanceConstant* VisorMIC);
	void UpdateAbilityShimmerColor(const struct FLinearColor& ShimmerColor);
	void SetDrone(int Index);
	void SetMechAppearance();
	void SetHUDColor(const struct FString& Type, float R, float G, float B);
	void SetupCockpitCustomization();
	void InitializeMechCockpit(unsigned char ForMechType);
	void PostPlayerSpawn();
	void ApplyDelayedStatusEffects(class AR_PlayerReplicationInfo* RPRI);
	void LogWeaponUpgradeFlags();
	void ConditionalSetupMechFromPRI();
	void SetWeapons(int PrimaryIdx, int SecondaryIdx);
	void ResetDamageTracking();
	void UpdateWeaponAttachmentEffects();
	bool IsRadarScrambled();
	void ReceivedGameClass(class UClass* GameClass);
	void ServerApplyOculusOverrides();
	void RemoveOculusOverrides();
	void ApplyOculusOverrides();
	void ClientRestart();
	void Restart();
	void PostBeginPlay();
	void NotifyDemoPlaySpawned();
	void PlayCockpitPanelAnim(int Idx, const struct FString& AnimName, bool bForceDown);
	void UpdateCockpitPanel(TEnumAsByte<EItemMonitorState_e> NewState, bool bStaggeredAnims, int Idx, bool bForceDown);
	void UpdateCockpitPanelStates(bool bStaggered, bool bForceDown);
	void StartMoving();
	void StopMoving();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void ToggleFootPlacement(bool bEnabled);
	void ServerSetTarget(class AActor* Target);
	void ReplicatedEvent(const struct FName& VarName);
	bool GetInRange(TEnumAsByte<EWeaponHands> Hand);
	bool StopFiring();
	class AR_Weap_Base* GetWeaponForHand(int Hand);
};


// Class HawkenGame.R_PawnSoundGroup
// 0x0000 (0x003C - 0x003C)
class UR_PawnSoundGroup : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PawnSoundGroup");
		return ptr;
	}


	void STATIC_PlayDrownSound(class APawn* P);
	void STATIC_PlayGaspSound(class APawn* P);
	void STATIC_PlayGibSound(class APawn* P);
	void STATIC_PlayTakeHitSound(class APawn* P, int Damage);
	void STATIC_PlayDyingSound(class APawn* P);
	class USoundCue* STATIC_GetLandSound(const struct FName& MaterialType);
	class USoundCue* STATIC_GetJumpSound(const struct FName& MaterialType);
	class USoundCue* STATIC_GetFootstepSound(int FootDown, const struct FName& MaterialType);
	void STATIC_PlayFallingDamageLandSound(class APawn* P);
	void STATIC_PlayLandSound(class APawn* P);
	void STATIC_PlayJumpSound(class APawn* P);
	void STATIC_PlayDoubleJumpSound(class APawn* P);
	void STATIC_PlayDodgeSound(class APawn* P);
	void STATIC_PlayBodyExplosion(class APawn* P);
	void STATIC_PlayCrushedSound(class APawn* P);
	void STATIC_PlayBulletImpact(class APawn* P);
	void STATIC_PlayInstagibSound(class APawn* P);
};


// Class HawkenGame.R_Ability_Heavy_Base
// 0x0088 (0x0320 - 0x0298)
class AR_Ability_Heavy_Base : public AR_Ability_Base
{
public:
	float                                              FrontRadiusDamageReductionMultiplier;                     // 0x0298(0x0004)
	float                                              FrontOtherDamageReductionMultiplier;                      // 0x029C(0x0004)
	float                                              RearRadiusDamageReductionMultiplier;                      // 0x02A0(0x0004)
	float                                              RearOtherDamageReductionMultiplier;                       // 0x02A4(0x0004)
	float                                              TransformTimeMultiplier;                                  // 0x02A8(0x0004)
	float                                              BoostSpeedInc;                                            // 0x02AC(0x0004)
	float                                              BoostBurnRate;                                            // 0x02B0(0x0004)
	float                                              MoveSpeedInc;                                             // 0x02B4(0x0004)
	float                                              HeavyModeSpeedModifier;                                   // 0x02B8(0x0004)
	float                                              HeavyModeSpeedModifier_UnitsPerPoint;                     // 0x02BC(0x0004) (Const)
	struct FString                                     FRDM_TotalStatDescription;                                // 0x02C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FRDM_ClassScoreDescription;                               // 0x02CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FODM_TotalStatDescription;                                // 0x02D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FODM_ClassScoreDescription;                               // 0x02E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RRDM_TotalStatDescription;                                // 0x02F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RRDM_ClassScoreDescription;                               // 0x02FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RODM_TotalStatDescription;                                // 0x0308(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RODM_ClassScoreDescription;                               // 0x0314(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_Heavy_Base");
		return ptr;
	}


	void UpdatePawnVariables(bool bIsHeavyMode);
	bool IsAbilityActive();
	bool OnActivate();
	bool CanActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int upgradeFlags);
};


// Class HawkenGame.BTTaskFireToggle
// 0x0000 (0x0070 - 0x0070)
class UBTTaskFireToggle : public UBTTask
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTTaskFireToggle");
		return ptr;
	}

};


// Class HawkenGame.BTTaskFireWait
// 0x0000 (0x009C - 0x009C)
class UBTTaskFireWait : public UBTTaskWeaponWait
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.BTTaskFireWait");
		return ptr;
	}

};


// Class HawkenGame.R_TeamDeathmatch
// 0x0084 (0x0628 - 0x05A4)
class AR_TeamDeathmatch : public AR_Deathmatch
{
public:
	unsigned long                                      bAllowNonTeamChat : 1;                                    // 0x05A4(0x0004) (Config)
	unsigned long                                      bScoreTeamKills : 1;                                      // 0x05A4(0x0004)
	unsigned long                                      bScoreVictimsTarget : 1;                                  // 0x05A4(0x0004)
	unsigned long                                      bForceAllRed : 1;                                         // 0x05A4(0x0004)
	unsigned long                                      bAutoBalanceByRating : 1;                                 // 0x05A4(0x0004) (Config)
	unsigned long                                      bAutoBalanceMatchInProgress : 1;                          // 0x05A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      IPB_bAcceptPartyMembers : 1;                              // 0x05A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      IPB_bAcceptPartyMemberVolunteers : 1;                     // 0x05A4(0x0004) (Config, GlobalConfig)
	float                                              FriendlyFireScale;                                        // 0x05A8(0x0004)
	float                                              TeammateBoost;                                            // 0x05AC(0x0004)
	class UClass*                                      TeamScoreMessageClass;                                    // 0x05B0(0x0004)
	int                                                TeamSwitchLevel;                                          // 0x05B4(0x0004) (Config, GlobalConfig)
	struct FString                                     VotesToResign;                                            // 0x05B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Team0Resigns;                                             // 0x05C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Team1Resigns;                                             // 0x05D0(0x000C) (Const, Localized, NeedCtorLink)
	int                                                ResignedTeamIdx;                                          // 0x05DC(0x0004)
	float                                              IPB_TeamImbalanceStartTime;                               // 0x05E0(0x0004)
	float                                              IPB_NotifyTeamImbalanceFrequency;                         // 0x05E4(0x0004) (Config, GlobalConfig)
	int                                                IPB_NumDesiredPlayers;                                    // 0x05E8(0x0004)
	float                                              IPB_DesiredPlayerWaitTime;                                // 0x05EC(0x0004)
	float                                              IPB_ForceSwitchTime;                                      // 0x05F0(0x0004)
	int                                                IPB_StopBalancingTimeLimit;                               // 0x05F4(0x0004) (Config, GlobalConfig)
	int                                                IPB_StopBalancingMatchCompletion;                         // 0x05F8(0x0004)
	int                                                IPB_StopForceSwitchMatchCompletion;                       // 0x05FC(0x0004)
	float                                              IPB_WaitForVolunteersTime;                                // 0x0600(0x0004) (Config, GlobalConfig)
	TArray<class AR_PlayerController*>                 IPB_Volunteers;                                           // 0x0604(0x000C) (NeedCtorLink)
	float                                              IPB_LastCheckTime;                                        // 0x0610(0x0004)
	float                                              IPB_CheckImbalanceFrequency;                              // 0x0614(0x0004) (Config, GlobalConfig)
	int                                                MaxTeamSizeDifference;                                    // 0x0618(0x0004) (Config)
	int                                                Resign_MinMinutes;                                        // 0x061C(0x0004) (Config)
	int                                                Resign_MinPercent;                                        // 0x0620(0x0004) (Config)
	int                                                Resign_MaxVoteSeconds;                                    // 0x0624(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_TeamDeathmatch");
		return ptr;
	}


	void TimerOfflineEndGame();
	void TimerTurnOffTutorialScreen();
	void ToggleTutorialScreen(bool bToggle, const struct FString& Text, float Time, bool bIsEndGame, bool bPrecacheOnly, class USeqAct_ToggleTutorialScreen* KismetInstigator);
	class AR_Bot* SpawnBot(const struct FString& BotName, unsigned char TeamIndex);
	void UpdateGameSettingsCounts();
	void SetGameOptionsForStats();
	void InitializeTeamStats();
	void HandleSeamlessTravelPlayer(class AController** C);
	void Logout(class AController* Exiting);
	void GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList);
	void ShowPathTo(class APlayerController* P, int TeamNum);
	void OverridePRI(class APlayerController* PC, class APlayerReplicationInfo* OldPRI);
	void AnnounceScore(int ScoringTeam);
	void PlayRegularEndOfMatchMessage();
	bool DominatingVictory();
	void ReduceDamage(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum);
	void ReduceDamageFloat(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser, float* Damage, struct FVector* Momentum);
	void ScoreKill(class AController* Killer, class AController* Other);
	bool NearGoal(class AController* C);
	bool CheckScore(class APlayerReplicationInfo* Scorer);
	unsigned char GetNpcsTeamId(unsigned char TeamNpcWantsToBeOn, class AController* NpcController);
	void RebalanceBotTeamAssignments();
	void RebalanceTeamsByPlayers(class AController* IgnoreController);
	void RebalanceTeamsByPlayerRating(class AController* IgnoreController);
	int RatingSort(class AR_PlayerController* A, class AR_PlayerController* B);
	void ReconcileBeaconTeamAssignments();
	void RebalanceTeamsByBeaconAssignment();
	void OnTeamsImbalancedForceSwitch();
	void OnRebalanceVolunteersInProgress();
	bool AddAutoBalanceVolunteer(class AR_PlayerController* Volunteer);
	bool RewardPlayerForBalancingTeams(class APlayerController* PC);
	bool DoChangeTeam(class AR_PlayerController_Base* ChangePC, int NewTeamIdx, bool bGiveReward);
	void RebalanceVolunteersInProgress(TArray<class AR_PlayerController*> Volunteers, bool bForceSwitch);
	void OnPlayerDeath(class AR_PlayerController* Player);
	int SortWorstPlayerFunc(class AR_PlayerController* A, class AR_PlayerController* B);
	int SortBestPlayerFunc(class AR_PlayerController* A, class AR_PlayerController* B);
	void FindEligiblePlayersForIPB(int TeamInNeedIdx, TArray<class AR_PlayerController*>* EligiblePlayers);
	bool IsIPBAllowed();
	void ResetTeamBalanceInProgress();
	void StartTeamBalanceInProgress();
	int GetSmallestTeamIdx();
	void OnNotifyTeamsAreImbalanced();
	void NotifyTeamsAreImbalanced();
	bool AreTeamSizesImbalanced();
	void CheckTeamBalance();
	void PlacePlayerOnSmallestTeam(class APlayerController* PC);
	void PlaceBotOnSmallestTeam(class AController* C);
	float GetTeamScore(int TeamIdx);
	int GetWinningTeamIndex();
	int GetLosingTeamIndex();
	void PlacePlayerOnAssignedTeam(class APlayerController* PC);
	bool ChangeTeam(class AController* Other, int TeamIdx, bool bNewTeam);
	bool STATIC_IsTeamSwitchAllowed(int CurrentTeamMembers, int NewTeamMembers, int TeamSwitchMode);
	void DeactivateAutoStartTimer();
	void ActivateAutoStartTimer();
	void RestartGame();
	bool CanSpectate(class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget);
	void UpdatePlayerRatings();
	void STATIC_GetVictoryMessage(bool bIsAWinner, unsigned char Rank, class AR_TeamInfo* Friend, class AR_TeamInfo* Foe, struct FString* VictoryMsg, struct FString* colorMode, struct FString* friendNumber, struct FString* foeNumber);
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	bool IsAWinner(class APlayerReplicationInfo* PRI);
	void ReplicationEndMatchStats();
	void EndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	bool IsEndGameNear();
	void InitGameReplicationInfo();
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
	int GetHandicapNeed(class APawn* Other);
	void CreateTeam(int TeamIndex);
	void RestartPlayer(class AController* aPlayer);
	void AddDefaultInventory(class APawn* PlayerPawn);
	void OnTeamResigned(int TeamIdx);
	void ResignGame(class AR_PlayerController* aPlayer);
	void ResignVoteEnded(int TeamNum);
	void ResignVoteEndedOne();
	void ResignVoteEndedZero();
	int GetNumPlayersNeededToReady();
	bool CheckPlayersToStartMatch();
	void PostLogin(class APlayerController* NewPlayer);
	void InitializeTeams();
	void PreBeginPlay();
};


// Class HawkenGame.R_CoOp
// 0x010C (0x0734 - 0x0628)
class AR_CoOp : public AR_TeamDeathmatch
{
public:
	class AR_NPC_Manager*                              WaveManager;                                              // 0x0628(0x0004)
	int                                                BotWaveBonusLives;                                        // 0x062C(0x0004)
	int                                                BossWaveBonusLives;                                       // 0x0630(0x0004)
	float                                              PlayerRespawnTime;                                        // 0x0634(0x0004)
	int                                                TotalPlayersInGame;                                       // 0x0638(0x0004)
	int                                                CurrentPlayersAlive;                                      // 0x063C(0x0004)
	TArray<class AController*>                         CurrentPlayers;                                           // 0x0640(0x000C) (NeedCtorLink)
	TArray<class AHawkenAi_ControllerBase*>            TeamMechs;                                                // 0x064C(0x000C) (NeedCtorLink)
	struct FString                                     DeadMessage;                                              // 0x0658(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LoseText;                                                 // 0x0664(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     WinText;                                                  // 0x0670(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     WaveDefeatText;                                           // 0x067C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     WaveStartText;                                            // 0x0688(0x000C) (Const, Localized, NeedCtorLink)
	class AR_PRI_Coop*                                 LastManStanding;                                          // 0x0694(0x0004)
	float                                              EndGameDelay;                                             // 0x0698(0x0004)
	unsigned long                                      bCoopWon : 1;                                             // 0x069C(0x0004)
	TArray<class AR_RevivalMarker*>                    RevivalMarkers;                                           // 0x06A0(0x000C) (NeedCtorLink)
	struct FSCoopUpgradeInfo                           WeaponDamageUpgradeInfo;                                  // 0x06AC(0x0014) (Const)
	struct FSCoopUpgradeInfo                           MaxArmorUpgradeInfo;                                      // 0x06C0(0x0014) (Const)
	struct FSCoopUpgradeInfo                           HeatGenUpgradeInfo;                                       // 0x06D4(0x0014) (Const)
	int                                                MaximumEUCost_WeaponDamage;                               // 0x06E8(0x0004) (Const)
	int                                                MaximumEUCost_MaxArmor;                                   // 0x06EC(0x0004) (Const)
	int                                                MaximumEUCost_HeatGen;                                    // 0x06F0(0x0004) (Const)
	float                                              HealRatePerUpgrade;                                       // 0x06F4(0x0004) (Const)
	float                                              BeamDamagePerUpgrade;                                     // 0x06F8(0x0004) (Const)
	class USoundCue*                                   WaveStartSnd;                                             // 0x06FC(0x0004)
	class USoundCue*                                   CountdownSnd;                                             // 0x0700(0x0004)
	class USoundCue*                                   TeamMechDownSnd;                                          // 0x0704(0x0004)
	class USoundCue*                                   VictorySnd;                                               // 0x0708(0x0004)
	class USoundCue*                                   BossWaveSnd;                                              // 0x070C(0x0004)
	class USoundCue*                                   EndWaveSnd;                                               // 0x0710(0x0004)
	class USoundCue*                                   BotJoinedSnd;                                             // 0x0714(0x0004)
	class USoundCue*                                   WaveBannerSnd;                                            // 0x0718(0x0004)
	TEnumAsByte<EeCheckEndGameState>                   EndGameState;                                             // 0x071C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x071D(0x0003) MISSED OFFSET
	float                                              EndGameReCheckTime;                                       // 0x0720(0x0004) (Const)
	float                                              EUDropMultiplier;                                         // 0x0724(0x0004)
	float                                              XPMultiplier;                                             // 0x0728(0x0004)
	class UR_CoOpRewardsManager*                       RewardsManager;                                           // 0x072C(0x0004)
	class USeqAct_Interp*                              PlayingMatinee;                                           // 0x0730(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_CoOp");
		return ptr;
	}


	void ClearOnlineDelegates();
	void RemoveMod(const struct FString& ModParam);
	void ApplyChallengeModOn(class AR_PawnBase* RPawn);
	void GoToLevelCam();
	void SetCinematicModeForActor(class AActor* act, bool bHideItem, bool bStopTickingItem, bool bSetCollision);
	void DisableActorsForCinematicMode();
	bool STATIC_AllocateCoopUpgrade(TEnumAsByte<ECoopUpgradeCategory> UpgdType, struct FSCoopUpgradeAllocations* AllocatedCoopUpgrades);
	bool STATIC_IsMaxCoopUpgrade(TEnumAsByte<ECoopUpgradeCategory> UpgdType, struct FSCoopUpgradeAllocations* AllocatedCoopUpgrades);
	int STATIC_GetNextUpgradeCost(TEnumAsByte<ECoopUpgradeCategory> UpgdType, struct FSCoopUpgradeAllocations* AllocatedCoopUpgrades);
	bool STATIC_ApplyUpgrade(class AR_Pawn* RP, TEnumAsByte<ECoopUpgradeCategory> UpgdType);
	void RebalanceTeamsByBeaconAssignment();
	void RebalanceTeamsByPlayerRating(class AController* IgnoreController);
	void RebalanceTeamsByPlayers(class AController* IgnoreController);
	void RebalanceBotTeamAssignments();
	void ServerTurnOffCinematicMode();
	void ServerShowBigCoOpMsg();
	void ServerSetDisplayCountdownTimer(bool bDisplay);
	void ServerClosePostWaveStats();
	void ServerDelayedOpenPostWaveStats();
	void SetReadyForDoubleCheckEndGame();
	void CheckReadyForEndGame();
	void WriteStats(class AActor* Winner, const struct FString& WinReason);
	void Tick(float DeltaTime);
	void DisableAllPlayersConsumables(bool bDisable);
	void UIPlayerDied(const struct FString& PlayerName);
	void UIGameOver();
	void ActivateAutoStartTimer();
	void UIGameWon();
	void UIWaveCompleted();
	void UINextWaveStarting();
	void ResetWaveStats();
	void ClearBroadcastMsg();
	void BroadcastUIMessage(const struct FString& Text);
	void StopCurrentMatinee();
	void OnCinematicStart(class USeqAct_Interp* MatineeObj);
	void HandleCoOpVictoryAchievements();
	void UpdatePlayerRatings();
	void HandleGamemodeEndGameAchievementConditions();
	void HandleGenericEndGameAchievementConditions();
	void AwardEndofGameHawkenPoints();
	void GiveEndOfGameXPAwards(bool bCountBots);
	struct FVector GetMechRespawnLoc();
	void RespawnMechBots();
	void PlayCountdownSound();
	void StopCountdownSound();
	void StartCountdownSound();
	void RespawnDeadPlayers();
	void WaveCompleted(bool bIsBossWave);
	void DistributeGlobalEU(class AR_PRI_Coop* RPRI, float EnergyUnits);
	void STATIC_GetVictoryMessageForCoop(bool bIsAWinner, unsigned char Rank, class AR_TeamInfo* Friend, class AR_TeamInfo* Foe, int WaveNumber, struct FString* VictoryMsg, struct FString* colorMode, struct FString* friendNumber, struct FString* foeNumber);
	int GetNumPlayersNeededToReady();
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	void EndGameTimer();
	bool GetPawnDamagedByInfo(class AR_PawnBase* P, class AController* Killer, class AWorldInfo* WI, struct FDamagedByInfo* KillerDamageInfo);
	bool GetDidDamagerAssistInKill(class AR_PawnBase* P, int I, class AController* Killer);
	struct FDamagedByInfo GetDamagedByInfoFromIndex(class AR_PawnBase* P, int Index);
	void HandleCoopAssists(class AController* KilledPlayer, class AR_PawnBase* KilledPawn, class AController* Killer);
	float GetBotDamageXP(class AR_PawnBase* P);
	void HandleCoopKill(class AR_PawnBase* KilledPawn, class AController* Killer, class UClass* dmgType, int MultiKillLevel, int KillStreak);
	void CheckKillAchievements(class AR_Pawn* R_KilledPawn, class AController* Killer, class AR_PlayerReplicationInfo* KillerPRI, class UClass* dmgType);
	void HandleAssists(class AController* KilledPlayer, class AR_Pawn* KilledPawn, class AController* Killer);
	void HandleKill(class AR_PawnNative* KilledPawn, class AController* Killer, class UClass* dmgType, int MultiKillLevel, int KillStreak);
	void DropEU(float EU, const struct FVector& DroppedLocation, float ZOffset, float EnergySpreadSpeed);
	void SpawnRevivalMarker(class AController* KilledPlayer, class AR_Pawn* RPawn);
	void BaseKilled(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType);
	void Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* dmgType);
	void StartWaveManager();
	void DoIntroCinematic();
	void SyncedElapsedTimer();
	void ToggleSyncElapsedTimer(bool bEnableSync);
	void SetupTeamBots();
	void StartMatch();
	void FindWaveManager();
	void PostBeginPlay();
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
	void ReplaceBotWithPlayer();
	void Logout(class AController* Exiting);
	void PostLogin(class APlayerController* NewPlayer);
	void PreBeginPlay();
	float STATIC_GetHeatGenUpgradePercentage(int upgradeLevel);
	float STATIC_GetArmorUpgrade(int upgradeLevel);
	float STATIC_GetWeaponDamageUpgradePercentage(int upgradeLevel);
	bool STATIC_IsTeamSwitchAllowed(int CurrentTeamMembers, int NewTeamMembers, int TeamSwitchMode);
};


// Class HawkenGame.R_GameReplicationInfo
// 0x03D0 (0x05F4 - 0x0224)
class AR_GameReplicationInfo : public AGameReplicationInfo
{
public:
	unsigned long                                      bHeartbeat : 1;                                           // 0x0224(0x0004) (Net)
	unsigned long                                      bThirdPerson : 1;                                         // 0x0224(0x0004) (Net)
	unsigned long                                      bSuddenDeath : 1;                                         // 0x0224(0x0004) (Net)
	unsigned long                                      bAutoBalanceByRating : 1;                                 // 0x0224(0x0004) (Net)
	unsigned long                                      bStartedEndGameMusic : 1;                                 // 0x0224(0x0004) (Net)
	unsigned long                                      bPlayingEndGameMusic : 1;                                 // 0x0224(0x0004) (Net)
	unsigned long                                      bPendingQuit : 1;                                         // 0x0224(0x0004) (Net)
	unsigned long                                      bIsTournamentMatch : 1;                                   // 0x0224(0x0004) (Net)
	unsigned long                                      bAllowInviteInProgress : 1;                               // 0x0224(0x0004) (Net)
	unsigned long                                      bIsPurchasingAllowed : 1;                                 // 0x0224(0x0004) (Net)
	unsigned long                                      bShowRadar : 1;                                           // 0x0224(0x0004) (Net)
	unsigned long                                      bShowIndicator : 1;                                       // 0x0224(0x0004) (Net)
	unsigned long                                      bCanPlayerRepair : 1;                                     // 0x0224(0x0004) (Net)
	float                                              HeartbeatLastReplicated;                                  // 0x0228(0x0004)
	float                                              HeartbeatTimeout;                                         // 0x022C(0x0004) (Config)
	int                                                MaxPlayers;                                               // 0x0230(0x0004) (Net)
	int                                                MatchFinishedTime;                                        // 0x0234(0x0004) (Net)
	int                                                PrematchCountdownTime;                                    // 0x0238(0x0004) (Net)
	int                                                ServerTickAvg;                                            // 0x023C(0x0004) (Net)
	int                                                ServerTickMax;                                            // 0x0240(0x0004) (Net)
	int                                                ServerTickDeltaAvg;                                       // 0x0244(0x0004) (Net)
	int                                                ServerTickDeltaMax;                                       // 0x0248(0x0004) (Net)
	int                                                StartMatchCountdownRemaining;                             // 0x024C(0x0004) (Net)
	int                                                MatchDuration;                                            // 0x0250(0x0004) (Net)
	int                                                NumPlayersWaitingFor;                                     // 0x0254(0x0004) (Net)
	int                                                NumPlayersWaitingToReadyUp;                               // 0x0258(0x0004) (Net)
	int                                                TeamSwitchLevel;                                          // 0x025C(0x0004) (Net)
	int                                                TeamBeingDominated;                                       // 0x0260(0x0004) (Net)
	class USeqAct_SpectatorCameraPath*                 CurrentLevelSpectatorCameraPaths[0x2];                    // 0x0264(0x0004) (Transient)
	struct FName                                       DefaultSpectatingState;                                   // 0x026C(0x0008)
	int                                                PostMatchCountdownRemaining;                              // 0x0274(0x0004) (Net)
	struct FPostMatchFocus                             PostMatch;                                                // 0x0278(0x0008) (Net)
	TEnumAsByte<EServerExperiencingDifficultiesCode>   ServerExperiencingDifficultiesCode;                       // 0x0280(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0281(0x0003) MISSED OFFSET
	float                                              QuitCountdownTime;                                        // 0x0284(0x0004) (Net)
	struct FString                                     MatchID;                                                  // 0x0288(0x000C) (Net, NeedCtorLink)
	int                                                NumPendingPlayers;                                        // 0x0294(0x0004) (Net)
	struct FPendingPlayer                              PendingPlayers[0x18];                                     // 0x0298(0x0020) (Net)
	struct FString                                     ChallengeClassPrefix;                                     // 0x0598(0x000C) (Const, NeedCtorLink)
	struct FString                                     ModClassPrefix;                                           // 0x05A4(0x000C) (Const, NeedCtorLink)
	struct FString                                     PackagePrefix;                                            // 0x05B0(0x000C) (Const, NeedCtorLink)
	TArray<struct FChallengeInfo>                      Challenges;                                               // 0x05BC(0x000C) (Transient, NeedCtorLink)
	int                                                ChallengeVoteCounts[0x5];                                 // 0x05C8(0x0004) (Net)
	int                                                ChosenChallengeIndex;                                     // 0x05DC(0x0004) (Net)
	class UR_Challenge*                                ActivatedChallenge;                                       // 0x05E0(0x0004)
	int                                                MechSubTypeIndex;                                         // 0x05E4(0x0004) (Net)
	TArray<struct FSChallengeUIInfo>                   ChallengeUIInfo;                                          // 0x05E8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameReplicationInfo");
		return ptr;
	}


	void ChooseChallenge();
	void UpdateChallengeVotes();
	bool CanVoteChallenge(class AR_PlayerReplicationInfo* VoterPRI, int voteIndex);
	class AR_ChallengeMod* AddMod(const struct FString& ModParam, bool bAutoActivate);
	class UR_Challenge* AddChallenge(const struct FString& ChallengeParam, const struct FString& ChallengeName, bool bAutoActivate);
	class AR_ChallengeMod* CreateMod(const struct FString& ModParam);
	class UR_Challenge* CreateChallenge(const struct FString& ChallengeParam, const struct FString& ChallengeName);
	void SetChallengeRewardUIData(class UR_Gfx_MechSelect* gfxMechSelect, class UR_Challenge* Challenge);
	void LoadAvailableChallenges(class UR_GFx_MechMenu_Base* gfxMenu);
	void LoadAvailableChallengesForUI(class UR_Gfx_MechSelect* gfxMechSelect);
	bool ShouldDrawSpectatorHUD();
	void RemovePRI(class APlayerReplicationInfo* PRI);
	void CacheBattleCams();
	class USeqAct_SpectatorCameraPath* GetBattleCamPath(int ControllerId);
	void SetGRIPostMatchState(TEnumAsByte<EPostMatchState_e> NewState, class AActor* NewFocus);
	void EndGame();
	void NotifyMatchStarted();
	void StartMatch();
	void Timer();
	void HandleHeartbeatTimeout();
	void ReceivedGameClass();
	bool IsTeamBeingDominated(int TeamIndex);
	bool IsTeamGame();
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class HawkenGame.SeqAct_ToggleGenericChatter
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_ToggleGenericChatter : public USeqAct_Toggle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_ToggleGenericChatter");
		return ptr;
	}

};


// Class HawkenGame.SeqAct_AILookAt
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_AILookAt : public USequenceAction
{
public:
	class AActor*                                      FocusTarget;                                              // 0x00FC(0x0004) (Edit)
	unsigned long                                      bAimAtTarget : 1;                                         // 0x0100(0x0004) (Edit)
	unsigned long                                      bTurnTowardsTarget : 1;                                   // 0x0100(0x0004) (Edit)
	unsigned long                                      bDisableTargetTracking : 1;                               // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_AILookAt");
		return ptr;
	}

};


// Class HawkenGame.SeqAct_AISetTarget
// 0x0010 (0x010C - 0x00FC)
class USeqAct_AISetTarget : public USequenceAction
{
public:
	TArray<class AActor*>                              FocusTargets;                                             // 0x00FC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bForceFireAtTarget : 1;                                   // 0x0108(0x0004) (Edit)
	unsigned long                                      bForceFireEvenWhenNoLOS : 1;                              // 0x0108(0x0004) (Edit)
	unsigned long                                      bForceContinuousFire : 1;                                 // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_AISetTarget");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class HawkenGame.SeqAct_AIToggleCombat
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_AIToggleCombat : public USeqAct_Toggle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_AIToggleCombat");
		return ptr;
	}

};


// Class HawkenGame.SeqAct_AIBanzai
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_AIBanzai : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_AIBanzai");
		return ptr;
	}

};


// Class HawkenGame.HawkenSeqAct_AIAdjustProperties
// 0x000E (0x010A - 0x00FC)
class UHawkenSeqAct_AIAdjustProperties : public USequenceAction
{
public:
	unsigned long                                      bOverrideWeaponDamage : 1;                                // 0x00FC(0x0004) (Edit)
	unsigned long                                      bDisableWeaponFire : 1;                                   // 0x00FC(0x0004) (Edit)
	unsigned long                                      bOverrideAccuracy : 1;                                    // 0x00FC(0x0004) (Edit)
	unsigned long                                      bInvisibleForEnemy : 1;                                   // 0x00FC(0x0004) (Edit)
	unsigned long                                      bFireOnlyAtCrowd : 1;                                     // 0x00FC(0x0004) (Edit)
	unsigned long                                      bMindLeader : 1;                                          // 0x00FC(0x0004) (Edit)
	unsigned long                                      bDropWeaponWithoutAmmo : 1;                               // 0x00FC(0x0004) (Edit)
	float                                              WeaponDamage;                                             // 0x0100(0x0004) (Edit)
	float                                              WeaponRange;                                              // 0x0104(0x0004) (Edit)
	TEnumAsByte<EAccuracyType>                         WeaponAccuracy;                                           // 0x0108(0x0001) (Edit)
	TEnumAsByte<EFireAtCrowdOption>                    FireAtCrowd;                                              // 0x0109(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenSeqAct_AIAdjustProperties");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class HawkenGame.R_PRI_Coop
// 0x00D4 (0x0804 - 0x0730)
class AR_PRI_Coop : public AR_PlayerReplicationInfo
{
public:
	struct FSCoopUpgradeAllocations                    AllocatedCoopUpgrades;                                    // 0x0730(0x0004) (Net)
	struct FSCoopUpgradeAllocations                    CachedAllocatedCoopUpgrades;                              // 0x0734(0x0004)
	int                                                EnergyCollectedCached;                                    // 0x0738(0x0004) (Net)
	int                                                ScoreCached;                                              // 0x073C(0x0004) (Net)
	unsigned char                                      TeamRevives;                                              // 0x0740(0x0001) (Net)
	unsigned char                                      CurrentWaveTeamRevives;                                   // 0x0741(0x0001) (Net)
	unsigned char                                      CurrentWaveBossKills;                                     // 0x0742(0x0001) (Net)
	unsigned char                                      CurrentWaveMechKills;                                     // 0x0743(0x0001) (Net)
	unsigned char                                      CurrentWaveDroneKills;                                    // 0x0744(0x0001) (Net)
	unsigned char                                      CurrentWaveBossAssists;                                   // 0x0745(0x0001) (Net)
	unsigned char                                      CurrentWaveMechAssists;                                   // 0x0746(0x0001) (Net)
	unsigned char                                      CurrentWaveDroneAssists;                                  // 0x0747(0x0001) (Net)
	unsigned char                                      Item1UsesCached;                                          // 0x0748(0x0001) (Net)
	unsigned char                                      Item2UsesCached;                                          // 0x0749(0x0001) (Net)
	unsigned char                                      Item3UsesCached;                                          // 0x074A(0x0001) (Net)
	unsigned char                                      UnknownData00[0x1];                                       // 0x074B(0x0001) MISSED OFFSET
	unsigned long                                      bUsedUpgrades : 1;                                        // 0x074C(0x0004)
	unsigned long                                      bPickingUpEU : 1;                                         // 0x074C(0x0004) (Net)
	unsigned long                                      bDisableAllConsumables : 1;                               // 0x074C(0x0004) (Net)
	unsigned long                                      bFirstItemSpawned : 1;                                    // 0x074C(0x0004)
	float                                              PickingUpDuration;                                        // 0x0750(0x0004)
	int                                                BossKills;                                                // 0x0754(0x0004) (Net)
	int                                                MechKills;                                                // 0x0758(0x0004) (Net)
	int                                                DroneKills;                                               // 0x075C(0x0004) (Net)
	int                                                BossAssists;                                              // 0x0760(0x0004) (Net)
	int                                                MechAssists;                                              // 0x0764(0x0004) (Net)
	int                                                DroneAssists;                                             // 0x0768(0x0004) (Net)
	struct FConsumablesSlotData                        CoopConsumables;                                          // 0x076C(0x000C) (Net)
	int                                                GlobalConsumableCooldown;                                 // 0x0778(0x0004) (Net)
	int                                                Consumable1Cooldown;                                      // 0x077C(0x0004) (Net)
	int                                                Consumable2Cooldown;                                      // 0x0780(0x0004) (Net)
	int                                                Consumable3Cooldown;                                      // 0x0784(0x0004) (Net)
	struct FString                                     ChallengeRewards[0xA];                                    // 0x0788(0x000C) (Net, NeedCtorLink)
	int                                                ChallengeRewardsCount;                                    // 0x0800(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PRI_Coop");
		return ptr;
	}


	void SetConsumableCooldown(unsigned char SlotIndex, int cooldown);
	int GetConsumableCooldown(unsigned char SlotIndex);
	void IncrementMechWeaponShotsFired(int WeaponHand, int Amount);
	void IncrementMechWeaponShotsHit(int WeaponHand, int Amount);
	float IncrementDamageSustainedStat(const struct FName& NewStatName, float Amount);
	int IncrementDeathStat(const struct FName& NewStatName);
	void IncrementWaveBossKills();
	void IncrementWaveMechKills();
	void IncrementWaveDroneKills();
	void IncrementCoopTeamRevives();
	void IncrementWaveTeamRevives();
	void IncrementWaveBossAssists();
	void IncrementWaveMechAssists();
	void IncrementWaveDroneAssists();
	void IncrementDroneAssists();
	void IncrementCoopMechAssists();
	void IncrementBossAssists();
	void IncrementDroneKills();
	void IncrementCoopMechKills();
	void IncrementBossKills();
	void CopyProperties(class APlayerReplicationInfo* PRI);
	void Reset();
	void ClearPickingUpEU();
	void SetPickingUpEU();
	void LoadedMechPreset(int presetIndex);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_HUD
// 0x0A88 (0x1014 - 0x058C)
class AR_HUD : public AUDKHUD
{
public:
	class UMaterialEffect*                             StaticEffect;                                             // 0x058C(0x0004)
	class UMaterialEffect*                             DegaussEffect;                                            // 0x0590(0x0004)
	TArray<struct FSFakeDefault>                       FakeDefaultHUDColors;                                     // 0x0594(0x000C) (NeedCtorLink)
	TArray<struct FSFakeDefault>                       FakeDefaultReticlesPrim;                                  // 0x05A0(0x000C) (NeedCtorLink)
	TArray<struct FSFakeDefault>                       FakeDefaultReticlesSec;                                   // 0x05AC(0x000C) (NeedCtorLink)
	int                                                defaultColorIdx[0x3];                                     // 0x05B8(0x0004)
	class UMaterialInstanceConstant*                   StaticEffectMaterialInstance;                             // 0x05C4(0x0004) (Transient)
	class UMaterialInstanceConstant*                   DegaussEffectMaterialInstance;                            // 0x05C8(0x0004) (Transient)
	class UMaterialInstanceConstant*                   DisruptorEffectMIC;                                       // 0x05CC(0x0004) (Transient)
	struct FLinearColor                                EMPStaticColor;                                           // 0x05D0(0x0010)
	struct FLinearColor                                ZoomStaticColor;                                          // 0x05E0(0x0010)
	struct FLinearColor                                BlackColor;                                               // 0x05F0(0x0010)
	struct FLinearColor                                DisruptorColor;                                           // 0x0600(0x0010)
	struct FLinearColor                                LowDisruptorColor;                                        // 0x0610(0x0010)
	TArray<struct FMechXPChange>                       MechXPStats;                                              // 0x0620(0x000C) (NeedCtorLink)
	struct FExperiencePointGainedCategories            XPbyCategory;                                             // 0x062C(0x00DC)
	int                                                HPbyCategory[0x9];                                        // 0x0708(0x0004)
	unsigned long                                      bShowZoomUI : 1;                                          // 0x072C(0x0004)
	unsigned long                                      bUseVisor : 1;                                            // 0x072C(0x0004)
	unsigned long                                      bDrawVisor : 1;                                           // 0x072C(0x0004)
	unsigned long                                      bShowVisorInHangar : 1;                                   // 0x072C(0x0004)
	unsigned long                                      bShowObjectives : 1;                                      // 0x072C(0x0004)
	unsigned long                                      bUpdateVisor : 1;                                         // 0x072C(0x0004)
	unsigned long                                      bVisorShutdown : 1;                                       // 0x072C(0x0004)
	unsigned long                                      bIsEndOfGameScoreboard : 1;                               // 0x072C(0x0004)
	unsigned long                                      bDrawMissileAssaultHud : 1;                               // 0x072C(0x0004)
	unsigned long                                      bDrawServerStats : 1;                                     // 0x072C(0x0004)
	unsigned long                                      bMenuShown : 1;                                           // 0x072C(0x0004)
	unsigned long                                      bShowExperiencePointsInWorld : 1;                         // 0x072C(0x0004) (Config, GlobalConfig)
	unsigned long                                      bAllowDeguassEffect : 1;                                  // 0x072C(0x0004) (Config, GlobalConfig)
	unsigned long                                      bVisorRTT : 1;                                            // 0x072C(0x0004)
	unsigned long                                      bUseFullViewportRenderTexture : 1;                        // 0x072C(0x0004)
	unsigned long                                      bPlayedCollectEU : 1;                                     // 0x072C(0x0004)
	unsigned long                                      bPlayedDeliverEU : 1;                                     // 0x072C(0x0004)
	unsigned long                                      bPlayingNextMatchCountdown : 1;                           // 0x072C(0x0004)
	TEnumAsByte<EMenuMode>                             previousMenuMode;                                         // 0x0730(0x0001)
	TEnumAsByte<EGameObjective>                        ObjectiveList[0x5];                                       // 0x0731(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0736(0x0002) MISSED OFFSET
	TArray<struct FLinearColor>                        HUDColors;                                                // 0x0738(0x000C) (Const, NeedCtorLink)
	struct FString                                     Kill_Eliminated;                                          // 0x0744(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Kill_Assist;                                              // 0x0750(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Kill_CriticalAssist;                                      // 0x075C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Kill_DownedBy;                                            // 0x0768(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Kill_AssistedBy;                                          // 0x0774(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Kill_Revenge;                                             // 0x0780(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Kill_Avenger;                                             // 0x078C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Kill_Savior;                                              // 0x0798(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Kill_UnderdogBonus;                                       // 0x07A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Kill_Crush;                                               // 0x07B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Kill_AADefense;                                           // 0x07BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Kill_AAAttack;                                            // 0x07C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Kill_AAContested;                                         // 0x07D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Kill_XPLabel;                                             // 0x07E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Kill_KillstreakBonus;                                     // 0x07EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_SuddenDeath;                                        // 0x07F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_MatchHasStarted;                                    // 0x0804(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_BattleshipLaunching;                                // 0x0810(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_EnemyBattleshipLaunching;                           // 0x081C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_BattleshipLaunched;                                 // 0x0828(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_EnemyBattleshipLaunched;                            // 0x0834(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_BattleshipDestroyed;                                // 0x0840(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_EnemyBattleshipDestroyed;                           // 0x084C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_BattleshipReachedBase;                              // 0x0858(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_EnemyBattleshipReachedBase;                         // 0x0864(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_BaseUnderAttack;                                    // 0x0870(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_EnemyBaseUnderAttack;                               // 0x087C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_YouAreTheBoss;                                      // 0x0888(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_DestroyEnemyReactor;                                // 0x0894(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_DefendTeamReactor;                                  // 0x08A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_BaseHeavyDamage;                                    // 0x08AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_EnemyBaseHeavyDamage;                               // 0x08B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_BaseCritical;                                       // 0x08C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_EnemyBaseCritical;                                  // 0x08D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo1Controlled;                                    // 0x08DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo1EnemyControlled;                               // 0x08E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo1Lost;                                          // 0x08F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo1Neutralized;                                   // 0x0900(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo2Controlled;                                    // 0x090C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo2EnemyControlled;                               // 0x0918(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo2Lost;                                          // 0x0924(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo2Neutralized;                                   // 0x0930(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo3Controlled;                                    // 0x093C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo3EnemyControlled;                               // 0x0948(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo3Lost;                                          // 0x0954(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo3Neutralized;                                   // 0x0960(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo1PointsAward;                                   // 0x096C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo2PointsAward;                                   // 0x0978(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Alert_Silo3PointsAward;                                   // 0x0984(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BigMsg_YourTeamWonTheMatch;                               // 0x0990(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BigMsg_YourTeamLostTheMatch;                              // 0x099C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BigMsg_CoopTeamLostTheMatch;                              // 0x09A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BigMsg_ScoreboardTitle;                                   // 0x09B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BigMsg_YouRanked[0xD];                                    // 0x09C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BigMsg_YouHaveLostTheMatch;                               // 0x0A5C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BigMsg_Stalemate;                                         // 0x0A68(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BigMsg_BaseDestroyed;                                     // 0x0A74(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     AutoBalanceOnString;                                      // 0x0A80(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     AutoBalancePendingString;                                 // 0x0A8C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Msg_AskForAutoBalanceVolunteers;                          // 0x0A98(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Msg_PlayerSwitchedTeams;                                  // 0x0AA4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Msg_PlayerSwitchingTeams;                                 // 0x0AB0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Msg_PlayerVolunteeredForAutoBalance;                      // 0x0ABC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Msg_PlayerVolunteeredForAutoBalanceParty;                 // 0x0AC8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Title_PlayerSwitchedTeams;                                // 0x0AD4(0x000C) (Const, Localized, NeedCtorLink)
	class AR_PlayerController*                         HawkenPCOwner;                                            // 0x0AE0(0x0004) (Transient)
	class AR_Pawn*                                     HawkenPawnOwner;                                          // 0x0AE4(0x0004) (Transient)
	class AR_Pawn*                                     HawkenPawnVT;                                             // 0x0AE8(0x0004) (Transient)
	class AR_PlayerReplicationInfo*                    HawkenPRI;                                                // 0x0AEC(0x0004) (Transient)
	class AR_PlayerReplicationInfo*                    HawkenPRIVT;                                              // 0x0AF0(0x0004) (Transient)
	class AR_GameReplicationInfo*                      HawkenGRI;                                                // 0x0AF4(0x0004) (Transient)
	class UClass*                                      VisorMovieClass;                                          // 0x0AF8(0x0004)
	class UTextureRenderTarget2D*                      VisorUIRenderTargetTex;                                   // 0x0AFC(0x0004) (Transient)
	class UMaterialInterface*                          VisorUIMaterial;                                          // 0x0B00(0x0004)
	class UMaterialInstanceConstant*                   Visor_MIC;                                                // 0x0B04(0x0004) (Transient)
	class UTextureRenderTarget2D*                      CockpitUIRenderTargetTex;                                 // 0x0B08(0x0004)
	float                                              SafeRegionPct;                                            // 0x0B0C(0x0004)
	float                                              LastHUDUpdateTime;                                        // 0x0B10(0x0004)
	struct FString                                     HordeMsgText;                                             // 0x0B14(0x000C) (NeedCtorLink)
	int                                                NumObjectives;                                            // 0x0B20(0x0004)
	TArray<struct FQueuedBigMessage>                   QueuedBigMessages;                                        // 0x0B24(0x000C) (NeedCtorLink)
	class UR_Gfx_Visor*                                VisorMovie;                                               // 0x0B30(0x0004)
	class UR_Gfx_Cockpit*                              CockpitMovie;                                             // 0x0B34(0x0004)
	class UR_Gfx_MechSelect*                           InGameMenuMovie;                                          // 0x0B38(0x0004)
	class UFont*                                       RobotGlowFont;                                            // 0x0B3C(0x0004)
	class USoundCue*                                   OverheatWarningCue;                                       // 0x0B40(0x0004)
	class USoundCue*                                   ChatMessageCue;                                           // 0x0B44(0x0004)
	class USoundCue*                                   NextMatchCountdownCue;                                    // 0x0B48(0x0004)
	class USoundCue*                                   OneMinuteRemainingCue;                                    // 0x0B4C(0x0004)
	class USoundCue*                                   FiveMinutesRemainingCue;                                  // 0x0B50(0x0004)
	class USoundCue*                                   TenMinutesRemainingCue;                                   // 0x0B54(0x0004)
	int                                                LastCountdownMessageMins;                                 // 0x0B58(0x0004)
	class UAudioComponent*                             LoopingSoundComp;                                         // 0x0B5C(0x0004) (ExportObject, Component, EditInline)
	int                                                NextMatchCountdownStart;                                  // 0x0B60(0x0004) (Const)
	float                                              LastChatterTime;                                          // 0x0B64(0x0004)
	float                                              CurGlobalChatterCooldown;                                 // 0x0B68(0x0004)
	float                                              CurTimeAnnouncementChatterCooldown;                       // 0x0B6C(0x0004)
	float                                              GlobalChatterCooldown_Min;                                // 0x0B70(0x0004) (Const)
	float                                              GlobalChatterCooldown_Max;                                // 0x0B74(0x0004) (Const)
	float                                              UIMessageAlertCooldown;                                   // 0x0B78(0x0004) (Const)
	TArray<int>                                        UIMessageSoundCueQueue;                                   // 0x0B7C(0x000C) (NeedCtorLink)
	int                                                PrimaryReticleIdx;                                        // 0x0B88(0x0004)
	int                                                SecondaryReticleIdx;                                      // 0x0B8C(0x0004)
	struct FSVoiceChatter                              VoiceChatterList[0x20];                                   // 0x0B90(0x000C)
	class USoundCue*                                   UIMessageCue[0x37];                                       // 0x0D10(0x0004)
	struct FSMusicEvent                                UIMessageMusicCue[0x37];                                  // 0x0DEC(0x0008)
	class UAudioComponent*                             MusicEventComp;                                           // 0x0FA4(0x0004) (ExportObject, Component, EditInline)
	class UTexture2D*                                  NemesisIcon;                                              // 0x0FA8(0x0004)
	class UTexture2D*                                  IsDominatedIcon;                                          // 0x0FAC(0x0004)
	class UTexture2D*                                  KillIcon;                                                 // 0x0FB0(0x0004)
	struct FString                                     AsymSiegeText;                                            // 0x0FB4(0x000C) (NeedCtorLink)
	struct FColor                                      FadeColor;                                                // 0x0FC0(0x0004) (Transient)
	float                                              PreviousFadeAlpha;                                        // 0x0FC4(0x0004) (Transient)
	float                                              DesiredFadeAlpha;                                         // 0x0FC8(0x0004) (Transient)
	float                                              FadeAlpha;                                                // 0x0FCC(0x0004) (Transient)
	float                                              FadeAlphaTime;                                            // 0x0FD0(0x0004) (Transient)
	float                                              FadeAlphaDelay;                                           // 0x0FD4(0x0004) (Transient)
	float                                              DesiredFadeAlphaTime;                                     // 0x0FD8(0x0004) (Transient)
	float                                              DegaussFadeStartTime;                                     // 0x0FDC(0x0004) (Transient)
	float                                              DeguassFadeMidTime;                                       // 0x0FE0(0x0004) (Transient)
	float                                              DeguassFadeEndTime;                                       // 0x0FE4(0x0004) (Transient)
	float                                              DeguassAmount;                                            // 0x0FE8(0x0004) (Transient)
	struct FString                                     AlphaTestMapText;                                         // 0x0FEC(0x000C) (Transient, NeedCtorLink)
	int                                                PresetIndexForDebug;                                      // 0x0FF8(0x0004) (Transient)
	TArray<struct FScriptDelegate>                     DebugDrawList;                                            // 0x0FFC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __DebugDraw__Delegate;                                    // 0x1008(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_HUD");
		return ptr;
	}


	void SetHUDColors(int friendColor, int neutralColor, int enemyColor, bool bTintReticle);
	struct FLinearColor STATIC_GetHudColor(int colorIdx, TEnumAsByte<EHudColorType> HudColorType);
	bool IsDebugDrawActive(const struct FScriptDelegate& DebugDrawFunc);
	void ToggleDebugDraw(const struct FScriptDelegate& DebugDrawFunc);
	void SetDebugDraw(const struct FScriptDelegate& DebugDrawFunc, bool bAdd);
	void DebugDraw(class AR_HUD* H);
	void RemoveDominatingFromScoreboard(int PlayerID);
	void ShowNewDominatingOnScoreboard(int PlayerID);
	void RemoveNemesisFromScoreboard(int PlayerID);
	void ShowNewNemesisOnScoreboard(int PlayerID);
	void RefreshWallet();
	void UpdateMechValidationUI(bool bSyncing, TEnumAsByte<ESelectionValidationResponse> FailureReason, bool bIsTestDrive);
	void UpdateMenuForRespawnFailure();
	void LateJoinVictoryMessage();
	void ShowVictoryMessage(bool bIsAWinner, unsigned char Rank);
	void UpdateMechSelectMenu(int respawnSeconds, bool bShowTimer);
	void UpdateNextMatchCountdownCue(int Seconds);
	void UpdateTeamSelectMenu();
	void ShowMenu(TEnumAsByte<EMenuMode> menumode, bool bAlwaysSetMode);
	void AddFocusIgnoreKey(const struct FString& CommandName, class UR_PlayerInput* RPI);
	void CheckInGameMovie();
	void UpdateKeyNames();
	void ToggleVisor();
	void RebootVisor(TEnumAsByte<EVisorBootMode> desiredBootMode);
	void ShutdownVisor();
	void DrawPreviewVisor();
	void DrawPostGameHud();
	void DrawHangarHud();
	void DrawHUD();
	void DrawMechOptimizationsDebugInfo(float* out_YL, float* out_YPos);
	void ShowGametypeDebugInfo(float* out_YL, float* out_YPos);
	void ShowDebugInfo(float* out_YL, float* out_YPos);
	void PostRender();
	void UpdatePostAndFullScreenEffects();
	void CacheTypedRefs();
	void SetAdminMessage(const struct FString& msg);
	void SetSystemMessage(const struct FString& msg, const struct FString& MsgColor);
	void DebugMissileAssault();
	void SetShowScores(bool bEnableShowScores);
	void ShowPauseMenu();
	void Exit();
	void CloseInGameMenu();
	void InitScoreboard();
	void ShowMatchStats(struct FGeneralMatchStats* GeneralStats, struct FSiegeModeStats* SiegeStats, struct FCarouselInfo* CarouselStats, TArray<struct FUniqueNetId>* UnlockedAchievements);
	void OverheatWarningTimer();
	bool SetTargetingCrosshair(bool bTargeting);
	bool GetThirdPersonUI();
	void SetThirdPersonUI(bool bIsThirdPerson);
	void ToggleRadar();
	void ToggleMap();
	void DrawServerStats();
	void ToggleServerStats();
	void DrawLivingHud();
	void DrawCockpitDebug();
	void DrawVisorDebug();
	void DrawVisorMIC();
	bool IsDrawingVisor();
	void SetVisorDrawFlag(bool bShouldDrawVisor);
	void SetSecondaryReticle(int Index);
	void SetPrimaryReticle(int Index);
	void SetReticleType(int LeftIdx, int RightIdx, bool bVerifyIndices);
	void Destroyed();
	void UpdateTeamGameVoiceChatter();
	void UpdateTimedGameModeVoiceChatter();
	void PlayTimeMessage(class USoundCue* Sound, int minLeft, int TimeLimit);
	void UpdateMissileAssaultVoiceChatter();
	void VoidUpdateVoiceChatter(TEnumAsByte<EVoiceChatter> ChatterIndex);
	void UpdateControlAAChatter();
	void UpdateLastChatterTime(float CueDuration, bool bUseDurationAsChatterCooldown);
	void PlayVoiceChatter(TEnumAsByte<EVoiceChatter> ChatterIndex);
	void UpdateTimeLeftAnnouncements();
	void UpdateRadioChatter();
	void CheckGameInfoPreMatchTime();
	void GetObjectiveList();
	void SetVisorDepth(float VisorDepth, float VisorScale);
	void AddObjective(TEnumAsByte<EGameObjective> Type);
	void SetVisorUIMode(TEnumAsByte<EVisorUIMode> NewMode);
	bool IsVisorBootComplete();
	void CloseVisorMovie();
	void CreateVisorMovie();
	void OnTakeDamage();
	void OnHitEnemy();
	struct FString GetBootTeamName();
	void Message(class APlayerReplicationInfo* PRI, const struct FString& msg, const struct FName& MsgType, float Lifetime);
	void LocalizedMessage(class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, const struct FString& CriticalString, int Switch, float Position, float Lifetime, int FontSize, const struct FColor& DrawColor, class UObject* OptionalObject);
	bool IsPlayerChatting();
	bool ShowMessageInChatWindow(class APlayerReplicationInfo* PRI, const struct FString& msg, int Channel);
	bool ShowMessageInVisorUI(class AR_PlayerReplicationInfo* PRI, const struct FString& msg, const struct FString& MsgColor, int Channel);
	TEnumAsByte<EMusicPriority> GetPriorityOfMessageMusicCue(class USoundCue* CurrentCue);
	void HandleEventMusicCue(int alert);
	void PlayNextEventSoundCue();
	void HandleEventSoundCue(int alert);
	void ShowPlayerSwitchingTeamsMessage(const struct FString& TeamName);
	void ShowPlayerSwitchedTeamsMessage(const struct FString& PlayerName, const struct FString& TeamName);
	void ShowVolunteeredForAutoBalanceMessage(bool bIsInParty);
	void ShowTeamsAreImbalancedMessage();
	void ShowAlertMessage(int alert);
	void ShowGenericXPEventMessage(TEnumAsByte<EExperiencePointEventType> XPEventType, int Points);
	void ShowXPEventMessageWithPlayerName(TEnumAsByte<EExperiencePointEventType> XPEventType, int Points, const struct FString& PlayerName);
	void ShowDominationEndedMessage(struct FString* playerKilled);
	void ShowNewNemesisMessage(struct FString* KillerName);
	float GetAssistDeathMessageTimeAdd();
	struct FString BuildDeathAssistString();
	void ShowDeathMessage(class AR_PlayerReplicationInfo* KillerRPRI, class UClass* KillDamageType, bool bUseGenericMessage);
	void ShowSuicideMessage(const struct FString& Killer, class AR_PlayerReplicationInfo* Victim);
	void ShowEnvironmentDeathMessage(const struct FString& KillerName, const struct FString& WeaponName, class AR_PlayerReplicationInfo* Victim);
	void ShowOldDeathMessage(const struct FString& killedByPlayer, int KillerMechXP, int PilotLevel, const struct FString& killerMechType, const struct FString& killedByWeapon);
	void ShowAssistMessage(const struct FString& playerKilled, int AssistPoints, float PercentDamage, bool bDefendingAA, int DefendingAAPoints, bool bAttackingAA, int AttackingAAPoints, bool bContestingAA, int ContestingAAPoints, bool bCritialAssist, bool bUnderdogBonus, int UnderdogBonusPoints);
	void ShowKillMessage(class APlayerReplicationInfo* KillerPRI, class UClass* dmgType, int KillPoints, float PercentDamage, int KillStreak, int KillStreakPoints, bool bRevenge, int RevengePoints, bool bAvenger, int AvengerPoints, bool bSavior, int SaviorPoints, bool bDefendingAA, int DefendingAAPoints, bool bAttackingAA, int AttackingAAPoints, bool bContestingAA, int ContestingAAPoints, bool bCrushKill, int CrushKillPoints, bool bUnderdogBonus, int UnderdogBonusPoints, int MultiKillLevel, int MultiKillPoints, struct FString* playerKilled);
	void AddEnvironmentKillMessage(const struct FString& KillerName, const struct FString& WeaponName, class AR_PlayerReplicationInfo* Victim);
	void AddKillMessage(class AR_PlayerReplicationInfo* Killer, class AR_PlayerReplicationInfo* Victim, class UClass* dmgType);
	struct FString FormatXpPointsString(int Points);
	void ShowExperiencePoints(const struct FVector& Loc, int Points, bool bIsKill);
	void SetGetHitEffect(float Amount);
	void SetNormalEffect(float Amount);
	void SetZoomEffect(float Amount);
	void SetFadeEffect(float Amount, TEnumAsByte<EPostMatchFadeType_e> PostMatchFadeType);
	void SetEMPEffect(float Amount);
	void SetDisruptorEffect(float Amount);
	void TeleportCameraFadeOut(bool bAutoFadeIn, float FadeInTime);
	void TeleportCameraFadeIn(float FadeInTime);
	void Tick(float DeltaTime);
	void DoDeguassFade(float Amount, float Time);
	void ColorFade(const struct FColor& NewFadeColor, unsigned char FromAlpha, unsigned char ToAlpha, float FadeTime, float FadeStartDelay);
	void DrawGameHud();
	bool ShouldDrawViewTargetHUD();
	void SetVisible(bool bNewVisible);
	int GetLocalPlayerOwnerIndex();
	void DrawAlphaTestMapText();
	void ConditionallySetAlphaTestMapText();
	void InitFlashCockpitUI();
	void RemoveOculusOverrides();
	void ApplyOculusOverrides();
	void PostBeginPlay();
	void InitStaticEffect();
	void NotifyBindPostProcessEffects();
};


// Class HawkenGame.R_BotsTDM
// 0x00EC (0x0714 - 0x0628)
class AR_BotsTDM : public AR_TeamDeathmatch
{
public:
	int                                                MaxSingleMechClass;                                       // 0x0628(0x0004) (Const)
	struct FString                                     OfflineTDMScreenMsg;                                      // 0x062C(0x000C) (Const, Localized, NeedCtorLink)
	unsigned long                                      bOfflineTraining : 1;                                     // 0x0638(0x0004)
	unsigned long                                      bNeedUpdateBotsPopulation : 1;                            // 0x0638(0x0004) (Transient)
	unsigned long                                      bMuteAI : 1;                                              // 0x0638(0x0004)
	class UR_BotsTDMDefinition*                        Definition;                                               // 0x063C(0x0004) (Edit)
	TArray<struct FDifficultyModifiers>                CachedDifficultyModifiers;                                // 0x0640(0x000C) (Transient, NeedCtorLink)
	int                                                DifficultyRandRange;                                      // 0x064C(0x0004)
	int                                                MatchMMR;                                                 // 0x0650(0x0004)
	int                                                OverrideMMR;                                              // 0x0654(0x0004)
	int                                                DifficultyBucket;                                         // 0x0658(0x0004)
	TArray<struct FString>                             EndGameBotMsgs;                                           // 0x065C(0x000C) (Transient, NeedCtorLink)
	int                                                DeltaScoreThreshold;                                      // 0x0668(0x0004)
	float                                              LastTimeCommandMMR;                                       // 0x066C(0x0004) (Transient)
	int                                                DifficultyComplainCount;                                  // 0x0670(0x0004) (Transient)
	float                                              ChatCommandDuration;                                      // 0x0674(0x0004)
	TArray<struct FString>                             CommandMsgs;                                              // 0x0678(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             KillMsgs;                                                 // 0x0684(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             ComplainReplyMsgs;                                        // 0x0690(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             DifficultyComplainMsgs;                                   // 0x069C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FString>                             CreditMsgs;                                               // 0x06A8(0x000C) (NeedCtorLink)
	TArray<struct FString>                             MMRCommands;                                              // 0x06B4(0x000C) (NeedCtorLink)
	TArray<struct FString>                             CombatReportCommands;                                     // 0x06C0(0x000C) (NeedCtorLink)
	TArray<struct FString>                             IncreaseDifficultyCommands;                               // 0x06CC(0x000C) (NeedCtorLink)
	TArray<struct FString>                             ReduceDifficultyCommands;                                 // 0x06D8(0x000C) (NeedCtorLink)
	TArray<struct FString>                             CreditCommands;                                           // 0x06E4(0x000C) (NeedCtorLink)
	TArray<struct FString>                             ComplainCommands;                                         // 0x06F0(0x000C) (NeedCtorLink)
	TArray<struct FString>                             MuteCommands;                                             // 0x06FC(0x000C) (NeedCtorLink)
	TArray<struct FString>                             UnMuteCommands;                                           // 0x0708(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BotsTDM");
		return ptr;
	}


	void ProcessChatCommand(const struct FString& Command, class AR_PlayerReplicationInfo* RPRI);
	bool IsCommand(const struct FString& commandStr, TArray<struct FString> CommandList);
	void ReplyToUnMuteCommand();
	void ReplyToMuteCommand();
	void ReplyToAIComplain();
	void ReplyToHardComplain();
	void ReplyToEasyComplain();
	void ReplyToInvalidDifficultyComplain();
	void ShowCredit();
	void ShowCombatReports();
	void ShowMMR();
	void StandardizeCommand(struct FString* Command);
	void OverrideMatchMMR(int NewMMR);
	void SetEndOfMatchState(TEnumAsByte<EndOfMatchState_e> NewState);
	bool DoChangeTeam(class AR_PlayerController_Base* ChangePC, int NewTeamIdx, bool bGiveReward);
	void HandleKill(class AR_PawnNative* KilledPawn, class AController* Killer, class UClass* dmgType, int MultiKillLevel, int KillStreak);
	void PopulateDifficultyModifiers(int DifficultyIndex);
	int GetMatchMMR();
	int ChooseDifficulty();
	void ApplyDifficultySettings(class APawn* PlayerPawn);
	void SetPlayerDefaults(class APawn* PlayerPawn);
	int GetBotTypeCount(int TeamIdx, int Type);
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class ANavigationPoint* StartSpot);
	void RemoveExtraBotsFromTeam(class AR_TeamInfo* Team);
	void AddBotToTeam(class AR_TeamInfo* Team);
	void UpdateAllBotsDifficulty();
	void UpdateBotPopulation();
	class UR_NPC_Template* ChooseBotTemplate();
	int GetMaxTeamSize();
	bool STATIC_IsOnlineGame();
	void ShowWinnerMessage();
	void ShowOfflineVictoryMessage(bool bIsWinner);
	void RebalanceTeamsByBeaconAssignment();
	void RebalanceTeamsByPlayerRating(class AController* IgnoreController);
	void RebalanceTeamsByPlayers(class AController* IgnoreController);
	void RebalanceBotTeamAssignments();
	void PlacePlayerOnAssignedTeam(class APlayerController* PC);
	void Logout(class AController* Exiting);
	void PostLogin(class APlayerController* NewPlayer);
	bool IsStateForBotUpdate();
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	int GetNumPlayersNeededToReady();
	void GiveEndOfGameXPAwards(bool bCountBots);
	void UpdatePlayerRatings();
	void PreBeginPlay();
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
};


// Class HawkenGame.R_Proj_DeployItem_Base
// 0x001B (0x0344 - 0x0329)
class AR_Proj_DeployItem_Base : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	unsigned long                                      bDeployed : 1;                                            // 0x032C(0x0004)
	unsigned long                                      bAttachToEnemies : 1;                                     // 0x032C(0x0004)
	float                                              Bounciness;                                               // 0x0330(0x0004)
	float                                              LandNormalZ;                                              // 0x0334(0x0004) (Const)
	class AActor*                                      AttachToActor;                                            // 0x0338(0x0004)
	class UClass*                                      ItemClass;                                                // 0x033C(0x0004) (Net)
	class AR_Item_Base*                                ItemParent;                                               // 0x0340(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_DeployItem_Base");
		return ptr;
	}


	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void ReflectProjectile(const struct FVector& HitNormal);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class HawkenGame.R_Proj_Taunt
// 0x0004 (0x0348 - 0x0344)
class AR_Proj_Taunt : public AR_Proj_DeployItem_Base
{
public:
	int                                                TauntType;                                                // 0x0344(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Taunt");
		return ptr;
	}


	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class HawkenGame.R_SpawningVolume
// 0x0028 (0x0228 - 0x0200)
class AR_SpawningVolume : public AVolume
{
public:
	int                                                SpawnID;                                                  // 0x0200(0x0004)
	class ASkeletalMeshActor*                          SpawningMesh;                                             // 0x0204(0x0004) (Edit)
	class UParticleSystem*                             DeactivateEffectPS;                                       // 0x0208(0x0004)
	class UParticleSystem*                             SpawnEffectPS;                                            // 0x020C(0x0004)
	class UParticleSystemComponent*                    SpawnEffectComp;                                          // 0x0210(0x0004) (ExportObject, Component, EditInline)
	unsigned long                                      bActivateSpawnEffects : 1;                                // 0x0214(0x0004) (Net)
	unsigned long                                      bStartupDelay : 1;                                        // 0x0214(0x0004) (Net)
	unsigned long                                      bIsActive : 1;                                            // 0x0214(0x0004) (Net)
	unsigned long                                      bUsedForBoss : 1;                                         // 0x0214(0x0004)
	float                                              EffectTimeout;                                            // 0x0218(0x0004) (Const)
	float                                              SpawnDelay;                                               // 0x021C(0x0004) (Edit)
	float                                              StartupSpawnDelay;                                        // 0x0220(0x0004)
	float                                              LastSpawnTime;                                            // 0x0224(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SpawningVolume");
		return ptr;
	}


	void DoEnforceSafeCollision();
	float GetMaxBoundsDimension();
	void DisableStartupDelay();
	void DelayedDeactivateSpawnEffects();
	void DisableActive();
	void StartActive();
	void KillSpawnEffect();
	void DeactivateSpawningEffects();
	void PlayLoopingAnim();
	bool CheckTimersActive();
	void PlaySpawningEffects();
	struct FVector GetRandomSpawnLocation(bool bUseRandomZ);
	struct FBox GetBounds();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.DependencyManager
// 0x0014 (0x0050 - 0x003C)
class UDependencyManager : public UObject
{
public:
	float                                              TimeActive;                                               // 0x003C(0x0004)
	float                                              MaxWaitTime;                                              // 0x0040(0x0004)
	TArray<struct FString>                             ActiveDependencies;                                       // 0x0044(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.DependencyManager");
		return ptr;
	}


	int FindDependencyIndex(const struct FString& DependencyName);
	TArray<struct FString> GetDependencies();
	bool HasTimedOut();
	bool AreDependenciesResolved();
	bool HasDependency(const struct FString& DependencyName);
	bool ResolveDependency(const struct FString& DependencyName);
	bool AddDependency(const struct FString& DependencyName);
	void Tick(float DeltaTime);
	class UDependencyManager* STATIC_CreateDependencyManager(float TimeOut);
};


// Class HawkenGame.DS_HawkenMenuItems
// 0x0000 (0x00D8 - 0x00D8)
class UDS_HawkenMenuItems : public UUDKUIDataStore_MenuItems
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.DS_HawkenMenuItems");
		return ptr;
	}

};


// Class HawkenGame.HawkenDataProvider_MapInfo
// 0x0000 (0x00B4 - 0x00B4)
class UHawkenDataProvider_MapInfo : public UUDKUIDataProvider_MapInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenDataProvider_MapInfo");
		return ptr;
	}


	bool SupportedByCurrentGameMode();
	bool ShouldBeFiltered();
};


// Class HawkenGame.Hawken_SeqAct_CameraFade
// 0x0008 (0x0104 - 0x00FC)
class UHawken_SeqAct_CameraFade : public USequenceAction
{
public:
	unsigned long                                      FadeOut : 1;                                              // 0x00FC(0x0004) (Edit)
	unsigned long                                      AutoFade : 1;                                             // 0x00FC(0x0004) (Edit)
	float                                              FadeTime;                                                 // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.Hawken_SeqAct_CameraFade");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.Hawken_SeqAct_EnemySpotted
// 0x000C (0x0108 - 0x00FC)
class UHawken_SeqAct_EnemySpotted : public USequenceAction
{
public:
	struct FVector                                     spottedLoc;                                               // 0x00FC(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.Hawken_SeqAct_EnemySpotted");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.Hawken_SeqAct_GetTeamNum
// 0x0004 (0x0100 - 0x00FC)
class UHawken_SeqAct_GetTeamNum : public USequenceAction
{
public:
	int                                                TeamNum;                                                  // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.Hawken_SeqAct_GetTeamNum");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.Hawken_SeqAct_MechSettings
// 0x0011 (0x010D - 0x00FC)
class UHawken_SeqAct_MechSettings : public USequenceAction
{
public:
	int                                                PrimaryIdx;                                               // 0x00FC(0x0004) (Edit)
	int                                                SecondaryIdx;                                             // 0x0100(0x0004) (Edit)
	unsigned long                                      SetWeapons : 1;                                           // 0x0104(0x0004) (Edit)
	unsigned long                                      SetMechType : 1;                                          // 0x0104(0x0004) (Edit)
	unsigned long                                      SetAbility : 1;                                           // 0x0104(0x0004) (Edit)
	int                                                NewMechType;                                              // 0x0108(0x0004) (Edit)
	TEnumAsByte<EAbilities>                            NewAbilityIndex;                                          // 0x010C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.Hawken_SeqAct_MechSettings");
		return ptr;
	}


	void RefreshAbility();
	void Activated();
};


// Class HawkenGame.Hawken_SeqAct_SalesAgent
// 0x0010 (0x010C - 0x00FC)
class UHawken_SeqAct_SalesAgent : public USeqAct_HawkenGfx
{
public:
	struct FString                                     Text;                                                     // 0x00FC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      activateAgent : 1;                                        // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.Hawken_SeqAct_SalesAgent");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.Hawken_SeqAct_SetBaseStats
// 0x0050 (0x014C - 0x00FC)
class UHawken_SeqAct_SetBaseStats : public USequenceAction
{
public:
	float                                              NewAccelRate;                                             // 0x00FC(0x0004) (Edit)
	float                                              NewRunSpeed;                                              // 0x0100(0x0004) (Edit)
	float                                              NewBoostForwardSpeed;                                     // 0x0104(0x0004) (Edit)
	float                                              NewDodgeSpeed;                                            // 0x0108(0x0004) (Edit)
	float                                              NewDodgeDistance;                                         // 0x010C(0x0004) (Edit)
	float                                              NewSideBoostCooldownTime;                                 // 0x0110(0x0004) (Edit)
	float                                              NewAirSpeed;                                              // 0x0114(0x0004) (Edit)
	float                                              NewThrusterRegenRate;                                     // 0x0118(0x0004) (Edit)
	float                                              NewMaxThrusterEnergy;                                     // 0x011C(0x0004) (Edit)
	float                                              NewHealth;                                                // 0x0120(0x0004) (Edit)
	float                                              NewHealRate;                                              // 0x0124(0x0004) (Edit)
	float                                              NewHealStartupTime;                                       // 0x0128(0x0004) (Edit)
	float                                              NewHeatMultiplier;                                        // 0x012C(0x0004) (Edit)
	float                                              NewThrusterJumpEnergy;                                    // 0x0130(0x0004) (Edit)
	float                                              NewThrusterDoubleJumpEnergy;                              // 0x0134(0x0004) (Edit)
	float                                              NewThrusterBoostSideEnergy;                               // 0x0138(0x0004) (Edit)
	float                                              NewThrusterRateHover;                                     // 0x013C(0x0004) (Edit)
	float                                              NewThrusterRateBoostForward;                              // 0x0140(0x0004) (Edit)
	float                                              NewJumpZ;                                                 // 0x0144(0x0004) (Edit)
	float                                              NewMaxEnergyUnitsHeld;                                    // 0x0148(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.Hawken_SeqAct_SetBaseStats");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.Hawken_SeqAct_SetCarouselStage
// 0x0004 (0x0100 - 0x00FC)
class UHawken_SeqAct_SetCarouselStage : public USequenceAction
{
public:
	int                                                Stage;                                                    // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.Hawken_SeqAct_SetCarouselStage");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.Hawken_SeqAct_SetItems
// 0x0008 (0x0104 - 0x00FC)
class UHawken_SeqAct_SetItems : public USequenceAction
{
public:
	int                                                ItemIndex;                                                // 0x00FC(0x0004) (Edit)
	int                                                Type;                                                     // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.Hawken_SeqAct_SetItems");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.Hawken_SeqAct_SetSpecMode
// 0x0004 (0x0100 - 0x00FC)
class UHawken_SeqAct_SetSpecMode : public USequenceAction
{
public:
	unsigned long                                      specMode : 1;                                             // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.Hawken_SeqAct_SetSpecMode");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.Hawken_SeqCond_BaseUnderAttack
// 0x0004 (0x00E8 - 0x00E4)
class UHawken_SeqCond_BaseUnderAttack : public USequenceCondition
{
public:
	int                                                TeamNumber;                                               // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.Hawken_SeqCond_BaseUnderAttack");
		return ptr;
	}


	void Activated();
	int STATIC_GetObjClassVersion();
};


// Class HawkenGame.HawkenAccessControl
// 0x000C (0x02E8 - 0x02DC)
class AHawkenAccessControl : public AAccessControl
{
public:
	struct FString                                     ServerAdminPassword;                                      // 0x02DC(0x000C) (Config, GlobalConfig, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAccessControl");
		return ptr;
	}


	void SetGamePassword(const struct FString& NewGamePassword);
	struct FString GetServerAdminPassword();
	bool SetServerAdminPassword(const struct FString& newPassword);
	bool IsServerAdmin(class APlayerController* P);
	bool AdminLogout(class APlayerController* P);
	bool AdminLogin(class APlayerController* P, const struct FString& Password);
};


// Class HawkenGame.HawkenAssetViewerCamera
// 0x0010 (0x0058 - 0x0048)
class UHawkenAssetViewerCamera : public UHawkenCameraBase
{
public:
	int                                                ViewPosition;                                             // 0x0048(0x0004) (Transient)
	TArray<struct FRotator>                            ViewRotationCycle;                                        // 0x004C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenAssetViewerCamera");
		return ptr;
	}


	void DumpViewPositions();
	void RemoveViewPosition(int ViewPositionIdx);
	void InsertViewPosition(int Pitch, int Yaw, int Roll);
	void SetCyclePosition(int NewCyclePosition);
	void PrevViewPosition();
	void NextViewPosition();
	void UpdateCamera(class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT);
	bool IsUserZoomAllowed();
	bool IsUserOffsetAllowed();
	bool IsUserViewDistanceAllowed();
};


// Class HawkenGame.HawkenCameraMode_BaseLifter
// 0x0000 (0x0260 - 0x0260)
class UHawkenCameraMode_BaseLifter : public UHawkenPawnCameraMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_BaseLifter");
		return ptr;
	}


	bool IsShuttingDown(class APawn* P);
};


// Class HawkenGame.HawkenCameraMode_ChaseCam
// 0x0000 (0x0264 - 0x0264)
class UHawkenCameraMode_ChaseCam : public UHawkenCameraMode_Default
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_ChaseCam");
		return ptr;
	}

};


// Class HawkenGame.HawkenCameraMode_ChaseCamCoOp
// 0x0000 (0x0264 - 0x0264)
class UHawkenCameraMode_ChaseCamCoOp : public UHawkenCameraMode_ChaseCam
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_ChaseCamCoOp");
		return ptr;
	}

};


// Class HawkenGame.HawkenCameraMode_DeathRift
// 0x0000 (0x0268 - 0x0268)
class UHawkenCameraMode_DeathRift : public UHawkenCameraMode_Death
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_DeathRift");
		return ptr;
	}


	bool SetFocusPoint(class APawn* ViewedPawn);
};


// Class HawkenGame.HawkenCameraMode_DemoSpec
// 0x0004 (0x0268 - 0x0264)
class UHawkenCameraMode_DemoSpec : public UHawkenCameraMode_ChaseCam
{
public:
	unsigned long                                      bRotationLocked : 1;                                      // 0x0264(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_DemoSpec");
		return ptr;
	}


	void ProcessViewRotation(float DeltaTime, class AActor* ViewTarget, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	bool OverrideUpdateCamera(class APawn* CurrentVT, class AHawkenPlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT);
	void NotifyViewTargetChanged(class AActor* OldViewTarget, class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams);
	void ToggleViewRotationLock(class AActor* ViewedActor);
	bool ShouldInterpOriginRot(class UHawkenPawnCameraMode* PrevMode);
	float GetDesiredFOV(class APawn* ViewedPawn);
	bool IsUserZoomAllowed();
	bool IsUserOffsetAllowed();
	bool IsUserViewDistanceAllowed();
	void DisplayDebug(class AHUD* H, float* YL, float* YPos);
};


// Class HawkenGame.HawkenCameraMode_HealCam
// 0x0000 (0x0260 - 0x0260)
class UHawkenCameraMode_HealCam : public UHawkenPawnCameraMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_HealCam");
		return ptr;
	}


	bool IsShuttingDown(class APawn* P);
};


// Class HawkenGame.HawkenCameraMode_HealCamRift
// 0x0000 (0x0260 - 0x0260)
class UHawkenCameraMode_HealCamRift : public UHawkenCameraMode_HealCam
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_HealCamRift");
		return ptr;
	}


	bool ShouldUseThirdPersonVisorMode();
	bool IsThirdPersonView();
	bool IsFirstPersonView();
};


// Class HawkenGame.HawkenCameraMode_HeavyCam
// 0x0004 (0x0264 - 0x0260)
class UHawkenCameraMode_HeavyCam : public UHawkenPawnCameraMode
{
public:
	float                                              CurrentPlayerFOV;                                         // 0x0260(0x0004) (Edit, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_HeavyCam");
		return ptr;
	}


	bool IsShuttingDown(class APawn* P);
	bool IsThirdPersonView();
	bool IsFirstPersonView();
	bool CanShowFirstPersonMesh(class AR_Pawn* RP);
	float GetDesiredFOV(class APawn* ViewedPawn);
	void UpdatePlayerFOV(float PCOwnerFOV);
	void OnBecomeInActive(class APawn* TargetPawn, class UHawkenPawnCameraMode* NewMode);
	void OnBecomeActive(class APawn* TargetPawn, class UHawkenPawnCameraMode* PrevMode);
};


// Class HawkenGame.HawkenCameraMode_HeavyCamTransform
// 0x0000 (0x0260 - 0x0260)
class UHawkenCameraMode_HeavyCamTransform : public UHawkenPawnCameraMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_HeavyCamTransform");
		return ptr;
	}


	bool IsFirstPersonView();
};


// Class HawkenGame.HawkenCameraMode_KillerCam
// 0x0004 (0x0268 - 0x0264)
class UHawkenCameraMode_KillerCam : public UHawkenCameraMode_Default
{
public:
	unsigned long                                      bForceFirstPerson : 1;                                    // 0x0264(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_KillerCam");
		return ptr;
	}

};


// Class HawkenGame.HawkenCameraMode_TauntCam
// 0x0000 (0x0260 - 0x0260)
class UHawkenCameraMode_TauntCam : public UHawkenPawnCameraMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_TauntCam");
		return ptr;
	}

};


// Class HawkenGame.HawkenCockpitCameraModeRift
// 0x0000 (0x0274 - 0x0274)
class UHawkenCockpitCameraModeRift : public UHawkenCockpitCameraMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCockpitCameraModeRift");
		return ptr;
	}


	struct FVector AdjustViewOffset(class APawn* P, float DeltaTime, const struct FVector& offset);
};


// Class HawkenGame.HawkenCameraMode_KillerCamRift
// 0x0000 (0x0274 - 0x0274)
class UHawkenCameraMode_KillerCamRift : public UHawkenCockpitCameraModeRift
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_KillerCamRift");
		return ptr;
	}


	bool IsFirstPersonView();
};


// Class HawkenGame.HawkenCameraMode_Ragdoll
// 0x0014 (0x0274 - 0x0260)
class UHawkenCameraMode_Ragdoll : public UHawkenPawnCameraMode
{
public:
	struct FVector2D                                   FocusInterpSpeedRange;                                    // 0x0260(0x0008) (Edit)
	struct FVector2D                                   FocusFOV;                                                 // 0x0268(0x0008) (Edit)
	float                                              FocusPitchOffsetDegrees;                                  // 0x0270(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_Ragdoll");
		return ptr;
	}


	bool IsFreeCamView();
	bool IsThirdPersonView();
	bool IsFirstPersonView();
	bool SetFocusPoint(class APawn* ViewedPawn);
};


// Class HawkenGame.HawkenCameraMode_StagingHangar
// 0x0000 (0x0260 - 0x0260)
class UHawkenCameraMode_StagingHangar : public UHawkenPawnCameraMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_StagingHangar");
		return ptr;
	}


	bool IsFreeCamView();
	bool IsThirdPersonView();
	bool IsFirstPersonView();
	bool SetFocusPoint(class APawn* ViewedPawn);
	void OnBecomeActive(class APawn* TargetPawn, class UHawkenPawnCameraMode* PrevMode);
};


// Class HawkenGame.HawkenCameraMode_TauntSpecCam
// 0x0000 (0x0260 - 0x0260)
class UHawkenCameraMode_TauntSpecCam : public UHawkenPawnCameraMode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_TauntSpecCam");
		return ptr;
	}

};


// Class HawkenGame.HawkenCameraMode_WinnerCam
// 0x0000 (0x0264 - 0x0264)
class UHawkenCameraMode_WinnerCam : public UHawkenCameraMode_ChaseCam
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCameraMode_WinnerCam");
		return ptr;
	}

};


// Class HawkenGame.HawkenCheatManager
// 0x0000 (0x0068 - 0x0068)
class UHawkenCheatManager : public UGameCheatManager
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenCheatManager");
		return ptr;
	}


	void OnDebugShowWaitingDialogClosed(int DialogId, bool bCancelled);
	void DebugShowWaitingDialog(const struct FString& Title, const struct FString& Message, bool bShowCancel, bool bShowSpinner, bool bModal);
	void OnDebugShowMessageDialogClosed(int DialogId, TEnumAsByte<EMessageDialogButton> ClickedButtonID);
	void DebugShowEmergencyBroadcastDialog(const struct FString& Title, const struct FString& Message, int DialogPriority);
	void DebugShowMessageDialog(const struct FString& Title, const struct FString& Message, bool bIsError, bool bIsConfirmation, bool bIsAntiAddiction, float AutoCloseSeconds, bool bCloseOnLevelChange);
};


// Class HawkenGame.R_UIManager
// 0x0010 (0x0058 - 0x0048)
class UR_UIManager : public UUIManager
{
public:
	class UR_LoadingScreen*                            LoadingScreen;                                            // 0x0048(0x0004)
	class UR_GFx_MechMenu_Base*                        ActiveMenu;                                               // 0x004C(0x0004)
	class UR_ToastManager*                             ToastManager;                                             // 0x0050(0x0004)
	class UR_DialogManager*                            DialogManager;                                            // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_UIManager");
		return ptr;
	}


	class UGFxObject* STATIC_GetDialogClassReference(const struct FString& DialogClass);
	void STATIC_DebugClearOpenDialogs();
	void STATIC_RegisterActiveMenu(class UR_GFx_MechMenu_Base* NewActiveMenu);
	void STATIC_HideLoadingScreen();
	void STATIC_ShowLoadingScreen();
	void STATIC_ShowMessageToast(const struct FString& Message);
	void STATIC_ShowAchievement(const struct FString& Title, const struct FString& Message, const struct FString& IconPath, int AchievementType);
	class UR_DialogManager* STATIC_GetDialogManager();
	class UR_DialogManager* STATIC_InitDialogManager(bool bChangeMenu);
	class UR_ToastManager* STATIC_GetToastManager();
	class UR_ToastManager* STATIC_InitToastManager();
	int STATIC_ShowEULADialog(const struct FScriptDelegate& OnEULADialogClosedDelegate);
	int STATIC_ShowLoginDialog(const struct FString& Email, const struct FScriptDelegate& OnLoginDialogClosedDelegate, int ExistingLoginDialogId);
	int STATIC_ShowWaitingDialog(const struct FString& Title, const struct FString& Message, bool bCancelButton, bool bShowSpinner, bool bModal, const struct FScriptDelegate& OnWaitingDialogClosedDelegate, const struct FScriptDelegate& OnInputCapturedDelegate);
	int InternalShowMessageDialog(const struct FString& Title, const struct FString& Message, const struct FScriptDelegate& OnMessageDialogCloseDelegate, int DialogPriority, bool bIsError, bool bIsConfirmation, bool bIsAntiAddiction, float AutoCloseTime, bool bCloseOnLevelChange, bool bShowCheckBox);
	void CloseMessageDialogs(int StartPriority, int MaxPriority);
	bool CloseMessageDialog(int DialogId);
	int STATIC_ShowEmergencyBroadcastDialog(const struct FString& Title, const struct FString& Message, const struct FScriptDelegate& OnMessageDialogCloseDelegate, int DialogPriority);
	int STATIC_ShowAntiAddictionDialog(const struct FString& Title, const struct FString& Message, const struct FScriptDelegate& OnMessageDialogCloseDelegate, int DialogPriority);
	int STATIC_ShowConfirmationDialog(const struct FString& Title, const struct FString& Message, const struct FScriptDelegate& OnMessageDialogCloseDelegate, int DialogPriority);
	int ShowErrorDialog(const struct FString& ErrorCode, const struct FString& Title, const struct FString& Text, bool bShowErrorCode, int Priority, const struct FScriptDelegate& OnCloseCallback);
	int ShowMessageDialog(const struct FString& Title, const struct FString& Text, const struct FString& Buttons, int Priority, const struct FScriptDelegate& OnCloseCallback);
	int STATIC_ShowReportDialog(const struct FString& ReportedPlayerName);
	int GetNumMessageDialogsOpen(int StartPriority, int MaxPriority);
};


// Class HawkenGame.HawkenResourceDataProvider
// 0x0000 (0x0080 - 0x0080)
class UHawkenResourceDataProvider : public UUDKUIResourceDataProvider
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenResourceDataProvider");
		return ptr;
	}

};


// Class HawkenGame.HawkenDataProvider_GameInfo
// 0x0070 (0x00F0 - 0x0080)
class UHawkenDataProvider_GameInfo : public UHawkenResourceDataProvider
{
public:
	struct FString                                     GameMode;                                                 // 0x0080(0x000C) (Config, NeedCtorLink)
	struct FString                                     DefaultMap;                                               // 0x008C(0x000C) (Config, NeedCtorLink)
	struct FString                                     GameSettingsClass;                                        // 0x0098(0x000C) (Config, NeedCtorLink)
	struct FString                                     GameSearchClass;                                          // 0x00A4(0x000C) (Config, NeedCtorLink)
	struct FString                                     OptionSet;                                                // 0x00B0(0x000C) (Config, NeedCtorLink)
	struct FString                                     Description;                                              // 0x00BC(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     PreviewImageMarkup;                                       // 0x00C8(0x000C) (Config, NeedCtorLink)
	struct FString                                     IconImage;                                                // 0x00D4(0x000C) (Config, NeedCtorLink)
	float                                              IconU;                                                    // 0x00E0(0x0004) (Config)
	float                                              IconV;                                                    // 0x00E4(0x0004) (Config)
	float                                              IconUL;                                                   // 0x00E8(0x0004) (Config)
	float                                              IconVL;                                                   // 0x00EC(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenDataProvider_GameInfo");
		return ptr;
	}

};


// Class HawkenGame.HawkenDebugAIController
// 0x0010 (0x065C - 0x064C)
class AHawkenDebugAIController : public ADebugCameraController
{
public:
	class UClass*                                      SwappedAIClass;                                           // 0x064C(0x0004)
	class ABaseAIController*                           AIController;                                             // 0x0650(0x0004)
	class AR_PlayerController*                         MyHawkenPC;                                               // 0x0654(0x0004)
	unsigned long                                      bHadGodMode : 1;                                          // 0x0658(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenDebugAIController");
		return ptr;
	}


	void TeleportToLogEntry();
	void ClearHistoryColor(TEnumAsByte<EAIDebugLogFilter> Filter);
	void FilterWholeHistory();
	void ClearHistoryFilter();
	void ColorHistory(TEnumAsByte<EAIDebugLogFilter> Filter);
	void ToggleHistoryFilter(TEnumAsByte<EAIDebugLogFilter> Filter);
	void ToggleHistoryMode(TEnumAsByte<ELogDrawingMode> Mode);
	void FlushAIExLogs();
	void LoadAILog(const struct FString& Filename, bool bAppendMapName, bool bTeleportToLogEntry);
	void DebugAIActor(const struct FName& actorName);
	void ToggleDrawing();
	void ToggleDebugInfo(TEnumAsByte<EAIDebugCategory> Category);
	void NE(int Count);
	void DebugDraw_AI(class AR_HUD* H);
	void DebugAI(const struct FName& Category);
	void AISelect();
	void AISpectator();
	void OnDeactivate(class APlayerController* PC);
	void OnActivate(class APlayerController* PC);
};


// Class HawkenGame.HawkenHUD_DebugAI
// 0x0040 (0x1054 - 0x1014)
class AHawkenHUD_DebugAI : public AR_HUD
{
public:
	TArray<struct FCategoryBox>                        Categories;                                               // 0x1014(0x000C) (NeedCtorLink)
	TArray<struct FLogFilter>                          Filters;                                                  // 0x1020(0x000C) (NeedCtorLink)
	unsigned char                                      Colors[0xF];                                              // 0x102C(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x103B(0x0001) MISSED OFFSET
	unsigned long                                      bUpdateLayout : 1;                                        // 0x103C(0x0004) (Transient)
	class ABaseAIController*                           TracedAI;                                                 // 0x1040(0x0004)
	int                                                ETQQueryID;                                               // 0x1044(0x0004)
	struct FScriptDelegate                             __DrawCategory__Delegate;                                 // 0x1048(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenHUD_DebugAI");
		return ptr;
	}


	void DrawAnimProps(class UCanvas* DrawCanvas, const struct FString& Label);
	void DrawAnimations(class UCanvas* DrawCanvas, class ABaseAIController* Target);
	void DrawCovers(class UCanvas* DrawCanvas, class ABaseAIController* Target);
	void DrawMessageSystem(class UCanvas* DrawCanvas, class ABaseAIController* Target);
	void DrawETQ(class UCanvas* DrawCanvas, class ABaseAIController* Target);
	void DrawHistory(class UCanvas* DrawCanvas, class ABaseAIController* Target);
	void DrawLogSnap(class UCanvas* DrawCanvas, class ABaseAIController* Target);
	void DrawPreconditions(class UCanvas* DrawCanvas, class ABaseAIController* Target);
	void DrawBlackBoard(class UCanvas* DrawCanvas, class ABaseAIController* Target);
	void DrawFiring(class UCanvas* DrawCanvas, class ABaseAIController* Target);
	void DrawCombat(class UCanvas* DrawCanvas, class ABaseAIController* Target);
	void DrawGeneric(class UCanvas* DrawCanvas, class ABaseAIController* Target);
	void DrawLayout(class AHUD* HUD, const struct FString& Title);
	void FilterWholeHistory();
	void ClearHistoryFilter();
	struct FName GetLabelForFilter(TEnumAsByte<EAIDebugLogFilter> Filter);
	void ColorHistory(TEnumAsByte<EAIDebugLogFilter> Filter);
	void ToggleLogFilter(TEnumAsByte<EAIDebugLogFilter> Filter);
	void SelectMode(const struct FString& Opt);
	void CalculateLayout(int MySizeX, int MySizeY);
	void STATIC_LockDebugAI(class ABaseAIController* AI);
	void PostRender();
	void PostBeginPlay();
	void DrawCategory(class UCanvas* DrawCanvas, class ABaseAIController* Target);
};


// Class HawkenGame.HawkenDebugAIInput
// 0x0000 (0x0268 - 0x0268)
class UHawkenDebugAIInput : public UPlayerInput
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenDebugAIInput");
		return ptr;
	}

};


// Class HawkenGame.HawkenGameCamera
// 0x0000 (0x0048 - 0x0048)
class UHawkenGameCamera : public UHawkenCameraBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenGameCamera");
		return ptr;
	}


	void UpdateCamera(class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT);
	bool IsFreeCamView();
	bool IsThirdPersonView();
	bool IsFirstPersonView();
};


// Class HawkenGame.R_BT_NPC_Manager
// 0x0088 (0x025C - 0x01D4)
class AR_BT_NPC_Manager : public AActor
{
public:
	unsigned long                                      bActive : 1;                                              // 0x01D4(0x0004) (Edit)
	float                                              DefaultRespawnTime;                                       // 0x01D8(0x0004) (Edit)
	int                                                NumRoundsOfWaves;                                         // 0x01DC(0x0004) (Edit)
	float                                              TimeBetweenWaves;                                         // 0x01E0(0x0004) (Edit)
	int                                                iRound;                                                   // 0x01E4(0x0004)
	int                                                iWave;                                                    // 0x01E8(0x0004) (Net)
	float                                              NewWaveTime;                                              // 0x01EC(0x0004)
	TArray<struct FWaveOfNpcs>                         Waves;                                                    // 0x01F0(0x000C) (Edit, NeedCtorLink)
	TArray<struct FFillNPC>                            FillNPCs;                                                 // 0x01FC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FFillNPCSlotData>                    FillNPCSlotInfoList;                                      // 0x0208(0x000C) (NeedCtorLink)
	int                                                NumEnemiesLeftForThisWave;                                // 0x0214(0x0004) (Net)
	int                                                TotalNumOfEnemiesForThisWave;                             // 0x0218(0x0004) (Net)
	int                                                NumOfFillBotsAllowedAliveAtOnce;                          // 0x021C(0x0004) (Transient)
	int                                                NumOfFillBotsAliveRightNow;                               // 0x0220(0x0004) (Transient)
	TArray<class UETQTemplate*>                        ETQsNeeded;                                               // 0x0224(0x000C) (Edit, NeedCtorLink)
	TArray<class UBTTemplate*>                         BehaviorTreeTemplateNeeded;                               // 0x0230(0x000C) (Edit, NeedCtorLink)
	float                                              SpaceBetweenLines;                                        // 0x023C(0x0004) (Config)
	float                                              DebugDisplayStartBoxStartX;                               // 0x0240(0x0004) (Config)
	float                                              DebugDisplayStartBoxStartY;                               // 0x0244(0x0004) (Config)
	float                                              DebugDisplayStartBoxSizeX;                                // 0x0248(0x0004) (Config)
	float                                              DebugDisplayStartBoxSizeY;                                // 0x024C(0x0004) (Config)
	float                                              DebugDisplayStartTextStartX;                              // 0x0250(0x0004) (Config)
	float                                              DebugDisplayStartTextStartY;                              // 0x0254(0x0004) (Config)
	struct FColor                                      DebugDisplayTextColor;                                    // 0x0258(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BT_NPC_Manager");
		return ptr;
	}


	void DrawGroupDebugInfoToHud(class AR_HUD* HUD, float X, int WaveIndex, int GroupIndex, bool bSimple, float* Y);
	void DrawWaveDebugInfoToHud(class AR_HUD* HUD, float X, bool bSimple, float* Y);
	void DrawDebugInfoToHud(class AR_HUD* HUD, class UTexture2D* Icon, bool bSimple);
	void DrawDebug(class AR_HUD* HUD);
	void MaintainFillNpcList();
	void MaintainWave(float DeltaSeconds);
	bool TestForWaveCompleted();
	int GetMaxActiveInGroup(const struct FNPCGroup& Group);
	int GetMaxSpawnedInGroup(const struct FNPCGroup& Group);
	void Tick(float DeltaSeconds);
	void HandleNewWaveNeed();
	void SpawnNPC(int GroupIndex);
	class AHawkenAi_ControllerBase* SpawnFillNpc(int FillIndex, int FillBotListIndex);
	void SetFillBotsSpawnData();
	void CleanOutCurrentFillNPCSlotInfoList();
	void AssignProperties(int GroupIndex, class AR_PawnBase* npc);
	struct FVector FindSpawnPoint(int GroupIndex, const struct FFillNPC& npc);
	void HandleFillNPCDied(class AHawkenAi_ControllerBase* NPCCtrl);
	void HandleGroupNPCDied(class AHawkenAi_ControllerBase* NPCCtrl);
	void OnNPCDied(class APawn* npc);
	void PostBeginPlay();
	void ResetWaveSpawnCounts();
};


// Class HawkenGame.R_MenuGameBase
// 0x0000 (0x0450 - 0x0450)
class AR_MenuGameBase : public AR_GameInfoBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MenuGameBase");
		return ptr;
	}


	bool NeedPlayers();
	bool ChangeTeam(class AController* Other, int N, bool bNewTeam);
	bool AllowPausing(class APlayerController* PC);
	void StartOnlineGame();
	void RestartPlayer(class AController* NewPlayer);
};


// Class HawkenGame.R_EntryGame
// 0x0000 (0x0450 - 0x0450)
class AR_EntryGame : public AR_MenuGameBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_EntryGame");
		return ptr;
	}


	bool NeedPlayers();
};


// Class HawkenGame.R_DemoSpec
// 0x0039 (0x1701 - 0x16C8)
class AR_DemoSpec : public AR_PlayerController
{
public:
	class APlayerReplicationInfo*                      MyRealViewTarget;                                         // 0x16C8(0x0004)
	unsigned long                                      bLockRotationToViewTarget : 1;                            // 0x16CC(0x0004) (Config, GlobalConfig)
	unsigned long                                      bAutoSwitchPlayers : 1;                                   // 0x16CC(0x0004) (Config, GlobalConfig)
	unsigned long                                      bNeedsInitialViewTarget : 1;                              // 0x16CC(0x0004) (Transient)
	float                                              AutoSwitchPlayerInterval;                                 // 0x16D0(0x0004) (Config, GlobalConfig)
	TArray<float>                                      DemoPlaySpeedPresets;                                     // 0x16D4(0x000C) (Config, GlobalConfig, NeedCtorLink)
	TArray<float>                                      DemoMoveSpeedPresets;                                     // 0x16E0(0x000C) (Config, GlobalConfig, NeedCtorLink)
	int                                                CameraAnimScaleIndex;                                     // 0x16EC(0x0004) (Transient)
	TArray<float>                                      CameraAnimScalePresets;                                   // 0x16F0(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class APlayerReplicationInfo*                      InitialViewPRI;                                           // 0x16FC(0x0004) (Net)
	TEnumAsByte<EDemoPlayCameraAnim>                   ActiveCameraAnim;                                         // 0x1700(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DemoSpec");
		return ptr;
	}


	void DemoSpec_TogglePlaybackInfo();
	void DemoSpec_FocusPrevMechPart();
	void DemoSpec_FocusNextMechPart();
	void DemoSpec_FocusMechPart(int MechPartId);
	int FindCurrentDemoMovePresetIndex();
	int FindCurrentDemoPlayPresetIndex();
	void DemoSpec_DecreaseCameraSpeed();
	void DemoSpec_IncreaseCameraSpeed();
	void DemoSlomo(float NewTimeDilation);
	void DemoSpec_DecreasePlaySpeed();
	void DemoSpec_IncreasePlaySpeed();
	void StopViewDistanceInterp();
	void DemoSpec_IncreaseViewDistance();
	void DemoSpec_DecreaseViewDistance();
	void DemoSpec_StopOffsetAdjust();
	void DemoSpec_MoveOut();
	void DemoSpec_MoveIn();
	void DemoSpec_MoveRight();
	void DemoSpec_MoveLeft();
	void DemoSpec_MoveDown();
	void DemoSpec_MoveUp();
	void DemoSpec_StopZoom();
	void DemoSpec_StartZoomOut();
	void DemoSpec_StartZoomIn();
	void DemoSpec_TogglePawnRelativeRotation();
	bool IsPawnRelativeRotationLocked();
	void DemoScreenshotMode();
	void ToggleDemoCameraCollision();
	class UHawkenCameraMode_DemoSpec* GetDemoSpecCameraMode();
	class UHawkenPawnCameraManager* GetDemoSpecTPCam();
	void NotifyPawnSpawned(class AR_Pawn* DemoPawn);
	void StopMenuMusic();
	void CycleCameraAnim(int AdjustAmount);
	void CycleCameraAnimScale(int AdjustAmount);
	void PlayCurrentCameraAnim();
	void PostDemoRewind();
	void RemovePlayersOnly();
	void ViewSpectatorPoint(bool bNext);
	void ServerViewPrevSpectatorPoint();
	void ServerViewNextSpectatorPoint();
	void ServerViewFirstSpectatorPoint();
	void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
	void SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void DemoViewPrevPlayer();
	void DemoViewNextPlayer();
	void LockToActorUnderCrosshair();
	void ViewHitActor();
	void ViewClass(class UClass* aClass, bool bQuiet, bool bCheat);
	void DemoPause();
	void Pause();
	bool SetPause(bool bPause, const struct FScriptDelegate& CanUnpauseDelegate);
	void ReplicatedEvent(const struct FName& VarName);
	void InitPlayerReplicationInfo();
	void ReceivedPlayer();
	void PostBeginPlay();
	bool IsPlayingDemo();
	bool IsRecordingDemo();
};


// Class HawkenGame.R_Bot
// 0x00A4 (0x04DC - 0x0438)
class AR_Bot : public AUDKBot
{
public:
	float                                              TargetDistanceThreshold;                                  // 0x0438(0x0004)
	float                                              OldDistance;                                              // 0x043C(0x0004)
	int                                                FramesBeingStuck;                                         // 0x0440(0x0004)
	unsigned long                                      bSpawnedInit : 1;                                         // 0x0444(0x0004)
	unsigned long                                      bAttackNPCs : 1;                                          // 0x0444(0x0004) (Edit)
	unsigned long                                      bScavanger : 1;                                           // 0x0444(0x0004) (Edit)
	unsigned long                                      bFollowOnly : 1;                                          // 0x0444(0x0004) (Edit)
	unsigned long                                      bStationaryOnly : 1;                                      // 0x0444(0x0004) (Edit)
	unsigned long                                      bDebugAI : 1;                                             // 0x0444(0x0004) (Edit)
	unsigned long                                      bCanShoot : 1;                                            // 0x0444(0x0004)
	unsigned long                                      bApproachEnemies : 1;                                     // 0x0444(0x0004)
	unsigned long                                      bAfraid : 1;                                              // 0x0444(0x0004)
	unsigned long                                      bFiring : 1;                                              // 0x0444(0x0004)
	unsigned long                                      bFaceEnemy : 1;                                           // 0x0444(0x0004)
	unsigned long                                      bRegenHealth : 1;                                         // 0x0444(0x0004)
	TArray<struct FString>                             BotNames;                                                 // 0x0448(0x000C) (Const, NeedCtorLink)
	TArray<struct FString>                             Adjectives;                                               // 0x0454(0x000C) (Const, NeedCtorLink)
	TArray<struct FString>                             Nouns;                                                    // 0x0460(0x000C) (Const, NeedCtorLink)
	int                                                NumRespawns;                                              // 0x046C(0x0004)
	int                                                WaveIndex;                                                // 0x0470(0x0004)
	int                                                GroupIndex;                                               // 0x0474(0x0004)
	struct FVector                                     TempDest;                                                 // 0x0478(0x000C)
	struct FVector                                     TempOffsetDest;                                           // 0x0484(0x000C)
	class AActor*                                      Destination;                                              // 0x0490(0x0004) (Edit)
	float                                              FightingRadius;                                           // 0x0494(0x0004) (Edit)
	float                                              FollowRadius;                                             // 0x0498(0x0004) (Edit)
	float                                              HealthBeforeAvoid;                                        // 0x049C(0x0004) (Edit)
	float                                              ExplodeDistance;                                          // 0x04A0(0x0004) (Edit)
	int                                                LogLevel;                                                 // 0x04A4(0x0004)
	struct FString                                     GoalString;                                               // 0x04A8(0x000C) (NeedCtorLink)
	float                                              ReactionTime;                                             // 0x04B4(0x0004)
	int                                                Toggle;                                                   // 0x04B8(0x0004)
	int                                                CurrentMechType;                                          // 0x04BC(0x0004)
	TArray<int>                                        PatrolAreas;                                              // 0x04C0(0x000C) (Edit, NeedCtorLink)
	class AR_PawnBase*                                 MyOwner;                                                  // 0x04CC(0x0004)
	struct FVector                                     KilledLocation;                                           // 0x04D0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Bot");
		return ptr;
	}


	void WhatToDoNext();
	bool AdjustAround(class APawn* Other);
	void ExecuteWhatToDoNext();
	bool ReachedTarget(const struct FVector& Dest, float AcceptableDistance, bool CheckStuck);
	bool FindPathToLocation(const struct FVector& TargetLocation, float Distance);
	bool OnAcquireEnemy(class APawn* NewEnemy, bool ForceAttack);
	void OnLoseEnemy();
	bool LostContact(float MaxTime);
	bool SupportsPatrolArea(int patrolArea);
	class AActor* FindHidePoint(float MinDistance);
	class AActor* FindRandomPoint(float MaxDistance);
	class APawn* FindClosestEnemy();
	bool IsValidEnemy(class APawn* P);
	void SpawnedByKismet();
	void PostBeginPlay();
	void ResetSkill();
	float AdjustAimError(float TargetDist, bool bInstantProj);
	void SetCombatTimer();
	void Tick(float DeltaTime);
	void Respawn();
	bool FireWeaponAt(class AActor* A);
	void StopFiring();
	void TimedFireWeaponAtEnemy();
	void StartFiring();
	void StopFiringLoop();
	void StartFiringLoop();
	void InitPlayerReplicationInfo();
	struct FRotator GetAdjustedAimFor(class AWeapon* InWeapon, const struct FVector& projStart);
	struct FString STATIC_GenerateName();
};


// Class HawkenGame.R_GameObjectives
// 0x0024 (0x0060 - 0x003C)
class UR_GameObjectives : public UObject
{
public:
	TArray<struct FString>                             ObjectiveNames;                                           // 0x003C(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             ObjectiveLabels;                                          // 0x0048(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             ObjectiveColor;                                           // 0x0054(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameObjectives");
		return ptr;
	}

};


// Class HawkenGame.R_Gfx_Cockpit
// 0x005C (0x01C8 - 0x016C)
class UR_Gfx_Cockpit : public UR_GFx_Base
{
public:
	class UGFxObject*                                  AbilityMC;                                                // 0x016C(0x0004)
	class UGFxObject*                                  AbilityInfo;                                              // 0x0170(0x0004)
	class UGFxObject*                                  ItemMC[0x3];                                              // 0x0174(0x0004)
	class UGFxObject*                                  ItemInfo[0x3];                                            // 0x0180(0x0004)
	struct FString                                     ItemKeys[0x3];                                            // 0x018C(0x000C) (NeedCtorLink)
	struct FString                                     AbilityKey;                                               // 0x01B0(0x000C) (NeedCtorLink)
	class UClass*                                      CurrentItemClass[0x3];                                    // 0x01BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Gfx_Cockpit");
		return ptr;
	}


	void SetNeutralColor(float R, float G, float B);
	void SetFoeColor(float R, float G, float B);
	void SetFriendColor(float R, float G, float B);
	void UpdateMovie(class AR_Pawn* Owner);
	void UpdateItem(int I, class AR_Item_Base* ItemObj, class AR_Pawn* Owner, bool bSelected);
	void UpdateAbility(class AR_Pawn* Owner);
	void STATIC_UpdateKeyNames(class APlayerController* PC, struct FString* AbilityKeyParam, struct FString* ItemKeysParam);
	void CacheClipReferences();
	void ActivateKismetEvent();
	bool ScreenResized(int ViewportSizeX, int ViewportSizeY, int* RenderTargetSizeX, int* RenderTargetSizeY);
	void StopSampler();
	void RunSampler(class UGFxObject* Params);
	bool Start(bool StartPaused);
	struct FString STATIC_GetItemIconPath(class AR_Item_Base* ItemObj);
};


// Class HawkenGame.R_DeathMessage
// 0x0070 (0x00C0 - 0x0050)
class UR_DeathMessage : public ULocalMessage
{
public:
	struct FString                                     KilledString;                                             // 0x0050(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     SomeoneString;                                            // 0x005C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     SuicideString;                                            // 0x0068(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     TurretString;                                             // 0x0074(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     BattleshipString;                                         // 0x0080(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     BaseDefenseString;                                        // 0x008C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     MissileSiloString;                                        // 0x0098(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     ForceFieldKilledByWeaponString;                           // 0x00A4(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     SuicideKilledByWeaponString;                              // 0x00B0(0x000C) (Edit, Const, Localized, NeedCtorLink)
	unsigned long                                      bNoConsoleDeathMessages : 1;                              // 0x00BC(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DeathMessage");
		return ptr;
	}


	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	struct FString STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	struct FString STATIC_ParseKillMessage(const struct FString& KillerName, const struct FString& VictimName, const struct FString& DeathMessage);
	struct FColor STATIC_GetConsoleColor(class APlayerReplicationInfo* RelatedPRI_2);
};


// Class HawkenGame.R_Gfx_MechSelect
// 0x0A24 (0x3C44 - 0x3220)
class UR_Gfx_MechSelect : public UR_GFx_MechMenu_Base
{
public:
	class AR_PlayerController*                         ControllerOwner;                                          // 0x3220(0x0004)
	class UGFxObject*                                  TeamSelect;                                               // 0x3224(0x0004)
	class UGFxObject*                                  PlayerToRemove;                                           // 0x3228(0x0004)
	TArray<class UGFxObject*>                          PlayersForTeams;                                          // 0x322C(0x000C) (NeedCtorLink)
	class UGFxObject*                                  MatchInfo;                                                // 0x3238(0x0004)
	class UGFxObject*                                  EarningsObj;                                              // 0x323C(0x0004)
	class UGFxObject*                                  CurMechEarningsObj;                                       // 0x3240(0x0004)
	class UGFxObject*                                  CarouselTags[0x6];                                        // 0x3244(0x0004)
	class UGFxObject*                                  LastDeath_AssistPlayerArray;                              // 0x325C(0x0004)
	class UGFxObject*                                  LastDeath_KillerPlayerObj;                                // 0x3260(0x0004)
	class UGFxObject*                                  LastDeath_MechStatObj;                                    // 0x3264(0x0004)
	class UGFxObject*                                  LastDeath_GenericKillObj;                                 // 0x3268(0x0004)
	class AR_PlayerReplicationInfo*                    KillCamRPI;                                               // 0x326C(0x0004)
	unsigned long                                      bUsingGenericKillMessage : 1;                             // 0x3270(0x0004)
	unsigned long                                      bHaveInitializedStoreItems : 1;                           // 0x3270(0x0004)
	unsigned long                                      bCustomizationEnabled : 1;                                // 0x3270(0x0004)
	unsigned long                                      bShowingKillCamInfo : 1;                                  // 0x3270(0x0004) (Transient)
	unsigned long                                      bBuiltRecentKillCamInfo : 1;                              // 0x3270(0x0004) (Transient)
	unsigned long                                      bTeamGame : 1;                                            // 0x3270(0x0004)
	unsigned long                                      bLobbyCountdown : 1;                                      // 0x3270(0x0004) (Transient)
	unsigned long                                      bMechSelected : 1;                                        // 0x3270(0x0004)
	class UR_GameplayTips*                             GameplayTips;                                             // 0x3274(0x0004)
	float                                              TimeTilUpdate;                                            // 0x3278(0x0004)
	float                                              UpdateRate;                                               // 0x327C(0x0004)
	struct FString                                     MatchInProgress;                                          // 0x3280(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MatchAutoStart;                                           // 0x328C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MatchMorePlayersNeeded;                                   // 0x3298(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MatchMorePlayersNeededSingular;                           // 0x32A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MatchMorePlayersReadyNeeded;                              // 0x32B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MatchMorePlayersReadyNeededSingular;                      // 0x32BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_pilotLabel;                                 // 0x32C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_mechLabel;                                  // 0x32D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_killsLabel;                                 // 0x32E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_deathsLabel;                                // 0x32EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_assistsLabel;                               // 0x32F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_pingLabel;                                  // 0x3304(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_xpLabel;                                    // 0x3310(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_energyInLabel;                              // 0x331C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_energyOutLabel;                             // 0x3328(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_battleshipsLabel;                           // 0x3334(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_energyCollected;                            // 0x3340(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_energyTransferred;                          // 0x334C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_baseHealthLabel;                            // 0x3358(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_baseEnergyLabel;                            // 0x3364(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_battleshipHealthLabel;                      // 0x3370(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_silosControlled;                            // 0x337C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_kills;                          // 0x3388(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_assists;                        // 0x3394(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_deaths;                         // 0x33A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_dominated;                      // 0x33AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_nemesisKills;                   // 0x33B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_savior;                         // 0x33C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_healing;                        // 0x33D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_damageSustained;                // 0x33DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_damageDelivered;                // 0x33E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_energyCollected;                // 0x33F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_energyDelivered;                // 0x3400(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_battleshipsLaunched;            // 0x340C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_silosCaptured;                  // 0x3418(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_killdeathRatio;                 // 0x3424(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_damageRatio;                    // 0x3430(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_droneKills;                     // 0x343C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_botKills;                       // 0x3448(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_bossKills;                      // 0x3454(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_droneAssists;                   // 0x3460(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_botAssists;                     // 0x346C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_bossAssists;                    // 0x3478(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_scoreboard_localplayer_revive;                         // 0x3484(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UINavPath_NavLobby;                                       // 0x3490(0x000C) (Const, NeedCtorLink)
	struct FString                                     UINavPath_NavPostMatch;                                   // 0x349C(0x000C) (Const, NeedCtorLink)
	struct FString                                     LocEnergySpent;                                           // 0x34A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocDamageToBattleship;                                    // 0x34B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocMatchLength;                                           // 0x34C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocNPCsKilled;                                            // 0x34CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocNPCsDeaths;                                            // 0x34D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocTurretDeaths;                                          // 0x34E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocMVPName;                                               // 0x34F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocMVP_NotEnoughPlayers;                                  // 0x34FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocKillLeader;                                            // 0x3508(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocAssistLeader;                                          // 0x3514(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocKDRatioLeader;                                         // 0x3520(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocEUReturnedLeader;                                      // 0x352C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocMostKilledPlayer;                                      // 0x3538(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocMostKilledBy;                                          // 0x3544(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocMostUsedPrimary;                                       // 0x3550(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocMostUsedSecondary;                                     // 0x355C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocMostUsedItem;                                          // 0x3568(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocMostUsedAbility;                                       // 0x3574(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocNotAvailable;                                          // 0x3580(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocMostXP;                                                // 0x358C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocMostDeaths;                                            // 0x3598(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LocMostAssists;                                           // 0x35A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_matchLabel;                                      // 0x35B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_playerLabel;                                     // 0x35BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_extraLabel;                                      // 0x35C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_accoladesLabel;                                  // 0x35D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ComingSoon;                                            // 0x35E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_achievementsLabel;                               // 0x35EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_pointsEarnedLabel;                               // 0x35F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_earnings_bonusXP;                                      // 0x3604(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_earnings_bonusHC;                                      // 0x3610(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_MechXP;                                    // 0x361C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_MechLevel;                                 // 0x3628(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_Primary;                                   // 0x3634(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_AltPrimary;                                // 0x3640(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_Secondary;                                 // 0x364C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_Ability;                                   // 0x3658(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_TechPoints;                                // 0x3664(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_Unlocked;                                  // 0x3670(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_AlternateWeaponUnlocked;                   // 0x367C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_AlternateItemUnlocked;                     // 0x3688(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_ConsumableUnlocked;                        // 0x3694(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_OffensiveInternalUnlocked;                 // 0x36A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_DefensiveInternalUnlocked;                 // 0x36AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_FunctionalInternalUnlocked;                // 0x36B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_progression_WeaponSwitchUnlocked;                      // 0x36C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_remainingNoticeLabelTournament_text;                   // 0x36D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_remainingNoticeLabel_text;                             // 0x36DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_nextMatchServerLoading_text;                           // 0x36E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_exitButton_text;                                       // 0x36F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SelectionWeaponError_Title;                               // 0x3700(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SelectionWeaponError_Text;                                // 0x370C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SelectionSyncError_Title;                                 // 0x3718(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SelectionSyncError_General;                               // 0x3724(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SelectionSyncError_InstanceExpired;                       // 0x3730(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GarageNotAllowed_Title;                                   // 0x373C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GarageNotAllowed_MatchStarting_Text;                      // 0x3748(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GarageNotAllowed_MatchRollingOver_Text;                   // 0x3754(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ChatMessageNotSent;                                       // 0x3760(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelGameChat;                                         // 0x376C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTeam;                                             // 0x3778(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAll;                                              // 0x3784(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelSyncing;                                          // 0x3790(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelServer;                                           // 0x379C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTimeLeft;                                         // 0x37A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelGameTime;                                         // 0x37B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelPrematchTime;                                     // 0x37C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelShowScoreboard;                                   // 0x37CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelHideScoreboard;                                   // 0x37D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelGametypeAtMap;                                    // 0x37E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_localServer;                                           // 0x37F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesTitle;                                            // 0x37FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesMA_00;                                            // 0x3808(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesMA_01;                                            // 0x3814(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesMA_02;                                            // 0x3820(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesMA_03;                                            // 0x382C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesMA_04;                                            // 0x3838(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesMA_05;                                            // 0x3844(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesMA_06;                                            // 0x3850(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesSiege_00;                                         // 0x385C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesSiege_01;                                         // 0x3868(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesSiege_02;                                         // 0x3874(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesSiege_03;                                         // 0x3880(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesSiege_04;                                         // 0x388C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesSiege_05;                                         // 0x3898(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesSiege_06;                                         // 0x38A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesSiege_07;                                         // 0x38B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesSiege_08;                                         // 0x38BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesCoop_00;                                          // 0x38C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesCoop_01;                                          // 0x38D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesCoop_02;                                          // 0x38E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesCoop_03;                                          // 0x38EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesCoop_04;                                          // 0x38F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesCoop_05;                                          // 0x3904(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesCoop_06;                                          // 0x3910(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesCoop_07;                                          // 0x391C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesCoop_08;                                          // 0x3928(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesCoop_09;                                          // 0x3934(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_rulesCoop_11;                                          // 0x3940(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelClass;                                            // 0x394C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelCallsign;                                         // 0x3958(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelPing;                                             // 0x3964(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelXPScore;                                          // 0x3970(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchCarousel;                                     // 0x397C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchEarnings;                                     // 0x3988(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchMastery;                                      // 0x3994(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchStats;                                        // 0x39A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchAchievements;                                 // 0x39AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchMatchStats;                                   // 0x39B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchPlayerStats;                                  // 0x39C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchMasteryRank;                                  // 0x39D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchMasteryOverall;                               // 0x39DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchMasteryCurrentUnlocks;                        // 0x39E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchMasteryNextUnlocks;                           // 0x39F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchMasteryRankTrial;                             // 0x3A00(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_postMatchMasteryUnlocksTrial;                          // 0x3A0C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_navPostMatch;                                          // 0x3A18(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelRematch;                                          // 0x3A24(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelPilotConnecting;                                  // 0x3A30(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowMaxRankNotice;                                 // 0x3A3C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowLabelLost;                                     // 0x3A48(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_testDrivePostMatch1;                                   // 0x3A54(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_testDrivePostMatch2;                                   // 0x3A60(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_testDrivePostMatch3;                                   // 0x3A6C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_testDrivePostMatch4;                                   // 0x3A78(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_testDrivePostMatch5;                                   // 0x3A84(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_testDrivePostMatch6;                                   // 0x3A90(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelDestroyedBy;                                      // 0x3A9C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelAssistedBy;                                       // 0x3AA8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelHealthRemaining;                                  // 0x3AB4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipOverflowDisabled;                               // 0x3AC0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipXPUntilNextPilotRank;                           // 0x3ACC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelWaveResult;                                       // 0x3AD8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_mechConfirmDialogTitle;                                // 0x3AE4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_mechConfirmDialogMessage;                              // 0x3AF0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_challengeRewardTitle;                                  // 0x3AFC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_challengeRewardMessage;                                // 0x3B08(0x000C) (Const, Localized, NeedCtorLink)
	TEnumAsByte<EMenuMode>                             currentMenuMode;                                          // 0x3B14(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x3B15(0x0003) MISSED OFFSET
	int                                                StoredGameType;                                           // 0x3B18(0x0004)
	struct FString                                     StoredServerName;                                         // 0x3B1C(0x000C) (NeedCtorLink)
	class UTexture*                                    DefaultPilotIconTexture;                                  // 0x3B28(0x0004)
	int                                                startMatchPilotXP;                                        // 0x3B2C(0x0004) (Transient)
	int                                                startMatchPilotLevel;                                     // 0x3B30(0x0004) (Transient)
	int                                                endMatchPilotXP;                                          // 0x3B34(0x0004) (Transient)
	int                                                endMatchPilotLevel;                                       // 0x3B38(0x0004) (Transient)
	class UTexture2D*                                  CoOpDroneIcon;                                            // 0x3B3C(0x0004)
	class UTexture2D*                                  CoOpMechIcon;                                             // 0x3B40(0x0004)
	class UTexture2D*                                  CoOpBossIcon;                                             // 0x3B44(0x0004)
	TArray<class UGFxObject*>                          GFxChallenges;                                            // 0x3B48(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __RequestPostMatchEarningsDelegate__Delegate;             // 0x3B54(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SetPlayerNameDelegate__Delegate;                        // 0x3B60(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __QuitDelegate__Delegate;                                 // 0x3B6C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ResumeDelegate__Delegate;                               // 0x3B78(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __CloseCoopPostWaveScoreboardDelegate__Delegate;          // 0x3B84(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __MechSelectedDelegate__Delegate;                         // 0x3B90(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __MechBayChangedDelegate__Delegate;                       // 0x3B9C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __PlayerSuicideDelegate__Delegate;                        // 0x3BA8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SwitchTeamDelegate__Delegate;                           // 0x3BB4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SetReadyDelegate__Delegate;                             // 0x3BC0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SetShowSiegeRulesDelegate__Delegate;                    // 0x3BCC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SetShowMissileAssaultRulesDelegate__Delegate;           // 0x3BD8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SetShowCoopRulesDelegate__Delegate;                     // 0x3BE4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SendGameMessageDelegate__Delegate;                      // 0x3BF0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ShowingCarouselDelegate__Delegate;                      // 0x3BFC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __IsTrainingModeDelegate__Delegate;                       // 0x3C08(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateChallengeVoteDelegate__Delegate;                  // 0x3C14(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ShowReportPlayerDialogDelegate__Delegate;               // 0x3C20(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __KickPlayerDelegate__Delegate;                           // 0x3C2C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SwitchPlayerDelegate__Delegate;                         // 0x3C38(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Gfx_MechSelect");
		return ptr;
	}


	void UpdateAuthorizedMode();
	void UpdateAdminMode(bool bIsAdmin);
	void SetDelegate_SwitchPlayer(const struct FScriptDelegate& D);
	void SwitchPlayer(const struct FString& PlayerName);
	void SwitchPlayerDelegate(const struct FString& PlayerName);
	void SetDelegate_KickPlayer(const struct FScriptDelegate& D);
	void KickPlayer(const struct FString& PlayerName);
	void KickPlayerDelegate(const struct FString& PlayerName);
	void SetDelegate_ShowReportPlayerDialog(const struct FScriptDelegate& D);
	void ShowReportPlayerDialog(const struct FString& ReportedPlayerName);
	void ShowReportPlayerDialogDelegate(const struct FString& ReportedPlayerName);
	void LoadAvailableChallenges();
	void AddNewChallengeToUI(class UGFxObject* NewChallenge);
	void UpdateChallengeVoteForUI();
	void SetDelegate_UpdateChallengeVote(const struct FScriptDelegate& D);
	void UpdateChallengeVote(int ChallengeIndex);
	void UpdateChallengeVoteDelegate(int ChallengeIndex);
	void OnInGamePurchasingDisabled();
	void UpdateActiveMechForLastSelected();
	void SetLastActiveMech(const struct FString& MechInstanceId);
	class UGFxObject* FindGFxGameItemTypeForDamageType(class UClass* RDmgType);
	class UGFxObject* CreateGFxInternalsList(const struct FInternalsInfo& Info);
	class UGFxObject* CreateGFxItemsList(const struct FItemsInfo& Info);
	class UGFxObject* CreateAssistingPlayerArray(TArray<struct FDeathAssistPlayerInfo>* DeathAssistInfo);
	class UGFxObject* CreateKilledByMechInfo(class AR_PlayerReplicationInfo* KillerRPRI, class UClass* KillDamageType, int KillerHealthAtTimeOfDeath);
	void ShowKillCamInfo(class UGFxObject* KillerPlayerObj, class UGFxObject* MechStatObj, class UGFxObject* AssistPlayerArray, bool bUseGenericKillCam);
	void BuildGenericKillCamInfo(const struct FString& DisplayName, const struct FString& IconPath);
	void BuildKillCamInfo(class AR_PlayerReplicationInfo* KillerRPRI, class UClass* KillDamageType, int KillerHealthAtTimeOfDeath, TArray<struct FDeathAssistPlayerInfo>* DeathAssistInfo);
	void SetKillCamInfoRestoration(bool bNeedRestore);
	bool NeedToRestoreKillCamInfo();
	bool IsShowingKillCamInfo();
	void RemoveDominatingFromScoreboard(int PlayerID);
	void ShowNewDominatingOnScoreboard(int PlayerID);
	void RemoveNemesisFromScoreboard(int PlayerID);
	void ShowNewNemesisOnScoreboard(int PlayerID);
	void GetRPRIForPlayerID(int PlayerID, class AR_PlayerReplicationInfo** RPRI);
	void UpdatePostMatchProgression(int TotalMatchXP, TArray<struct FMechXPChange>* MechXPStats);
	bool GetXPForMech(const struct FString& Mech_InstanceId, TArray<struct FMechXPChange>* MechXPStats, int* OldXP, int* NewXP, int* OverflowXP, int* FreeOverflowXP, int* iWasTestDrivePlayed);
	void SetPostMatchHonorsLabelPosition(int I, const struct FVector& ScreenLoc, float Scale);
	void RemoveCarouselTags();
	void AddSingleMechTag(int I, int KillStreak, struct FCarouselMechInfo* MechInfo);
	void UpdatePostMatchCarousel(struct FCarouselInfo* CarouselCat);
	void FadeOut(float Time);
	void FadeIn(float Time);
	void HideLetterboxing();
	void ShowLetterboxing();
	void HideCarouselPanel();
	void ShowCarouselPanel();
	class UGFxObject* AddCarouselTag(const struct FString& PlayerName, const struct FString& rankIcon, const struct FString& AbilityIcon, const struct FString& mechTierIcon, const struct FString& Message, bool ally, const struct FString& emblemIconPath, int KillStreak);
	void NotifyOfUnlockedAchievement(class UOnlineAchievementObject* AchievementObject);
	float ModifyEarningForGlobalMultiplier(int originalEarning, float globalMultiplier, int* baseEarning);
	void UpdatePostMatchEarnings(int* HPbyCategory, struct FExperiencePointGainedCategories* XPbyCategory, TArray<struct FUniqueNetId>* UnlockedAchievements);
	void BuildAndShowMatchStats(struct FGeneralMatchStats* GeneralStats, struct FSiegeModeStats* SiegeStats);
	void AddPlayerMatchStat(const struct FString& StatName, const struct FString& StatValue, bool bAlwaysAdd);
	void AddMatchStat(const struct FString& StatName, const struct FString& StatValue, bool bAlwaysAdd);
	void TurnItemStatIndexIntoItemName(int Index, struct FString* ItemName);
	class AR_PlayerReplicationInfo* TurnPlayerIDIntoName(int PlayerID, const struct FString& defaultFailName, struct FString* PlayerName);
	void AppendIntStatToString(int iStat, struct FString* statString);
	void AppendFloatStatToString(float fStat, int numDigits, struct FString* statString);
	void SetPostMatchTimer(const struct FString& msg, int TimeLeft);
	void UpdateTimeTilNextMatch();
	void UpdateEndOfMatchPilotInfo();
	void UpdatePostMatchData(int HPByCateogry, struct FGeneralMatchStats* GeneralStats, struct FSiegeModeStats* SiegeStats, struct FCarouselInfo* CarouselCats, struct FExperiencePointGainedCategories* XPbyCategory, TArray<struct FMechXPChange>* MechXPStats, TArray<struct FUniqueNetId>* UnlockedAchievements);
	void AddSystemMessageToChatWindow(const struct FString& msg, bool Silent);
	void AddGameMessageToChatWindowAS(class UGFxObject* UserObj, const struct FString& msg, int Channel, bool Silent);
	void AddGameMessageToChatWindow(class APlayerReplicationInfo* PRI, const struct FString& msg, int Channel, bool Silent, bool FormatHTML);
	void RefreshScoreboard();
	void SetGameTypeDisplayName(const struct FString& NewDisplayName);
	void ClearGameTypeNameForTutorialScreen(bool bClear);
	void ConfigMatchInfo();
	void HandleCollectionSyncingComplete();
	bool IsGameTypeTDM(int GameTypeIndex);
	bool IsPreMatch();
	int GetGameTypeIndex();
	void UpdateScoreboardPendingPlayer(class UGFxObject* GFxPlayerObj, const struct FPendingPlayer& Player);
	void UpdateCoOpScoreboardPlayer(class UGFxObject* GFxPlayer, class AR_PRI_Coop* RPRI, int rankInGame);
	void UpdateScoreboardPlayer(class UGFxObject* GFxPlayer, class AR_PlayerReplicationInfo* RPRI, int rankInGame);
	void UpdateCoOpMatchInfo();
	bool IsPostWaveInfoDisplaying();
	void UpdateServerStats();
	void UpdateGameModeMatchInfo();
	void UpdateMatchInfoTimer();
	void InsertLocalPlayerScoreboardStat(const struct FString& sNewVal, int ArrayIndex, bool bCheckValue, struct FString* StatName, class UGFxObject** StatsArray);
	void InsertLocalPlayerScoreboardEmptyStat(int ArrayIndex, class UGFxObject** StatsArray);
	void InsertLocalPlayerScoreboardIntStat(int newVal, int ArrayIndex, bool bCheckValue, struct FString* StatName, class UGFxObject** StatsArray);
	void CreateLocalPlayerStatsArray(class UGFxObject** StatsArray);
	void GetLocalPlayerStatsArray(class UGFxObject** StatsArray);
	void UpdateCoOpLocalPlayerMatchStats(class AR_PRI_Coop* RPRI, class UGFxObject* StatsArray);
	void UpdateLocalPlayerMatchStats();
	void UpdateMatchInfo();
	bool NeedUpdateScoreboard();
	void SetDelegate_IsTrainingMode(const struct FScriptDelegate& del);
	bool IsTrainingMode();
	bool IsTrainingModeDelegate();
	void Tick(float DeltaTime);
	void UpdateScoreboardPlayers();
	class UGFxObject* GetGFxPendingPlayer(const struct FPendingPlayer& Player);
	void UpdateGfxPlayerEmblem(class AR_PlayerReplicationInfo* RPRI);
	class UGFxObject* GetGfxPlayer(class APlayerReplicationInfo* PRI);
	class UGFxObject* GetExistingGfxPlayerByName(const struct FString& PlayerName);
	int ExpSort(class AR_PlayerReplicationInfo* A, class AR_PlayerReplicationInfo* B);
	bool IsValidScoreboardPlayer(class AR_PlayerReplicationInfo* PRI);
	void UpdateIndividualPendingPlayerTeamStatus(class UGFxObject* GFxPlayerObj, const struct FPendingPlayer& Player);
	void UpdateUIClanData(class AR_PlayerReplicationInfo* RPRI, class UGFxObject* PlayerData);
	void UpdateIndividualPlayerTeamStatus(class UGFxObject* PlayerData, class AR_PlayerReplicationInfo* RPRI);
	bool ShouldUpdatePlayerTeam();
	bool ShouldShowSpeakIcon(class AR_PlayerReplicationInfo* RPRI);
	void RemoveInactivePlayers();
	void UpdatePlayerTeamsUI(int PlayerTeam);
	void SetTeamSelectButtonEnabled(bool bEnabled);
	void UpdateTeamSelectButtonForCurrentTeams(class AWorldInfo* WI, int PlayerTeam, int NumPlayers);
	void SetDelegate_ShowingCarousel(const struct FScriptDelegate& D);
	void ShowingCarousel(bool State);
	void ShowingCarouselDelegate(bool State);
	void SetDelegate_SendGameMessage(const struct FScriptDelegate& D);
	bool SendGameMessage(const struct FString& msg, int Channel);
	bool SendGameMessageDelegate(const struct FString& msg, int Channel);
	void SetDelegate_SetShowCoopRules(const struct FScriptDelegate& D);
	void SetShowCoopRules(bool bShow);
	void SetShowCoopRulesDelegate(bool bShow);
	void SetDelegate_SetShowMissileAssaultRules(const struct FScriptDelegate& D);
	void SetShowMissileAssaultRules(bool bShow);
	void SetShowMissileAssaultRulesDelegate(bool bShow);
	void SetDelegate_SetShowSiegeRules(const struct FScriptDelegate& D);
	void SetShowSiegeRules(bool bShow);
	void SetShowSiegeRulesDelegate(bool bShow);
	void SetDelegate_SetReady(const struct FScriptDelegate& D);
	void SetReady(bool bReady);
	void SetReadyDelegate(bool bReady);
	void SetDelegate_SwitchTeam(const struct FScriptDelegate& D);
	void SwitchTeam();
	void SwitchTeamDelegate();
	void DisplayMessage(const struct FString& Message);
	void SetWaitingForPlayers(int NumPlayersNeeded, int NumPlayersReadyNeeded);
	void SetMatchInProgress(bool bInProgress);
	void SetAutoStartTimer(const struct FString& Seconds);
	void RemovePlayerFromTeamSelect();
	void ShowCoopRules();
	void ShowMissileAssaultRules();
	void ShowSiegeRules();
	void SetDelegate_PlayerSuicide(const struct FScriptDelegate& D);
	void PlayerSuicide();
	void PlayerSuicideDelegate();
	void PartPreviewHelper(class UGFxObject* PartGameItemType, bool bSinglePartSwap);
	void MechCenter(float Time);
	void MechRight(float Time);
	void MechLeft(float Time);
	void GaragePanelOpened();
	void SetMechBayChangedDelegate(const struct FScriptDelegate& D);
	void MechBayChanged(class UGFxObject* UIPreset);
	void MechBayChangedDelegate(class UGFxObject* UIPreset);
	void SetMechSelectedDelegate(const struct FScriptDelegate& D);
	void MechSelected(class UGFxObject* UIPreset);
	void MechSelectedDelegate(class UGFxObject* UIPreset);
	void SetDelegate_CloseCoopPostWaveScoreboard(const struct FScriptDelegate& D);
	void CloseCoopPostWaveScoreboard();
	void CloseCoopPostWaveScoreboardDelegate();
	void SetDelegate_Resume(const struct FScriptDelegate& D);
	void Resume();
	void ResumeDelegate();
	void SetDelegate_Quit(const struct FScriptDelegate& D);
	void Quit();
	void QuitDelegate();
	void SetDelegate_SetPlayerName(const struct FScriptDelegate& D);
	void SetPlayerName(const struct FString& NewName);
	void SetPlayerNameDelegate(const struct FString& NewName);
	void OnOculusStateChanged(bool bIsNowEnabled);
	void OnReadOnlineStatsComplete(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID, class UOnlinePlayerStats* PlayerStats);
	void PostModeStart();
	void InitData();
	bool Start(bool StartPaused);
	void OnClose();
	void ClearAllFunctionDelegates();
	void SetAllFunctionDelegates();
	void ShowSelectionFailureMessage(TEnumAsByte<ESelectionValidationResponse> Reason, bool bIsTestDrive);
	void UpdateMenuForRespawnFailure();
	void SetSelectionSyncing(bool bSyncing);
	void SetTime(const struct FString& SecondsRemaining);
	void RefreshMechData();
	void ShowLoadout();
	void UpdateMechData();
	void OnChanged_ShowGameplayTips(class UGFxObject* gfxEvent);
	void ClearGameplayTips();
	void UpdateGameplayTips();
	void UpdateLocalPlayerXP();
	void UpdateLocalPlayerEquippedEmblem();
	void SetLocalPlayerInfo();
	void SetInfo(const struct FString& PlayerName, int PlayerID, int hp, int mp, struct FUniqueNetId* UniqueId);
	void SetMenuMode(TEnumAsByte<EMenuMode> menumode);
	TEnumAsByte<EMenuMode> GetMenuMode();
	void Invoke_SetMenuMode(float Mode);
	void MatchSetReady(bool bReady);
	void MatchStartingShowTeams(bool bShowTeams);
	void CheckMatchInfo();
	void CloseKillCamInfo();
	void HideKillCamInfo();
	void SetGenericKillCamInfoForUI(class UGFxObject* GenericKillObj);
	void SetKillCamInfoForUI(class UGFxObject* KillerPlayerObj, class UGFxObject* MechStatObj, class UGFxObject* AssistPlayerArray);
	void AddBigMessage(const struct FString& msg, float Time, bool bVictory, const struct FString& friendNumber, const struct FString& foeNumber);
	void AddPilotProgressionEarningsToPostMatch();
	void AddChallengeRewardsToPostMatch();
	void SetupUnlockItem(class UOnlineGameOffer* rewardOffer, class UOnlineGameItemType* gameItemType, const struct FString& actionIconPath, const struct FString& unlockExplanation, struct FSProgressionUnlockDetails* unlockDetail);
	void AddMechProgressionEarningsToPostMatch(int presetIndex, class UGFxObject* MechObj);
	void AddMechUnlockToEarningsForUI(class UGFxObject* UnlockObj);
	void AddAgentCardToMechEarnings(const struct FString& Message, const struct FString& agentImage, const struct FString& agentName, const struct FString& secondaryImage);
	void AddAgentCardToMechEarningsHelper(const struct FSAgentDialogCardInfo& dialogInfo);
	void AddPilotUnlockToEarningsForUI(int PilotLevel, class UGFxObject* UnlockObj);
	void AddPlayerStatToPostMatchPanel(const struct FString& StatName, const struct FString& StatValue);
	void AddStatToPostMatchPanel(const struct FString& StatName, const struct FString& StatValue);
	void LoadPostMatchProgression(class UGFxObject* MechStatArray);
	void SetDelegate_RequestPostMatchEarnings(const struct FScriptDelegate& D);
	void RequestPostMatchEarnings();
	void RequestPostMatchEarningsDelegate();
	void LoadPostMatchEarnings(class UGFxObject* earningsData);
	void AddHCToEarnings(class UGFxObject* statObj);
	void AddAgentCardToPilotEarnings(int PilotLevel, const struct FString& agentMessage, const struct FString& agentImage, const struct FString& agentName, const struct FString& secondaryImage);
	void AddAgentCardToPilotEarningsHelper(int PilotLevel, const struct FSAgentDialogCardInfo& dialogInfo);
	void AddXPToEarnings(class UGFxObject* statObj);
	void AddAchievementToEarnings(class UGFxObject* AchievementObj);
	void SetLocalizedStringsForUI(class UGFxObject* LocObj);
	void UpdateMenuModeState(TEnumAsByte<EMenuMode> NewMenuMode, bool bUpdateCurrentMenuMode);
	bool IsScoreboard();
	bool IsLobby();
	bool IsStagingHangar();
	bool IsClosed();
	bool IsOpen();
	void SetController(class AR_PlayerController* NewControllerOwner);
	void Init(class ULocalPlayer* LP);
};


// Class HawkenGame.R_Gfx_Visor
// 0x08C0 (0x0C88 - 0x03C8)
class UR_Gfx_Visor : public UR_Gfx_VisorNative
{
public:
	struct FString                                     ScreenPosString[0x4];                                     // 0x03C8(0x000C) (Const, NeedCtorLink)
	TEnumAsByte<EVisorUIMode>                          VisorUIMode;                                              // 0x03F8(0x0001)
	TEnumAsByte<EVisorBootMode>                        InitialBootType;                                          // 0x03F9(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x03FA(0x0002) MISSED OFFSET
	class UGFxObject*                                  ActionMessageVarObj;                                      // 0x03FC(0x0004)
	class UGFxObject*                                  BonusMessageVarObj;                                       // 0x0400(0x0004)
	class UGFxObject*                                  ChatMessageVarObj;                                        // 0x0404(0x0004)
	struct FGuidingIndicator                           GuidingIndicators[0x4];                                   // 0x0408(0x0008)
	class UGFxObject*                                  GuidingIndicatorsMC;                                      // 0x0428(0x0004)
	float                                              LastUpdageDamageIndicatorsTime;                           // 0x042C(0x0004)
	struct FGuidingIndicator                           HealingIndicators[0x3];                                   // 0x0430(0x0008)
	class UGFxObject*                                  HealingIndicatorNamesMC;                                  // 0x0448(0x0004)
	class UGFxObject*                                  HealersInfo;                                              // 0x044C(0x0004)
	class UGFxObject*                                  HealersArray;                                             // 0x0450(0x0004)
	class UGFxObject*                                  RadarInfo;                                                // 0x0454(0x0004)
	class UGFxObject*                                  BootMC;                                                   // 0x0458(0x0004)
	class UGFxObject*                                  InformationMC;                                            // 0x045C(0x0004)
	class UGFxObject*                                  PromptInfo;                                               // 0x0460(0x0004)
	class UGFxObject*                                  WarningsMC;                                               // 0x0464(0x0004)
	class UGFxObject*                                  WarningsInfo;                                             // 0x0468(0x0004)
	class UGFxObject*                                  HomingIndicatorMC;                                        // 0x046C(0x0004)
	class UGFxObject*                                  HomingIndicatorInfo;                                      // 0x0470(0x0004)
	class UGFxObject*                                  EnemySightedMC;                                           // 0x0474(0x0004)
	struct FBonusIndicator                             EnemySpotted;                                             // 0x0478(0x001C)
	class UGFxObject*                                  SpeakingIndicatorsMC;                                     // 0x0494(0x0004)
	class UGFxObject*                                  SpeakingInfo;                                             // 0x0498(0x0004)
	class UGFxObject*                                  SpeakingPlayersArray;                                     // 0x049C(0x0004)
	class UGFxObject*                                  CalloutsMC;                                               // 0x04A0(0x0004)
	class UGFxObject*                                  MatchInfoMC;                                              // 0x04A4(0x0004)
	class UGFxObject*                                  MatchInfoParams;                                          // 0x04A8(0x0004)
	class UGFxObject*                                  KillMessagesMC;                                           // 0x04AC(0x0004)
	class UGFxObject*                                  PlayerVitalsMC;                                           // 0x04B0(0x0004)
	class UGFxObject*                                  PlayerVitalsInfo;                                         // 0x04B4(0x0004)
	class UGFxObject*                                  PlayerVitalsStatuses;                                     // 0x04B8(0x0004)
	class UGFxObject*                                  PlayerVitalsInternals;                                    // 0x04BC(0x0004)
	class UGFxObject*                                  ScopeMC;                                                  // 0x04C0(0x0004)
	class UGFxObject*                                  ScopeParams;                                              // 0x04C4(0x0004)
	class UGFxObject*                                  TurretMC;                                                 // 0x04C8(0x0004)
	class UGFxObject*                                  TurretParams;                                             // 0x04CC(0x0004)
	class UGFxObject*                                  EnergyUnitsMC;                                            // 0x04D0(0x0004)
	class UGFxObject*                                  EnergyUnitsInfo;                                          // 0x04D4(0x0004)
	class UGFxObject*                                  TrimMC;                                                   // 0x04D8(0x0004)
	class UTexture2D*                                  PartyMemberIcon;                                          // 0x04DC(0x0004)
	int                                                CurrentNumScramblers;                                     // 0x04E0(0x0004)
	struct FScrambler                                  Scramblers[0x4];                                          // 0x04E4(0x0018)
	struct FString                                     IndicatorType_LocalPlayer;                                // 0x0544(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_FriendlyMech;                               // 0x0550(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_MechEliminated;                             // 0x055C(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_EnemyMech;                                  // 0x0568(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_NPC;                                        // 0x0574(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_Deployable;                                 // 0x0580(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_Turret;                                     // 0x058C(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_Battleship;                                 // 0x0598(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_EnergyStation;                              // 0x05A4(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_AntiAir;                                    // 0x05B0(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_BaseLifter;                                 // 0x05BC(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_Energy;                                     // 0x05C8(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_EnemySpotted;                               // 0x05D4(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_RallyPoint;                                 // 0x05E0(0x000C) (Const, NeedCtorLink)
	struct FString                                     IndicatorType_MissileSilo;                                // 0x05EC(0x000C) (Const, NeedCtorLink)
	struct FVector                                     MapMinExtentLoc;                                          // 0x05F8(0x000C)
	struct FVector                                     MapMaxExtentLoc;                                          // 0x0604(0x000C)
	float                                              MapExtentX;                                               // 0x0610(0x0004)
	float                                              MapExtentXInverse;                                        // 0x0614(0x0004)
	float                                              MapExtentY;                                               // 0x0618(0x0004)
	float                                              MapExtentYInverse;                                        // 0x061C(0x0004)
	unsigned long                                      bMapExtentsFound : 1;                                     // 0x0620(0x0004)
	unsigned long                                      bRadarNeedsScale : 1;                                     // 0x0620(0x0004)
	unsigned long                                      bShowViewTargetIndicatorPostDeath : 1;                    // 0x0620(0x0004) (Const)
	unsigned long                                      bDoLineTraces : 1;                                        // 0x0620(0x0004) (Const)
	unsigned long                                      bShowDistance : 1;                                        // 0x0620(0x0004) (Const)
	unsigned long                                      bLastPlayerVitalsActive : 1;                              // 0x0620(0x0004)
	unsigned long                                      bLastKillMessagesActive : 1;                              // 0x0620(0x0004)
	unsigned long                                      bLastMatchInfoActive : 1;                                 // 0x0620(0x0004)
	unsigned long                                      bLastInformationActive : 1;                               // 0x0620(0x0004)
	unsigned long                                      bLastHomingIndicatorActive : 1;                           // 0x0620(0x0004)
	unsigned long                                      bLastWarningActive : 1;                                   // 0x0620(0x0004)
	unsigned long                                      bLastEnergyUnitsActive : 1;                               // 0x0620(0x0004)
	unsigned long                                      bLastTrimActive : 1;                                      // 0x0620(0x0004)
	unsigned long                                      bLastRadarActive : 1;                                     // 0x0620(0x0004)
	unsigned long                                      bLastChatMessagesActive : 1;                              // 0x0620(0x0004)
	unsigned long                                      bBootInProgress : 1;                                      // 0x0620(0x0004) (Transient)
	unsigned long                                      bHideGameInfoHUD : 1;                                     // 0x0620(0x0004)
	unsigned long                                      bHideReticle : 1;                                         // 0x0620(0x0004)
	unsigned long                                      bDebugOverrideCrosshairLoc : 1;                           // 0x0620(0x0004)
	unsigned long                                      bDebugEnableAlternateRiftPos : 1;                         // 0x0620(0x0004)
	unsigned long                                      bShowVisorStageOutline : 1;                               // 0x0620(0x0004)
	class UTexture*                                    overheadMapTexture;                                       // 0x0624(0x0004)
	float                                              MechEliminatedIndicatorDuration;                          // 0x0628(0x0004) (Const)
	float                                              DefaultMaxRadarDistance;                                  // 0x062C(0x0004) (Const)
	float                                              DefaultMaxMapDistance;                                    // 0x0630(0x0004) (Const)
	float                                              TurretRadarDistance;                                      // 0x0634(0x0004) (Const)
	float                                              EnergyRadarDistance;                                      // 0x0638(0x0004) (Const)
	float                                              FriendlyRadarDistance;                                    // 0x063C(0x0004) (Const)
	float                                              BattleshipRadarDistance;                                  // 0x0640(0x0004) (Const)
	float                                              GameInfoUpdateRate;                                       // 0x0644(0x0004)
	float                                              InternalsUpdateRate;                                      // 0x0648(0x0004) (Const)
	float                                              EnemySpottedIndicatorTime;                                // 0x064C(0x0004) (Const)
	float                                              NeedAssistanceIndicatorTime;                              // 0x0650(0x0004) (Const)
	float                                              RallyPointLifetime;                                       // 0x0654(0x0004) (Const)
	float                                              MissileSiloIndicatorDistance;                             // 0x0658(0x0004) (Const)
	float                                              AAIndicatorDistance;                                      // 0x065C(0x0004) (Const)
	float                                              ShowChatMessageTime;                                      // 0x0660(0x0004) (Const)
	class UR_GFx_Reticle*                              ReticleMovie;                                             // 0x0664(0x0004)
	TArray<float>                                      TimeEnteredObjectiveRange;                                // 0x0668(0x000C) (NeedCtorLink)
	struct FString                                     EnergyStatus_Acquiring;                                   // 0x0674(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     EnergyStatus_Transferring;                                // 0x0680(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     EnergyStatus_Done;                                        // 0x068C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BattleshipStatus_EnRoute;                                 // 0x0698(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BattleshipStatus_InRange;                                 // 0x06A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Battleship_Engine;                                        // 0x06B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ActivateTurret_Header;                                    // 0x06BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ActivateTurret_Text;                                      // 0x06C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FeedTurret_Header;                                        // 0x06D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FeedTurret_Text;                                          // 0x06E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BaseLifter_Header;                                        // 0x06EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BaseLifter_Text;                                          // 0x06F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BaseLifterNoActivate_Header;                              // 0x0704(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BaseLifterNoActivate_Text;                                // 0x0710(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BaseLifterNoActivateEnemyShip_Text;                       // 0x071C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BuyOffense_Header;                                        // 0x0728(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BuyOffense_Text;                                          // 0x0734(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BuySupport_Header;                                        // 0x0740(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BuySupport_Text;                                          // 0x074C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SwapMechs_Header;                                         // 0x0758(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SwapMechs_Text;                                           // 0x0764(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     EnergyStation_Header;                                     // 0x0770(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     EnergyStation_Text;                                       // 0x077C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RevivalMarkerActivate_Text;                               // 0x0788(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RevivalMarkerReviving_Text;                               // 0x0794(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RevivalMarkerRevivingOther_Text;                          // 0x07A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RevivalMarkerCollectEU_Text;                              // 0x07AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_EnergySource_Name;                              // 0x07B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_EnergySource_Label;                             // 0x07C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_BaseLifter_Name;                                // 0x07D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_BaseLifter_Label;                               // 0x07DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_Secure_AntiAir_Name;                            // 0x07E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_Defend_AntiAir_Name;                            // 0x07F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_AntiAir_Label;                                  // 0x0800(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_Enemy_BattleShip_Name;                          // 0x080C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_Defend_BattleShip_Name;                         // 0x0818(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_BattleShip_Label;                               // 0x0824(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_Defend_Reactor_Name;                            // 0x0830(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_Destroy_Reactor_Name;                           // 0x083C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_Reactor_Label;                                  // 0x0848(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_TeamFocusPoint_Name;                            // 0x0854(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_TeamFocusPoint_Label;                           // 0x0860(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_MissileSilo_Name;                               // 0x086C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Objective_MissileSilo_Label;                              // 0x0878(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     HologramName;                                             // 0x0884(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IndicatorName_Turret;                                     // 0x0890(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IndicatorName_Battleship;                                 // 0x089C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IndicatorName_EnergyStation;                              // 0x08A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IndicatorName_AntiAir;                                    // 0x08B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IndicatorName_BaseLifter;                                 // 0x08C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IndicatorName_TeamFocusPoint;                             // 0x08CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IndicatorName_EnemySpotted;                               // 0x08D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IndicatorName_EnemySpottedMap;                            // 0x08E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IndicatorName_BaseReactor;                                // 0x08F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IndicatorName_MissileSilo;                                // 0x08FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_antiAirIndicator_friendLabel;                          // 0x0908(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_antiAirIndicator_foeLabel;                             // 0x0914(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_antiAirIndicator_description;                          // 0x0920(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_antiAirIndicator_messageLaunched;                      // 0x092C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_antiAirIndicator_messageFriendControl;                 // 0x0938(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_antiAirIndicator_messageFoeControl;                    // 0x0944(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_lockedOnIndicator_label;                               // 0x0950(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_incomingIndicator_label;                               // 0x095C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overheatingIndicator_label;                            // 0x0968(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overheatedIndicator_label;                             // 0x0974(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overheatedIndicator_descriptor;                        // 0x0980(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_sideDashIndicator_label;                               // 0x098C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_lowFuelIndicator_label;                                // 0x0998(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_maxAltitudeIndicator_label;                            // 0x09A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_energyUnits_descriptor;                                // 0x09B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_PlayerVitals_Fuel;                                     // 0x09BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_homingIndicator_statusAcquiring;                       // 0x09C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_homingIndicator_statusLocking;                         // 0x09D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_map_focusPointInstructions;                            // 0x09E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_map_focusPointButtonLabel;                             // 0x09EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_siege_energyNeededLabel;                               // 0x09F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_siege_objectives;                                      // 0x0A04(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_headerTime;                                      // 0x0A10(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_headerRank;                                      // 0x0A1C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_headerKills;                                     // 0x0A28(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_headerTeamKills;                                 // 0x0A34(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_headerFoeKills;                                  // 0x0A40(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_headerXP;                                        // 0x0A4C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_headerScore;                                     // 0x0A58(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_headerWave;                                      // 0x0A64(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_headerEnemies;                                   // 0x0A70(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_headerTeamBase;                                  // 0x0A7C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_stats_headerFoeBase;                                   // 0x0A88(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootDisclaimer;                              // 0x0A94(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCompany;                                 // 0x0AA0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootLoading;                                 // 0x0AAC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootTextHeader;                              // 0x0AB8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootTextQuick;                               // 0x0AC4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootTextSlow;                                // 0x0AD0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCheckPass;                               // 0x0ADC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCheckFail;                               // 0x0AE8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCheckPanelHeader1;                       // 0x0AF4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCheckPanelHeader2;                       // 0x0B00(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCheckPanelHeader3;                       // 0x0B0C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCheckRowLabel1;                          // 0x0B18(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCheckRowLabel2;                          // 0x0B24(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCheckRowLabel3;                          // 0x0B30(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCheckRowLabel4;                          // 0x0B3C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCheckRowLabel5;                          // 0x0B48(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCheckRowLabel6;                          // 0x0B54(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCheckRowLabel7;                          // 0x0B60(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCheckRowLabel8;                          // 0x0B6C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelVisorBootCheckRowLabel9;                          // 0x0B78(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelPrematchCountdown;                                // 0x0B84(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTimeRemaining;                                    // 0x0B90(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_SuddenDeathTime;                                       // 0x0B9C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CenterMessage;                                            // 0x0BA8(0x000C) (NeedCtorLink)
	float                                              CenterMessageEndTime;                                     // 0x0BB4(0x0004)
	struct FString                                     ActivateKey;                                              // 0x0BB8(0x000C) (NeedCtorLink)
	struct FVector                                     RallyPointLoc_cached;                                     // 0x0BC4(0x000C)
	struct FString                                     RallyPoint_IDString;                                      // 0x0BD0(0x000C) (Const, NeedCtorLink)
	float                                              RallyPointTimeSet;                                        // 0x0BDC(0x0004)
	TArray<struct FString>                             BL_IDString;                                              // 0x0BE0(0x000C) (Const, NeedCtorLink)
	struct FVector                                     BaseLocationZero;                                         // 0x0BEC(0x000C)
	struct FVector                                     BaseLocationOne;                                          // 0x0BF8(0x000C)
	TArray<struct FSPlayerNeedsAssistance>             NeedAssistanceList;                                       // 0x0C04(0x000C) (NeedCtorLink)
	TArray<struct FBonusIndicator>                     BonusList;                                                // 0x0C10(0x000C) (NeedCtorLink)
	class UClass*                                      AntiAirClass;                                             // 0x0C1C(0x0004)
	struct FString                                     LastInfoMessage;                                          // 0x0C20(0x000C) (NeedCtorLink)
	float                                              LastRadarUpdateTime;                                      // 0x0C2C(0x0004)
	float                                              LastGameInfoUpdateTime;                                   // 0x0C30(0x0004)
	float                                              LastMapUpdateTime;                                        // 0x0C34(0x0004)
	float                                              LastSpeakingCacheUpdateTime;                              // 0x0C38(0x0004)
	float                                              LastInternalsUpdateTime;                                  // 0x0C3C(0x0004)
	struct FVector2D                                   ScreenPosRadar;                                           // 0x0C40(0x0008)
	struct FVector2D                                   ScreenPosVitals;                                          // 0x0C48(0x0008)
	struct FVector2D                                   ScreenPosMatchInfo;                                       // 0x0C50(0x0008)
	struct FVector2D                                   ScreenPosRadarRift;                                       // 0x0C58(0x0008) (Config, GlobalConfig)
	struct FVector2D                                   ScreenPosVitalsRift;                                      // 0x0C60(0x0008) (Config, GlobalConfig)
	struct FVector2D                                   ScreenPosMatchInfoRift;                                   // 0x0C68(0x0008) (Config, GlobalConfig)
	struct FScriptDelegate                             __OnVisorBootComplete__Delegate;                          // 0x0C70(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SetRallyPointDelegate__Delegate;                        // 0x0C7C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Gfx_Visor");
		return ptr;
	}


	void UpdateSpeakingIndicators();
	void UpdateSpeakingVariables();
	int IsOutOfSight(class AR_PawnNative* Target);
	void RemoveAllIndicators(bool bRemoveInWorld, bool bRemoveCachedIndicator);
	void DisplaySingleTargetInfo(class AActor* Target);
	void DisplayTurretIndicator(class AR_Turret_Base* Turret, const struct FString& IndColor, float Scale);
	void DisplayGameSpecificObjectiveIndicators(unsigned char LocalTeamNum, TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	void DisplayObjectiveIndicators(TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	void DisplayEnemyOverlayIndicators();
	void DisplayBattleshipIndicators();
	void DisplayAllTurretIndicators();
	void DisplayAllHologramIndicators();
	void DisplayHologramIndicator(class AR_Hologram* CheckHologram);
	void DisplayTeamOverlayIndicators();
	bool DoesPlayerNeedAssistance(class AR_Pawn** RP);
	void UpdateNeedAssistanceList();
	void UpdateEnemySightedCalloutPosition();
	void UpdateCallouts();
	void AddNeedAssistanceIndicator(class APawn* P);
	void AddSpottedEnemyIndicator(const struct FVector& Loc);
	void AddFloatingWorldMessage(const struct FString& displayStr, const struct FString& bonusStr, const struct FVector& Loc, bool isKill, float Time);
	struct FString GetIdentifierFromLocation(const struct FVector& Loc);
	void RemoveUnusedLocalIndicators();
	void MarkUnusedLocalIndicators();
	void UpdateIndicators(TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	void DisplayIndicators(TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	bool ShouldShowIndicators();
	void DisplayGuidingIndicator(class AActor* Target, bool show, int Index, bool damaging, float Alpha);
	void RemoveGuidingIndicator(class UGFxObject* Clip, float FadeTime);
	class UGFxObject* AddGuidingIndicator(class UGFxObject* Params);
	void UpdateGameSpecificRadar(TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	void UpdateRadar(TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	float GetRadarDetectionDistanceIncrease(TEnumAsByte<ERadarState> RemotePawnRadarState, int OutOfSight);
	bool GetThirdPersonUI();
	void SetTargetingCrosshair(bool bTargeting);
	void SetThirdPersonUI(bool bIsThirdPerson);
	bool IsRadarHudActive();
	bool IsGameHudActive();
	float CalculateVisibleRadarDistance();
	float MapPercentToWorldY(float percentY);
	float MapPercentToWorldX(float percentX);
	float WorldYToMapPercent(float Y);
	float WorldXToMapPercent(float X);
	void RemoveUnusedRadarIndicators();
	void MarkRadarIndicatorsUnused();
	void UpdateRadarScramblerIndicators(float DeltaTime);
	void UpdateShouldUseFixedRadar();
	void AddChatMessageHelper(const struct FString& PlayerName, const struct FString& playerColor, const struct FString& msg, const struct FString& MsgColor, bool bInParty);
	void AddActionMessageHelper(const struct FString& msg, const struct FString& MsgColor, float timeToShow, const struct FString& IconPath, const struct FString& iconColor, float IconSize, const struct FString& XP, const struct FString& subMsg);
	void AddKillMessageHelper(const struct FString& KillerName, bool bKillerFriendly, const struct FString& VictimName, bool bVictimFriendly, const struct FString& WeaponName, const struct FString& XP, bool bActionMsg, const struct FString& IconPath, const struct FString& iconColor, float timeToShow, bool bRumble);
	void AddPlayerBonusMessageHelper(const struct FString& msg, float timeToShow, const struct FString& XP, const struct FString& MsgColor, float msgScale, bool bRumble);
	void FadeTrim();
	void AddChatMessage(class UGFxObject* object1);
	void AddBonusMessage(class UGFxObject* object1);
	void AddActionMessage(class UGFxObject* object1);
	void AddKillMessage(class UGFxObject* object1);
	void ShowEnemySightedIndicator();
	class UGFxObject* AddCalloutIndicator(class UGFxObject* Param);
	void UpdateInformation(TEnumAsByte<EGameObjective> ObjectiveToShow);
	bool GetInteractiveHintMessage(struct FString* InfoMessage);
	void SetCenterMessage(const struct FString& msg, float Duration);
	void UpdateKeyNames();
	class AR_Turret_AntiAir* GetActiveAntiAir();
	float Get2DAngleToLocation(const struct FVector& SiloLoc);
	struct FString GetMatchTimeString();
	void UpdateGameModeUI_Helper(class AR_TeamInfo* OwnerTeam, class AR_TeamInfo* EnemyTeam);
	void UpdateGameModeUI();
	void UpdateEnergyUnits(float Percent, TEnumAsByte<EEnergyStatus> EnergyStatus);
	bool ShouldShowEnergyUnitIndicators();
	void UpdateDamageOverlays();
	void UpdateIncoming(bool bIncoming);
	void UpdateWarningIndicators();
	struct FString GetObjectiveColor(TEnumAsByte<EGameObjective> ObjectiveType);
	struct FString GetObjectiveLabel(TEnumAsByte<EGameObjective> ObjectiveType);
	struct FString GetObjectiveString(TEnumAsByte<EGameObjective> ObjectiveType);
	void UpdateLockOn(bool bActive, float PercentLocked, const struct FVector& WorldPos, bool bAttachToCrosshair);
	void UpdateLockonUI(class AR_Pawn* RPawn);
	void UpdateReticle();
	void ClearHealerNames();
	void UpdateHealingUI(bool bPostDeath);
	void ActuallyUpdatePlayerVitalsInternals();
	void UpdatePlayerVitalsInternalsOnInterval();
	void UpdatePlayerVitals();
	void SetMaxHealth(float MaxHealth);
	void SetVisorUIMode(TEnumAsByte<EVisorUIMode> NewMode);
	void UpdateZoomUI();
	void UpdateTurretUI();
	void SetRadarScale();
	void InitMapExtents(bool bForce);
	void AddRallyPointIndicator(const struct FVector& Loc);
	void SetDelegate_SetRallyPoint(const struct FScriptDelegate& D);
	void SetRallyPoint(float X, float Y);
	void SetRallyPointDelegate(float X, float Y);
	void CloseReticleMovie();
	void CreateReticleMovie();
	void SetLocalizedStringsForUI_Boot();
	void SetLocalizedStringsForGameSpecificUI(class UGFxObject** LocObj);
	void SetBootTeamLocalizedString();
	void SetLocalizedStringsForUI();
	void SetIndicatorActive(class UGFxObject* TargetIndicator, bool bVisible, const struct FString& VisibilityPropertyName);
	bool ShouldShowPersonalInfo();
	bool IsViewingLocalPlayer();
	class AR_PlayerReplicationInfo* GetLocalPlayerPRI();
	unsigned char GetLocalPlayerTeamNum();
	void ActivateKismetEvent();
	bool IsVisorBootComplete();
	void UpdateReplicatedBootStatus();
	void Boot(const struct FString& bootType, const struct FString& bootTeam);
	void BootHelper(TEnumAsByte<EVisorBootMode> bootMode, const struct FString& bootTeam);
	void RebootVisor(TEnumAsByte<EVisorBootMode> desiredBootMode, const struct FString& bootTeam);
	void OnVisorBootComplete();
	void ClearAllFunctionDelegates();
	void SetAllFunctionDelegates();
	void PostDrawVisor(float DeltaTime);
	void UpdatePostDeathHUD();
	void UpdateLivingHUD(class AR_Pawn* HawkenPawnVT, TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives, bool bShowZoomUI);
	void HidePersonalHUDMC();
	float SetActorIndicatorFadeFactor();
	void SetupDefaultRadar();
	void InitializeClips();
	void VerifyCachedValuesCleared();
	void ClearCachedClipReferences();
	void CacheClipReferences();
	void Init(class ULocalPlayer* LocPlay);
	void SetupVisor(class UClass* GameClass);
	void OnClose();
	struct FString STATIC_GetVisorBootTeamName(int TeamIndex);
	void SetGameClass(class UClass* GameClass);
	void OnPawnOwnerChanged(class AR_Pawn* OldPawnOwner, class AR_Pawn* NewPawnOwner);
	void SetCanvas(class UCanvas* NewCanvas);
	void CachePawnOwner(class AR_Pawn* NewOwner);
	void UpdateScaleformSize();
	void RemoveOculusOverrides();
	void ApplyOculusOverrides();
	void RepositionClip(class UGFxObject* TargetClip, struct FVector2D* ScreenPos);
	void OnOculusStateChanged(bool bIsNowEnabled);
	void SetEnergyUnitsScreenPosition(const struct FString& corner);
	void SetKillMessageScreenPosition(const struct FString& corner);
	void SetChatMessageScreenPosition(const struct FString& corner);
	void SetRadarScreenPosition(const struct FString& corner);
	void UpdateHUDPositioning();
	void HideChatMessages();
	void StopSampler(bool bVisor, bool bReticle);
	void RunSampler(bool bVisor, bool bReticle, float Spread);
	void SetNeutralColor(float R, float G, float B);
	void SetFoeColor(float R, float G, float B);
	void SetFriendColor(float R, float G, float B);
	bool ScreenResized(int ViewportSizeX, int ViewportSizeY, int* RenderTargetSizeX, int* RenderTargetSizeY);
};


// Class HawkenGame.R_GFx_Reticle
// 0x0040 (0x01AC - 0x016C)
class UR_GFx_Reticle : public UR_GFx_Base
{
public:
	class AR_Pawn*                                     ReticleOwner;                                             // 0x016C(0x0004)
	class UCanvas*                                     HudCanvas;                                                // 0x0170(0x0004)
	class UGFxObject*                                  ReticleMC;                                                // 0x0174(0x0004) (Transient)
	class UGFxObject*                                  ReticleInfo;                                              // 0x0178(0x0004) (Transient)
	unsigned long                                      bLastReticleActive : 1;                                   // 0x017C(0x0004) (Transient)
	unsigned long                                      bEnemyWasHitThisFrame : 1;                                // 0x017C(0x0004) (Transient)
	unsigned long                                      bUseTargetingCrosshair : 1;                               // 0x017C(0x0004) (Transient)
	unsigned long                                      bEnableCrosshairScaling : 1;                              // 0x017C(0x0004)
	unsigned long                                      bDebugOverrideCrosshairLoc : 1;                           // 0x017C(0x0004) (Transient)
	unsigned long                                      bDrawCrosshairTraces : 1;                                 // 0x017C(0x0004) (Transient)
	unsigned long                                      bDrawZDepth : 1;                                          // 0x017C(0x0004) (Transient)
	unsigned long                                      bShowCenterCrosshair : 1;                                 // 0x017C(0x0004)
	float                                              MinReticleScaleDistance;                                  // 0x0180(0x0004) (Edit)
	float                                              MinDistanceScale;                                         // 0x0184(0x0004) (Edit)
	float                                              MaxDistanceScale;                                         // 0x0188(0x0004) (Edit)
	float                                              DistanceScaleSpeed;                                       // 0x018C(0x0004) (Edit)
	float                                              DistanceScale;                                            // 0x0190(0x0004) (Transient)
	float                                              ReticleTextureScreenX;                                    // 0x0194(0x0004) (Transient)
	float                                              ReticleTextureScreenY;                                    // 0x0198(0x0004) (Transient)
	float                                              ReticleTextureScreenZ;                                    // 0x019C(0x0004) (Transient)
	class UMaterial*                                   ReticleMaterial;                                          // 0x01A0(0x0004)
	class UMaterialInstanceConstant*                   ReticleMIC;                                               // 0x01A4(0x0004) (Transient)
	int                                                SuppressRenderSemaphore;                                  // 0x01A8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GFx_Reticle");
		return ptr;
	}


	bool ScreenResized(int ViewportSizeX, int ViewportSizeY, int* RenderTargetSizeX, int* RenderTargetSizeY);
	void SetOculusTransforms(class UGFxObject* gfxObjectMC, const struct FString& DebugHint, float ZDepth, float MenuScale);
	void OnOculusStateChanged(bool bIsNowEnabled);
	bool IsSuppressingReticleUpdates(int* out_SuppressCount);
	int GetReticleUpdateSemaphoreCount();
	int EnableReticleUpdates();
	int DisableReticleUpdates();
	void Invoke_HitEnemy();
	void DrawZDepth();
	void AdjustDrawParametersForGutter(float GutterSizeLeft, float GutterSizeRight, struct FReticleDrawParameters* Parms);
	void DrawReticleTexture(float DeltaTime);
	void CalculateHorizontalGutter(float* LeftGutter, float* RightGutter);
	void SetReticleScreenLocation(float ScreenX, float ScreenY, float TargetDistance);
	bool UpdateReticleProjection();
	void TickReticle(bool bReticleUpdateAllowed);
	void SetReticleLocationCentered();
	void SetTargetingCrosshair(bool bTargeting);
	bool ConditionalSetIndicatorActive(class UGFxObject* TargetIndicator, bool bVisible, bool bCurrentlyVisible, const struct FString& VisibilityPropertyName);
	bool SetIndicatorActive(class UGFxObject* TargetIndicator, bool bVisible, const struct FString& VisibilityPropertyName);
	void HideReticle();
	bool ShowReticle(bool bShouldBeVisible);
	void SetReticleType(int leftReticleIdx, int rightReticleIdx);
	void ClearCachedClipReferences();
	void CacheClipReferences();
	void SetCanvas(class UCanvas* NewCanvas);
	void CachePawnOwner(class AR_Pawn* NewOwner);
	void RunSampler(class UGFxObject* Params);
	void SetNeutralColor(float R, float G, float B);
	void SetFoeColor(float R, float G, float B);
	void SetFriendColor(float R, float G, float B);
	void InitReticleMovie(class UR_Gfx_Visor* VisorParent);
};


// Class HawkenGame.R_MissileAssault
// 0x0052 (0x067A - 0x0628)
class AR_MissileAssault : public AR_TeamDeathmatch
{
public:
	int                                                WinningTeamIndex;                                         // 0x0628(0x0004)
	int                                                BaseHealth;                                               // 0x062C(0x0004) (Const, Config)
	int                                                BaseHeavyDamageHealth;                                    // 0x0630(0x0004) (Const, Config)
	int                                                BaseCriticalHealth;                                       // 0x0634(0x0004) (Const, Config)
	int                                                BaseHealthCostToSpawn;                                    // 0x0638(0x0004) (Const, Config)
	int                                                BaseHealthToStopTakingSpawnCost;                          // 0x063C(0x0004) (Const, Config)
	unsigned long                                      bDoFastFireOnTotalControl : 1;                            // 0x0640(0x0004) (Const, Config)
	unsigned long                                      bInFastFireMode : 1;                                      // 0x0640(0x0004)
	unsigned long                                      bGaveTeamAchievementForHoldingTotalControl : 1;           // 0x0640(0x0004)
	float                                              FastFireModeWaitTime;                                     // 0x0644(0x0004) (Const, Config)
	float                                              BaseHealthNearingEnd;                                     // 0x0648(0x0004) (Const, Config)
	TArray<class AR_Proj_AntiBaseReactorMissile*>      activeMissileArray;                                       // 0x064C(0x000C) (NeedCtorLink)
	TArray<int>                                        SiloControl;                                              // 0x0658(0x000C) (NeedCtorLink)
	TArray<class AR_Turret_BaseMissile*>               MissileSiloCache;                                         // 0x0664(0x000C) (NeedCtorLink)
	int                                                TeamInTotalControl;                                       // 0x0670(0x0004)
	float                                              TimeEnteredFastFireMode;                                  // 0x0674(0x0004)
	unsigned char                                      TeamBaseHealthWasAtAchievementDeficit[0x2];               // 0x0678(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MissileAssault");
		return ptr;
	}


	int GetMatchCompletionPercent();
	void DetermineCategoryLeaders();
	void UpdatePlayerRatings();
	int ScorePerTimeSort(class AR_PlayerReplicationInfo* A, class AR_PlayerReplicationInfo* B);
	void GiveEndOfGameXPAwards(bool bCountBots);
	void STATIC_GetVictoryMessage(bool bIsAWinner, unsigned char Rank, class AR_TeamInfo* Friend, class AR_TeamInfo* Foe, struct FString* VictoryMsg, struct FString* colorMode, struct FString* friendNumber, struct FString* foeNumber);
	bool CheckScore(class APlayerReplicationInfo* Scorer);
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	void FindWinnerAndEndGame();
	void BaseDestroyed(int TeamIndex);
	void DamageBase(int TeamIndex, int DamageAmount, class AController* EventInstigator);
	void RestartPlayer(class AController* aPlayer);
	void HandleGamemodeEndGameAchievementConditions();
	void OnTeamResigned(int TeamIdx);
	void ForceEndGameCheat(class AR_PlayerController* Sender);
	class ACameraActor* FindEndGameCamera();
	void SetEndGameFocus(class APlayerReplicationInfo* Winner, bool bFindFocus);
	void CheckForFinalMissile(class AR_Proj_AntiBaseReactorMissile* missile);
	bool IsEndGameNear();
	int GetNumSilosTargetting(int targetTeamIndex);
	int GetNumMissilesEnRoute(int targetTeamIndex);
	void LaunchAntiBase(int TeamIndex, int indexToFire);
	bool STATIC_ShouldPlaySiren(class AWorldInfo* WI, unsigned char TeamNum);
	void LeaveFastFireMode();
	void EnterFastFireMode();
	void RegisterMissileSiloControlChange(int SiloIndex, int TeamIndex);
	void UnregisterMissileWithGame(class AR_Proj_AntiBaseReactorMissile* missile);
	void RegisterMissileWithGame(class AR_Proj_AntiBaseReactorMissile* missile);
	bool CheckMissileSiloCache();
	void AdjustPlayerStartScoreForGameType(class APlayerStart* P, class AController* Player, float* Score);
	void NotifyExplosionsFinished();
	void TriggerBaseExplosion(int TeamIndex);
	float GetTeamScore(int TeamIdx);
	int GetWinningTeamIndex();
	int GetLosingTeamIndex();
	void GiveTeamAchievement(const struct FString& AchievementString);
	void PostLogin(class APlayerController* NewPlayer);
	void PreBeginPlay();
};


// Class HawkenGame.R_MechSubType_Base
// 0x06DC (0x0718 - 0x003C)
class UR_MechSubType_Base : public UObject
{
public:
	int                                                DeprecatedOffline_DefaultSkinIndex;                       // 0x003C(0x0004) (Const)
	int                                                DeprecatedOffline_DefaultBoosterIndex;                    // 0x0040(0x0004) (Const)
	int                                                DeprecatedOffline_DefaultPrimaryWeapon;                   // 0x0044(0x0004) (Const)
	int                                                DeprecatedOffline_DefaultSecondaryWeapon;                 // 0x0048(0x0004) (Const)
	int                                                DeprecatedOffline_DefaultOffensiveItem;                   // 0x004C(0x0004) (Const)
	int                                                DeprecatedOffline_SpecialAbilityIndex;                    // 0x0050(0x0004) (Const)
	int                                                BaseMechType;                                             // 0x0054(0x0004) (Const)
	unsigned long                                      bHasRookieAttachments : 1;                                // 0x0058(0x0004) (Const)
	unsigned long                                      bIsXTMech : 1;                                            // 0x0058(0x0004) (Const)
	TEnumAsByte<EMechFamily>                           MechFamilyType;                                           // 0x005C(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	int                                                MechFamilyOrder;                                          // 0x0060(0x0004) (Const)
	float                                              DecreaseHeat_TimeToWaitAfterLastFire;                     // 0x0064(0x0004) (Const)
	float                                              DecreaseHeat_TimeToWaitAfterLastFire_Flush;               // 0x0068(0x0004) (Const)
	float                                              DecreaseHeat_AmountPerSecond;                             // 0x006C(0x0004) (Const)
	float                                              DecreaseHeat_AmountPerSecond_Flush;                       // 0x0070(0x0004) (Const)
	struct FString                                     DisplayName;                                              // 0x0074(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     tooltipText;                                              // 0x0080(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x008C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     loreText;                                                 // 0x0098(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FSMechFamilyData>                    MechFamilyData;                                           // 0x00A4(0x000C) (Const, NeedCtorLink)
	struct FString                                     Optimization_Damage_Name;                                 // 0x00B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_Damage_SystemName;                           // 0x00BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_Damage_ValueLabel;                           // 0x00C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_Damage_TotalStatDescription;                 // 0x00D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_Damage_ClassScoreDescription;                // 0x00E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FireRate_Name;                               // 0x00EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FireRate_SystemName;                         // 0x00F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FireRate_ValueLabel;                         // 0x0104(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FireRate_TotalStatDescription;               // 0x0110(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FireRate_ClassScoreDescription;              // 0x011C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HealRate_Name;                               // 0x0128(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HealRate_SystemName;                         // 0x0134(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HealRate_ValueLabel;                         // 0x0140(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HealRate_Child_HealRate_Name;                // 0x014C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HealRate_Child_HealRate_ValueLabel;          // 0x0158(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HealRate_Child_HealRate_TotalStatDescription;// 0x0164(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HealRate_Child_HealRate_ClassScoreDescription;// 0x0170(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HealRate_Child_VampireDamage_Name;           // 0x017C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HealRate_Child_VampireDamage_ValueLabel;     // 0x0188(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HealRate_Child_VampireDamage_TotalStatDescription;// 0x0194(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HealRate_Child_VampireDamage_ClassScoreDescription;// 0x01A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HeatGen_Name;                                // 0x01AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HeatGen_SystemName;                          // 0x01B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HeatGen_ValueLabel;                          // 0x01C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HeatGen_TotalStatDescription;                // 0x01D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_HeatGen_ClassScoreDescription;               // 0x01DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_Armor_Name;                                  // 0x01E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_Armor_SystemName;                            // 0x01F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_Armor_ValueLabel;                            // 0x0200(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_Armor_TotalStatDescription;                  // 0x020C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_Armor_ClassScoreDescription;                 // 0x0218(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FuelCapacity_Name;                           // 0x0224(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FuelCapacity_SystemName;                     // 0x0230(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FuelCapacity_ValueLabel;                     // 0x023C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FuelCapacity_TotalStatDescription;           // 0x0248(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FuelCapacity_ClassScoreDescription;          // 0x0254(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_BoostSpeed_Name;                             // 0x0260(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_BoostSpeed_SystemName;                       // 0x026C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_BoostSpeed_ValueLabel;                       // 0x0278(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_BoostSpeed_TotalStatDescription;             // 0x0284(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_BoostSpeed_ClassScoreDescription;            // 0x0290(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FuelRegen_Name;                              // 0x029C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FuelRegen_SystemName;                        // 0x02A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FuelRegen_ValueLabel;                        // 0x02B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FuelRegen_TotalStatDescription;              // 0x02C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_FuelRegen_ClassScoreDescription;             // 0x02CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_Name;                               // 0x02D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_SystemName;                         // 0x02E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_ValueLabel;                         // 0x02F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_Child_RunSpeed_Name;                // 0x02FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_Child_RunSpeed_ValueLabel;          // 0x0308(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_Child_RunSpeed_TotalStatDescription;// 0x0314(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_Child_RunSpeed_ClassScoreDescription;// 0x0320(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_Child_WalkSpeed_Name;               // 0x032C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_Child_WalkSpeed_ValueLabel;         // 0x0338(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_Child_WalkSpeed_TotalStatDescription;// 0x0344(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_Child_WalkSpeed_ClassScoreDescription;// 0x0350(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_Child_Acceleration_Name;            // 0x035C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_Child_Acceleration_ValueLabel;      // 0x0368(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_Child_Acceleration_TotalStatDescription;// 0x0374(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RunSpeed_Child_Acceleration_ClassScoreDescription;// 0x0380(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_Name;                          // 0x038C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_SystemName;                    // 0x0398(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_ValueLabel;                    // 0x03A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_TotalStatDescription;          // 0x03B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_ClassScoreDescription;         // 0x03BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_Child_AirMovementSpeed_Name;   // 0x03C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_Child_AirMovementSpeed_ValueLabel;// 0x03D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_Child_AirMovementSpeed_TotalStatDescription;// 0x03E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_Child_AirMovementSpeed_ClassScoreDescription;// 0x03EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_Child_MaxThrusterHeight_Name;  // 0x03F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_Child_MaxThrusterHeight_ValueLabel;// 0x0404(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_Child_MaxThrusterHeight_TotalStatDescription;// 0x0410(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_Child_MaxThrusterHeight_ClassScoreDescription;// 0x041C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_Child_ThrustVerticalSpeed_Name;// 0x0428(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_Child_ThrustVerticalSpeed_ValueLabel;// 0x0434(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_Child_ThrustVerticalSpeed_TotalStatDescription;// 0x0440(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_AirEfficiency_Child_ThrustVerticalSpeed_ClassScoreDescription;// 0x044C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RadarRange_Name;                             // 0x0458(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RadarRange_SystemName;                       // 0x0464(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RadarRange_ValueLabel;                       // 0x0470(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RadarRange_TotalStatDescription;             // 0x047C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_RadarRange_ClassScoreDescription;            // 0x0488(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_OverheatRecovery_Name;                       // 0x0494(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_OverheatRecovery_SystemName;                 // 0x04A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_OverheatRecovery_ValueLabel;                 // 0x04AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_OverheatRecovery_TotalStatDescription;       // 0x04B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_OverheatRecovery_ClassScoreDescription;      // 0x04C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_Dodge_Name;                                  // 0x04D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_Dodge_SystemName;                            // 0x04DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_Dodge_ValueLabel;                            // 0x04E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_Dodge_TotalStatDescription;                  // 0x04F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Optimization_Dodge_ClassScoreDescription;                 // 0x0500(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MechClassForItems;                                        // 0x050C(0x000C) (Const, NeedCtorLink)
	class UTexture2D*                                  HUDIcon;                                                  // 0x0518(0x0004) (Const)
	class UTexture2D*                                  ActionPoseIcon;                                           // 0x051C(0x0004) (Const)
	float                                              difficultyRating;                                         // 0x0520(0x0004) (Const)
	struct FString                                     OnlineStatNameKilledSubType;                              // 0x0524(0x000C) (Const, NeedCtorLink)
	struct FString                                     OnlineStatNameSpawnedWithSubType;                         // 0x0530(0x000C) (Const, NeedCtorLink)
	struct FString                                     OnlineStatNameMadeKillWithSubType;                        // 0x053C(0x000C) (Const, NeedCtorLink)
	struct FString                                     OnlineStatNameXpForTierWithSubtype;                       // 0x0548(0x000C) (Const, NeedCtorLink)
	struct FString                                     OnlineStatNameTierHighWithSubtype;                        // 0x0554(0x000C) (Const, NeedCtorLink)
	struct FString                                     OnlineStatNameVictoryCoOpWithSubtype;                     // 0x0560(0x000C) (Const, NeedCtorLink)
	struct FString                                     OnlineStatNameVictoryCoOpNoDeathsWithSubtype;             // 0x056C(0x000C) (Const, NeedCtorLink)
	struct FSOptimization                              OptDamage;                                                // 0x0578(0x0020)
	struct FSOptimization                              OptFireRate;                                              // 0x0598(0x0020)
	struct FSOptimization                              OptHealRate;                                              // 0x05B8(0x0020)
	struct FSOptimization                              OptHeatGen;                                               // 0x05D8(0x0020)
	struct FSOptimization                              OptArmor;                                                 // 0x05F8(0x0020)
	struct FSOptimization                              OptFuelCapacity;                                          // 0x0618(0x0020)
	struct FSOptimization                              OptBoostSpeed;                                            // 0x0638(0x0020)
	struct FSOptimization                              OptFuelRegen;                                             // 0x0658(0x0020)
	struct FSOptimization                              OptRunSpeed;                                              // 0x0678(0x0020)
	struct FSOptimization                              OptAirEfficiency;                                         // 0x0698(0x0020)
	struct FSOptimization                              OptRadarRange;                                            // 0x06B8(0x0020)
	struct FSOptimization                              OptOverheatRecovery;                                      // 0x06D8(0x0020)
	struct FSOptimization                              OptDodge;                                                 // 0x06F8(0x0020)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_Base");
		return ptr;
	}


	int STATIC_GetMechFamilyColumnOrder(int MechFamily);
	struct FString STATIC_GetMechFamilyDisplayName(int MechFamily);
	void STATIC_ApplyUpgradesFromOptimizations(class AR_Pawn* RP, struct FSAllocatedOptimization* AllocOpt);
	float STATIC_GetMaxHealth(struct FSAllocatedOptimization* AllocOpt);
	void STATIC_OverloadProperties(class AR_Pawn* RPawn);
	bool STATIC_IsDefaultMechSubType();
};


// Class HawkenGame.R_CoopGRI
// 0x00B0 (0x06A4 - 0x05F4)
class AR_CoopGRI : public AR_GameReplicationInfo
{
public:
	float                                              GameFirstWaveTime;                                        // 0x05F4(0x0004) (Net)
	float                                              NewWaveTime;                                              // 0x05F8(0x0004) (Net)
	float                                              WaveStartTime;                                            // 0x05FC(0x0004) (Net)
	int                                                SyncedElapsedTime;                                        // 0x0600(0x0004) (Net)
	int                                                TeamLives;                                                // 0x0604(0x0004) (Net)
	unsigned long                                      bWavesStarted : 1;                                        // 0x0608(0x0004) (Net)
	unsigned long                                      bFirstWaveCompleted : 1;                                  // 0x0608(0x0004) (Net)
	unsigned long                                      bAllowRevivalMarker : 1;                                  // 0x0608(0x0004) (Net)
	unsigned long                                      bCanPlayerUpgrade : 1;                                    // 0x0608(0x0004) (Net)
	unsigned long                                      bShowPortalIndicator : 1;                                 // 0x0608(0x0004) (Net)
	struct FString                                     BroadcastMsg;                                             // 0x060C(0x000C) (Net, NeedCtorLink)
	int                                                GlobalEUPool;                                             // 0x0618(0x0004) (Net)
	float                                              WaveStatsDuration;                                        // 0x061C(0x0004)
	float                                              OpenWaveStatsDelay;                                       // 0x0620(0x0004)
	float                                              BossOpenWaveStatsDelay;                                   // 0x0624(0x0004)
	class AR_NPC_Manager*                              WaveManager;                                              // 0x0628(0x0004) (Net)
	float                                              BigMsgDuration;                                           // 0x062C(0x0004)
	int                                                MaxEUCapForCoop;                                          // 0x0630(0x0004)
	int                                                EnergyUsedByRevival;                                      // 0x0634(0x0004) (Net)
	struct FDeadTeammateInfo                           DeadTeammates[0x4];                                       // 0x0638(0x0018) (Net, NeedCtorLink)
	int                                                BossNumberMultiplier;                                     // 0x0698(0x0004) (Net)
	float                                              NPCCountMultiplier;                                       // 0x069C(0x0004) (Net)
	float                                              NPCActiveCountMultiplier;                                 // 0x06A0(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_CoopGRI");
		return ptr;
	}


	bool CanVoteChallenge(class AR_PlayerReplicationInfo* VoterPRI, int voteIndex);
	void EndGame();
	void StartMatch();
	class AR_NPC_Manager* GetWaveManager();
	float GetPostWaveStatsDuration();
	float GetDelayBeforePostWaveStats();
	bool ShouldDrawSpectatorHUD();
	void ClearDeadTeammates();
	void RemoveDeadTeammate(class AR_Pawn* RP, const struct FString& PlayerName);
	void CacheDeadTeammate(class AR_Pawn* RP);
};


// Class HawkenGame.R_NPC_Manager
// 0x0084 (0x0258 - 0x01D4)
class AR_NPC_Manager : public AActor
{
public:
	TArray<int>                                        PatrolAreas;                                              // 0x01D4(0x000C) (Edit, NeedCtorLink)
	TArray<class UR_NPC_Template*>                     MechTeammateTemplates;                                    // 0x01E0(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bActive : 1;                                              // 0x01EC(0x0004)
	unsigned long                                      bIsInit : 1;                                              // 0x01EC(0x0004)
	unsigned long                                      bWavesComplete : 1;                                       // 0x01EC(0x0004) (Net)
	int                                                NumWaves;                                                 // 0x01F0(0x0004)
	int                                                CurrentGroup;                                             // 0x01F4(0x0004)
	int                                                CurrentWave;                                              // 0x01F8(0x0004) (Net)
	float                                              TimeBetweenWaves;                                         // 0x01FC(0x0004) (Net)
	int                                                NumEnemies;                                               // 0x0200(0x0004) (Net)
	int                                                RemainingEnemies;                                         // 0x0204(0x0004) (Net)
	int                                                teamBotsToAdd;                                            // 0x0208(0x0004)
	int                                                teamBotsLastAddedTemplateIdx;                             // 0x020C(0x0004)
	int                                                bossNumber;                                               // 0x0210(0x0004)
	int                                                numBossesForCurWave;                                      // 0x0214(0x0004)
	TArray<class AR_SpawningVolume*>                   WaveSpawnVolumes;                                         // 0x0218(0x000C) (NeedCtorLink)
	TArray<class APlayerStart*>                        PSlist;                                                   // 0x0224(0x000C) (NeedCtorLink)
	TArray<class AHawkenAi_ControllerBase*>            CurrentWaveEnemies;                                       // 0x0230(0x000C) (NeedCtorLink)
	TArray<class AR_Pawn*>                             BossPawns;                                                // 0x023C(0x000C) (NeedCtorLink)
	float                                              MechPauseDelay;                                           // 0x0248(0x0004)
	TArray<struct FWaveData>                           Waves;                                                    // 0x024C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_NPC_Manager");
		return ptr;
	}


	bool IsWaveCompleted();
	void DisableWaveSpawnVolumeEffects();
	void Tick(float DeltaTime);
	void NewWave();
	void DoBossSpawnCheck();
	void StartBossSpawnCheck();
	void DoBossCinematic(bool bIntro, bool bOutro);
	void SpawnNPCGroup(int WaveIndex, int GroupIndex);
	void UpdateNPCMod(class AR_PawnBase* RPawn);
	int GetMaxActiveInGroupData(const struct FNPCGroupData& Group);
	int GetMaxSpawnedInGroupData(const struct FNPCGroupData& Group);
	void AddTeamBots(int NumToAdd);
	void TeamBotSpawnFailedTimer();
	void WaveCooldownTimer();
	class AR_SpawningVolume* FindSpawnVolume(int WaveIndex, int GroupIndex);
	void ChooseWaveSpawnVolumes(int numVols);
	class AR_SpawningVolume* GetUsableVolumeFromArray(TArray<class AR_SpawningVolume*> vols);
	class AR_SpawningVolume* PickWaveSpawnVolume(bool bIsBoss);
	bool CheckAllSpawnsDone();
	bool IsCurrentlyLastWave();
	bool IsCurrentlyBossWave();
	int GetNumBossesForWave(int WaveNumber);
	bool IsBossGroup(const struct FNPCGroupData& Group);
	struct FWaveData GetCurrentWaveData();
	bool IsInPreWaveDuration();
	bool IsInBetweenWaveDuration();
	float GetRemainingTimeUntilWaveStarts();
	int GetWaveDisplayForBannerMsg();
	int GetCurrentWaveDisplay();
	int GetCurrentWaveIndex();
	void OnNPCDied(class AController* npc);
	void Pause();
	void Resume(float Delay);
	void InitManager();
	void PostBeginPlay();
};


// Class HawkenGame.HawkenSpectatorCameraBase
// 0x0000 (0x0048 - 0x0048)
class UHawkenSpectatorCameraBase : public UHawkenCameraBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenSpectatorCameraBase");
		return ptr;
	}


	bool IsThirdPersonView();
	bool IsFirstPersonView();
};


// Class HawkenGame.HawkenOrbitCamera
// 0x0004 (0x004C - 0x0048)
class UHawkenOrbitCamera : public UHawkenSpectatorCameraBase
{
public:
	class AActor*                                      OrbitVT;                                                  // 0x0048(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenOrbitCamera");
		return ptr;
	}


	void UpdateCamera(class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT);
	void UpdatePlayerFOV(float PCOwnerFOV);
	float ClampToValidFOV(float UnclampedFOV);
	void OnBecomeInActive(class APawn* ViewTargetPawn, class UGameCameraBase* NewCamera);
	bool IsUserZoomAllowed();
	bool IsUserOffsetAllowed();
	bool IsUserViewDistanceAllowed();
};


// Class HawkenGame.R_PlayerControllerTeam
// 0x0004 (0x16CC - 0x16C8)
class AR_PlayerControllerTeam : public AR_PlayerController
{
public:
	unsigned long                                      bIsBeingDestroyed : 1;                                    // 0x16C8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PlayerControllerTeam");
		return ptr;
	}


	void ServerLeaveParty();
	void Destroyed();
};


// Class HawkenGame.R_PlayerControllerCoop
// 0x0038 (0x1704 - 0x16CC)
class AR_PlayerControllerCoop : public AR_PlayerControllerTeam
{
public:
	float                                              MessageFadeOutDuration;                                   // 0x16CC(0x0004)
	class AR_RevivalMarker*                            revivalMarker;                                            // 0x16D0(0x0004) (Transient)
	unsigned long                                      bRespawnFromRevival : 1;                                  // 0x16D4(0x0004)
	float                                              LastTimeConsumableUsed;                                   // 0x16D8(0x0004)
	float                                              ConsumableGlobalCooldown;                                 // 0x16DC(0x0004)
	TArray<class AR_Consumable_Base*>                  ActiveConsumables;                                        // 0x16E0(0x000C) (NeedCtorLink)
	class AR_Consumable_Base*                          Consumables[0x3];                                         // 0x16EC(0x0004)
	float                                              PostSpawnGodModeDuration;                                 // 0x16F8(0x0004)
	float                                              PostSpawnTransitionDuration;                              // 0x16FC(0x0004)
	class USoundCue*                                   RevivalConfSnd;                                           // 0x1700(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PlayerControllerCoop");
		return ptr;
	}


	void ClientOnGetXPChallengeReward(int RewardXP);
	void ClientSetChallengeRewardUIData(int ChallengeIndex, const struct FString& RewardOfferId, bool bIsAlternateReward, const struct FString& AchievementStat, int RewardXP, bool bRepeatable);
	void ServerGetChallengeRewardUIData(int ChallengeIndex);
	TScriptInterface<class UInteractiveObject> FindClosestInteractiveObject(float interactDistanceToCheck, float MinCosine);
	void CacheBattleCamPath();
	void PostSpawnGodModeTimer(bool bEnableGodMode);
	void DoPostSpawnTransition(bool bStart);
	void PawnDied(class APawn* P);
	void ServerNotifyFire(bool Fire);
	void StopFire(unsigned char FireModeNum);
	void StartFire(unsigned char FireModeNum);
	float GetModifiedDamageTaken(float DamageTaken);
	void Destroyed();
	void PlayRevivalConfirmationSound();
	void ClientTransitionToSpectate(const struct FName& SpectateType);
	void SetOvershieldUI(float Percentage);
	void ShowConsumableHintsUI();
	void ResetAllConsumableStates();
	void PostPlayerSpawn();
	void DeactivateAllConsumables();
	void ReinitializeAllConsumables();
	bool CanTriggerConsumable(unsigned char Slot, int ResourceCost, bool bUseLocalPlayerCollection);
	class AR_Consumable_Base* GetConsumableFromSlot(unsigned char Slot);
	void SpawnSingleCoopConsumable(unsigned char Slot, unsigned char Index);
	void RequestSpawnNewConsumables(const struct FConsumablesSlotData& newData);
	void SpawnCoopConsumables(struct FConsumablesSlotData* CoopConsumables);
	void ServerUseConsumable(int ResourceCost);
	void ClientUseConsumable(int ResourceCost);
	void DeactivateCoopConsumable(class UClass* conClass);
	bool CheckForActiveConsumable(class UClass* conClass);
	bool ActivateCoopConsumable(unsigned char Slot);
	int GetConsumableClassIndex(class UClass* ConsumableClass);
	void ConsumableGlobalCooldownTimer();
	void ClientConsumableUnavailable();
	void ServerActivateConsumable(unsigned char Slot);
	void UseCoopConsumable(unsigned char Slot);
	bool CheckConsumablesAllowedForGame();
	void ClientCoopUpgradeUnavailable();
	void ResetCacheCoopUpgrade();
	void ServerRequestBuyCoopUpgrade(TEnumAsByte<ECoopUpgradeCategory> UpgdType);
	void BuyCoopUpgrade(TEnumAsByte<ECoopUpgradeCategory> UpgdType);
	bool CanBuyCoopUpgrade(TEnumAsByte<ECoopUpgradeCategory> UpgdType);
	void ClientShowKill(class APlayerReplicationInfo* KilledPRI, class UClass* dmgType, const struct FVector& Loc, int totalPoints, float PercentDamage, int KillPoints, int MultiKillLevel, int MultiKillPoints, int KillStreak, int KillStreakPoints, bool bRevenge, int RevengePoints, bool bAvenger, int AvengerPoints, bool bSavior, int SaviorPoints, bool bDefendingAA, int DefendingAAPoints, bool bAttackingAA, int AttackingAAPoints, bool bContestingAA, int ContestingAAPoints, bool bCrushKill, int CrushKillPoints, bool bUnderdogBonus, int UnderdogBonusPoints);
	void ClientShowAssist(class APlayerReplicationInfo* KilledPRI, const struct FVector& Loc, int totalPoints, float PercentDamage, int AssistPoints, bool bDefendingAA, int DefendingAAPoints, bool bAttackingAA, int AttackingAAPoints, bool bContestingAA, int ContestingAAPoints, bool bCritialAssist, bool bUnderdogBonus, int UnderdogBonusPoints);
	void ServerSuicide();
	void TimerTurnOffBigCoOpMsg();
	void ToggleBigCoOpMsg(bool bToggle, const struct FString& Text, float Time, bool bIsEndGame, bool bPrecacheOnly, bool bBlurBackground);
	void ClientForceSpawn();
	void ClientShowBigCoOpMsg(int WaveNumber, bool bIsBossWave);
	void ClientSetDisplayCountdownTimer(bool bDisplay);
	void ClientDisableAllInput(bool bDisable);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons);
	void RefillItemsAndHealth();
	void ClientOnRespawnPostWaveStats();
	void StopAllFire();
	void ClientTurnOffCinematicMode();
	void ClientTurnOnCinematicMode();
	void ClientClosePostWaveStats();
	void ClientDelayedOpenPostWaveStats();
	bool IsUsingCinematicCamera();
};


// Class HawkenGame.HawkenPawnPluginMelee_Assault
// 0x0004 (0x00F4 - 0x00F0)
class UHawkenPawnPluginMelee_Assault : public UHawkenPawnPluginMelee
{
public:
	unsigned long                                      bAttacked : 1;                                            // 0x00F0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginMelee_Assault");
		return ptr;
	}


	void ReleaseAttack();
	void OnSingleHit();
};


// Class HawkenGame.R_NPC_Weapon
// 0x0110 (0x06DC - 0x05CC)
class AR_NPC_Weapon : public AR_Weap_Base
{
public:
	class USkeletalMeshComponent*                      WeaponMesh;                                               // 0x05CC(0x0004) (ExportObject, Component, EditInline)
	float                                              FireCooldownTime;                                         // 0x05D0(0x0004) (Edit)
	float                                              FireSpread;                                               // 0x05D4(0x0004) (Edit)
	float                                              DamagePerShot;                                            // 0x05D8(0x0004) (Edit)
	int                                                NumProjPerShot;                                           // 0x05DC(0x0004) (Edit)
	class UClass*                                      NPCProjectileClass;                                       // 0x05E0(0x0004) (Edit)
	class UClass*                                      NPCInstantHitDamageType;                                  // 0x05E4(0x0004) (Edit)
	struct FName                                       FireAnimName;                                             // 0x05E8(0x0008) (Edit)
	class USoundCue*                                   FireSnd;                                                  // 0x05F0(0x0004) (Edit)
	class USoundCue*                                   LoopFireSnd;                                              // 0x05F4(0x0004) (Edit)
	TEnumAsByte<ENPCWeapType>                          Type;                                                     // 0x05F8(0x0001) (Edit, Net)
	unsigned char                                      TeamIndex;                                                // 0x05F9(0x0001) (Edit, Net)
	unsigned char                                      UnknownData00[0x2];                                       // 0x05FA(0x0002) MISSED OFFSET
	int                                                NumProjectileFired;                                       // 0x05FC(0x0004) (Edit)
	float                                              ProjectileFireInterval;                                   // 0x0600(0x0004) (Edit)
	int                                                RemainingProjectilesToFire;                               // 0x0604(0x0004) (Transient)
	unsigned long                                      bTargetDistanceNoZ : 1;                                   // 0x0608(0x0004)
	unsigned long                                      bCanFire : 1;                                             // 0x0608(0x0004)
	unsigned long                                      bActive : 1;                                              // 0x0608(0x0004) (Net)
	unsigned long                                      bPendingFire : 1;                                         // 0x0608(0x0004) (Net)
	unsigned long                                      bRandomizeMissShots : 1;                                  // 0x0608(0x0004)
	unsigned long                                      bRandomizeMissSpread : 1;                                 // 0x0608(0x0004)
	unsigned long                                      bLoopingFire : 1;                                         // 0x0608(0x0004) (Net)
	unsigned long                                      bMissileFire : 1;                                         // 0x0608(0x0004) (Net)
	unsigned long                                      bPlayClientFire : 1;                                      // 0x0608(0x0004) (Net)
	float                                              ShutdownTime;                                             // 0x060C(0x0004) (Net)
	float                                              TargetRadiusLock;                                         // 0x0610(0x0004)
	int                                                MissEveryXShots;                                          // 0x0614(0x0004)
	float                                              MissSpread;                                               // 0x0618(0x0004)
	int                                                shotsCounter;                                             // 0x061C(0x0004)
	int                                                missShotsCounter;                                         // 0x0620(0x0004)
	class UUDKParticleSystemComponent*                 MuzzleFlashEffect;                                        // 0x0624(0x0004) (ExportObject, Component, EditInline)
	class UUDKExplosionLight*                          MuzzleFlashLight;                                         // 0x0628(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       MuzzleSocket;                                             // 0x062C(0x0008)
	class UParticleSystem*                             MuzzleFlashTemplate;                                      // 0x0634(0x0004)
	class UUDKParticleSystemComponent*                 BulletTraceTrailEffect;                                   // 0x0638(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             BulletTraceTrailEffectTemplate;                           // 0x063C(0x0004) (Edit)
	class UUDKParticleSystemComponent*                 BulletEffect;                                             // 0x0640(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             BulletEffectTemplate;                                     // 0x0644(0x0004) (Edit)
	class UMaterialInterface*                          ImpactDecalMIface;                                        // 0x0648(0x0004) (Edit)
	class UParticleSystem*                             ImpactParticlesTemplate;                                  // 0x064C(0x0004) (Edit)
	class USoundCue*                                   ImpactSoundEffect;                                        // 0x0650(0x0004) (Edit)
	class AR_Weap_Base*                                InstantHitWeapon;                                         // 0x0654(0x0004)
	class UAudioComponent*                             LoopFireSndComp;                                          // 0x0658(0x0004) (ExportObject, Component, EditInline)
	float                                              RecentDamagePercent;                                      // 0x065C(0x0004) (Net)
	float                                              RecentDamageTime;                                         // 0x0660(0x0004) (Net)
	float                                              MaxEffectDistance;                                        // 0x0664(0x0004) (Const)
	struct FTraceRepInfo                               repInfo;                                                  // 0x0668(0x0074) (Net, Component)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_NPC_Weapon");
		return ptr;
	}


	void CauseMuzzleFlashLight();
	void AttachBulletEffects(class UParticleSystem* Effect, class UParticleSystem* TrailEffect);
	void AttachMuzzleFlash(class UParticleSystem* MuzzleEffect);
	void UpdateWeaponData(int NewTeamIndex);
	void Tick(float DeltaTime);
	void LoopFiringTimer();
	void FiringTimer();
	float GetFireInterval(unsigned char FireModeNum);
	bool HasLineOfSight(class AActor* Target);
	struct FVector GetFireLocation();
	struct FVector GetPhysicalFireStartLoc(const struct FVector& AimDir);
	bool IsEnemy(class AActor* A);
	void BroadcastProjectileImpact(class AProjectile* Projectile);
	class AProjectile* FireProjectileAtTarget(const struct FVector& TargetLocation, class UClass* ProjectileClass, float fSpread);
	void DelayedFireProjectile();
	void PlayImpactEffects(const struct FVector& HitLocation);
	void PlayBulletTraceEffects(const struct FVector& StartLoc, const struct FVector& EndLoc, const struct FImpactInfo& Impact);
	void KillFireEffects();
	void PlayWeaponFireEffects();
	void FireAtTarget();
	void PlayWeaponFireAnim(bool bLoop, float fRateScale);
	void PlayMissileFire();
	void StopLoopingFire();
	void StartLoopingFire();
	void StopLoopingFireSound(bool bHardEnd);
	void StartLoopingFireSound();
	void OnEMPBlast(float Duration);
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void RecentDamageTick(float DeltaTime);
	void UpdateRecentDamage(float DamagePercent);
	void Destroyed();
	void Reset();
	void PostBeginPlay();
	void InitInstantHitWeapon();
	unsigned char GetTeamNum();
	void ReplicatedEvent(const struct FName& VarName);
	void StopFire(unsigned char FireModeNum);
	void BeginFire(unsigned char FireModeNum);
	void FireAmmunition();
};


// Class HawkenGame.HawkenPawnPluginWeapon_TurretAI
// 0x0000 (0x0098 - 0x0098)
class UHawkenPawnPluginWeapon_TurretAI : public UHawkenPawnPluginWeapon_MachinegunAI
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenPawnPluginWeapon_TurretAI");
		return ptr;
	}

};


// Class HawkenGame.HawkenSpectatorCamera
// 0x0028 (0x0070 - 0x0048)
class UHawkenSpectatorCamera : public UHawkenSpectatorCameraBase
{
public:
	float                                              DefaultFOV;                                               // 0x0048(0x0004) (Edit, Const)
	float                                              ControlInfo_LookRight;                                    // 0x004C(0x0004) (Transient)
	float                                              ControlInfo_LookUp;                                       // 0x0050(0x0004) (Transient)
	float                                              ControlInfo_Zoom;                                         // 0x0054(0x0004) (Transient)
	struct FRotator                                    LastDeltaRot;                                             // 0x0058(0x000C)
	float                                              GhostCamMaxRotationRate;                                  // 0x0064(0x0004) (Config)
	int                                                ValidPitchExtent;                                         // 0x0068(0x0004) (Edit, Config)
	float                                              DefaultTargetViewDistance;                                // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenSpectatorCamera");
		return ptr;
	}


	void ProcessViewRotation(float DeltaTime, class AActor* ViewTarget, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	void STATIC_ClampAxis(int Axis, int BaseAxis, int MaxDelta, int* out_Delta);
	void UpdateCamera(class APawn* P, class AGamePlayerCamera* CameraActor, float DeltaTime, struct FTViewTarget* OutVT);
	void OnBecomeActive(class APawn* P, class UGameCameraBase* OldCamera);
	bool IsFreeCamView();
	bool IsThirdPersonView();
	bool IsFirstPersonView();
};


// Class HawkenGame.HawkenSeqAct_AISetBehaviorScheme
// 0x003C (0x0138 - 0x00FC)
class UHawkenSeqAct_AISetBehaviorScheme : public USequenceAction
{
public:
	struct FAIETQQueriesSet                            QuerySets[0x2];                                           // 0x00FC(0x0018)
	TEnumAsByte<EBSETQQueryOverrideSets>               QuerySet;                                                 // 0x012C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x012D(0x0003) MISSED OFFSET
	struct FName                                       NewBehaviorTree;                                          // 0x0130(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenSeqAct_AISetBehaviorScheme");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.HawkenSquad_Berserker
// 0x0000 (0x021C - 0x021C)
class AHawkenSquad_Berserker : public AHawkenSquad_Melee
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenSquad_Berserker");
		return ptr;
	}

};


// Class HawkenGame.R_WeapAttach_Base
// 0x0010 (0x01E4 - 0x01D4)
class AR_WeapAttach_Base : public AActor
{
public:
	class AR_Pawn*                                     PawnOwner;                                                // 0x01D4(0x0004)
	int                                                WeaponHand;                                               // 0x01D8(0x0004)
	TEnumAsByte<EAttachedMode_e>                       CurAttachPerspective;                                     // 0x01DC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01DD(0x0003) MISSED OFFSET
	float                                              CurFirstPersonFOV;                                        // 0x01E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_WeapAttach_Base");
		return ptr;
	}


	void AttachFirstPersonEffects(class USkeletalMeshComponent** WeaponMesh);
	void AttachThirdPersonEffects(class USkeletalMeshComponent** WeaponMesh);
	void OnUpdateFOV(float NewFirstPersonFOV);
	void UpdateEffectsAttachment();
};


// Class HawkenGame.R_RevivalMarker
// 0x015C (0x0330 - 0x01D4)
class AR_RevivalMarker : public AActor
{
public:
	class AController*                                 DeadPlayer;                                               // 0x01D4(0x0004)
	class AR_Pawn*                                     DeadPawn;                                                 // 0x01D8(0x0004)
	class AR_PRI_Coop*                                 CoopPRI;                                                  // 0x01DC(0x0004) (Net)
	float                                              RevivedPlayerHealthPercent;                               // 0x01E0(0x0004)
	TEnumAsByte<ERevivalMarkerState>                   MarkerState;                                              // 0x01E4(0x0001) (Net)
	unsigned char                                      MechType;                                                 // 0x01E5(0x0001) (Net)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01E6(0x0002) MISSED OFFSET
	float                                              RevivalRate;                                              // 0x01E8(0x0004) (Net)
	float                                              DecayRate;                                                // 0x01EC(0x0004)
	float                                              RevivalProgress;                                          // 0x01F0(0x0004) (Net)
	float                                              CachedRevivalProgress;                                    // 0x01F4(0x0004)
	class AR_PlayerController*                         InstigatorController;                                     // 0x01F8(0x0004)
	class AR_Pawn*                                     InstigatorPawn;                                           // 0x01FC(0x0004) (Net)
	float                                              DrainDistance;                                            // 0x0200(0x0004)
	class AR_Pawn*                                     TouchingPawns[0x3];                                       // 0x0204(0x0004) (Net)
	int                                                NumTouchingPawns;                                         // 0x0210(0x0004) (Net)
	int                                                NumBeamEffects;                                           // 0x0214(0x0004)
	float                                              HiddenDelay;                                              // 0x0218(0x0004)
	class UParticleSystem*                             BeamCompPS;                                               // 0x021C(0x0004)
	class UParticleSystemComponent*                    BeamComp[0x3];                                            // 0x0220(0x0004) (ExportObject, Component, EditInline)
	class AR_Pawn*                                     AttractorEnabledPawns[0x3];                               // 0x022C(0x0004)
	class USkeletalMeshComponent*                      BeaconMesh;                                               // 0x0238(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             SpawnPS;                                                  // 0x023C(0x0004)
	class UParticleSystemComponent*                    BeaconEffect;                                             // 0x0240(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             BeaconPS;                                                 // 0x0244(0x0004)
	class UMaterialInstanceConstant*                   HologramDefaultMaterial;                                  // 0x0248(0x0004) (Const)
	class UMaterialInstanceConstant*                   HologramWeapLeftMIC;                                      // 0x024C(0x0004) (Transient)
	class UMaterialInstanceConstant*                   HologramWeapRightMIC;                                     // 0x0250(0x0004) (Transient)
	class UMaterialInstanceConstant*                   HologramThrusterLeftMIC;                                  // 0x0254(0x0004) (Transient)
	class UMaterialInstanceConstant*                   HologramThrusterRightMIC;                                 // 0x0258(0x0004) (Transient)
	class UMaterialInstanceConstant*                   HologramArmorMIC;                                         // 0x025C(0x0004) (Transient)
	class UParticleSystemComponent*                    ThrusterEffect_L;                                         // 0x0260(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    ThrusterEffect_R;                                         // 0x0264(0x0004) (ExportObject, Component, EditInline)
	struct FMechMeshes                                 MechMeshData;                                             // 0x0268(0x0060) (Component)
	class UAudioComponent*                             LoopingSoundComp;                                         // 0x02C8(0x0004) (ExportObject, Component, EditInline)
	class USoundCue*                                   ReviveSnd;                                                // 0x02CC(0x0004)
	float                                              BobPos;                                                   // 0x02D0(0x0004) (Transient)
	float                                              BobSpeed;                                                 // 0x02D4(0x0004)
	float                                              BobScale;                                                 // 0x02D8(0x0004)
	struct FRevivalSetupData                           SetupData;                                                // 0x02DC(0x0014) (Net)
	class USkeletalMeshComponent*                      ThirdPersonWeaponMeshSecondary;                           // 0x02F0(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      ThirdPersonWeaponMeshPrimary;                             // 0x02F4(0x0004) (ExportObject, Component, EditInline)
	struct FWeaponIndices                              WeapIndices;                                              // 0x02F8(0x0004) (Net)
	struct FName                                       WeaponSocketRight;                                        // 0x02FC(0x0008)
	struct FName                                       WeaponSocketLeft;                                         // 0x0304(0x0008)
	class UR_NPC_Template*                             BotTemplate;                                              // 0x030C(0x0004)
	float                                              LocZOffset;                                               // 0x0310(0x0004)
	float                                              IndicatorWidth;                                           // 0x0314(0x0004)
	float                                              IndicatorHeight;                                          // 0x0318(0x0004)
	float                                              RevivalDelay;                                             // 0x031C(0x0004)
	unsigned long                                      bCleaningUp : 1;                                          // 0x0320(0x0004)
	unsigned long                                      bCleanupClientEffects : 1;                                // 0x0320(0x0004) (Net)
	unsigned long                                      bForceRevivalByConsumable : 1;                            // 0x0320(0x0004)
	TArray<class AR_Pawn*>                             PlayerPawns_Cached;                                       // 0x0324(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_RevivalMarker");
		return ptr;
	}


	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void Tick(float DeltaTime);
	void SetState(TEnumAsByte<ERevivalMarkerState> newMarkerState);
	void ClientOnStateChange();
	void TriggerRevivalByConsumable(class AR_Pawn* ReviverPawn, float NewGodModeDuration, float HealthPercent);
	void StopDraining();
	void StartDraining();
	void AttachWeapons();
	void SetMechType();
	void SetShaderValues(float Opacity);
	void UpdateHologramWeaponThrusterMaterials();
	void UpdateHologramMaterialStaticMesh(class UStaticMeshComponent* SMC, class UMaterialInstanceConstant** MIC);
	void UpdateHologramMaterial(class USkeletalMeshComponent* SMC, class UMaterialInstanceConstant** MIC);
	bool Interactive_Activate(class AActor* EventInstigator);
	bool Interactive_IsValidFor(class AActor* A);
	float Interactive_GetMaxInteractiveDist();
	float Interactive_GetMinInteractiveAngle();
	struct FRotator Interactive_GetRotation();
	struct FVector Interactive_GetLocation(const struct FVector& TraceHitLoc);
	struct FVector GetHintTestLocation(const struct FVector& TraceHitLoc);
	float GetHintRange();
	TEnumAsByte<EHintType> GetHint(class AR_Pawn* RPawn);
	class AR_Pawn* GetActivatorPawn(class AActor* Activator);
	class AR_PlayerController* GetActivatorController(class AActor* Activator);
	void UpdateHologramRotation(float DeltaTime);
	void UpdateHologramTranslation(float DeltaTime);
	void HideHologramMesh();
	void HideBeaconMesh();
	void DoDestroy();
	void DeactivateConsumables();
	void PerformCleanup();
	void CleanupClientEffects();
	void PlayReviveEffects();
	void RetryRevival();
	void DoRevival(bool bRetry);
	void DeactivateBeams();
	void UpdateBeamEffects();
	float GetRevivalProgressForUI();
	bool IsReviving();
	bool IsRevivingDone();
	bool Activate(class AController* EventInstigator);
	void StopLoopingSound(bool bHardEnd);
	void StartLoopingSound();
	void SetOutlineReviveEffect(bool bIsReviving);
	void ToggleOutlineEffect(bool bToggle);
	void StartEffects();
	bool CheckActiveConsumables(class AController* CheckController);
	void ShowMarker();
	void InitMarker(class AController* KilledPlayer, class AR_Pawn* KilledPawn);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Shield
// 0x004C (0x0220 - 0x01D4)
class AR_Shield : public AActor
{
public:
	class UAudioComponent*                             ShieldHum;                                                // 0x01D4(0x0004) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        ShieldMesh;                                               // 0x01D8(0x0004) (ExportObject, Component, EditInline)
	int                                                Health;                                                   // 0x01DC(0x0004) (Net)
	int                                                HealthMax;                                                // 0x01E0(0x0004) (Net)
	float                                              ShieldSize;                                               // 0x01E4(0x0004)
	float                                              Rescale;                                                  // 0x01E8(0x0004)
	float                                              TimeAlive;                                                // 0x01EC(0x0004)
	unsigned long                                      bFadingOut : 1;                                           // 0x01F0(0x0004)
	float                                              DamageMultiplier;                                         // 0x01F4(0x0004)
	float                                              ExpandTime;                                               // 0x01F8(0x0004)
	float                                              ContractTime;                                             // 0x01FC(0x0004)
	float                                              RepLifespan;                                              // 0x0200(0x0004) (Net)
	class UUDKParticleSystemComponent*                 ExpandParticleEffect;                                     // 0x0204(0x0004) (ExportObject, Component, EditInline)
	class UUDKParticleSystemComponent*                 ContractParticleEffect;                                   // 0x0208(0x0004) (ExportObject, Component, EditInline)
	class AApexEffect*                                 TurbulenceEffect;                                         // 0x020C(0x0004) (Transient)
	float                                              MaxShieldScale;                                           // 0x0210(0x0004) (Const)
	float                                              NormalShieldRadius;                                       // 0x0214(0x0004) (Const)
	class UParticleSystem*                             DestroyedEffect;                                          // 0x0218(0x0004) (Const)
	class USoundCue*                                   DestroyedSnd;                                             // 0x021C(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Shield");
		return ptr;
	}


	void Destroyed();
	void Tick(float DeltaTime);
	bool ShouldImpact(class AProjectile* P, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PostBeginPlay();
	void OnDeath();
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void OnEMPBlast(float Duration);
	void OnOwnerDestroyed();
	bool IsDead();
	bool CanBeHealed();
	void OnPawnTouch(class APawn* P);
	bool WasDeployedByPawn(class APawn* P);
	bool IsFriendly(bool bTeamGame, class APawn* P);
	struct FString GetDisplayName();
	float GetHealthPercent();
	bool ShowDefaultIndicator(struct FVector* retIndicatorLoc, struct FVector* retIndicatorSize, struct FString* retDisplayName, float* retHealthPercent, float* retHealthMax);
	void SetItemShieldDefaults(class UR_ItemDatabaseProps* Props, int ItemSheetIdx);
	void PlayDestroyedEffect();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_MuzzleFlashLight
// 0x0000 (0x0220 - 0x0220)
class UR_MuzzleFlashLight : public UUDKExplosionLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MuzzleFlashLight");
		return ptr;
	}

};


// Class HawkenGame.HawkenWeap_AIGun
// 0x0010 (0x05DC - 0x05CC)
class AHawkenWeap_AIGun : public AR_Weap_Base
{
public:
	class AR_PlayerController*                         PlayerOwner;                                              // 0x05CC(0x0004)
	TEnumAsByte<EAIDebugMode>                          Mode;                                                     // 0x05D0(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05D1(0x0003) MISSED OFFSET
	class AHawkenHUD_DebugAI*                          DebugHUD;                                                 // 0x05D4(0x0004) (Transient)
	float                                              LastMoveToTime;                                           // 0x05D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.HawkenWeap_AIGun");
		return ptr;
	}


	void DebugDraw_AI(class AR_HUD* HUD);
	void FireAmmunition();
	void ChooseTarget();
	void ChooseBossTarget();
	void SetMode(const struct FString& NewMode);
	void PostBeginPlay();
};


// Class HawkenGame.InteractiveObject
// 0x0000 (0x003C - 0x003C)
class UInteractiveObject : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.InteractiveObject");
		return ptr;
	}


	bool Interactive_Activate(class AActor* EventInstigator);
	bool Interactive_IsValidFor(class AActor* A);
	float Interactive_GetMaxInteractiveDist();
	float Interactive_GetMinInteractiveAngle();
	struct FRotator Interactive_GetRotation();
	struct FVector Interactive_GetLocation(const struct FVector& TraceHitLoc);
};


// Class HawkenGame.PawnSkeletalMeshComponent
// 0x0000 (0x0628 - 0x0628)
class UPawnSkeletalMeshComponent : public UUDKSkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.PawnSkeletalMeshComponent");
		return ptr;
	}

};


// Class HawkenGame.ProjectileTriggerVolume
// 0x0000 (0x0204 - 0x0204)
class AProjectileTriggerVolume : public ADynamicTriggerVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.ProjectileTriggerVolume");
		return ptr;
	}


	void PostBeginPlay();
};


// Class HawkenGame.R_Ability_Cammo
// 0x000C (0x02A4 - 0x0298)
class AR_Ability_Cammo : public AR_Ability_Base
{
public:
	float                                              RunSpeedIncrease;                                         // 0x0298(0x0004)
	float                                              BoostSpeedIncrease;                                       // 0x029C(0x0004)
	float                                              FuelPerSecond;                                            // 0x02A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_Cammo");
		return ptr;
	}


	bool UpdateThrust(float DeltaTime);
	void OnEMPBlast();
	void OnHeal();
	void OnFire();
	void DoDegaussFade();
	void ClientOnDeactivate(float forceRegenTime);
	void ClientOnActivate();
	void OnDeactivate(float forceRegenTime);
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_AttackBoost
// 0x0004 (0x029C - 0x0298)
class AR_Ability_AttackBoost : public AR_Ability_Base
{
public:
	float                                              AddDamageMultiplier;                                      // 0x0298(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_AttackBoost");
		return ptr;
	}


	void Tick(float DeltaTime);
	void OnDeactivate(float forceRegenTime);
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_Coolant
// 0x0008 (0x02A0 - 0x0298)
class AR_Ability_Coolant : public AR_Ability_Base
{
public:
	float                                              HeatReductionRate;                                        // 0x0298(0x0004)
	float                                              OverheatReductionRate;                                    // 0x029C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_Coolant");
		return ptr;
	}


	void OnDeactivate(float forceRegenTime);
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_FuelReplenish
// 0x0010 (0x02A8 - 0x0298)
class AR_Ability_FuelReplenish : public AR_Ability_Base
{
public:
	float                                              FuelAmount;                                               // 0x0298(0x0004)
	float                                              BoostSpeedInc;                                            // 0x029C(0x0004)
	float                                              BoostSpeedTime;                                           // 0x02A0(0x0004)
	float                                              TotalAdded;                                               // 0x02A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_FuelReplenish");
		return ptr;
	}


	void Tick(float DeltaTime);
	void OnDeactivate(float forceRegenTime);
	void RemoveBoostIncrease();
	void AddBoostIncrease();
	void ClientOnActivate();
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int upgradeFlags);
};


// Class HawkenGame.R_Ability_Barrier
// 0x0004 (0x029C - 0x0298)
class AR_Ability_Barrier : public AR_Ability_Base
{
public:
	float                                              DamageMultiplierReduction;                                // 0x0298(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_Barrier");
		return ptr;
	}


	void Tick(float DeltaTime);
	void OnDeactivate(float forceRegenTime);
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_Overclock
// 0x000C (0x02A4 - 0x0298)
class AR_Ability_Overclock : public AR_Ability_Base
{
public:
	float                                              RunSpeedIncrease;                                         // 0x0298(0x0004)
	float                                              BoostSpeedIncrease;                                       // 0x029C(0x0004)
	float                                              BoostSpreadMultiplier;                                    // 0x02A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_Overclock");
		return ptr;
	}


	void Tick(float DeltaTime);
	void ClientOnDeactivate(float forceRegenTime);
	void OnDeactivate(float forceRegenTime);
	void ClientOnActivate();
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_HeavyMode
// 0x0008 (0x02A0 - 0x0298)
class AR_Ability_HeavyMode : public AR_Ability_Base
{
public:
	float                                              AddToDamageMultiplier;                                    // 0x0298(0x0004)
	float                                              ExplosiveRadiusIncrease;                                  // 0x029C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_HeavyMode");
		return ptr;
	}


	void OnDeactivate(float forceRegenTime);
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_HeavyRegen
// 0x0010 (0x0330 - 0x0320)
class AR_Ability_HeavyRegen : public AR_Ability_Heavy_Base
{
public:
	unsigned long                                      isCombat : 1;                                             // 0x0320(0x0004)
	float                                              OutOfCombatTime;                                          // 0x0324(0x0004)
	float                                              HealthPerSecond;                                          // 0x0328(0x0004)
	float                                              CombatHealthPerSecond;                                    // 0x032C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_HeavyRegen");
		return ptr;
	}


	void Tick(float DeltaTime);
	void outOfCombat();
	void OnTakeDamage(int Damage);
	bool IsHealingOwner();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_HeavyMobile
// 0x0004 (0x0324 - 0x0320)
class AR_Ability_HeavyMobile : public AR_Ability_Heavy_Base
{
public:
	float                                              LockOntime;                                               // 0x0320(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_HeavyMobile");
		return ptr;
	}


	void Tick(float DeltaTime);
	void UpdatePawnVariables(bool bIsHeavyMode);
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_HeavyVanguard
// 0x0004 (0x0324 - 0x0320)
class AR_Ability_HeavyVanguard : public AR_Ability_Heavy_Base
{
public:
	float                                              AlternateHeavyModeSpeed;                                  // 0x0320(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_HeavyVanguard");
		return ptr;
	}


	void Tick(float DeltaTime);
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_PrecisionOverdrive
// 0x0004 (0x029C - 0x0298)
class AR_Ability_PrecisionOverdrive : public AR_Ability_Base
{
public:
	float                                              SpreadMultiplier;                                         // 0x0298(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_PrecisionOverdrive");
		return ptr;
	}


	void Tick(float DeltaTime);
	void ClientOnDeactivate(float forceRegenTime);
	void ClientOnActivate();
	void OnDeactivate(float forceRegenTime);
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_PowerShot
// 0x0004 (0x029C - 0x0298)
class AR_Ability_PowerShot : public AR_Ability_Base
{
public:
	float                                              AddDamageMultiplier;                                      // 0x0298(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_PowerShot");
		return ptr;
	}


	void Tick(float DeltaTime);
	void OnDeactivate(float forceRegenTime);
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_MortarCannon
// 0x0004 (0x0324 - 0x0320)
class AR_Ability_MortarCannon : public AR_Ability_Heavy_Base
{
public:
	float                                              AlternateHeavyModeSpeed;                                  // 0x0320(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_MortarCannon");
		return ptr;
	}


	void Tick(float DeltaTime);
	void UpdatePawnVariables(bool bIsHeavyMode);
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_Amplification
// 0x0014 (0x02AC - 0x0298)
class AR_Ability_Amplification : public AR_Ability_Base
{
public:
	float                                              RepairRate;                                               // 0x0298(0x0004)
	float                                              CombatRepairRate;                                         // 0x029C(0x0004)
	float                                              SelfRepairRate;                                           // 0x02A0(0x0004)
	float                                              CombatSelfRepairRate;                                     // 0x02A4(0x0004)
	float                                              DamageVampirePercent;                                     // 0x02A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_Amplification");
		return ptr;
	}


	void Tick(float DeltaTime);
	void OnDeactivate(float forceRegenTime);
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_MagneticShell
// 0x0004 (0x029C - 0x0298)
class AR_Ability_MagneticShell : public AR_Ability_Base
{
public:
	float                                              DamageMultiplierReduction;                                // 0x0298(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_MagneticShell");
		return ptr;
	}


	void Tick(float DeltaTime);
	void OnDeactivate(float forceRegenTime);
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_Stalker
// 0x0018 (0x02B0 - 0x0298)
class AR_Ability_Stalker : public AR_Ability_Base
{
public:
	float                                              VisionRange;                                              // 0x0298(0x0004)
	float                                              BreakTimeOnFire;                                          // 0x029C(0x0004)
	float                                              BreakTimeOnBoost;                                         // 0x02A0(0x0004)
	float                                              RunSpeedIncrease;                                         // 0x02A4(0x0004)
	float                                              VisionUpdateRate;                                         // 0x02A8(0x0004) (Const)
	float                                              UpdateTime;                                               // 0x02AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_Stalker");
		return ptr;
	}


	void DeactivatePredatorVision(TEnumAsByte<EePredatorVisionState> NewState);
	void ActivatePredatorVision();
	void UpdatePredatorVision();
	bool CheckLineOfSight(const struct FVector& TargetLocation, class AActor* TargetActor);
	void Tick(float DeltaTime);
	void OnEMPBlast();
	void OnTakeDamage(int Damage);
	void OnHeal();
	void OnBoost();
	void OnFire();
	float GetRechargeTimeRemaining();
	void ReactivateTimer();
	void ClientOnTemporaryDeactivate(float DeactiveTime);
	void ClientOnDeactivate(float forceRegenTime);
	void ClientOnActivate();
	void OnTemporaryDeactivate(float DeactiveTime);
	void OnDeactivate(float forceRegenTime);
	bool OnActivate();
	void OnSetCinematicMode(bool bCinematicMode);
	bool IsVisionActive();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_Bulwark
// 0x0000 (0x0298 - 0x0298)
class AR_Ability_Bulwark : public AR_Ability_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_Bulwark");
		return ptr;
	}

};


// Class HawkenGame.R_Ability_G2_Coolant
// 0x0000 (0x02A0 - 0x02A0)
class AR_Ability_G2_Coolant : public AR_Ability_Coolant
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_G2_Coolant");
		return ptr;
	}

};


// Class HawkenGame.R_Ability_G2_Cammo
// 0x0000 (0x02A4 - 0x02A4)
class AR_Ability_G2_Cammo : public AR_Ability_Cammo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_G2_Cammo");
		return ptr;
	}

};


// Class HawkenGame.R_Ability_G2_SpeedBoost
// 0x0008 (0x02A0 - 0x0298)
class AR_Ability_G2_SpeedBoost : public AR_Ability_Base
{
public:
	float                                              RunSpeedIncrease;                                         // 0x0298(0x0004)
	float                                              FuelPerSecond;                                            // 0x029C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_G2_SpeedBoost");
		return ptr;
	}


	void ServerForceDeactivate();
	bool UpdateThrust(float DeltaTime);
	void OnEMPBlast();
	void OnHeal();
	void ClientOnDeactivate(float forceRegenTime);
	void ClientOnActivate();
	void OnDeactivate(float forceRegenTime);
	bool OnActivate();
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Ability_G2_PowerShot
// 0x0000 (0x029C - 0x029C)
class AR_Ability_G2_PowerShot : public AR_Ability_PowerShot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_G2_PowerShot");
		return ptr;
	}

};


// Class HawkenGame.R_Ability_HeatWave
// 0x0070 (0x0308 - 0x0298)
class AR_Ability_HeatWave : public AR_Ability_Base
{
public:
	float                                              MinHeatRequired;                                          // 0x0298(0x0004)
	float                                              MaxHeatUsed;                                              // 0x029C(0x0004)
	float                                              BaseDamage;                                               // 0x02A0(0x0004)
	float                                              DamagePerHeatUnit;                                        // 0x02A4(0x0004)
	float                                              DamageRadius;                                             // 0x02A8(0x0004)
	float                                              InnerDamageRadius;                                        // 0x02AC(0x0004)
	float                                              OuterDamageMultiplier;                                    // 0x02B0(0x0004)
	float                                              MomentumTransfer;                                         // 0x02B4(0x0004)
	float                                              RefireDowntime;                                           // 0x02B8(0x0004)
	float                                              DamageDelay;                                              // 0x02BC(0x0004)
	float                                              BaseHeatGiven;                                            // 0x02C0(0x0004)
	float                                              HeatGivenPerHeatUnit;                                     // 0x02C4(0x0004)
	float                                              AngleOfEffect;                                            // 0x02C8(0x0004)
	float                                              DamageRadiusSqr;                                          // 0x02CC(0x0004)
	float                                              CosineHalfAngleOfEffect;                                  // 0x02D0(0x0004)
	float                                              CurrentDamage;                                            // 0x02D4(0x0004)
	float                                              CurrentHeatUsed;                                          // 0x02D8(0x0004)
	float                                              CurrentHeatGiven;                                         // 0x02DC(0x0004)
	float                                              DecalWidth;                                               // 0x02E0(0x0004)
	float                                              DecalHeight;                                              // 0x02E4(0x0004)
	float                                              DurationOfDecal;                                          // 0x02E8(0x0004)
	struct FName                                       DecalDissolveParamName;                                   // 0x02EC(0x0008)
	float                                              MaxEffectDistance;                                        // 0x02F4(0x0004)
	class UClass*                                      ExplosionLightClass;                                      // 0x02F8(0x0004)
	float                                              MaxExplosionLightDistance;                                // 0x02FC(0x0004)
	float                                              ExplosionCameraShakeRadius;                               // 0x0300(0x0004)
	class AController*                                 OwnerController;                                          // 0x0304(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_HeatWave");
		return ptr;
	}


	bool STATIC_ShouldSpawnExplosionLight(class APawn* AbilityUser, class UClass* ExpLightClass, float MaxLightDistance, const struct FVector& HitLocation, const struct FVector& HitNormal);
	float GetModeActiveTime();
	void ClientSetUsingAbilityMoveState();
	bool IsAvailable();
	void Tick(float DeltaTime);
	void UpdateReady();
	void DoRadialDamage();
	bool IsActorInAngle(class AActor* HitActor, struct FVector* vForward);
	void RefireDowntimeTimer();
	void DoTheGoodies();
	bool OnActivate();
	bool CanActivate();
	bool ShouldDamageActor(class AActor* A, int TeamIndex);
	bool ShouldDamagePawn(class AR_Pawn* RP);
	float GetCurrentHeatGivenForHeat(float heatUsed);
	float GetCurrentDamageForHeat(float* actualHeatUsed);
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
	void SetRobotOwner(class AR_Pawn* NewOwner);
};


// Class HawkenGame.R_Ability_SiegeTank
// 0x0000 (0x0320 - 0x0320)
class AR_Ability_SiegeTank : public AR_Ability_Heavy_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_SiegeTank");
		return ptr;
	}

};


// Class HawkenGame.R_Ability_G2_AttackBoost
// 0x0000 (0x029C - 0x029C)
class AR_Ability_G2_AttackBoost : public AR_Ability_AttackBoost
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_G2_AttackBoost");
		return ptr;
	}

};


// Class HawkenGame.R_Ability_G2_HealingBlast
// 0x0018 (0x02B0 - 0x0298)
class AR_Ability_G2_HealingBlast : public AR_Ability_Base
{
public:
	float                                              HealAmount;                                               // 0x0298(0x0004)
	float                                              HealRadius;                                               // 0x029C(0x0004)
	float                                              HealFriendlyPercent;                                      // 0x02A0(0x0004)
	float                                              ActivateHealDelay;                                        // 0x02A4(0x0004)
	float                                              ExplosionCameraShakeRadius;                               // 0x02A8(0x0004)
	class AController*                                 OwnerController;                                          // 0x02AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Ability_G2_HealingBlast");
		return ptr;
	}


	void DoRadialHeal();
	void HealYourFriends();
	void ClientSetUsingAbilityMoveState();
	bool OnActivate();
	bool CanActivate();
	bool ShouldHealPawn(class AR_Pawn* RP);
	void SetAbilityDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
	void SetRobotOwner(class AR_Pawn* NewOwner);
};


// Class HawkenGame.R_DmgType_HeatWave
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_HeatWave : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_HeatWave");
		return ptr;
	}

};


// Class HawkenGame.R_Missile_ExplosionLight
// 0x0000 (0x0220 - 0x0220)
class UR_Missile_ExplosionLight : public UUDKExplosionLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Missile_ExplosionLight");
		return ptr;
	}

};


// Class HawkenGame.R_PhysicalMaterialProperty
// 0x013C (0x0178 - 0x003C)
class UR_PhysicalMaterialProperty : public UPhysicalMaterialPropertyBase
{
public:
	struct FName                                       MaterialType;                                             // 0x003C(0x0008) (Edit)
	class USoundCue*                                   BulletImpactSoundSmall;                                   // 0x0044(0x0004) (Edit)
	class USoundCue*                                   BulletImpactSoundLarge;                                   // 0x0048(0x0004) (Edit)
	class USoundCue*                                   BoostSideSound;                                           // 0x004C(0x0004) (Edit)
	class USoundCue*                                   BoostForwardEndSound;                                     // 0x0050(0x0004) (Edit)
	class USoundCue*                                   LandSoundLo[0x3];                                         // 0x0054(0x0004) (Edit)
	class USoundCue*                                   LandSoundHi[0x3];                                         // 0x0060(0x0004) (Edit)
	class USoundCue*                                   FootstepWalkSound[0x3];                                   // 0x006C(0x0004) (Edit)
	class USoundCue*                                   FootstepRunSound[0x3];                                    // 0x0078(0x0004) (Edit)
	class USoundCue*                                   FootstepTurnSound[0x3];                                   // 0x0084(0x0004) (Edit)
	class UParticleSystem*                             BulletImpactEffects[0x4];                                 // 0x0090(0x0004) (Edit)
	class UMaterialInstanceTimeVarying*                BulletImpactDecal[0x4];                                   // 0x00A0(0x0004) (Edit)
	float                                              BulletImpactDecalSize[0x4];                               // 0x00B0(0x0004) (Edit)
	float                                              BulletImpactDecalLife[0x4];                               // 0x00C0(0x0004) (Edit)
	class UMaterialInstanceTimeVarying*                ExplosionDecalImpact;                                     // 0x00D0(0x0004) (Edit)
	class UMaterialInstanceTimeVarying*                ExplosionDecalGrenade;                                    // 0x00D4(0x0004) (Edit)
	float                                              ExplosionDecalDuration[0x6];                              // 0x00D8(0x0004) (Edit)
	float                                              ExplosionDecalSize[0x6];                                  // 0x00F0(0x0004) (Edit)
	class UParticleSystem*                             ExplosiveVFXSmallMulti[0x2];                              // 0x0108(0x0004) (Edit)
	class UParticleSystem*                             ExplosiveVFXSmallSing[0x2];                               // 0x0110(0x0004) (Edit)
	class UParticleSystem*                             ExplosiveVFXMedium[0x2];                                  // 0x0118(0x0004) (Edit)
	class UParticleSystem*                             ExplosiveVFXLarge[0x2];                                   // 0x0120(0x0004) (Edit)
	class UParticleSystem*                             ExplosiveVFXSpecial[0x2];                                 // 0x0128(0x0004) (Edit)
	class UParticleSystem*                             ExplosiveVFXImpact[0x2];                                  // 0x0130(0x0004) (Edit)
	class UParticleSystem*                             FootstepEffect;                                           // 0x0138(0x0004) (Edit)
	class UMaterialInstanceTimeVarying*                FootstepDecal;                                            // 0x013C(0x0004) (Edit)
	class UMaterialInstanceTimeVarying*                LandDecal;                                                // 0x0140(0x0004) (Edit)
	class UParticleSystem*                             LandEffectLo;                                             // 0x0144(0x0004) (Edit)
	class UParticleSystem*                             LandEffectHi;                                             // 0x0148(0x0004) (Edit)
	class UParticleSystem*                             LandEffectLoFPS;                                          // 0x014C(0x0004) (Edit)
	class UParticleSystem*                             LandEffectHiFPS;                                          // 0x0150(0x0004) (Edit)
	float                                              LandHighVelocity;                                         // 0x0154(0x0004) (Edit)
	class UParticleSystem*                             BoostForwardEffect;                                       // 0x0158(0x0004) (Edit)
	class UParticleSystem*                             BoostLeftEffect;                                          // 0x015C(0x0004) (Edit)
	class UParticleSystem*                             BoostRightEffect;                                         // 0x0160(0x0004) (Edit)
	class UParticleSystem*                             MechDeathEffect;                                          // 0x0164(0x0004) (Edit)
	class UParticleSystem*                             BumpWallSparksEffect;                                     // 0x0168(0x0004) (Edit)
	class UParticleSystem*                             BumpWallSparksEffectLo;                                   // 0x016C(0x0004) (Edit)
	class UParticleSystem*                             ScrapeWallSparksEffectWalk;                               // 0x0170(0x0004) (Edit)
	class UParticleSystem*                             ScrapeWallSparksEffectBoost;                              // 0x0174(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PhysicalMaterialProperty");
		return ptr;
	}

};


// Class HawkenGame.R_Siege
// 0x00A0 (0x06C8 - 0x0628)
class AR_Siege : public AR_TeamDeathmatch
{
public:
	class UClass*                                      BattleShipClass;                                          // 0x0628(0x0004)
	unsigned long                                      bTeamDamageBattleShip : 1;                                // 0x062C(0x0004) (Const)
	unsigned long                                      bQuickMode : 1;                                           // 0x062C(0x0004)
	int                                                PlayedBaseUnderAttack[0x2];                               // 0x0630(0x0004)
	int                                                WinningTeamIndex;                                         // 0x0638(0x0004)
	int                                                BaseDestroyedIndex;                                       // 0x063C(0x0004)
	int                                                EngineHealth;                                             // 0x0640(0x0004) (Config)
	float                                              EngineHealthModifier;                                     // 0x0644(0x0004) (Config)
	int                                                EngineMaxHealth;                                          // 0x0648(0x0004) (Config)
	int                                                TurretHealth;                                             // 0x064C(0x0004) (Config)
	float                                              TurretHealthModifier;                                     // 0x0650(0x0004) (Config)
	int                                                TurretMaxHealth;                                          // 0x0654(0x0004) (Config)
	int                                                BaseStartEnergy;                                          // 0x0658(0x0004) (Config)
	int                                                BaseStartHealth;                                          // 0x065C(0x0004) (Config)
	int                                                EnergyGainPerSecond;                                      // 0x0660(0x0004) (Config)
	int                                                BaseHeavyDamageHealth;                                    // 0x0664(0x0004) (Config)
	int                                                BaseCriticalHealth;                                       // 0x0668(0x0004) (Config)
	float                                              TimeBetweenNearEndChecks;                                 // 0x066C(0x0004) (Const)
	float                                              TimeFromBaseForNearEndGame;                               // 0x0670(0x0004) (Const)
	float                                              NearEndMinimumShipHealth;                                 // 0x0674(0x0004) (Const)
	float                                              TimeSinceNearEndCheck;                                    // 0x0678(0x0004)
	int                                                EnergyToLaunchShip;                                       // 0x067C(0x0004) (Config)
	int                                                EnergyToLaunchIncreasePerShip;                            // 0x0680(0x0004) (Config)
	float                                              LaunchBattleshipDelay;                                    // 0x0684(0x0004) (Config)
	float                                              TakeDownShieldsDelay;                                     // 0x0688(0x0004) (Config)
	float                                              BaseTurretReactivateDelay;                                // 0x068C(0x0004) (Config)
	float                                              BattleshipTimeToCapAA;                                    // 0x0690(0x0004) (Config)
	int                                                DamageToReactorPerShip;                                   // 0x0694(0x0004) (Config)
	int                                                EnergyUnitsInRobot;                                       // 0x0698(0x0004) (Config)
	int                                                EnergyCostToSpawn;                                        // 0x069C(0x0004) (Config)
	int                                                BattleshipDamageToBasePerSecond;                          // 0x06A0(0x0004) (Config)
	int                                                BattleshipDamageToBasePerSecondPerTurret;                 // 0x06A4(0x0004) (Config)
	int                                                BattleshipDamageToBattleshipPerSecond;                    // 0x06A8(0x0004) (Config)
	int                                                BattleshipDamageToBattleshipPerSecondPerTurret;           // 0x06AC(0x0004) (Config)
	int                                                BaseDamageToBattleshipPerSecond;                          // 0x06B0(0x0004) (Config)
	float                                              BattleshipAttackBaseDist;                                 // 0x06B4(0x0004) (Config)
	float                                              AntiAirDamageToBattleshipFromMissile;                     // 0x06B8(0x0004) (Config)
	float                                              AntiAirMaxControl;                                        // 0x06BC(0x0004) (Config)
	unsigned char                                      TeamBaseHealthWasAtAchievementDeficit[0x2];               // 0x06C0(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x06C2(0x0002) MISSED OFFSET
	float                                              ExplosionTriggerTime;                                     // 0x06C4(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Siege");
		return ptr;
	}


	void SendGameTypeEndOfGameStats(class AR_PlayerController* RPCOwner, class AR_PlayerReplicationInfo* RPRI);
	void RecordSuccessfulBattleship(int TeamIndex);
	void HandleGamemodeEndGameAchievementConditions();
	int GetMatchCompletionPercent();
	void DetermineCategoryLeaders();
	void NotifyExplosionsFinished();
	int EUReturnedSort(class AR_PlayerReplicationInfo* A, class AR_PlayerReplicationInfo* B);
	void UpdatePlayerRatings();
	int ScorePerTimeSort(class AR_PlayerReplicationInfo* A, class AR_PlayerReplicationInfo* B);
	void GiveEndOfGameXPAwards(bool bCountBots);
	void STATIC_GetVictoryMessage(bool bIsAWinner, unsigned char Rank, class AR_TeamInfo* Friend, class AR_TeamInfo* Foe, struct FString* VictoryMsg, struct FString* colorMode, struct FString* friendNumber, struct FString* foeNumber);
	bool CheckScore(class APlayerReplicationInfo* Scorer);
	class ACameraActor* FindEndGameCamera();
	void SetEndGameFocus(class APlayerReplicationInfo* Winner, bool bFindFocus);
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	void BattleshipReachedAA(int TeamIndex);
	void BattleshipCappingAA(int TeamIndex, float DeltaTime);
	float GetBaseDamageMultiplier(int TeamIndex);
	bool STATIC_ShouldBattleshipDamageBase(class AR_TeamInfo* RTeam, class AR_TeamInfo* ROppTeam);
	bool BattleshipsTouching();
	bool STATIC_BattleshipsFighting(class AR_TeamInfo* RTeam, class AR_TeamInfo* ROppTeam);
	void BaseDestroyed(int TeamIndex, const struct FString& EndGameReason);
	void OnTeamResigned(int TeamIdx);
	void TriggerBaseExplosionTimer();
	void AntiAirDestroyed(int TeamIndex, int AAIndex);
	void RemoveBattleship(int TeamIndex);
	void OnBattleshipDestroyed(int TeamIndex, class AController* DamageCauser);
	int DamageBattleship(int TeamIndex, int DamageAmount, class AController* DamageCauser);
	void DamageBattleshipFromAA(class AR_BattleShipEngine* BSE);
	void DamageBase(int TeamIndex, int DamageAmount, class AController* EventInstigator);
	void SpawnBattleship(class AR_TeamInfo* Team);
	void BattleshipReachedBase(int TeamIndex);
	void StartBattleshipMoving(int TeamIndex);
	void LaunchBattleShip(class AR_TeamInfo* Team);
	int EnergyTransfer(class AR_TeamInfo* Team, class AR_Pawn* Pawn, int EnergyUnits);
	float GetBattleshipTurretHealth(int BattleShipLevel);
	float GetBattleshipHealth(int BattleShipLevel);
	void RestartPlayer(class AController* aPlayer);
	void ForceEndGameCheat(class AR_PlayerController* Sender);
	void LaunchAntiAir(int TeamIndex);
	void SuperBattleship();
	void TriggerBaseExplosion(int TeamIndex);
	void SetBattleshipHealthCheat(int Health);
	void DamageShipCheat(int TeamIndex, float Damage);
	void KillShipCheat(int TeamIndex);
	void LaunchShipCheat(int TeamIndex);
	void QuickMode();
	bool IsEndGameNear();
	float GetTeamScore(int TeamIdx);
	int GetWinningTeamIndex();
	int GetLosingTeamIndex();
	void EnergyGainTimer();
	void PostBeginPlay();
	void PreBeginPlay();
	bool STATIC_ShouldPlaySiren(class AWorldInfo* WI, unsigned char TeamNum);
};


// Class HawkenGame.R_ActorWatch
// 0x0018 (0x0054 - 0x003C)
class UR_ActorWatch : public UObject
{
public:
	unsigned long                                      bChoosingFocus : 1;                                       // 0x003C(0x0004) (Transient)
	class AActor*                                      CurrentFocus;                                             // 0x0040(0x0004) (Transient)
	class AActor*                                      CurrentWatch;                                             // 0x0044(0x0004) (Transient)
	TArray<struct FName>                               DebugCategories;                                          // 0x0048(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ActorWatch");
		return ptr;
	}


	void DrawDebugWatch(class AR_HUD* HUD);
	void ToggleDebugCategory(const struct FName& Category);
	void ChooseFocus();
	void PickActor(class AActor* Picked);
	void StopPicking();
	void StartPicking();
};


// Class HawkenGame.R_AltitudeVolume
// 0x0000 (0x0240 - 0x0240)
class AR_AltitudeVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_AltitudeVolume");
		return ptr;
	}

};


// Class HawkenGame.R_AnimNodeBlendDirectional8Way
// 0x0000 (0x0120 - 0x0120)
class UR_AnimNodeBlendDirectional8Way : public UAnimNodeBlendDirectional
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_AnimNodeBlendDirectional8Way");
		return ptr;
	}

};


// Class HawkenGame.R_AnimNodeSeqCameraShakeLevel
// 0x0018 (0x0158 - 0x0140)
class UR_AnimNodeSeqCameraShakeLevel : public UAnimNodeSequence
{
public:
	struct FName                                       AnimName[0x3];                                            // 0x0140(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_AnimNodeSeqCameraShakeLevel");
		return ptr;
	}


	void OnBecomeRelevant();
	void OnInit();
};


// Class HawkenGame.R_AntiAir_Reactor
// 0x000C (0x01E0 - 0x01D4)
class AR_AntiAir_Reactor : public AActor
{
public:
	int                                                TeamNum;                                                  // 0x01D4(0x0004) (Edit)
	int                                                AAIndex;                                                  // 0x01D8(0x0004) (Edit)
	int                                                Health;                                                   // 0x01DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_AntiAir_Reactor");
		return ptr;
	}


	void OnDestroyed();
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	unsigned char GetTeamNum();
};


// Class HawkenGame.R_ApexTurbulenceFactory
// 0x0028 (0x0064 - 0x003C)
class UR_ApexTurbulenceFactory : public UObject
{
public:
	class UApexGridComponent*                          R_HealthPickupGrid;                                       // 0x003C(0x0004) (ExportObject, Component, EditInline)
	class UApexGridComponent*                          R_ShieldGrid;                                             // 0x0040(0x0004) (ExportObject, Component, EditInline)
	class UApexGridComponent*                          R_EnergySourceGrid;                                       // 0x0044(0x0004) (ExportObject, Component, EditInline)
	class UApexGridComponent*                          R_PawnDeathGrid;                                          // 0x0048(0x0004) (ExportObject, Component, EditInline)
	class UApexJetComponent*                           R_PawnJet;                                                // 0x004C(0x0004) (ExportObject, Component, EditInline)
	class UApexJetComponent*                           R_PawnDeathJet;                                           // 0x0050(0x0004) (ExportObject, Component, EditInline)
	class UApexJetComponent*                           R_ImpactJet;                                              // 0x0054(0x0004) (ExportObject, Component, EditInline)
	class UApexAttractorComponent*                     R_EnergyAttractor;                                        // 0x0058(0x0004) (ExportObject, Component, EditInline)
	class UApexAttractorComponent*                     R_PawnDeathAttractor;                                     // 0x005C(0x0004) (ExportObject, Component, EditInline)
	class UApexAttractorComponent*                     R_HealthAttractor;                                        // 0x0060(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ApexTurbulenceFactory");
		return ptr;
	}


	class UApexAttractorComponent* GetHealthAttractor();
	class UApexAttractorComponent* GetDeathAttractor();
	class UApexAttractorComponent* GetEnergyAttractor();
	class UApexJetComponent* GetImpactJet();
	class UApexJetComponent* GetDeathJet();
	class UApexJetComponent* GetPawnJet();
	class UApexGridComponent* GetDeathGrid();
	class UApexGridComponent* GetShieldGrid();
	class UApexGridComponent* GetHealthPickupGrid();
	class UApexGridComponent* GetEnergySourceGrid();
	class UR_ApexTurbulenceFactory* STATIC_RequestFactoryInstance();
};


// Class HawkenGame.R_Challenge
// 0x00B0 (0x00EC - 0x003C)
class UR_Challenge : public UObject
{
public:
	struct FString                                     Title;                                                    // 0x003C(0x000C) (NeedCtorLink)
	struct FString                                     Description;                                              // 0x0048(0x000C) (NeedCtorLink)
	struct FString                                     Id;                                                       // 0x0054(0x000C) (NeedCtorLink)
	struct FString                                     RewardGUID;                                               // 0x0060(0x000C) (NeedCtorLink)
	class UOnlineAchievementObject*                    AchievementObject;                                        // 0x006C(0x0004)
	struct FUniqueNetId                                AchievementUID;                                           // 0x0070(0x0010)
	struct FString                                     AchievementStatName;                                      // 0x0080(0x000C) (NeedCtorLink)
	struct FString                                     TypeId;                                                   // 0x008C(0x000C) (NeedCtorLink)
	int                                                Index;                                                    // 0x0098(0x0004)
	int                                                TitleIndex;                                               // 0x009C(0x0004)
	int                                                DescriptionIndex;                                         // 0x00A0(0x0004)
	TArray<struct FString>                             LOCTitles;                                                // 0x00A4(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             LOCDescriptions;                                          // 0x00B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoChallengeTitle;                                         // 0x00BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoChallengeDescription;                                   // 0x00C8(0x000C) (Const, Localized, NeedCtorLink)
	TArray<class AR_ChallengeMod*>                     Mods;                                                     // 0x00D4(0x000C) (NeedCtorLink)
	struct FString                                     ChallengeParams;                                          // 0x00E0(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Challenge");
		return ptr;
	}


	void Deactivate();
	void Activate();
	void SetParams(const struct FString& NewParams);
	struct FString GetDetailDescription();
	struct FString GetDescription();
	struct FString GetTitle();
	void AddMod(class AR_ChallengeMod* NewMod);
};


// Class HawkenGame.R_ChallengeMod
// 0x0024 (0x020C - 0x01E8)
class AR_ChallengeMod : public AMutator
{
public:
	struct FString                                     Description;                                              // 0x01E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Id;                                                       // 0x01F4(0x000C) (NeedCtorLink)
	unsigned long                                      bActivated : 1;                                           // 0x0200(0x0004)
	class AR_MPGameBase*                               RGame;                                                    // 0x0204(0x0004)
	class AR_GameReplicationInfo*                      RGRI;                                                     // 0x0208(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod");
		return ptr;
	}


	struct FString GetDescription();
	void AppplyModOnPawn(class AR_PawnBase* RP);
	void Deactivate();
	void Activate();
	void Destroyed();
	void SetParams(TArray<struct FString> Params);
	void PostBeginPlay();
};


// Class HawkenGame.R_Spline_Follower
// 0x0044 (0x0218 - 0x01D4)
class AR_Spline_Follower : public AActor
{
public:
	struct FString                                     DisplayName;                                              // 0x01D4(0x000C) (NeedCtorLink)
	float                                              TravelDistance;                                           // 0x01E0(0x0004) (Net)
	unsigned long                                      bActive : 1;                                              // 0x01E4(0x0004) (Net)
	unsigned long                                      bDestroyOnFinished : 1;                                   // 0x01E4(0x0004) (Edit)
	unsigned long                                      bTakesDamage : 1;                                         // 0x01E4(0x0004) (Edit)
	unsigned long                                      PathBlocked : 1;                                          // 0x01E4(0x0004)
	int                                                RandomSeed;                                               // 0x01E8(0x0004)
	float                                              MoveSpeed;                                                // 0x01EC(0x0004) (Edit, Net)
	class ASplineActor*                                SplineActorStart;                                         // 0x01F0(0x0004) (Edit, Net)
	float                                              StartDelay;                                               // 0x01F4(0x0004) (Edit)
	float                                              StartDelayVariation;                                      // 0x01F8(0x0004) (Edit)
	int                                                StartHealth;                                              // 0x01FC(0x0004) (Edit)
	int                                                Health;                                                   // 0x0200(0x0004)
	class ASplineActor*                                LastSplinePoint;                                          // 0x0204(0x0004) (Net)
	class ASplineActor*                                LastNextSplinePoint;                                      // 0x0208(0x0004) (Net)
	float                                              LastSplinePointDistance;                                  // 0x020C(0x0004) (Net)
	float                                              CurrentMoveSpeed;                                         // 0x0210(0x0004) (Net)
	class USoundCue*                                   AmbientSound;                                             // 0x0214(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Spline_Follower");
		return ptr;
	}


	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void OnDeath();
	void MoveToStart();
	void HideMesh(bool Hidden);
	bool FollowSpline(float DeltaTime);
	class ASplineActor* GetStartSplineActor();
	void StartAmbientSound();
	void Respawn();
	void Tick(float DeltaTime);
	void Deactivate();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Spline_Follower_Vehicle
// 0x0030 (0x0248 - 0x0218)
class AR_Spline_Follower_Vehicle : public AR_Spline_Follower
{
public:
	class UStaticMeshComponent*                        Mesh;                                                     // 0x0218(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FVector                                     EffectOffset;                                             // 0x021C(0x000C) (Edit, Net)
	class UParticleSystem*                             JetExhaustEffect;                                         // 0x0228(0x0004) (Edit, Net)
	float                                              JetExhaustScale;                                          // 0x022C(0x0004) (Edit)
	class UParticleSystemComponent*                    JetExhaustPSC;                                            // 0x0230(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             DestroyEffect;                                            // 0x0234(0x0004) (Edit, Net)
	int                                                EnergyUnits;                                              // 0x0238(0x0004) (Edit)
	class USoundCue*                                   DestroySound;                                             // 0x023C(0x0004) (Edit)
	class UStaticMesh*                                 ReplicatedMesh;                                           // 0x0240(0x0004) (Net, Transient)
	unsigned long                                      bExploded : 1;                                            // 0x0244(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Spline_Follower_Vehicle");
		return ptr;
	}


	void OnDeath();
	void Deactivate();
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void StartExhaust();
	void EncroachedBy(class AActor* Other);
	void Respawn();
	void HideMesh(bool Hidden);
	void CheckPath();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_DmgType_ChangeTeam
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_ChangeTeam : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_ChangeTeam");
		return ptr;
	}


	void STATIC_ScoreKill(class AR_PlayerReplicationInfo* KillerPRI, class AR_PlayerReplicationInfo* KilledPRI, class APawn* KilledPawn);
};


// Class HawkenGame.R_DmgType_SwapMechs
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_SwapMechs : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_SwapMechs");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Turret_Machine
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Turret_Machine : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Turret_Machine");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Turret_Machine_BaseDefense
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Turret_Machine_BaseDefense : public UR_DmgType_Turret_Machine
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Turret_Machine_BaseDefense");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Turret_Rocket
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Turret_Rocket : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Turret_Rocket");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Turret_Rocket_BaseDefense
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Turret_Rocket_BaseDefense : public UR_DmgType_Turret_Rocket
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Turret_Rocket_BaseDefense");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Turret_Homing
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Turret_Homing : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Turret_Homing");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Turret_Homing_BaseDefense
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Turret_Homing_BaseDefense : public UR_DmgType_Turret_Homing
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Turret_Homing_BaseDefense");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_AntiBaseReactorMissile
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_AntiBaseReactorMissile : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_AntiBaseReactorMissile");
		return ptr;
	}

};


// Class HawkenGame.R_CheatManager
// 0x0014 (0x007C - 0x0068)
class UR_CheatManager : public UHawkenCheatManager
{
public:
	class AR_DebugDemoSpec*                            DebugDemoSpecController;                                  // 0x0068(0x0004)
	int                                                ETQQueryID;                                               // 0x006C(0x0004) (Transient)
	unsigned long                                      bPlayerStartDebugMode : 1;                                // 0x0070(0x0004) (Transient)
	int                                                TempFocusPointCount;                                      // 0x0074(0x0004)
	int                                                TempFocusPointAdd;                                        // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_CheatManager");
		return ptr;
	}


	void DisableTest(const struct FName& TestName);
	void EnableTest(const struct FName& TestName);
	void DumpMatchmakingReservations();
	void DumpMatchmakingAdvertisements();
	void AddFakeBeaconReservation(int Glicko1, int Level1, int MatchScore1, int Glicko2, int Level2, int MatchScore2, int Glicko3, int Level3, int MatchScore3);
	void DumpHostBeaconReservations();
	void SetMatchMMR(int MMR);
	void ShowMatchMMR();
	void TestVisibility();
	void TestFireLane();
	void TestAnchor();
	void TestPointOnNavMesh();
	void AIGoto();
	void DebugCat(const struct FString& List);
	void StopActorPicker();
	void StartActorPicker();
	void LogSpeedOverTime(int Seconds);
	void QuitForMaintenance(float TimeToQuit, const struct FString& Message);
	void ShowNextBestPlayerStart();
	void SetPlayerStartVis(unsigned char TeamNum);
	int SortPlayerStarts(const struct FPlayerStartRatingInfo& PlayerStartA, const struct FPlayerStartRatingInfo& PlayerStartB);
	void TogglePlayerStartDebug();
	void SetPlayerFloatStat(const struct FString& StatName, float Amount);
	void SetPlayerIntStat(const struct FString& StatName, int Amount);
	void IncrementPlayerFloatStat(const struct FString& StatName, float Amount);
	void IncrementPlayerIntStat(const struct FString& StatName, int Amount);
	void AVShowAllStops();
	void AVRemoveStop(int ViewPositionIdx);
	void AVAddStop(int Pitch, int Yaw, int Roll);
	void AVStop();
	void AVMoveOut();
	void AVMoveIn();
	void AVMoveDown();
	void AVMoveUp();
	void AVCycleTo(int Position);
	void AVCyclePrev();
	void AVCycleNext();
	class UHawkenAssetViewerCamera* GetAVCam();
	void ToggleAVCam();
	void EnableDemoSpecCamera();
	void ToggleDemoSpecCamera();
	void ShowViewedActorInfo();
	void ToggleThirdPersonUI(bool bShowUI);
	void PrepHeavymodeCamTest();
	void PrepHealcamTest();
	void DebugCameraTurn_Out();
	void CamTurnTest();
	void CamTurn(int StartValue, int EndValue, float Duration, bool bAlignWhenDone);
	void TurnToRotation(const struct FRotator& NewRot, float TurnTimeSec);
	void SetScopeSize(float SizeX, float SizeY);
	void SetScopeLoc(float LocX, float LocY);
	void SetReticleVP(int X, int Y, int W, int H);
	void SetMatchInfoLoc(float LocX, float LocY);
	void SetVitalsLoc(float LocX, float LocY);
	void SetRadarLoc(float LocX, float LocY);
	void SetCrosshairLoc(float LocX, float LocY, float LocZ);
	void TestFOV(float FOVWorld, float FOVWeapons);
	void ShowAttachmentFOV();
	void DebugToggleTPCameraMode(bool bThirdPersonView);
	void DebugToggleTPOwnerNoSee(bool bShouldBeVisible);
	void DebugToggleTPMesh(bool bShouldBeVisible);
	void DebugToggleFPMesh(bool bShouldBeVisible);
	void DebugSpectatorMode();
	void PrintAudioVolume();
	void DebugHeat();
	void DebugPawn();
	void Ironman();
	void BaseLifterUp(bool bUp);
	void LaunchAntiAir(int TeamIndex);
	void SuperShip();
	void ShowIndicatorDI();
	void SetHint(bool Active, const struct FString& Text);
	void RemoveCallout(const struct FString& Id);
	void AddCallout(const struct FString& Id, const struct FString& Title, int X, int Y, bool animated, const struct FString& Orientation);
	void CallASAddKeysAndConnectors(class UGFxObject* KeysArray, class UGFxObject* ConnectorsArray);
	void TestConnector();
	void AddKeys(TArray<struct FString> Keys);
	void ClearKeys();
	void SetAgentText(const struct FString& Text);
	void SetAgentActive(bool bActive);
	void ChangeMechXP(float XP);
	void SetTaunt(int HolotauntIndex, int AnimTauntIndex);
	void RemoveItem(int Slot);
	void GiveItem(int ItemIndex, int Slot);
	void RefreshItems();
	void FullItems();
	void RefreshAbility();
	void SetAbility(TEnumAsByte<EAbilities> NewAbilityIndex);
	void SetMechAppearance(int ArmIdx, int TorsoIdx, int MidIdx, int LowerIdx, int ThrusterIdx, int CamoPatternIdx);
	void SetMechType(int NewMechType, int NewMechSubType);
	void SetUpgradeFlags(int PrimaryWeapFlags, int SecondaryWeapFlags, int AbilityFlags);
	void SetWeapons(int PrimaryIdx, int SecondaryIdx);
	void SetHealth(float NewHealth);
	void SetHeatLevel(float HeatLevel);
	void SetEnergyUnits(int NumUnits);
	void SpawnHealthCharge(int NumUnits);
	void SpawnEnergyUnits(int NumUnits);
	void ToggleBTSlicing();
	void AISpectator();
	void AIGun(const struct FString& Mode);
	void DrawETQQuery(const struct FName& QueryName, const struct FName& PawnContext);
	void TestAccuracy(float Accuracy);
	void TgETQDMShoot();
	void TgETQDM(TEnumAsByte<EETQDebugMode> Mode);
	void HawkAiVerboseNavDebug();
	void SpawnHere(const struct FString& ClassName);
	void StopBotRegen();
	void StopBotFire();
	void ForceBotFire();
	void KillAllBots(int TeamIndex);
	void AddEUtoPool(int Amount);
	void KillThisBot();
	void KillBot(const struct FString& BotName);
	void RestartBot(const struct FString& BotName);
	void AddBots(int NumBotsToAdd);
	void TimeLimit(int Time);
	class AR_PlayerController* GetLocalPC();
	class AR_Pawn* GetLocalRPawn();
	void TriggerBaseExplosion(int TeamIndex);
	void DestroyAllFlyingCars();
	void ForceEndGame();
	void ForceChangeTeam(const struct FString& PlayerName, int NewTeamIndex);
	void QuickMode();
	void SetBaseHealth(int TeamIndex, int BaseHealth);
	void DamageShip(int TeamIndex, float Damage);
	void KillShip(int TeamIndex);
	void SetTeamRallyPoint(const struct FVector& FocusLoc);
	void TempSetRallyPoint();
	void EnemySighted(const struct FVector& spottedLoc);
	void SetBattleshipHealth(int Health);
	void LaunchShip(int TeamIndex);
	int GetPlayerTeam();
	void CameraFade(int FadeValue, float FadeTime, bool AutoFade);
	void SpectateMode(const struct FName& SpectateType);
	void SetMaxTickRate(float NewMaxNetTickRate);
	void AdminPrintGlickoScores();
};


// Class HawkenGame.R_HUD_DM
// 0x0000 (0x1014 - 0x1014)
class AR_HUD_DM : public AR_HUD
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_HUD_DM");
		return ptr;
	}

};


// Class HawkenGame.R_StatsWriteDM
// 0x0000 (0x0088 - 0x0088)
class UR_StatsWriteDM : public UOnlineStatsWrite
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_StatsWriteDM");
		return ptr;
	}

};


// Class HawkenGame.R_GameSettingsClassic
// 0x0000 (0x0110 - 0x0110)
class UR_GameSettingsClassic : public UUDKGameSettingsCommon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameSettingsClassic");
		return ptr;
	}

};


// Class HawkenGame.SeqAct_ToggleTutorialScreen
// 0x001C (0x0118 - 0x00FC)
class USeqAct_ToggleTutorialScreen : public USeqAct_HawkenGfx
{
public:
	struct FString                                     ScreenText;                                               // 0x00FC(0x000C) (Edit, Const, Localized, NeedCtorLink)
	float                                              Duration;                                                 // 0x0108(0x0004) (Edit)
	unsigned long                                      bIsEndGame : 1;                                           // 0x010C(0x0004) (Edit)
	unsigned long                                      bPrecacheOnly : 1;                                        // 0x010C(0x0004) (Edit)
	float                                              MsgFadeOutDuration;                                       // 0x0110(0x0004) (Edit, EditConst)
	class AR_TeamDeathmatch*                           gameRef;                                                  // 0x0114(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_ToggleTutorialScreen");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	void Activated();
};


// Class HawkenGame.R_HUD_Team
// 0x0000 (0x1014 - 0x1014)
class AR_HUD_Team : public AR_HUD
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_HUD_Team");
		return ptr;
	}

};


// Class HawkenGame.R_BaseMotherShip
// 0x00B4 (0x0288 - 0x01D4)
class AR_BaseMotherShip : public AActor
{
public:
	int                                                TeamNum;                                                  // 0x01D4(0x0004) (Edit, Net)
	float                                              FlashBrightness;                                          // 0x01D8(0x0004)
	float                                              MinBrightness;                                            // 0x01DC(0x0004)
	float                                              MaxBrightness;                                            // 0x01E0(0x0004)
	float                                              CurrentEnergyPercent;                                     // 0x01E4(0x0004)
	float                                              CurrentBrightness[0x6];                                   // 0x01E8(0x0004)
	int                                                Lights[0x6];                                              // 0x0200(0x0004)
	class UMaterialInstanceConstant*                   LightsMaterialInstanceSect[0x6];                          // 0x0218(0x0004) (Transient)
	class UStaticMeshComponent*                        MotherShip;                                               // 0x0230(0x0004) (Edit, ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      MotherShipSkelComp;                                       // 0x0234(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      TriggeredExplosion : 1;                                   // 0x0238(0x0004) (Net)
	int                                                NumExplosions;                                            // 0x023C(0x0004)
	TArray<struct FName>                               ExplosionSockets;                                         // 0x0240(0x000C) (NeedCtorLink)
	TArray<float>                                      ExplosionTiming;                                          // 0x024C(0x000C) (NeedCtorLink)
	class UMaterialInterface*                          MothershipLightsMaterial;                                 // 0x0258(0x0004) (Edit)
	class UStaticMesh*                                 CustomTeamMesh[0x2];                                      // 0x025C(0x0004) (Edit)
	class UParticleSystem*                             ExplosionEffects_Mid[0x2];                                // 0x0264(0x0004)
	class UParticleSystem*                             ExplosionEffects_Final;                                   // 0x026C(0x0004)
	class USoundCue*                                   ExplosionSound;                                           // 0x0270(0x0004)
	class USoundCue*                                   ExplosionSound_Mid;                                       // 0x0274(0x0004)
	class USoundCue*                                   ExplosionSound_Final;                                     // 0x0278(0x0004)
	class UCameraAnim*                                 CamAnim_BaseExplosion;                                    // 0x027C(0x0004)
	class UCameraAnim*                                 CamAnim_BaseExplosion2;                                   // 0x0280(0x0004)
	class UCameraAnim*                                 CamAnim_BaseExplosion3;                                   // 0x0284(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BaseMotherShip");
		return ptr;
	}


	void TriggerExplosion();
	void CameraShakeExplosion();
	void CameraShakeExplosionBig();
	void SpawnSingleExplosion(int Idx);
	void Tick(float DeltaTime);
	void TurnLightsOff(int I);
	void TurnLightsOn(int I);
	void SetLights();
	void StopFlash();
	void StartFlash();
	void InitCustomizedMaterial();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_DmgType_HomingMissile
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_HomingMissile : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_HomingMissile");
		return ptr;
	}

};


// Class HawkenGame.R_Turret_AntiAir_MultiStage
// 0x0074 (0x0248 - 0x01D4)
class AR_Turret_AntiAir_MultiStage : public AActor
{
public:
	float                                              teamControl;                                              // 0x01D4(0x0004) (Net)
	TArray<float>                                      ControlPerSecond;                                         // 0x01D8(0x000C) (NeedCtorLink)
	float                                              MaxControlDefender;                                       // 0x01E4(0x0004)
	float                                              MaxControlAttacker;                                       // 0x01E8(0x0004)
	int                                                StageControl[0x4];                                        // 0x01EC(0x0004)
	float                                              CooldownTime;                                             // 0x01FC(0x0004)
	float                                              MaxDistance;                                              // 0x0200(0x0004)
	float                                              DamageToEnemyBattleshipPerSecond;                         // 0x0204(0x0004)
	float                                              ReactorHealth;                                            // 0x0208(0x0004) (Net)
	unsigned long                                      bDestroyed : 1;                                           // 0x020C(0x0004)
	unsigned long                                      bFireToggle : 1;                                          // 0x020C(0x0004) (Net)
	int                                                TeamNum;                                                  // 0x0210(0x0004) (Edit)
	int                                                AAIndex;                                                  // 0x0214(0x0004) (Edit)
	float                                              LastFireTime;                                             // 0x0218(0x0004)
	float                                              MaxTeamControl[0x2];                                      // 0x021C(0x0004)
	class UParticleSystem*                             FireEffect;                                               // 0x0224(0x0004) (Edit)
	class USoundCue*                                   FireSnd;                                                  // 0x0228(0x0004) (Edit)
	class USoundCue*                                   FireSndVO;                                                // 0x022C(0x0004) (Edit)
	class UStaticMeshComponent*                        LightsMesh;                                               // 0x0230(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned char                                      FirstTeam;                                                // 0x0234(0x0001) (Net)
	unsigned char                                      SecondTeam;                                               // 0x0235(0x0001) (Net)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0236(0x0002) MISSED OFFSET
	class UAnimNodeSlot*                               TurretSlot;                                               // 0x0238(0x0004)
	class USkeletalMeshComponent*                      TurretMesh;                                               // 0x023C(0x0004) (ExportObject, Component, EditInline)
	class UAnimNodeBlendList*                          StateList;                                                // 0x0240(0x0004)
	class UStaticMeshComponent*                        ObjectiveAreaMesh;                                        // 0x0244(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Turret_AntiAir_MultiStage");
		return ptr;
	}


	class AProjectile* FireProjectileIntoAir(class AActor* EnemyBattleship);
	void DoFireEffects();
	void FireAtBattleShip(int Team);
	float GetTeamControlProgress();
	void ServerSideTick(float DeltaTime);
	void AdjustTeamControl(float DeltaTime);
	void SetMaxTeamControl();
	bool IsActive();
	bool IsTeamGame();
	void Tick(float DeltaTime);
	void CooldownTimer();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void TakeDamage(float Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
};


// Class HawkenGame.R_HUD_SG
// 0x0000 (0x1014 - 0x1014)
class AR_HUD_SG : public AR_HUD_Team
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_HUD_SG");
		return ptr;
	}

};


// Class HawkenGame.R_PlayerControllerSG
// 0x0000 (0x16CC - 0x16CC)
class AR_PlayerControllerSG : public AR_PlayerControllerTeam
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PlayerControllerSG");
		return ptr;
	}

};


// Class HawkenGame.R_PRI_SG
// 0x0000 (0x0730 - 0x0730)
class AR_PRI_SG : public AR_PlayerReplicationInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PRI_SG");
		return ptr;
	}

};


// Class HawkenGame.R_GRI_SG
// 0x0000 (0x05F4 - 0x05F4)
class AR_GRI_SG : public AR_GameReplicationInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GRI_SG");
		return ptr;
	}

};


// Class HawkenGame.R_StatsWriteSiege
// 0x0000 (0x0088 - 0x0088)
class UR_StatsWriteSiege : public UR_StatsWriteDM
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_StatsWriteSiege");
		return ptr;
	}

};


// Class HawkenGame.R_AsymmetricSiege
// 0x0010 (0x06D8 - 0x06C8)
class AR_AsymmetricSiege : public AR_Siege
{
public:
	float                                              AntiAirFireRate;                                          // 0x06C8(0x0004)
	float                                              ShipMovementCooldown;                                     // 0x06CC(0x0004)
	int                                                NumAttackersModifier;                                     // 0x06D0(0x0004)
	unsigned long                                      bResetAA : 1;                                             // 0x06D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_AsymmetricSiege");
		return ptr;
	}


	void Tick(float DeltaTime);
	void AASuddenDeathResetTimer();
	void SuddenDeathEndGameTimer();
	void AAFiredSuddenDeathMissile();
	void EnergyGainTimer();
	bool IsEndGameNear();
	void PostBeginPlay();
};


// Class HawkenGame.R_BaseCore
// 0x0018 (0x01EC - 0x01D4)
class AR_BaseCore : public AActor
{
public:
	int                                                TeamNum;                                                  // 0x01D4(0x0004) (Edit, Net)
	int                                                DamagedBaseHealth;                                        // 0x01D8(0x0004) (Edit)
	class USkeletalMesh*                               DamagedMesh;                                              // 0x01DC(0x0004)
	class USkeletalMesh*                               UnDamagedMesh;                                            // 0x01E0(0x0004)
	class USkeletalMeshComponent*                      BaseCoreMeshComp;                                         // 0x01E4(0x0004) (ExportObject, Component, EditInline)
	int                                                DamageState;                                              // 0x01E8(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BaseCore");
		return ptr;
	}


	void UpdateDamagedState(int NewDamageState);
	void Tick(float DeltaTime);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_BaseReactor_MA
// 0x000C (0x01E0 - 0x01D4)
class AR_BaseReactor_MA : public AActor
{
public:
	int                                                TeamNum;                                                  // 0x01D4(0x0004) (Edit)
	int                                                LastHealthAmountTracked;                                  // 0x01D8(0x0004)
	float                                              HealthHeartbeatPeriod;                                    // 0x01DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BaseReactor_MA");
		return ptr;
	}


	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	unsigned char GetTeamNum();
	void SendPeriodicHealthStatUpdate();
	void PostBeginPlay();
};


// Class HawkenGame.R_BaseSiegeTarget
// 0x0010 (0x01E4 - 0x01D4)
class AR_BaseSiegeTarget : public AActor
{
public:
	int                                                TeamNum;                                                  // 0x01D4(0x0004) (Edit)
	struct FVector                                     SiegeTargetOffset;                                        // 0x01D8(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BaseSiegeTarget");
		return ptr;
	}


	struct FVector GetShipTargetLocation();
};


// Class HawkenGame.R_Proj_HomingMissile
// 0x001F (0x0348 - 0x0329)
class AR_Proj_HomingMissile : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	struct FVector                                     HomingLocation;                                           // 0x032C(0x000C) (Net)
	unsigned long                                      bTargetLock : 1;                                          // 0x0338(0x0004) (Net)
	unsigned long                                      bPredictTarget : 1;                                       // 0x0338(0x0004)
	unsigned long                                      bPawnMissile : 1;                                         // 0x0338(0x0004)
	float                                              StartHomingTime;                                          // 0x033C(0x0004)
	float                                              TimeActive;                                               // 0x0340(0x0004)
	float                                              TargetVelocityMultiplier;                                 // 0x0344(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_HomingMissile");
		return ptr;
	}


	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Tick(float DeltaTime);
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Proj_Turret_HomingMissile
// 0x0000 (0x0348 - 0x0348)
class AR_Proj_Turret_HomingMissile : public AR_Proj_HomingMissile
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Turret_HomingMissile");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Turret_Battleship_HomingMissile
// 0x0000 (0x0348 - 0x0348)
class AR_Proj_Turret_Battleship_HomingMissile : public AR_Proj_Turret_HomingMissile
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Turret_Battleship_HomingMissile");
		return ptr;
	}


	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class HawkenGame.R_Proj_Turret_Battleship_HomingMissile_Big
// 0x0000 (0x0348 - 0x0348)
class AR_Proj_Turret_Battleship_HomingMissile_Big : public AR_Proj_Turret_Battleship_HomingMissile
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Turret_Battleship_HomingMissile_Big");
		return ptr;
	}


	class UParticleSystem* GetExplosionForPhysicsMaterial(class UR_PhysicalMaterialProperty* MaterialEffects, int Index);
};


// Class HawkenGame.R_BeamAttach_RepairTorch
// 0x0030 (0x0214 - 0x01E4)
class AR_BeamAttach_RepairTorch : public AR_WeapAttach_Base
{
public:
	TEnumAsByte<EHealBeamMode_e>                       TargetBeamMode;                                           // 0x01E4(0x0001)
	TEnumAsByte<EHealBeamMode_e>                       CurrentBeamMode;                                          // 0x01E5(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01E6(0x0002) MISSED OFFSET
	class AActor*                                      TargetActor;                                              // 0x01E8(0x0004)
	class UParticleSystem*                             HealBeamEffect_FP;                                        // 0x01EC(0x0004) (Const)
	class UParticleSystem*                             HealBeamEffect_TP;                                        // 0x01F0(0x0004) (Const)
	class UParticleSystem*                             HealBeamEffectTargetFull_FP;                              // 0x01F4(0x0004) (Const)
	class UParticleSystem*                             DamageBeamEffect_FP;                                      // 0x01F8(0x0004) (Const)
	class UParticleSystem*                             DamageBeamEffect_TP;                                      // 0x01FC(0x0004) (Const)
	class UParticleSystem*                             HealBeamBurstEffect_FP;                                   // 0x0200(0x0004) (Const)
	class UParticleSystem*                             HealBeamBurstEffect_TP;                                   // 0x0204(0x0004) (Const)
	class UUDKParticleSystemComponent*                 BeamComp;                                                 // 0x0208(0x0004) (ExportObject, Component, EditInline)
	class UUDKParticleSystemComponent*                 ModeComp;                                                 // 0x020C(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    ImpactComp;                                               // 0x0210(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BeamAttach_RepairTorch");
		return ptr;
	}


	void UpdateBeamEffects();
	void OnUpdateFOV(float NewFirstPersonFOV);
	void AttachThirdPersonEffects(class USkeletalMeshComponent** WeaponMesh);
	void AttachFirstPersonEffects(class USkeletalMeshComponent** WeaponMesh);
	void UpdateImpactEffect();
	struct FVector GetBeamTargetLoc();
	void Tick(float DeltaTime);
	class UParticleSystem* GetEffectForMode(TEnumAsByte<EHealBeamMode_e> Mode);
	void Destroyed();
};


// Class HawkenGame.R_Beams
// 0x0000 (0x003C - 0x003C)
class UR_Beams : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Beams");
		return ptr;
	}


	struct FVector STATIC_GetAccelMode2(const struct FVector& DeltaPos, const struct FVector& CurVelocity, float DeltaTime, float MaxSpeed, float HomingStrength);
	void STATIC_DeactivateBeam(struct FBeamEffect* BE);
	void STATIC_UpdateBeamEffect(float DeltaTime, float MaxSpeed, float HomingStrength, const struct FVector& TargetAdjust, struct FBeamEffect* BE);
	void STATIC_SpawnBeam(class AActor* TargetActor, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* SourceActor, struct FBeamEffect* BE);
};


// Class HawkenGame.R_Blockade
// 0x0048 (0x021C - 0x01D4)
class AR_Blockade : public AActor
{
public:
	class UStaticMeshComponent*                        ShieldMesh;                                               // 0x01D4(0x0004) (ExportObject, Component, EditInline)
	class UUDKSkeletalMeshComponent*                   BaseMesh;                                                 // 0x01D8(0x0004) (ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   BlockadeMaterialInstance;                                 // 0x01DC(0x0004) (Transient)
	class UAudioComponent*                             LoopingSound;                                             // 0x01E0(0x0004) (ExportObject, Component, EditInline)
	float                                              Health;                                                   // 0x01E4(0x0004) (Net)
	float                                              HealthMax;                                                // 0x01E8(0x0004) (Net)
	float                                              ShieldSize;                                               // 0x01EC(0x0004)
	float                                              TimeAlive;                                                // 0x01F0(0x0004)
	float                                              MaxSize;                                                  // 0x01F4(0x0004)
	float                                              ExpandTime;                                               // 0x01F8(0x0004)
	float                                              ContractTime;                                             // 0x01FC(0x0004)
	int                                                InitialYaw;                                               // 0x0200(0x0004) (Net)
	float                                              RepLifespan;                                              // 0x0204(0x0004) (Net)
	unsigned long                                      bUndeployed : 1;                                          // 0x0208(0x0004)
	unsigned char                                      TeamNum;                                                  // 0x020C(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x020D(0x0003) MISSED OFFSET
	float                                              BlockadeWidthScale;                                       // 0x0210(0x0004) (Net)
	class UClass*                                      ItemClass;                                                // 0x0214(0x0004) (Net)
	float                                              LastPawnPushTime;                                         // 0x0218(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Blockade");
		return ptr;
	}


	void UpdateBlockadeScale(float NewBlockadeWidthScale);
	void Tick(float DeltaTime);
	void PushOverlappingPawns();
	void PostBeginPlay();
	bool HealDamage(float Amount, class AController* Healer, class UClass* DamageType);
	void OnEMPBlast(float Duration);
	void OnDeath();
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	unsigned char GetTeamNum();
	struct FString GetDisplayName();
	float GetHealthPercent();
	bool ShowDefaultIndicator(struct FVector* retIndicatorLoc, struct FVector* retIndicatorSize, struct FString* retDisplayName, float* retHealthPercent, float* retHealthMax);
	void HideCollision();
	void Destroyed();
	void OnOwnerDestroyed();
	bool IsDead();
	bool CanBeHealed();
	void OnPawnTouch(class APawn* P);
	bool WasDeployedByPawn(class APawn* P);
	bool IsFriendly(bool bTeamGame, class APawn* P);
	void SetItemBlockadeDefaults(class UR_ItemDatabaseProps* Props, int ItemSheetIdx);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_IDeployable
// 0x0000 (0x003C - 0x003C)
class UR_IDeployable : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_IDeployable");
		return ptr;
	}


	float GetHealthPercent();
	bool ShowDefaultIndicator(struct FVector* retIndicatorLoc, struct FVector* retIndicatorSize, struct FString* retDisplayName, float* retHealthPercent, float* retHealthMax);
	bool IsFriendly(bool bTeamGame, class APawn* P);
	void OnPawnTouch(class APawn* P);
	void OnOwnerDestroyed();
	bool WasDeployedByPawn(class APawn* P);
	bool IsDead();
	bool CanBeHealed();
	bool HealDamage(float Amount, class AController* Healer, class UClass* DamageType);
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
};


// Class HawkenGame.R_Boost_Base
// 0x001C (0x0058 - 0x003C)
class UR_Boost_Base : public UObject
{
public:
	class UTexture2D*                                  HUDIcon;                                                  // 0x003C(0x0004) (Const)
	struct FString                                     DisplayName;                                              // 0x0040(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     tooltipText;                                              // 0x004C(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Boost_Base");
		return ptr;
	}

};


// Class HawkenGame.R_Boost_TimeLimit_Base
// 0x0008 (0x0060 - 0x0058)
class UR_Boost_TimeLimit_Base : public UR_Boost_Base
{
public:
	int                                                TimeLeft;                                                 // 0x0058(0x0004)
	int                                                expirationTime;                                           // 0x005C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Boost_TimeLimit_Base");
		return ptr;
	}

};


// Class HawkenGame.R_Boost_TimeLimit_HP
// 0x0000 (0x0060 - 0x0060)
class UR_Boost_TimeLimit_HP : public UR_Boost_TimeLimit_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Boost_TimeLimit_HP");
		return ptr;
	}

};


// Class HawkenGame.R_Boost_TimeLimit_XP
// 0x0000 (0x0060 - 0x0060)
class UR_Boost_TimeLimit_XP : public UR_Boost_TimeLimit_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Boost_TimeLimit_XP");
		return ptr;
	}

};


// Class HawkenGame.R_PawnBot
// 0x002C (0x19BC - 0x1990)
class AR_PawnBot : public AR_Pawn
{
public:
	struct FString                                     DisplayName;                                              // 0x1990(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bBotIsHeavyModeOnly : 1;                                  // 0x199C(0x0004) (Edit)
	unsigned long                                      bAttackNPCs : 1;                                          // 0x199C(0x0004) (Edit)
	float                                              BotMoveSpeed;                                             // 0x19A0(0x0004) (Edit)
	TEnumAsByte<EMechType>                             BotMechType;                                              // 0x19A4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x19A5(0x0003) MISSED OFFSET
	float                                              FightingRadius;                                           // 0x19A8(0x0004) (Edit)
	float                                              HeavyFrontDamageReduction;                                // 0x19AC(0x0004) (Edit)
	float                                              HeavyBackDamageIncrease;                                  // 0x19B0(0x0004) (Edit)
	class UClass*                                      BotWeaponRight;                                           // 0x19B4(0x0004) (Edit)
	class UClass*                                      BotWeaponLeft;                                            // 0x19B8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PawnBot");
		return ptr;
	}


	void PostBeginPlay();
};


// Class HawkenGame.R_PathNode
// 0x0008 (0x02B4 - 0x02AC)
class AR_PathNode : public APathNode
{
public:
	int                                                patrolArea;                                               // 0x02AC(0x0004) (Edit)
	unsigned long                                      bInUse : 1;                                               // 0x02B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PathNode");
		return ptr;
	}

};


// Class HawkenGame.R_BotPopulationDefinition
// 0x0010 (0x004C - 0x003C)
class UR_BotPopulationDefinition : public UObject
{
public:
	TArray<struct FBotTypeInfo>                        BotTypes;                                                 // 0x003C(0x000C) (Edit, NeedCtorLink)
	float                                              TotalBotTypeWeights;                                      // 0x0048(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BotPopulationDefinition");
		return ptr;
	}


	class UR_NPC_Template* ChooseRandomTemplate();
};


// Class HawkenGame.R_BotsTDMDefinition
// 0x0010 (0x004C - 0x003C)
class UR_BotsTDMDefinition : public UObject
{
public:
	class UR_BotPopulationDefinition*                  BotsPopulation;                                           // 0x003C(0x0004) (Edit, ExportObject, EditConst, NeedCtorLink, EditInline)
	TArray<struct FBotDifficultyBucket>                BotDifficultySettings;                                    // 0x0040(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BotsTDMDefinition");
		return ptr;
	}

};


// Class HawkenGame.R_PawnModifierMobility
// 0x0000 (0x0044 - 0x0044)
class UR_PawnModifierMobility : public UR_PawnModifierFloat
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PawnModifierMobility");
		return ptr;
	}

};


// Class HawkenGame.R_HUD_BotsTDM
// 0x0000 (0x1014 - 0x1014)
class AR_HUD_BotsTDM : public AR_HUD_Team
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_HUD_BotsTDM");
		return ptr;
	}


	bool ShowMessageInChatWindow(class APlayerReplicationInfo* PRI, const struct FString& msg, int Channel);
	void Message(class APlayerReplicationInfo* PRI, const struct FString& msg, const struct FName& MsgType, float Lifetime);
};


// Class HawkenGame.R_PlayerControllerBotsTDM
// 0x0000 (0x16CC - 0x16CC)
class AR_PlayerControllerBotsTDM : public AR_PlayerControllerTeam
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PlayerControllerBotsTDM");
		return ptr;
	}


	void ProcessChatCommand(const struct FString& Command);
};


// Class HawkenGame.R_PRI_BotsTDM
// 0x0000 (0x0730 - 0x0730)
class AR_PRI_BotsTDM : public AR_PlayerReplicationInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PRI_BotsTDM");
		return ptr;
	}


	void IncrementMechWeaponShotsFired(int WeaponHand, int Amount);
	void IncrementMechWeaponShotsHit(int WeaponHand, int Amount);
	float IncrementDamageSustainedStat(const struct FName& NewStatName, float Amount);
	int IncrementDeathStat(const struct FName& NewStatName);
};


// Class HawkenGame.R_BurningMechLight
// 0x0000 (0x0220 - 0x0220)
class UR_BurningMechLight : public UUDKExplosionLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_BurningMechLight");
		return ptr;
	}

};


// Class HawkenGame.R_CalloutManager
// 0x0018 (0x0054 - 0x003C)
class UR_CalloutManager : public UObject
{
public:
	TArray<struct FCalloutImageData>                   ImagePathMap;                                             // 0x003C(0x000C) (Const, NeedCtorLink)
	TArray<struct FString>                             LocalizedTextTable;                                       // 0x0048(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_CalloutManager");
		return ptr;
	}


	struct FString STATIC_GetLocalizedText(int TextId);
	struct FString STATIC_GetImagePath(const struct FString& ImageId);
};


// Class HawkenGame.R_CapturePointVolume
// 0x0000 (0x0200 - 0x0200)
class AR_CapturePointVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_CapturePointVolume");
		return ptr;
	}

};


// Class HawkenGame.R_CarouselMech
// 0x0028 (0x01FC - 0x01D4)
class AR_CarouselMech : public AActor
{
public:
	int                                                MatchPlace;                                               // 0x01D4(0x0004) (Edit)
	int                                                Stage;                                                    // 0x01D8(0x0004) (Edit)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x01DC(0x0004) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        PreviewMesh;                                              // 0x01E0(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FRotator                                    CamMin;                                                   // 0x01E4(0x000C) (Edit)
	struct FRotator                                    CamMax;                                                   // 0x01F0(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_CarouselMech");
		return ptr;
	}

};


// Class HawkenGame.R_ChallengeMod_Coop
// 0x0008 (0x0214 - 0x020C)
class AR_ChallengeMod_Coop : public AR_ChallengeMod
{
public:
	class AR_CoOp*                                     CoOpGame;                                                 // 0x020C(0x0004)
	class AR_CoopGRI*                                  CoopGRI;                                                  // 0x0210(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_Coop");
		return ptr;
	}


	void PostBeginPlay();
	bool MutatorIsAllowed();
};


// Class HawkenGame.R_ChallengeMod_BossesCount
// 0x0004 (0x0218 - 0x0214)
class AR_ChallengeMod_BossesCount : public AR_ChallengeMod_Coop
{
public:
	int                                                BossNumberMultiplier;                                     // 0x0214(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_BossesCount");
		return ptr;
	}


	void SetParams(TArray<struct FString> Params);
	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_ChallengeMod_CrabbyMech
// 0x0000 (0x020C - 0x020C)
class AR_ChallengeMod_CrabbyMech : public AR_ChallengeMod
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_CrabbyMech");
		return ptr;
	}


	void ModifyPlayer(class APawn* Other);
	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_SE_ModifyMovementSpeed
// 0x000C (0x024C - 0x0240)
class AR_SE_ModifyMovementSpeed : public AR_StatusEffect_Base
{
public:
	float                                              RunSpeedMultiplier;                                       // 0x0240(0x0004)
	float                                              BoostSpeedMultiplier;                                     // 0x0244(0x0004)
	float                                              DodgeSpeedMultiplier;                                     // 0x0248(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ModifyMovementSpeed");
		return ptr;
	}

};


// Class HawkenGame.R_SE_CrabMovement
// 0x0000 (0x024C - 0x024C)
class AR_SE_CrabMovement : public AR_SE_ModifyMovementSpeed
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_CrabMovement");
		return ptr;
	}

};


// Class HawkenGame.R_ChallengeMod_EUDropScale
// 0x0004 (0x0218 - 0x0214)
class AR_ChallengeMod_EUDropScale : public AR_ChallengeMod_Coop
{
public:
	float                                              EUDropMultiplier;                                         // 0x0214(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_EUDropScale");
		return ptr;
	}


	struct FString GetDescription();
	void SetParams(TArray<struct FString> Params);
	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_ChallengeMod_FriendlyFire
// 0x0004 (0x0210 - 0x020C)
class AR_ChallengeMod_FriendlyFire : public AR_ChallengeMod
{
public:
	float                                              FriendlyFireScale;                                        // 0x020C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_FriendlyFire");
		return ptr;
	}


	struct FString GetDescription();
	void SetParams(TArray<struct FString> Params);
	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_ChallengeMod_HealthOrbScale
// 0x0008 (0x0214 - 0x020C)
class AR_ChallengeMod_HealthOrbScale : public AR_ChallengeMod
{
public:
	float                                              HealthEnergyScale;                                        // 0x020C(0x0004)
	float                                              OrbLifeTimeScale;                                         // 0x0210(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_HealthOrbScale");
		return ptr;
	}


	struct FString GetDescription();
	void SetParams(TArray<struct FString> Params);
	void AppplyModOnPawn(class AR_PawnBase* RP);
	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_ChallengeMod_NoIndicator
// 0x0000 (0x020C - 0x020C)
class AR_ChallengeMod_NoIndicator : public AR_ChallengeMod
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_NoIndicator");
		return ptr;
	}


	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_ChallengeMod_NoPortalIndicator
// 0x0000 (0x0214 - 0x0214)
class AR_ChallengeMod_NoPortalIndicator : public AR_ChallengeMod_Coop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_NoPortalIndicator");
		return ptr;
	}


	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_ChallengeMod_NoRadar
// 0x0000 (0x020C - 0x020C)
class AR_ChallengeMod_NoRadar : public AR_ChallengeMod
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_NoRadar");
		return ptr;
	}


	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_ChallengeMod_NoRepair
// 0x0000 (0x020C - 0x020C)
class AR_ChallengeMod_NoRepair : public AR_ChallengeMod
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_NoRepair");
		return ptr;
	}


	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_ChallengeMod_NoRepairDrop
// 0x0000 (0x020C - 0x020C)
class AR_ChallengeMod_NoRepairDrop : public AR_ChallengeMod
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_NoRepairDrop");
		return ptr;
	}


	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_ChallengeMod_NoRevivalMarker
// 0x0000 (0x0214 - 0x0214)
class AR_ChallengeMod_NoRevivalMarker : public AR_ChallengeMod_Coop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_NoRevivalMarker");
		return ptr;
	}


	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_ChallengeMod_NoUpgrade
// 0x0000 (0x0214 - 0x0214)
class AR_ChallengeMod_NoUpgrade : public AR_ChallengeMod_Coop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_NoUpgrade");
		return ptr;
	}


	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_ChallengeMod_NPCCount
// 0x0008 (0x021C - 0x0214)
class AR_ChallengeMod_NPCCount : public AR_ChallengeMod_Coop
{
public:
	float                                              NPCCountMultiplier;                                       // 0x0214(0x0004)
	float                                              NPCActiveCountMultiplier;                                 // 0x0218(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_NPCCount");
		return ptr;
	}


	struct FString GetDescription();
	void SetParams(TArray<struct FString> Params);
	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_ChallengeMod_NPCDamage
// 0x0008 (0x021C - 0x0214)
class AR_ChallengeMod_NPCDamage : public AR_ChallengeMod_Coop
{
public:
	float                                              DamageMultiplier;                                         // 0x0214(0x0004)
	class UR_PawnModifierDamage*                       DamageMod;                                                // 0x0218(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_NPCDamage");
		return ptr;
	}


	struct FString GetDescription();
	void SetParams(TArray<struct FString> Params);
	void AppplyModOnPawn(class AR_PawnBase* RP);
	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_PawnModifierDamage
// 0x0000 (0x0044 - 0x0044)
class UR_PawnModifierDamage : public UR_PawnModifierFloat
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PawnModifierDamage");
		return ptr;
	}

};


// Class HawkenGame.R_ChallengeMod_NPCHealth
// 0x0008 (0x021C - 0x0214)
class AR_ChallengeMod_NPCHealth : public AR_ChallengeMod_Coop
{
public:
	float                                              HealthMultiplier;                                         // 0x0214(0x0004)
	class UR_PawnModifierHealth*                       HealthMod;                                                // 0x0218(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_NPCHealth");
		return ptr;
	}


	struct FString GetDescription();
	void SetParams(TArray<struct FString> Params);
	void AppplyModOnPawn(class AR_PawnBase* RP);
	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_PawnModifierHealth
// 0x0000 (0x0044 - 0x0044)
class UR_PawnModifierHealth : public UR_PawnModifierFloat
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PawnModifierHealth");
		return ptr;
	}

};


// Class HawkenGame.R_ChallengeMod_NPCRegen
// 0x0008 (0x021C - 0x0214)
class AR_ChallengeMod_NPCRegen : public AR_ChallengeMod_Coop
{
public:
	float                                              HealthPercentPerSecond;                                   // 0x0214(0x0004)
	float                                              TimeConsideredOutOfCombat;                                // 0x0218(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_NPCRegen");
		return ptr;
	}


	struct FString GetDescription();
	void SetParams(TArray<struct FString> Params);
	void AppplyModOnPawn(class AR_PawnBase* RP);
	void Deactivate();
};


// Class HawkenGame.R_SE_TriggerOutOfCombat
// 0x000C (0x024C - 0x0240)
class AR_SE_TriggerOutOfCombat : public AR_StatusEffect_Base
{
public:
	float                                              LastTimeDamageTaken;                                      // 0x0240(0x0004)
	float                                              LastTimeDealtDamage;                                      // 0x0244(0x0004)
	float                                              TimeConsideredOutOfCombat;                                // 0x0248(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_TriggerOutOfCombat");
		return ptr;
	}


	void NotifyDamageDealt(float Damage, class UClass* dmgType, class APawn* DamagedPawn);
	void NotifyDamageTaken(float Damage, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, class UClass* dmgType, class AController* DmgInstigator, class APawn* InstigatorPawn, class AActor* DamageCauser);
	bool IsOutOfCombat();
};


// Class HawkenGame.R_SE_GainHealthOverTime
// 0x0004 (0x0250 - 0x024C)
class AR_SE_GainHealthOverTime : public AR_SE_TriggerOutOfCombat
{
public:
	float                                              HealthPercentPerSecond;                                   // 0x024C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_GainHealthOverTime");
		return ptr;
	}


	void PeriodicCallback();
};


// Class HawkenGame.R_SE_HealthRegen_NPCCoop
// 0x0000 (0x0250 - 0x0250)
class AR_SE_HealthRegen_NPCCoop : public AR_SE_GainHealthOverTime
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_HealthRegen_NPCCoop");
		return ptr;
	}

};


// Class HawkenGame.R_ChallengeMod_NPCSpeed
// 0x0008 (0x021C - 0x0214)
class AR_ChallengeMod_NPCSpeed : public AR_ChallengeMod_Coop
{
public:
	float                                              SpeedMultiplier;                                          // 0x0214(0x0004)
	class UR_PawnModifierSpeed*                        SpeedMod;                                                 // 0x0218(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_NPCSpeed");
		return ptr;
	}


	struct FString GetDescription();
	void SetParams(TArray<struct FString> Params);
	void AppplyModOnPawn(class AR_PawnBase* RP);
	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_PawnModifierSpeed
// 0x0000 (0x0044 - 0x0044)
class UR_PawnModifierSpeed : public UR_PawnModifierFloat
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PawnModifierSpeed");
		return ptr;
	}

};


// Class HawkenGame.R_ChallengeMod_SameMech
// 0x0010 (0x021C - 0x020C)
class AR_ChallengeMod_SameMech : public AR_ChallengeMod
{
public:
	struct FString                                     MechId;                                                   // 0x020C(0x000C) (NeedCtorLink)
	int                                                MechSubTypeIndex;                                         // 0x0218(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_SameMech");
		return ptr;
	}


	struct FString GetDescription();
	void SetParams(TArray<struct FString> Params);
	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_ChallengeMod_XPScale
// 0x0004 (0x0218 - 0x0214)
class AR_ChallengeMod_XPScale : public AR_ChallengeMod_Coop
{
public:
	float                                              XPMultiplier;                                             // 0x0214(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ChallengeMod_XPScale");
		return ptr;
	}


	struct FString GetDescription();
	void SetParams(TArray<struct FString> Params);
	void Deactivate();
	void Activate();
};


// Class HawkenGame.R_DebugDemoSpec
// 0x000F (0x1710 - 0x1701)
class AR_DebugDemoSpec : public AR_DemoSpec
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x1701(0x0003) MISSED OFFSET
	class APlayerController*                           OriginalControllerRef;                                    // 0x1704(0x0004)
	class UPlayer*                                     OriginalPlayer;                                           // 0x1708(0x0004)
	unsigned long                                      bIsFrozenRendering : 1;                                   // 0x170C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DebugDemoSpec");
		return ptr;
	}


	void SetFreezeRendering();
	void OnDeactivate(class APlayerController* PC);
	void OnActivate(class APlayerController* PC);
	void InitDebugInputSystem();
	void DisableDebugCamera();
	bool IsPlayingDemo();
};


// Class HawkenGame.R_CheatManagerCoOp
// 0x0008 (0x0084 - 0x007C)
class UR_CheatManagerCoOp : public UR_CheatManager
{
public:
	class AR_CoOp*                                     CoOpGame;                                                 // 0x007C(0x0004)
	class AR_CoopGRI*                                  CGRI;                                                     // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_CheatManagerCoOp");
		return ptr;
	}


	void ShowRewards();
	void GiveRewardsViaOffers(bool bMechSpecific);
	void GiveRewardsViaStats(const struct FString& StatName1, const struct FString& StatName2, const struct FString& StatName3);
	void GenerateReward(float CommonWeight, float RareWeight, float EpicWeight);
	void RemoveMod(const struct FString& ModName);
	void AddMod(const struct FString& ModName);
	void AddChallenge(const struct FString& ChallengeName);
	void SkipWave(int Wave);
	void InitCheatManager();
};


// Class HawkenGame.R_CoOpRewardsManager
// 0x0028 (0x0064 - 0x003C)
class UR_CoOpRewardsManager : public UObject
{
public:
	TArray<struct FString>                             CommonStats;                                              // 0x003C(0x000C) (NeedCtorLink)
	TArray<struct FString>                             RareStats;                                                // 0x0048(0x000C) (NeedCtorLink)
	TArray<struct FString>                             EpicStats;                                                // 0x0054(0x000C) (NeedCtorLink)
	class UOnlineSubsystemMeteor*                      MeteorOSS;                                                // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_CoOpRewardsManager");
		return ptr;
	}


	void ClearOnlineDelegates();
	bool CheckOfferAlreadyOwned(class AR_PlayerReplicationInfo* RPRI, class UOnlineGameOffer* GameOffer, const struct FString& MechInstanceId);
	void OnServerPurchaseGameOfferComplete(int TaskID, const struct FString& OfferId, const struct FString& UserId, TEnumAsByte<ENetworkErrorCode> ErrorCode, class UOnlineGameItemInstanceCollection* PurchasedGameItemInstances);
	void GiveChallengeRewardsViaBundle(class AR_PlayerControllerCoop* RPC, const struct FString& BundleGuid, const struct FString& AchievementStatName);
	void GiveChallengeRewardsViaStats(class AR_PRI_Coop* RPRI, TArray<struct FString> RewardStats);
	struct FString STATIC_GetStatForReward(TEnumAsByte<EWaveRewardType> RewardType);
	TEnumAsByte<EWaveRewardType> STATIC_GetRewardType(float CommonDropWeight, float RareDropWeight, float EpicDropWeight, float* PickedDropWeightSum);
	void OnReadGameOfferCollectionComplete(bool bWasSuccessful);
	void OnReadGameBundleCollectionComplete(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode);
	void InitManager();
};


// Class HawkenGame.R_CheatManagerMA
// 0x0004 (0x0080 - 0x007C)
class UR_CheatManagerMA : public UR_CheatManager
{
public:
	class AR_MissileAssault*                           MAGame;                                                   // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_CheatManagerMA");
		return ptr;
	}


	void ResetBaseHealth();
	void SetBaseHealth(int TeamIndex, int BaseHealth);
	void DamageBase(int TeamIndex);
	void LaunchAntiBase(int targetTeamIndex, int missileIndex);
	void InitCheatManager();
};


// Class HawkenGame.R_PlayerControllerMA
// 0x0000 (0x16CC - 0x16CC)
class AR_PlayerControllerMA : public AR_PlayerControllerTeam
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PlayerControllerMA");
		return ptr;
	}

};


// Class HawkenGame.R_Console
// 0x0010 (0x01F4 - 0x01E4)
class UR_Console : public UConsole
{
public:
	int                                                TextCount;                                                // 0x01E4(0x0004)
	TArray<struct FString>                             AllowedServerAdminCommands;                               // 0x01E8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Console");
		return ptr;
	}


	void OutputTextLine(const struct FString& Text);
	bool InputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> Event, float AmountDepressed, bool bGamepad);
	bool IsCommandAllowed(const struct FString& Command);
	void Initialized();
};


// Class HawkenGame.R_Consumable_Base
// 0x0084 (0x0258 - 0x01D4)
class AR_Consumable_Base : public AActor
{
public:
	TEnumAsByte<EConsumableType_e>                     Type;                                                     // 0x01D4(0x0001)
	unsigned char                                      SlotIndex;                                                // 0x01D5(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01D6(0x0002) MISSED OFFSET
	class AR_Pawn*                                     PawnOwner;                                                // 0x01D8(0x0004)
	struct FString                                     DisplayName;                                              // 0x01DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x01E8(0x000C) (Const, Localized, NeedCtorLink)
	class UTexture2D*                                  HUDIcon;                                                  // 0x01F4(0x0004) (Const)
	class UTexture2D*                                  StoreIcon;                                                // 0x01F8(0x0004) (Const)
	unsigned long                                      bWasActivated : 1;                                        // 0x01FC(0x0004) (Net)
	unsigned long                                      bUseableWhenDead : 1;                                     // 0x01FC(0x0004) (Const)
	struct FString                                     Typename[0x2];                                            // 0x0200(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     TypeDescription[0x2];                                     // 0x0218(0x000C) (Const, Localized, NeedCtorLink)
	class UTexture2D*                                  TypeIcon[0x2];                                            // 0x0230(0x0004) (Const)
	struct FName                                       ItemTrackingName;                                         // 0x0238(0x0008) (Const)
	int                                                ResourceCost;                                             // 0x0240(0x0004) (Const)
	float                                              ActivationCooldown;                                       // 0x0244(0x0004)
	float                                              LastTimeUsed;                                             // 0x0248(0x0004)
	class USoundCue*                                   SoundActivate;                                            // 0x024C(0x0004) (Const)
	float                                              PostSpawnGodModeDuration;                                 // 0x0250(0x0004) (Const)
	float                                              PostSpawnHealthPercent;                                   // 0x0254(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_Base");
		return ptr;
	}


	void STATIC_ApplyToPawn(class AR_Pawn* P);
	float OnTakeDamage(float DamageTaken);
	void OnOverheat();
	void OnEMP();
	void OnFire(bool bIsFiring);
	void OnDeactivate();
	void SetPRICooldown(int cooldown);
	void CooldownTickTimer();
	void ActivationCooldownTimer();
	void OnActivate();
	bool CheckActivate();
	void InitConsumable(class AR_Pawn* NewOwner, unsigned char Slot);
	void SetRobotOwner(class AR_Pawn* NewOwner);
	class UClass* STATIC_GetConsumableClassForIndex(int consumableCat, int Index);
};


// Class HawkenGame.R_Consumable_ArmorPadding
// 0x0004 (0x025C - 0x0258)
class AR_Consumable_ArmorPadding : public AR_Consumable_Base
{
public:
	float                                              Amount;                                                   // 0x0258(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_ArmorPadding");
		return ptr;
	}


	void STATIC_ApplyToPawn(class AR_Pawn* P);
};


// Class HawkenGame.R_Consumable_BatteryCharge
// 0x0000 (0x0258 - 0x0258)
class AR_Consumable_BatteryCharge : public AR_Consumable_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_BatteryCharge");
		return ptr;
	}


	void ActivationCooldownTimer();
	void RemoveEMP();
	void Tick(float DeltaTime);
	void OnActivate();
	void OnEMP();
};


// Class HawkenGame.R_Consumable_ChargedBeacon
// 0x0004 (0x025C - 0x0258)
class AR_Consumable_ChargedBeacon : public AR_Consumable_Base
{
public:
	class AR_PlayerControllerCoop*                     CoopOwner;                                                // 0x0258(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_ChargedBeacon");
		return ptr;
	}


	void InitConsumable(class AR_Pawn* NewOwner, unsigned char Slot);
	bool CheckActivate();
	void OnActivate();
};


// Class HawkenGame.R_Consumable_DistractionBeacon
// 0x0010 (0x0268 - 0x0258)
class AR_Consumable_DistractionBeacon : public AR_Consumable_Base
{
public:
	class AR_Hologram*                                 CurrentHologram;                                          // 0x0258(0x0004)
	float                                              HologramLifeSpan;                                         // 0x025C(0x0004) (Const)
	float                                              AIDistractedTime;                                         // 0x0260(0x0004) (Const)
	unsigned long                                      bPawnFiring : 1;                                          // 0x0264(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_DistractionBeacon");
		return ptr;
	}


	void Tick(float DeltaTime);
	void OnFire(bool bIsFiring);
	void ActivationCooldownTimer();
	bool CheckActivate();
	void OnActivate();
};


// Class HawkenGame.R_Consumable_DroneEUTank
// 0x0004 (0x025C - 0x0258)
class AR_Consumable_DroneEUTank : public AR_Consumable_Base
{
public:
	float                                              Amount;                                                   // 0x0258(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_DroneEUTank");
		return ptr;
	}


	void STATIC_ApplyToPawn(class AR_Pawn* P);
};


// Class HawkenGame.R_Consumable_EmergencyPack
// 0x0004 (0x025C - 0x0258)
class AR_Consumable_EmergencyPack : public AR_Consumable_Base
{
public:
	float                                              HealthAmount;                                             // 0x0258(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_EmergencyPack");
		return ptr;
	}


	void OnActivate();
};


// Class HawkenGame.R_Consumable_ExplosiveTipping
// 0x0004 (0x025C - 0x0258)
class AR_Consumable_ExplosiveTipping : public AR_Consumable_Base
{
public:
	float                                              Amount;                                                   // 0x0258(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_ExplosiveTipping");
		return ptr;
	}


	void STATIC_ApplyToPawn(class AR_Pawn* P);
};


// Class HawkenGame.R_Consumable_Extinguisher
// 0x0000 (0x0258 - 0x0258)
class AR_Consumable_Extinguisher : public AR_Consumable_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_Extinguisher");
		return ptr;
	}


	void ActivationCooldownTimer();
	void RemoveHeat();
	void Tick(float DeltaTime);
	void OnActivate();
	void OnOverheat();
};


// Class HawkenGame.R_Consumable_FuelCanister
// 0x0000 (0x0258 - 0x0258)
class AR_Consumable_FuelCanister : public AR_Consumable_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_FuelCanister");
		return ptr;
	}


	void OnActivate();
};


// Class HawkenGame.R_Consumable_JumperKit
// 0x000C (0x0264 - 0x0258)
class AR_Consumable_JumperKit : public AR_Consumable_Base
{
public:
	float                                              HealAmount;                                               // 0x0258(0x0004) (Const)
	float                                              HealRate;                                                 // 0x025C(0x0004) (Const)
	float                                              AmountLeftToHeal;                                         // 0x0260(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_JumperKit");
		return ptr;
	}


	void Tick(float DeltaTime);
	bool CheckActivate();
	void OnActivate();
};


// Class HawkenGame.R_Consumable_JumpStarter
// 0x0008 (0x0260 - 0x0258)
class AR_Consumable_JumpStarter : public AR_Consumable_Base
{
public:
	float                                              RevivalMarkerDist;                                        // 0x0258(0x0004) (Const)
	class AR_RevivalMarker*                            ActiveRevivalMarker;                                      // 0x025C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_JumpStarter");
		return ptr;
	}


	bool FindValidRevivalMarker();
	bool CheckActivate();
	void OnActivate();
};


// Class HawkenGame.R_Consumable_MiniCamo
// 0x0004 (0x025C - 0x0258)
class AR_Consumable_MiniCamo : public AR_Consumable_Base
{
public:
	float                                              Duration;                                                 // 0x0258(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_MiniCamo");
		return ptr;
	}


	void OnFire(bool bIsFiring);
	void OnDeactivate();
	void OnActivate();
};


// Class HawkenGame.R_Consumable_ModifiedAmmunition
// 0x0004 (0x025C - 0x0258)
class AR_Consumable_ModifiedAmmunition : public AR_Consumable_Base
{
public:
	float                                              DamageMultiplier;                                         // 0x0258(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_ModifiedAmmunition");
		return ptr;
	}


	void ActivationCooldownTimer();
	void OnActivate();
};


// Class HawkenGame.R_Consumable_Plating
// 0x0004 (0x025C - 0x0258)
class AR_Consumable_Plating : public AR_Consumable_Base
{
public:
	float                                              Amount;                                                   // 0x0258(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_Plating");
		return ptr;
	}


	void STATIC_ApplyToPawn(class AR_Pawn* P);
};


// Class HawkenGame.R_Consumable_RadarTinker
// 0x0004 (0x025C - 0x0258)
class AR_Consumable_RadarTinker : public AR_Consumable_Base
{
public:
	float                                              Amount;                                                   // 0x0258(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_RadarTinker");
		return ptr;
	}


	void STATIC_ApplyToPawn(class AR_Pawn* P);
};


// Class HawkenGame.R_Consumable_StasisField
// 0x000C (0x0264 - 0x0258)
class AR_Consumable_StasisField : public AR_Consumable_Base
{
public:
	float                                              DamageCanAbsorb;                                          // 0x0258(0x0004)
	float                                              MaxDamageAbsorbed;                                        // 0x025C(0x0004) (Const)
	class AR_PlayerControllerCoop*                     CoopOwner;                                                // 0x0260(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_StasisField");
		return ptr;
	}


	void InitConsumable(class AR_Pawn* NewOwner, unsigned char Slot);
	float OnTakeDamage(float DamageTaken);
	void ActivationCooldownTimer();
	void OnActivate();
};


// Class HawkenGame.R_Consumable_TuneUpKit
// 0x0004 (0x025C - 0x0258)
class AR_Consumable_TuneUpKit : public AR_Consumable_Base
{
public:
	float                                              Amount;                                                   // 0x0258(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Consumable_TuneUpKit");
		return ptr;
	}


	void STATIC_ApplyToPawn(class AR_Pawn* P);
};


// Class HawkenGame.R_NPC_Drone_Bomb
// 0x0048 (0x11E0 - 0x1198)
class AR_NPC_Drone_Bomb : public AR_NPC_Drone
{
public:
	TEnumAsByte<ENPCExplosionAction>                   ExplosionAction;                                          // 0x1198(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x1199(0x0003) MISSED OFFSET
	float                                              BlastDuration;                                            // 0x119C(0x0004) (Edit)
	float                                              ProximityDistance;                                        // 0x11A0(0x0004) (Edit)
	float                                              DetonatingDecelerateTime;                                 // 0x11A4(0x0004) (Edit)
	float                                              DetonatingAccelerateTime;                                 // 0x11A8(0x0004) (Edit)
	float                                              DetonatingDecelRate;                                      // 0x11AC(0x0004) (Edit)
	float                                              DetonatingAccelRate;                                      // 0x11B0(0x0004) (Edit)
	float                                              DetonatingLowSpeedScale;                                  // 0x11B4(0x0004) (Edit)
	float                                              DetonatingHighSpeedScale;                                 // 0x11B8(0x0004) (Edit)
	class APawn*                                       TargetEnemy;                                              // 0x11BC(0x0004) (Transient)
	class UClass*                                      ExplosionDamageType;                                      // 0x11C0(0x0004)
	unsigned long                                      bIsAttackingTarget : 1;                                   // 0x11C4(0x0004) (Net)
	class UParticleSystemComponent*                    PreDetEffectComp;                                         // 0x11C8(0x0004) (ExportObject, Transient, Component, EditInline)
	class UParticleSystem*                             PreDetEffectPS;                                           // 0x11CC(0x0004) (Edit)
	struct FVector                                     PreDetColorValue;                                         // 0x11D0(0x000C) (Edit)
	class USoundCue*                                   PreDetSound;                                              // 0x11DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_NPC_Drone_Bomb");
		return ptr;
	}


	bool DoProximityCheck(class APawn* Target);
	bool ProximityTrigger();
	void PlayPreDetonationEffects();
	void Tick(float DeltaTime);
	void Explode();
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void SelfDestruct();
	void StartFire(unsigned char FireModeNum);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_HUD_Coop
// 0x0000 (0x1014 - 0x1014)
class AR_HUD_Coop : public AR_HUD
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_HUD_Coop");
		return ptr;
	}

};


// Class HawkenGame.R_CoOpOffline
// 0x0004 (0x0738 - 0x0734)
class AR_CoOpOffline : public AR_CoOp
{
public:
	unsigned long                                      bDisplayNameSet : 1;                                      // 0x0734(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_CoOpOffline");
		return ptr;
	}


	void SetOfflineCoopDisplayName();
	void Tick(float DeltaTime);
	bool STATIC_IsOnlineGame();
};


// Class HawkenGame.R_CTF
// 0x0018 (0x0640 - 0x0628)
class AR_CTF : public AR_TeamDeathmatch
{
public:
	class AR_Pawn*                                     PlayerWithFlag[0x2];                                      // 0x0628(0x0004)
	class AR_CTF_Flag*                                 Flag[0x2];                                                // 0x0630(0x0004)
	class AR_CTF_FlagBase*                             FlagBase[0x2];                                            // 0x0638(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_CTF");
		return ptr;
	}


	void DiscardInventory(class APawn* KilledPawn, class AController* Killer);
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	bool CheckScore(class APlayerReplicationInfo* Scorer);
	void OnPawnDied(class APawn* P);
	void OnTouchTeamBase(class AR_Pawn* P, unsigned char BaseTeamNum);
	void OnTouchEnemyTeamBase(class AR_Pawn* P, unsigned char BaseTeamNum);
	void CacheBases();
	void PostBeginPlay();
	void ReturnFlagToBase(unsigned char FlagTeamNum);
	void OnTouchTeamFlag(class AR_Pawn* P, unsigned char FlagTeamNum);
	void OnTouchEnemyFlag(class AR_Pawn* P, unsigned char FlagTeamNum);
};


// Class HawkenGame.R_CTF_FlagBase
// 0x0008 (0x01DC - 0x01D4)
class AR_CTF_FlagBase : public AActor
{
public:
	unsigned char                                      TeamNum;                                                  // 0x01D4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01D5(0x0003) MISSED OFFSET
	class UUDKParticleSystemComponent*                 FlagParticles;                                            // 0x01D8(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_CTF_FlagBase");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Tick(float DeltaTime);
	void PostBeginPlay();
	unsigned char GetTeamNum();
};


// Class HawkenGame.R_CTF_Flag
// 0x0034 (0x0208 - 0x01D4)
class AR_CTF_Flag : public AActor
{
public:
	float                                              ReturnToBaseSeconds;                                      // 0x01D4(0x0004) (Const)
	class UParticleSystem*                             TeamFlagParticles[0x2];                                   // 0x01D8(0x0004) (Const)
	class UUDKParticleSystemComponent*                 FlagParticles;                                            // 0x01E0(0x0004) (ExportObject, Component, EditInline)
	class AR_Pawn*                                     FlagHolder;                                               // 0x01E4(0x0004) (Net)
	unsigned char                                      TeamNum;                                                  // 0x01E8(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01E9(0x0003) MISSED OFFSET
	struct FVector                                     BaseLocation;                                             // 0x01EC(0x000C) (Net)
	unsigned long                                      bAtBase : 1;                                              // 0x01F8(0x0004) (Net)
	struct FVector                                     DroppedLocation;                                          // 0x01FC(0x000C) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_CTF_Flag");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ReturnToBase(const struct FVector& ReturnBaseLocation);
	void UnattachFlag();
	void AttachToPawn(class AR_Pawn* P);
	void ReturnToBaseTimer();
	void FlagDropped(class APawn* DroppedByPawn);
	void SetTeam(unsigned char NewTeamNum);
	void PostBeginPlay();
	unsigned char GetTeamNum();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_HUD_CTF
// 0x0000 (0x1014 - 0x1014)
class AR_HUD_CTF : public AR_HUD_Team
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_HUD_CTF");
		return ptr;
	}

};


// Class HawkenGame.R_PlayerControllerCTF
// 0x0000 (0x16CC - 0x16CC)
class AR_PlayerControllerCTF : public AR_PlayerControllerTeam
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PlayerControllerCTF");
		return ptr;
	}

};


// Class HawkenGame.R_PRI_CTF
// 0x0000 (0x0730 - 0x0730)
class AR_PRI_CTF : public AR_PlayerReplicationInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PRI_CTF");
		return ptr;
	}

};


// Class HawkenGame.R_GRI_CTF
// 0x0000 (0x05F4 - 0x05F4)
class AR_GRI_CTF : public AR_GameReplicationInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GRI_CTF");
		return ptr;
	}

};


// Class HawkenGame.R_DataStore_GameSearchBase
// 0x0000 (0x0094 - 0x0094)
class UR_DataStore_GameSearchBase : public UUDKDataStore_GameSearchBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DataStore_GameSearchBase");
		return ptr;
	}


	struct FString ParseDSTagSuffix(const struct FString& DSTag);
	bool SetChildDSSuffix(class UR_DataStore_GameSearchPersonal* ChildDS);
	void InitChildDataStore(class UR_DataStore_GameSearchPersonal* ChildDS);
};


// Class HawkenGame.R_DataStore_GameSearchPersonal
// 0x00B8 (0x014C - 0x0094)
class UR_DataStore_GameSearchPersonal : public UR_DataStore_GameSearchBase
{
public:
	class UR_DataStore_GameSearchBase*                 PrimaryGameSearchDataStore;                               // 0x0094(0x0004) (Transient)
	struct FString                                     ServerUniqueId[0xF];                                      // 0x0098(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DataStore_GameSearchPersonal");
		return ptr;
	}


	void GetServerStringList(TArray<struct FString>* out_ServerList);
	void GetServerIdList(TArray<struct FUniqueNetId>* out_ServerList);
	bool RemoveServer(int ControllerId, const struct FUniqueNetId& IdToRemove);
	bool AddServer(int ControllerId, const struct FUniqueNetId& IdToAdd);
	int FindServerIndexById(int ControllerId, struct FUniqueNetId* IdToFind);
	int FindServerIndexByString(int ControllerId, const struct FString& IdToFind);
	bool GetPlayerNetId(int ControllerId, struct FUniqueNetId* out_PlayerId);
	struct FString GetPlayerName(int ControllerId);
	bool OverrideQuerySubmission(unsigned char ControllerId, class UOnlineGameSearch* Search);
	bool HasOutstandingQueries(bool bRestrictCheckToSelf);
	void InitChildDataStore(class UR_DataStore_GameSearchPersonal* ChildDS);
};


// Class HawkenGame.R_DataStore_GameSearchDM
// 0x0014 (0x00A8 - 0x0094)
class UR_DataStore_GameSearchDM : public UR_DataStore_GameSearchBase
{
public:
	class UClass*                                      HistoryGameSearchDataStoreClass;                          // 0x0094(0x0004)
	class UR_DataStore_GameSearchHistory*              HistoryGameSearchDataStore;                               // 0x0098(0x0004) (Transient)
	TArray<struct UR_DataStore_GameSearchDM_FGameSearchSettingsStorage> StoredGameSearchValues;                                   // 0x009C(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DataStore_GameSearchDM");
		return ptr;
	}


	void SaveGameSearchParameters();
	void LoadGameSearchParameters();
	int FindStoredSettingValueIndex(int StoredGameSearchIndex, int LocalizedSettingId, bool bAddIfNecessary);
	int FindStoredSearchIndex(const struct FName& GameSearchName);
	bool HasOutstandingQueries(bool bRestrictCheckToSelf);
	bool SubmitGameSearch(unsigned char ControllerIndex, bool bInvalidateExistingSearchResults);
	void Registered(class ULocalPlayer* PlayerOwner);
};


// Class HawkenGame.R_DataStore_GameSearchHistory
// 0x0008 (0x0154 - 0x014C)
class UR_DataStore_GameSearchHistory : public UR_DataStore_GameSearchPersonal
{
public:
	class UClass*                                      FavoritesGameSearchDataStoreClass;                        // 0x014C(0x0004)
	class UR_DataStore_GameSearchFavorites*            FavoritesGameSearchDataStore;                             // 0x0150(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DataStore_GameSearchHistory");
		return ptr;
	}


	bool HasOutstandingQueries(bool bRestrictCheckToSelf);
	void InitChildDataStore(class UR_DataStore_GameSearchPersonal* ChildDS);
	void Registered(class ULocalPlayer* PlayerOwner);
};


// Class HawkenGame.R_DataStore_GameSearchFavorites
// 0x0004 (0x0150 - 0x014C)
class UR_DataStore_GameSearchFavorites : public UR_DataStore_GameSearchPersonal
{
public:
	class UR_DataStore_GameSearchHistory*              HistoryGameSearchDataStore;                               // 0x014C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DataStore_GameSearchFavorites");
		return ptr;
	}


	bool HasOutstandingQueries(bool bRestrictCheckToSelf);
};


// Class HawkenGame.R_GameSettingsCommon
// 0x0014 (0x0124 - 0x0110)
class UR_GameSettingsCommon : public UUDKGameSettingsCommon
{
public:
	int                                                MaxPlayers;                                               // 0x0110(0x0004) (DataBinding)
	int                                                MinNetPlayers;                                            // 0x0114(0x0004) (DataBinding)
	struct FString                                     SteamServerId;                                            // 0x0118(0x000C) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameSettingsCommon");
		return ptr;
	}


	void SetMutators(struct FString* URL);
	void UpdateFromURL(class AGameInfo* Game, struct FString* URL);
	void BuildURL(struct FString* OutURL);
	void SetOfficialMutatorBitmask(int MutatorBitmask);
};


// Class HawkenGame.R_GameSettingsDM
// 0x0000 (0x0124 - 0x0124)
class UR_GameSettingsDM : public UR_GameSettingsCommon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameSettingsDM");
		return ptr;
	}

};


// Class HawkenGame.R_UIDataProvider_SearchResult
// 0x0000 (0x0094 - 0x0094)
class UR_UIDataProvider_SearchResult : public UUDKUIDataProvider_SearchResult
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_UIDataProvider_SearchResult");
		return ptr;
	}

};


// Class HawkenGame.R_GameSearchPersonal
// 0x0000 (0x0100 - 0x0100)
class UR_GameSearchPersonal : public UR_GameSearchCommon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameSearchPersonal");
		return ptr;
	}

};


// Class HawkenGame.R_DataStore_GameSearchSiege
// 0x0014 (0x00A8 - 0x0094)
class UR_DataStore_GameSearchSiege : public UR_DataStore_GameSearchBase
{
public:
	class UClass*                                      HistoryGameSearchDataStoreClass;                          // 0x0094(0x0004)
	class UR_DataStore_GameSearchHistory*              HistoryGameSearchDataStore;                               // 0x0098(0x0004) (Transient)
	TArray<struct UR_DataStore_GameSearchSiege_FGameSearchSettingsStorage> StoredGameSearchValues;                                   // 0x009C(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DataStore_GameSearchSiege");
		return ptr;
	}


	void SaveGameSearchParameters();
	void LoadGameSearchParameters();
	int FindStoredSettingValueIndex(int StoredGameSearchIndex, int LocalizedSettingId, bool bAddIfNecessary);
	int FindStoredSearchIndex(const struct FName& GameSearchName);
	bool HasOutstandingQueries(bool bRestrictCheckToSelf);
	bool SubmitGameSearch(unsigned char ControllerIndex, bool bInvalidateExistingSearchResults);
	void Registered(class ULocalPlayer* PlayerOwner);
};


// Class HawkenGame.R_GameSettingsSiege
// 0x0000 (0x0124 - 0x0124)
class UR_GameSettingsSiege : public UR_GameSettingsCommon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameSettingsSiege");
		return ptr;
	}

};


// Class HawkenGame.R_DataStore_GameSearchTDM
// 0x0014 (0x00A8 - 0x0094)
class UR_DataStore_GameSearchTDM : public UR_DataStore_GameSearchBase
{
public:
	class UClass*                                      HistoryGameSearchDataStoreClass;                          // 0x0094(0x0004)
	class UR_DataStore_GameSearchHistory*              HistoryGameSearchDataStore;                               // 0x0098(0x0004) (Transient)
	TArray<struct UR_DataStore_GameSearchTDM_FGameSearchSettingsStorage> StoredGameSearchValues;                                   // 0x009C(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DataStore_GameSearchTDM");
		return ptr;
	}


	void SaveGameSearchParameters();
	void LoadGameSearchParameters();
	int FindStoredSettingValueIndex(int StoredGameSearchIndex, int LocalizedSettingId, bool bAddIfNecessary);
	int FindStoredSearchIndex(const struct FName& GameSearchName);
	bool HasOutstandingQueries(bool bRestrictCheckToSelf);
	bool SubmitGameSearch(unsigned char ControllerIndex, bool bInvalidateExistingSearchResults);
	void Registered(class ULocalPlayer* PlayerOwner);
};


// Class HawkenGame.R_GameSettingsTDM
// 0x0000 (0x0124 - 0x0124)
class UR_GameSettingsTDM : public UR_GameSettingsCommon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameSettingsTDM");
		return ptr;
	}

};


// Class HawkenGame.R_DataStore_GameSettingsDM
// 0x0000 (0x007C - 0x007C)
class UR_DataStore_GameSettingsDM : public UUIDataStore_OnlineGameSettings
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DataStore_GameSettingsDM");
		return ptr;
	}

};


// Class HawkenGame.R_PreviewCockpit
// 0x0090 (0x0264 - 0x01D4)
class AR_PreviewCockpit : public AActor
{
public:
	unsigned long                                      IsHealing : 1;                                            // 0x01D4(0x0004)
	unsigned long                                      IsIdle : 1;                                               // 0x01D4(0x0004)
	unsigned long                                      IsDraining : 1;                                           // 0x01D4(0x0004)
	unsigned long                                      IsHeavyMode : 1;                                          // 0x01D4(0x0004)
	unsigned long                                      IsWalkingBackwards : 1;                                   // 0x01D4(0x0004)
	unsigned long                                      bAlternateFireMode : 1;                                   // 0x01D4(0x0004)
	unsigned long                                      bBoostersOn : 1;                                          // 0x01D4(0x0004)
	unsigned long                                      FinishedStartBoost : 1;                                   // 0x01D4(0x0004)
	float                                              ThrustingBlend;                                           // 0x01D8(0x0004)
	float                                              FallingBlend;                                             // 0x01DC(0x0004)
	struct FLightingChannelContainer                   PreviewLightingChannel;                                   // 0x01E0(0x0004)
	class UDynamicLightEnvironmentComponent*           LightEnv;                                                 // 0x01E4(0x0004) (ExportObject, Component, EditInline)
	class UDirectionalLightComponent*                  CockpitLight;                                             // 0x01E8(0x0004) (ExportObject, Component, EditInline)
	class UUDKSkeletalMeshComponent*                   CockpitMesh;                                              // 0x01EC(0x0004) (ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   CockpitUI_MIC;                                            // 0x01F0(0x0004)
	class AR_PlayerController_Base*                    RPC;                                                      // 0x01F4(0x0004)
	struct FCockpitDecorationInstanceData              CockpitDecorationData[0x3];                               // 0x01F8(0x0018) (Component)
	struct FDecorationPreviewData                      DecorationPreview[0x3];                                   // 0x0240(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PreviewCockpit");
		return ptr;
	}


	void Tick(float DeltaTime);
	void AttachCockpitDecoration(unsigned char Idx, int Slot, bool bPlayPreview);
	void UpdateCockpitLocation();
	void SetCockpitUITexture(class UR_Gfx_Cockpit* CockpitMovie);
	int GetLocalPlayerOwnerIndex();
	bool SendCockpitMechData(class UR_Gfx_Cockpit* CockpitMovie, class UR_Gfx_Visor* VisorMovie);
	void SetItemData(class UClass* ItemClass, int Index, const struct FString& KeyName, class UGFxObject** Params);
	void UpdateCockpitMovieAndHealth(class UR_Gfx_Cockpit* NewCockpitMovie, class UR_Gfx_Visor* VisorMovie);
	void StagingHangarSettings();
	void MainMenuSettings();
	void SetupCockpit(int MechType);
};


// Class HawkenGame.R_GFx_MainMenu
// 0x0FA8 (0x41C8 - 0x3220)
class UR_GFx_MainMenu : public UR_GFx_MechMenu_Base
{
public:
	struct FName                                       SearchDSName;                                             // 0x3220(0x0008) (Const, Transient)
	class UUDKDataStore_GameSearchBase*                SearchDataStore;                                          // 0x3228(0x0004) (Transient)
	struct FStormGameServerListing                     ServerListingToJoin;                                      // 0x322C(0x009C) (Transient, NeedCtorLink)
	unsigned long                                      bIsMatchmaking : 1;                                       // 0x32C8(0x0004)
	unsigned long                                      bIsPendingDeploy : 1;                                     // 0x32C8(0x0004)
	unsigned long                                      DeployDelayedForCustomizations : 1;                       // 0x32C8(0x0004)
	unsigned long                                      bCancelJoinGame : 1;                                      // 0x32C8(0x0004) (Transient)
	unsigned long                                      bGametypeOutdated : 1;                                    // 0x32C8(0x0004) (Transient)
	unsigned long                                      bSpectate : 1;                                            // 0x32C8(0x0004) (Transient)
	unsigned long                                      bFirstGarageEntry : 1;                                    // 0x32C8(0x0004)
	unsigned long                                      bAlreadySetOptimizationsTutorialPage : 1;                 // 0x32C8(0x0004)
	float                                              MatchmakingStartTime;                                     // 0x32CC(0x0004)
	float                                              DeployCountdownTickFrequency;                             // 0x32D0(0x0004)
	float                                              DeployCountdownTime;                                      // 0x32D4(0x0004)
	float                                              DeployCountdownTimeRemaining;                             // 0x32D8(0x0004)
	int                                                FindMatchTaskId;                                          // 0x32DC(0x0004)
	struct FString                                     FindMatchGameType;                                        // 0x32E0(0x000C) (NeedCtorLink)
	struct FString                                     FindMatchRegion;                                          // 0x32EC(0x000C) (NeedCtorLink)
	TEnumAsByte<EGameSearchMode>                       FindMatchMode;                                            // 0x32F8(0x0001)
	TEnumAsByte<EServerBrowserType>                    CurrentServerBrowserType;                                 // 0x32F9(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x32FA(0x0002) MISSED OFFSET
	int                                                LoginDialogId;                                            // 0x32FC(0x0004)
	float                                              LegalScreenShowTime;                                      // 0x3300(0x0004) (Const)
	int                                                CoOpMapIndex;                                             // 0x3304(0x0004) (Const)
	int                                                TutorialMapIndex;                                         // 0x3308(0x0004) (Const)
	int                                                BotTrainingMapIndex;                                      // 0x330C(0x0004) (Const)
	float                                              BotTrainingTimeLimit;                                     // 0x3310(0x0004) (Const)
	int                                                BotTrainingScoreLimit;                                    // 0x3314(0x0004) (Const)
	int                                                OverflowTargetCount;                                      // 0x3318(0x0004) (Transient)
	int                                                OverflowFailures;                                         // 0x331C(0x0004) (Transient)
	int                                                OverflowXpIncrement;                                      // 0x3320(0x0004) (Transient)
	int                                                OverflowMcPerIncrement;                                   // 0x3324(0x0004) (Transient)
	int                                                SelectedServerIndex;                                      // 0x3328(0x0004)
	int                                                CurrentEULAVersion;                                       // 0x332C(0x0004) (Const)
	int                                                CompletedMatchesDebugOverride;                            // 0x3330(0x0004) (Config)
	struct FString                                     Error_LoginFailed_Title;                                  // 0x3334(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_LoginFailed_Text_InvalidUser;                       // 0x3340(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_LoginFailed_Text_WrongPassword;                     // 0x334C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_LoginFailed_Text_AccountDeactivated;                // 0x3358(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_LoginFailed_Text_AccountLocked;                     // 0x3364(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_LoginFailed_Text_GenericError;                      // 0x3370(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_LoginFailed_Text_ServiceUnavailable;                // 0x337C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_LoginFailed_Text_UpdateRequired;                    // 0x3388(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_AutoRentingMechFailed_Title;                        // 0x3394(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_AutoRentingMechFailed_Text;                         // 0x33A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_InvalidMode_Title;                                  // 0x33AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_InvalidMode_NoRPC_Text;                             // 0x33B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_FindUnrankedMatchFailed_Title;                      // 0x33C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_FindUnrankedMatchFailed_Text;                       // 0x33D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_RatingDeltaTooHigh_Text;                            // 0x33DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_PartyLeaderAction_Title;                            // 0x33E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_PartyLeaderAction_Text;                             // 0x33F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_PartySizeTooBig_Title;                              // 0x3400(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_PartySizeTooBig_Text;                               // 0x340C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_PartySizeTooSmall_Title;                            // 0x3418(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_PartySizeTooSmall_Text;                             // 0x3424(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_Locked_Text;                                        // 0x3430(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_SB_Locked_InParty;                                  // 0x343C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Error_SB_Locked_InsufficentMatches;                       // 0x3448(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_LoggingIn_Title;                                  // 0x3454(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_LoggingIn_Text;                                   // 0x3460(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_Registering_Title;                                // 0x346C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_Registering_Text;                                 // 0x3478(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_LoadingMap_Title;                                 // 0x3484(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_LoadingMap_Text;                                  // 0x3490(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_LookingForServers_Title;                          // 0x349C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_LookingForServers_Text;                           // 0x34A8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_ServersFound_Title;                               // 0x34B4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_ServersFound_Text;                                // 0x34C0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_ConnectingToServer_Title;                         // 0x34CC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_ConnectingToServer_Text;                          // 0x34D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_FindUnrankedMatch_Title;                          // 0x34E4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_FindUnrankedMatch_Text;                           // 0x34F0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_OverflowTransfer_Title;                           // 0x34FC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_OverflowTransfer_Text;                            // 0x3508(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_OverflowTransferComplete_Text;                    // 0x3514(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Loading_OverflowTransferFail_Text;                        // 0x3520(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_QuitConfirmation_Title;                          // 0x352C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_QuitConfirmation_Text;                           // 0x3538(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_EULAQuitConfirmation_Text;                       // 0x3544(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmMatchmakingCancel_Title;                  // 0x3550(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmMatchmakingCancel_Text;                   // 0x355C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmMatchmakingCancelParty_Title;             // 0x3568(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmMatchmakingCancelParty_Text;              // 0x3574(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmJoinMatchCancel_Title;                    // 0x3580(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmJoinMatchCancel_Text;                     // 0x358C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmJoinMatchCancelParty_Title;               // 0x3598(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmJoinMatchCancelParty_Text;                // 0x35A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmJoinHighLevelMatch_Title;                 // 0x35B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmJoinHighLevelMatch_Text;                  // 0x35BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmAcceptInviteDeploy_Title;                 // 0x35C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmAcceptInviteDeploy_Text;                  // 0x35D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmAcceptInviteQueued_Title;                 // 0x35E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmAcceptInviteQueued_Text;                  // 0x35EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmJoinFriendDeploy_Title;                   // 0x35F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmJoinFriendDeploy_Text;                    // 0x3604(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmJoinFriendQueued_Title;                   // 0x3610(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_ConfirmJoinFriendQueued_Text;                    // 0x361C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_AcceptPartyInvite_Title;                         // 0x3628(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Question_AcceptPartyInvite_Text;                          // 0x3634(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Garage_WeaponDamage;                                      // 0x3640(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Garage_WeaponHeat;                                        // 0x364C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Garage_WeaponRange;                                       // 0x3658(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Garage_WeaponRefireRate;                                  // 0x3664(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Screenshot_Title;                                         // 0x3670(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Screenshot_Description;                                   // 0x367C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_China;                                      // 0x3688(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_Custom;                                     // 0x3694(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_AllRegions;                                 // 0x36A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_SelectRegion;                               // 0x36AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_USA;                                        // 0x36B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_USE;                                        // 0x36C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_USW;                                        // 0x36D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_UK;                                         // 0x36DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_Europe;                                     // 0x36E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_Japan;                                      // 0x36F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_Singapore;                                  // 0x3700(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_Australia;                                  // 0x370C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_World;                                      // 0x3718(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_GameTypeLocked;                             // 0x3724(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_RankingLocked;                              // 0x3730(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_RankingWarning;                             // 0x373C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_PrivatedRankingWarning;                     // 0x3748(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_Unavailable;                                // 0x3754(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_Full;                                       // 0x3760(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerBrowser_InProgress;                                 // 0x376C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Matchmaking_Welcome;                                      // 0x3778(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Matchmaking_AllModesUnlocked;                             // 0x3784(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SelectRegionDialog_Title;                                 // 0x3790(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SelectRegionDialog_Message;                               // 0x379C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerRegionName_China;                                   // 0x37A8(0x000C) (Const, NeedCtorLink)
	struct FString                                     ServerRegionName_Custom;                                  // 0x37B4(0x000C) (Const, NeedCtorLink)
	struct FString                                     ServerRegionName_AllRegions;                              // 0x37C0(0x000C) (Const, NeedCtorLink)
	struct FString                                     ServerRegionName_USE;                                     // 0x37CC(0x000C) (Const, NeedCtorLink)
	struct FString                                     ServerRegionName_USW;                                     // 0x37D8(0x000C) (Const, NeedCtorLink)
	struct FString                                     ServerRegionName_USA;                                     // 0x37E4(0x000C) (Const, NeedCtorLink)
	struct FString                                     ServerRegionName_UK;                                      // 0x37F0(0x000C) (Const, NeedCtorLink)
	struct FString                                     ServerRegionName_Europe;                                  // 0x37FC(0x000C) (Const, NeedCtorLink)
	struct FString                                     ServerRegionName_Japan;                                   // 0x3808(0x000C) (Const, NeedCtorLink)
	struct FString                                     ServerRegionName_Singapore;                               // 0x3814(0x000C) (Const, NeedCtorLink)
	struct FString                                     ServerRegionName_Australia;                               // 0x3820(0x000C) (Const, NeedCtorLink)
	struct FString                                     ServerRegionName_World;                                   // 0x382C(0x000C) (Const, NeedCtorLink)
	struct FString                                     CompRegionName_AllRegions;                                // 0x3838(0x000C) (Const, NeedCtorLink)
	struct FString                                     CompRegionName_USA;                                       // 0x3844(0x000C) (Const, NeedCtorLink)
	struct FString                                     CompRegionName_USE;                                       // 0x3850(0x000C) (Const, NeedCtorLink)
	struct FString                                     CompRegionName_USW;                                       // 0x385C(0x000C) (Const, NeedCtorLink)
	struct FString                                     CompRegionNamePrefix;                                     // 0x3868(0x000C) (Const, NeedCtorLink)
	struct FString                                     ServerRegionName_SelectRegion;                            // 0x3874(0x000C) (Const, NeedCtorLink)
	TArray<class UGFxObject*>                          ServerList;                                               // 0x3880(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          ServerRegionList;                                         // 0x388C(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          CompRegionList;                                           // 0x3898(0x000C) (NeedCtorLink)
	TArray<class UGFxObject*>                          CoopRegionList;                                           // 0x38A4(0x000C) (NeedCtorLink)
	class UGFxObject*                                  ServerBrowser;                                            // 0x38B0(0x0004)
	class UGFxObject*                                  HeldFriendObject;                                         // 0x38B4(0x0004)
	class UGFxObject*                                  GFxMainMenu;                                              // 0x38B8(0x0004)
	struct FString                                     UI_labelLaunchMovementTraining;                           // 0x38BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelLaunchWeaponsTraining;                            // 0x38C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_deployTrainTab;                                        // 0x38D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_deployHostTab;                                         // 0x38E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_deployMatchmakingTab;                                  // 0x38EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_deployBrowserTab;                                      // 0x38F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelHideLockedServers;                                // 0x3904(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_DeployButton_Play;                                     // 0x3910(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_DeployButton_JoinMatch;                                // 0x391C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_DeployButton_Searching;                                // 0x3928(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_videoBasic1;                                           // 0x3934(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_videoBasic2;                                           // 0x3940(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_videoSiege;                                            // 0x394C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_videoMissileAssault;                                   // 0x3958(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_1;                                            // 0x3964(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_2;                                            // 0x3970(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_3;                                            // 0x397C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_4;                                            // 0x3988(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_5;                                            // 0x3994(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_6;                                            // 0x39A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_7;                                            // 0x39AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_8;                                            // 0x39B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_9;                                            // 0x39C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_10;                                           // 0x39D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_11;                                           // 0x39DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_12;                                           // 0x39E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_13;                                           // 0x39F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_14;                                           // 0x3A00(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_15;                                           // 0x3A0C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_16;                                           // 0x3A18(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_17;                                           // 0x3A24(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_18;                                           // 0x3A30(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_tutorial_19;                                           // 0x3A3C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTrainingInteractive;                              // 0x3A48(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTrainingVideos;                                   // 0x3A54(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTrainingDescriptionGarage;                        // 0x3A60(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelTrainingDescriptionMovement;                      // 0x3A6C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelExitTutorial;                                     // 0x3A78(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelGarageTutorial;                                   // 0x3A84(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipLaila;                                          // 0x3A90(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelOptimizationPoints;                               // 0x3A9C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipOptimizationUp;                                 // 0x3AA8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipOptimizationDown;                               // 0x3AB4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipOptimizationPoints;                             // 0x3AC0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_TrainingVR;                                            // 0x3ACC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_TrainingSingleBot;                                     // 0x3AD8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_TrainingCoopBot;                                       // 0x3AE4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_VRDescription;                                         // 0x3AF0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_SingleBotDescription;                                  // 0x3AFC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_CoopBotDescription;                                    // 0x3B08(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowConvertToGlobal;                               // 0x3B14(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowTransferToMech;                                // 0x3B20(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowAvailableXP;                                   // 0x3B2C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowConversionRate;                                // 0x3B38(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowNewTotal;                                      // 0x3B44(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowNewMechTotal;                                  // 0x3B50(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowPriceToConvert;                                // 0x3B5C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowAmountToConvert;                               // 0x3B68(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowAmountToTransfer;                              // 0x3B74(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowDialogConvertDescription;                      // 0x3B80(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowDialogTransferDescription;                     // 0x3B8C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_overflowDialogNextRankField;                           // 0x3B98(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_infoDeployPanel;                                       // 0x3BA4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelViewProgressionInGarage;                          // 0x3BB0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipOverview;                                       // 0x3BBC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipMastery;                                        // 0x3BC8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipWeapons;                                        // 0x3BD4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipOptimization;                                   // 0x3BE0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipItems;                                          // 0x3BEC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipInternal;                                       // 0x3BF8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipStyle;                                          // 0x3C04(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipTip;                                            // 0x3C10(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_toolTipDisabledWhileInParty;                           // 0x3C1C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_mechFamily;                                            // 0x3C28(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_mechUnlockByRankDesc;                                  // 0x3C34(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_mechUnlockByMechDesc;                                  // 0x3C40(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_labelXTExplanation;                                    // 0x3C4C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_mechChartTitle;                                        // 0x3C58(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_mechChartPilotRankTitle;                               // 0x3C64(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_mechChartPilotRankDescription;                         // 0x3C70(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_mechChartMechRankTitle;                                // 0x3C7C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_mechChartMechRankDescription;                          // 0x3C88(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_noCompatibleMechsTitle;                                // 0x3C94(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_noCompatibleMechsMessage;                              // 0x3CA0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_marketRedeemCode;                                      // 0x3CAC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_Toast_MatchmakingStart;                                // 0x3CB8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_Toast_MatchmakingStartParty;                           // 0x3CC4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_Toast_MatchmakingCancel;                               // 0x3CD0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_Toast_MatchmakingCancelParty;                          // 0x3CDC(0x000C) (Const, Localized, NeedCtorLink)
	TArray<struct FSAgentDialogCardInfo>               IntroAgentDialogs;                                        // 0x3CE8(0x000C) (NeedCtorLink)
	TArray<struct FSAgentDialogCardInfo>               GarageTutorialAgentDialogs;                               // 0x3CF4(0x000C) (NeedCtorLink)
	struct FSEducationalDialogCardInfo                 RenameMechTutorialEducationCard;                          // 0x3D00(0x0024) (NeedCtorLink)
	TArray<struct FSGarageTutorialTextBox>             RenameMechTextBoxes;                                      // 0x3D24(0x000C) (NeedCtorLink)
	TArray<struct FSEducationalDialogCardInfo>         GarageTutorialEducationCards;                             // 0x3D30(0x000C) (NeedCtorLink)
	TArray<struct FSGarageTutorialTextBox>             EdCard1TextBoxes;                                         // 0x3D3C(0x000C) (NeedCtorLink)
	TArray<struct FSGarageTutorialTextBox>             EdCard2TextBoxes;                                         // 0x3D48(0x000C) (NeedCtorLink)
	TArray<struct FSGarageTutorialTextBox>             EdCard3TextBoxes;                                         // 0x3D54(0x000C) (NeedCtorLink)
	struct FSGaragePanelTutorialCardInfo               GarageEducation_OverviewPanel;                            // 0x3D60(0x0034) (NeedCtorLink)
	TArray<struct FSGarageTutorialTextBox>             OverviewPanelTextBoxes;                                   // 0x3D94(0x000C) (NeedCtorLink)
	struct FSGaragePanelTutorialCardInfo               GarageEducation_ProgressionPanel;                         // 0x3DA0(0x0034) (NeedCtorLink)
	TArray<struct FSGarageTutorialTextBox>             ProgressionPanelTextBoxes;                                // 0x3DD4(0x000C) (NeedCtorLink)
	struct FSGaragePanelTutorialCardInfo               GarageEducation_WeaponsPanel;                             // 0x3DE0(0x0034) (NeedCtorLink)
	TArray<struct FSGarageTutorialTextBox>             WeaponsPanelTextBoxes;                                    // 0x3E14(0x000C) (NeedCtorLink)
	struct FSGaragePanelTutorialCardInfo               GarageEducation_OptimizationsPanel;                       // 0x3E20(0x0034) (NeedCtorLink)
	TArray<struct FSGarageTutorialTextBox>             OptimizationsPanelTextBoxes;                              // 0x3E54(0x000C) (NeedCtorLink)
	struct FSGaragePanelTutorialCardInfo               GarageEducation_ItemsPanel;                               // 0x3E60(0x0034) (NeedCtorLink)
	TArray<struct FSGarageTutorialTextBox>             ItemsPanelTextBoxes;                                      // 0x3E94(0x000C) (NeedCtorLink)
	struct FSGaragePanelTutorialCardInfo               GarageEducation_InternalsPanel;                           // 0x3EA0(0x0034) (NeedCtorLink)
	TArray<struct FSGarageTutorialTextBox>             InternalsPanelTextBoxes;                                  // 0x3ED4(0x000C) (NeedCtorLink)
	struct FSGaragePanelTutorialCardInfo               GarageEducation_StylePanel;                               // 0x3EE0(0x0034) (NeedCtorLink)
	TArray<struct FSGarageTutorialTextBox>             StylePanelTextBoxes;                                      // 0x3F14(0x000C) (NeedCtorLink)
	struct FSGaragePanelTutorialCardInfo               GarageEducation_TipsPanel;                                // 0x3F20(0x0034) (NeedCtorLink)
	TArray<struct FSGarageTutorialTextBox>             TipsPanelTextBoxes;                                       // 0x3F54(0x000C) (NeedCtorLink)
	TArray<struct FSAgentDialogCardInfo>               PostGarageEducation_AgentDialogs_Overview;                // 0x3F60(0x000C) (NeedCtorLink)
	TArray<struct FSAgentDialogCardInfo>               PostGarageEducation_AgentDialogs_Progression;             // 0x3F6C(0x000C) (NeedCtorLink)
	TArray<struct FSAgentDialogCardInfo>               PostGarageEducation_AgentDialogs_Weapons;                 // 0x3F78(0x000C) (NeedCtorLink)
	TArray<struct FSAgentDialogCardInfo>               PostGarageEducation_AgentDialogs_Optimizations;           // 0x3F84(0x000C) (NeedCtorLink)
	TArray<struct FSAgentDialogCardInfo>               PostGarageEducation_AgentDialogs_Items;                   // 0x3F90(0x000C) (NeedCtorLink)
	TArray<struct FSAgentDialogCardInfo>               PostGarageEducation_AgentDialogs_Internals;               // 0x3F9C(0x000C) (NeedCtorLink)
	TArray<struct FSAgentDialogCardInfo>               PostGarageEducation_AgentDialogs_Style;                   // 0x3FA8(0x000C) (NeedCtorLink)
	TArray<struct FSAgentDialogCardInfo>               PostGarageEducation_AgentDialogs_Tips;                    // 0x3FB4(0x000C) (NeedCtorLink)
	TArray<struct FSAgentDialogCardInfo>               FirstTimeOptimizationsAgentDialogs;                       // 0x3FC0(0x000C) (NeedCtorLink)
	TArray<class UTextureMovie*>                       TrainingVideos;                                           // 0x3FCC(0x000C) (NeedCtorLink)
	struct FString                                     UIControl_NavTraining;                                    // 0x3FD8(0x000C) (Const, NeedCtorLink)
	struct FString                                     UIControl_NavGarage;                                      // 0x3FE4(0x000C) (Const, NeedCtorLink)
	struct FString                                     UIControl_NavDeploy;                                      // 0x3FF0(0x000C) (Const, NeedCtorLink)
	struct FString                                     UIControl_GarageOptimizations;                            // 0x3FFC(0x000C) (Const, NeedCtorLink)
	struct FString                                     UIControl_VRTile;                                         // 0x4008(0x000C) (Const, NeedCtorLink)
	struct FString                                     UINavPath_NavHome;                                        // 0x4014(0x000C) (Const, NeedCtorLink)
	struct FString                                     UINavPath_NavTraining;                                    // 0x4020(0x000C) (Const, NeedCtorLink)
	struct FString                                     UINavPath_OptimizationsPanel;                             // 0x402C(0x000C) (Const, NeedCtorLink)
	class UOnlineMailMessage_PartyInvite*              PendingPartyInvite;                                       // 0x4038(0x0004)
	TArray<struct FString>                             DynamicServerRegionNames;                                 // 0x403C(0x000C) (Const, Localized, NeedCtorLink)
	struct FScriptDelegate                             __EnteredGarageDelegate__Delegate;                        // 0x4048(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ExitedGarageDelegate__Delegate;                         // 0x4054(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __StartMovieDelegate__Delegate;                           // 0x4060(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __StopMovieDelegate__Delegate;                            // 0x406C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __PauseMovieDelegate__Delegate;                           // 0x4078(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __RequestCreditsDelegate__Delegate;                       // 0x4084(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __MatchmakingOpenedDelegate__Delegate;                    // 0x4090(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __LaunchTrainingMapDelegate__Delegate;                    // 0x409C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __LaunchBotDestructionDelegate__Delegate;                 // 0x40A8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __LaunchCoopBotDestructionDelegate__Delegate;             // 0x40B4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __MechBayChangedDelegate__Delegate;                       // 0x40C0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __PreviewMechOfferDelegate__Delegate;                     // 0x40CC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ResetMechPresetDelegate__Delegate;                      // 0x40D8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ShowCinematicDelegate__Delegate;                        // 0x40E4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SetGarageViewBackgroundDelegate__Delegate;              // 0x40F0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __AutoRotateGarageMechDelegate__Delegate;                 // 0x40FC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ZoomGarageMechDelegate__Delegate;                       // 0x4108(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __MechScreenshotDelegate__Delegate;                       // 0x4114(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __TakeScreenshotDelegate__Delegate;                       // 0x4120(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __ShowStaticDelegate__Delegate;                           // 0x412C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __LaunchGameDelegate__Delegate;                           // 0x4138(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __LaunchExploreMapDelegate__Delegate;                     // 0x4144(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __CancelJoinGameDelegate__Delegate;                       // 0x4150(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleRefreshServerListDelegate__Delegate;              // 0x415C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleJoinServerDelegate__Delegate;                     // 0x4168(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleSpectateServerDelegate__Delegate;                 // 0x4174(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __GetFromXPOverflowDelegate__Delegate;                    // 0x4180(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __FindUnrankedMatchDelegate__Delegate;                    // 0x418C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OpenCalloutURLDelegate__Delegate;                       // 0x4198(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OpenRedeemCodeURLDelegate__Delegate;                    // 0x41A4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDeployButtonClickDelegate__Delegate;                  // 0x41B0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnCancelButtonClickDelegate__Delegate;                  // 0x41BC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GFx_MainMenu");
		return ptr;
	}


	void BuildAndSendAllCreditsToUI();
	void StartGarageCinematic();
	void OnMessageDialogClose_AcceptPartyInvite(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void NotifyPartyInviteReceived(class UOnlineMailMessage_PartyInvite* partyInvite);
	void OnMessageDialogClose_CancelMatchmaking(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void SetDelegate_OnCancelButtonClick(const struct FScriptDelegate& Delegate);
	void OnCancelButtonClick();
	void OnCancelButtonClickDelegate();
	void SetDelegate_OnDeployButtonClick(const struct FScriptDelegate& Delegate);
	void OnDeployButtonClick();
	void OnDeployButtonClickDelegate();
	void SetDelegate_OpenRedeemCodeURL(const struct FScriptDelegate& D);
	void OpenRedeemCodeURL();
	void OpenRedeemCodeURLDelegate();
	void SetDelegate_OpenCalloutURL(const struct FScriptDelegate& D);
	void OpenCalloutURL(const struct FString& URLString);
	void OpenCalloutURLDelegate(const struct FString& URLString);
	void CancelPartyDeployment(TEnumAsByte<EMMCancelReason> Reason, bool bSendNotification);
	void OnPartyDeploymentCancelled(TEnumAsByte<EMMCancelReason> Reason);
	void OnDeployCountdownTick();
	void OnPartyDeploying(int CountdownTime);
	void OnPartyMatchmakingCanceled(TEnumAsByte<EMMCancelReason> Reason);
	void OnPartyMatchmakingStarted();
	void OnLeavePartyCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode);
	void OnPartyLeaderChanged(class UOnlinePartyMemberObject* NewLeaderMemberObject);
	void OnPlayerKickedFromParty(class UOnlinePartyMemberObject* PartyMemberObject);
	void OnPlayerLeftParty(class UOnlinePartyMemberObject* PartyMemberObject);
	void OnPlayerJoinedParty(class UOnlinePartyMemberObject* PartyMemberObject, bool bNewMember);
	void OnAcceptPartyInvitationCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FString& MessageId, class UOnlinePartyObject* PartyObject);
	void OnCreatePartyCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, class UOnlinePartyObject* PartyObject);
	void OnFindUnrankedMatchCompleted(int TaskID, bool bWasSuccessful, const struct FStormGameServerListing& ServerListing);
	void CancelFindUnrankedMatch(TEnumAsByte<EMMCancelReason> Reason);
	void FindMatchByGameTypeIndex(TEnumAsByte<EGameSearchMode> GameSearchMode, int GameTypeIndex);
	void FindMatchByGameTypeString(TEnumAsByte<EGameSearchMode> GameSearchMode, const struct FString& GameTypeString, const struct FString& RegionString);
	void SetDelegate_FindUnrankedMatch(const struct FScriptDelegate& D);
	void FindUnrankedMatch(const struct FString& SearchMode, class UGFxObject* GameType, class UGFxObject* RegionObj);
	void FindUnrankedMatchDelegate(const struct FString& SearchMode, class UGFxObject* GameType, class UGFxObject* RegionObj);
	bool AllowJoinServer();
	void Cleanup();
	void OnWaitingDialogClosed_ConnectingToServer(int InDialogId, bool bCancelled);
	void PostProcessJoin();
	void OnMessageDialog_LevelMismatch(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void ProcessJoin(const struct FString& Password);
	void OnFindOnlineGameServersCompleted(bool bWasSuccessful);
	void OnFindOnlineGamesComplete(bool bWasSuccessful);
	void OnFindOnlineGamesCompleteDelegate(bool bWasSuccessful);
	void SubmitServerListQuery(int PlayerIndex);
	void RefreshServerList(int InPlayerIndex, int MaxResults);
	void UpdateListDataProvider();
	void UpdateButtonStates();
	void UpdateServerCount();
	void SetRefreshing(bool IsRefreshing);
	void SetDelegate_GetFromXPOverflow(const struct FScriptDelegate& del);
	void GetFromXPOverflowComplete(bool bWasSuccessful, const struct FString& MechId, int Amount, bool bWasLegacy);
	void GetFromXPOverflow(int Amount, class UGFxObject* Mech, bool bFreeLegacyXP);
	void GetFromXPOverflowDelegate(int Amount, class UGFxObject* Mech, bool bFreeLegacyXP);
	void SetDelegate_HandleSpectateServer(const struct FScriptDelegate& D);
	void HandleSpectateServer(class UGFxObject* Server);
	void HandleSpectateServerDelegate(class UGFxObject* Server);
	void SetDelegate_HandleJoinServer(const struct FScriptDelegate& D);
	void HandleJoinServer(class UGFxObject* Server, const struct FString& Password, const struct FString& BrowserType);
	void HandleJoinServerDelegate(class UGFxObject* Server, const struct FString& Password, const struct FString& BrowserType);
	void SetDelegate_HandleRefreshServerList(const struct FScriptDelegate& D);
	void HandleRefreshServerList(class UGFxObject* RegionObj, const struct FString& BrowserType);
	void HandleRefreshServerListDelegate(class UGFxObject* RegionObj, const struct FString& BrowserType);
	void ClearServerBrowserList();
	void OnDeclineEULAQuitConfirmationDialogClose(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void OnQuitConfirmationDialogClose(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void OnLoginDialogClosed(int InDialogId, const struct FString& InEmail, const struct FString& InPassword, const struct FString& citizenID, bool bCancelled);
	void OnEULADialogClosed(int InDialogId, bool bCancelled);
	void SetDelegate_CancelJoinGame(const struct FScriptDelegate& D);
	void CancelJoinGame();
	void CancelJoinGameDelegate();
	void JoinGameIP(const struct FString& JoinIP);
	void SetDelegate_LaunchExploreMap(const struct FScriptDelegate& D);
	void LaunchExploreMap(class UGFxObject* MapSelected);
	void LaunchExploreMapDelegate(class UGFxObject* MapSelected);
	void SetDelegate_LaunchGame(const struct FScriptDelegate& D);
	void LaunchGame(class UGFxObject* GameType, class UGFxObject* MapSelected);
	void LaunchGameDelegate(class UGFxObject* GameType, class UGFxObject* MapSelected);
	void SetDelegate_ShowStatic(const struct FScriptDelegate& D);
	void ShowStatic();
	void ShowStaticDelegate();
	void SetDelegate_TakeScreenshot(const struct FScriptDelegate& D);
	void ShowScreenshotConfirmDialog();
	void TakeScreenshot();
	void TakeScreenshotDelegate();
	void SetDelegate_MechScreenshot(const struct FScriptDelegate& D);
	void MechScreenshot();
	void MechScreenshotDelegate();
	void SetDelegate_ZoomGarageMech(const struct FScriptDelegate& D);
	void ZoomGarageMech(int Idx);
	void ZoomGarageMechDelegate(int Idx);
	void SetDelegate_AutoRotateGarageMech(const struct FScriptDelegate& D);
	void AutoRotateGarageMech(int Idx);
	void AutoRotateGarageMechDelegate(int Idx);
	void SetDelegate_SetGarageViewBackground(const struct FScriptDelegate& D);
	void SetGarageViewBackground(int Idx);
	void SetGarageViewBackgroundDelegate(int Idx);
	void SetDelegate_ShowCinematic(const struct FScriptDelegate& D);
	void ShowCinematic();
	void ShowCinematicDelegate();
	void MechCenter(float Time);
	void MechRight(float Time);
	void MechLeft(float Time);
	void SetDelegate_ResetMechPreset(const struct FScriptDelegate& D);
	void ResetMechPreset(class UGFxObject* UIPreset);
	void ResetMechPresetDelegate(class UGFxObject* UIPreset);
	void OnWriteOnlineMechInstanceCompleted(bool bWasSuccessful, const struct FString& Mech_InstanceId);
	void OnMessageDialogClose_JoinFriendServer(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void JoinFriendServer(class UGFxObject* FriendObj);
	void OnMessageDialogClose_AcceptGameInvite(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void AcceptGameInvite(class UGFxObject* MessageObj, const struct FString& Password);
	void SetDelegate_PreviewMechOffer(const struct FScriptDelegate& D);
	void PreviewMechOffer(class UGFxObject* GFxGameOffer);
	void PreviewMechOfferDelegate(class UGFxObject* GFxGameOffer);
	void PartPreviewHelper(class UGFxObject* PartGameItemType, bool bSinglePartSwap);
	void PatternAndAccentPreview(const struct FVisualInfo& MechStyle);
	void ClearPreviewVisualInfo();
	void SetDelegate_MechBayChanged(const struct FScriptDelegate& D);
	void MechBayChanged(class UGFxObject* UIPreset);
	void MechBayChangedDelegate(class UGFxObject* UIPreset);
	void SetDelegate_LaunchCoopBotDestruction(const struct FScriptDelegate& D);
	void LaunchCoopBotDestruction();
	void LaunchCoopBotDestructionDelegate();
	void SetDelegate_LaunchBotDestruction(const struct FScriptDelegate& D);
	void LaunchBotDestruction();
	void LaunchBotDestructionDelegate();
	void SetDelegate_LaunchTrainingMap(const struct FScriptDelegate& D);
	void LaunchTrainingMap();
	void LaunchTrainingMapDelegate();
	void SetDelegate_MatchmakingOpened(const struct FScriptDelegate& D);
	void MatchmakingOpened();
	void MatchmakingOpenedDelegate();
	void SetDelegate_RequestCredits(const struct FScriptDelegate& D);
	void RequestCredits();
	void RequestCreditsDelegate();
	void SetDelegate_PauseMovie(const struct FScriptDelegate& D);
	void PauseMovie();
	void PauseMovieDelegate();
	void SetDelegate_StopMovie(const struct FScriptDelegate& D);
	void StopMovie();
	void StopMovieDelegate();
	void SetDelegate_StartMovie(const struct FScriptDelegate& D);
	void StartMovie(int Index);
	void StartMovieDelegate(int Index);
	void SetDelegate_ExitedGarage(const struct FScriptDelegate& del);
	void OnExitedGarage();
	void ExitedGarageDelegate();
	void SetDelegate_EnteredGarage(const struct FScriptDelegate& del);
	void OnEnteredGarage();
	void EnteredGarageDelegate();
	void PlayerLogout();
	void SetMatchesCompletedDebugOverride(int newVal);
	void SetLastLoginName(const struct FString& PlayerName);
	void PlayerLogin(const struct FString& PlayerName, const struct FString& Password, const struct FString& citizenID);
	void SetupJoinGame();
	void InitializeOfflineEverything(const struct FString& PlayerName);
	void NotifyAboutFirstTimeOptimizations(bool bForce);
	void NotifyAboutMechProgression(int presetIndex);
	void NotifyAboutPilotProgression();
	void NotifyAboutAllProgressionUnlocks();
	void NotifyAboutGraphicsOptionsReset();
	void NotifyAboutOutdatedNvidiaDriver();
	void OnOutdatedDriverWarningDialogClose(int InDialogId, TEnumAsByte<EMessageDialogButton> InButton);
	void TipsPanelDialogClosed();
	void StylePanelDialogClosed();
	void InternalsPanelDialogClosed();
	void ItemsPanelDialogClosed();
	void OptimizationsPanelDialogClosed();
	void WeaponsPanelDialogClosed();
	void ProgressionPanelDialogClosed();
	void OverviewPanelDialogClosed();
	void SetIndividualGaragePanelTutorials();
	void FinalGarageTutorialDialogClosed();
	void ShowGarageTutorialDialogs();
	void FinalIntroDialogClosed();
	void ShowIntroDialogs();
	void PostEULAIntro();
	void SyncingAccount_OnRefreshWalletComplete(bool bWasSuccessful);
	void SyncingAccount_RefreshWallet();
	void OnReadGameBundleCollectionComplete(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode);
	void ReadGameBundleCollection();
	void OnReadGameOfferCollectionComplete(bool bWasSuccessful);
	void ReadGameOfferCollection();
	void OnReadGameItemTypeCollectionComplete(bool bWasSuccessful);
	void ReadGameItemTypeCollection();
	void OnInitializeGameOfferCollectionForUICompleted();
	void OnReadUnlockedAchievementCollectionCompleted(int TaskID, const struct FUniqueNetId& PlayerID, TEnumAsByte<ENetworkErrorCode> ErrorCode, class UOnlineUnlockedAchievementCollection* Collection);
	void ReadUnlockedAchievementCollection();
	void OnReadAchievementCollectionCompleted(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode);
	void ReadAchievementCollection();
	void OnReadOnlineLegacyStatsComplete(bool bWasSuccessful, const struct FSOnlineLegacyStats& LegacyStats);
	void ReadOnlineLegacyStats();
	void OnGetOverflowComplete(bool bWasSuccessful, int interval, int mcPerIncrement);
	void GetOverflow();
	void OnReadOnlinePlayerAccountInfoComplete(bool bWasSuccessful, const struct FSOnlineAccountInfo& AcctInfo);
	void ReadOnlinePlayerAccountInfo();
	void OnReadOnlinePlayerNicknameComplete(bool bWasSuccessful);
	void ReadOnlinePlayerNickname();
	void OnMessageDialogClose_ErrorSyncingAccount(int InDialogId, int InButton);
	void OnReadOnlineStatsComplete(int TaskID, TEnumAsByte<ENetworkErrorCode> ErrorCode, const struct FUniqueNetId& PlayerID, class UOnlinePlayerStats* PlayerStats);
	void BeginFullSync();
	void OnStillLoggedIn();
	void OnLoginChange(unsigned char LocalUserNum);
	void CheckForBonusXPEvent();
	void OnFullSyncComplete();
	void OnMessageDialogClose_ErrorLogin(int InDialogId, int InButton);
	void OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode);
	void TestLoginFailed();
	void OnAutoLoginFailed(unsigned char LocalUserNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode);
	void DelayedShowLoginDialog();
	void AttemptAutoLogin(unsigned char LocalUserNum);
	void InitCoopMenu();
	void InitCompServerBrowserRegions();
	void InitCompetitionMenu();
	struct FString GetDynamicRegionLocName(int TextId);
	void SetDefaultRegion();
	void AddDynamicServerRegionsToBrowser();
	int ServerRegionSort(class UGFxObject* RegionA, class UGFxObject* RegionB);
	void InitServerBrowserRegions();
	void InitVsMenu();
	class UGFxObject* FindCoopRegionObject(const struct FString& RegionName);
	class UGFxObject* FindCompRegionObject(const struct FString& RegionName);
	class UGFxObject* FindServerRegionObject(const struct FString& RegionName);
	void OnOculusStateChanged(bool bIsNowEnabled);
	void HideLegalScreen();
	void ShowLegalScreen(float Seconds);
	void PostLegalScreenLogin();
	bool Start(bool StartPaused);
	void OnClose();
	void InitOptions(bool bForce);
	void SetLocalizedStringsForUI(class UGFxObject* LocObj);
	void SetAllFunctionDelegates();
	void ClearAllFunctionDelegates();
	void ASShowActiveXPWeekend(float multiplierForUI);
	void ASSetDeployButtonState(const struct FString& Label, bool bIsDisabled, const struct FString& tooltipText, bool bShowSpinner);
	void ASSetCancelButtonState(bool bIsDisabled, bool bIsVisible);
	void ASCloseDeployPanel();
	void ASOpenDeployPanel();
	void AddUnlockDialog(class UGFxObject* UnlockItem, class UGFxObject* UIPreset, class UGFxObject* callbackScope, const struct FString& callbackFunctionName);
	void UIShowHideLegalScreen(bool bShow);
	void SendCreditsToUI(const struct FString& CreditsText);
	void SetDevMode(bool bNewDevMode);
	void SetPlayingMovie(bool bPlaying);
	void NotifyUILoginIsComplete();
	void ShowEULADialog(const struct FScriptDelegate& OnEULADialogClosedDelegate);
	void ShowLoginDialog(const struct FString& Email, const struct FScriptDelegate& OnLoginDialogClosedDelegate);
};


// Class HawkenGame.R_EntryHUD
// 0x002C (0x0488 - 0x045C)
class AR_EntryHUD : public AHUD
{
public:
	class UTextureMovie*                               currentMovieTexture;                                      // 0x045C(0x0004)
	float                                              movieScale;                                               // 0x0460(0x0004)
	unsigned long                                      bDrawVisor : 1;                                           // 0x0464(0x0004)
	class UR_Gfx_Visor*                                VisorMovie;                                               // 0x0468(0x0004)
	class UClass*                                      VisorMovieClass;                                          // 0x046C(0x0004)
	class UTextureRenderTarget2D*                      VisorUIRenderTargetTex;                                   // 0x0470(0x0004) (Transient)
	class UMaterialInstanceConstant*                   Visor_MIC;                                                // 0x0474(0x0004) (Transient)
	class UMaterialInterface*                          VisorUIMaterial;                                          // 0x0478(0x0004)
	class UR_Gfx_Cockpit*                              CockpitMovie;                                             // 0x047C(0x0004)
	int                                                PrimaryReticleIdx;                                        // 0x0480(0x0004)
	int                                                SecondaryReticleIdx;                                      // 0x0484(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_EntryHUD");
		return ptr;
	}


	bool IsMoviePlaying();
	bool IsMoviePaused();
	bool StopMovie();
	bool PauseMovie();
	bool PlayMovie(class UTextureMovie* movieTex);
	void SetHUDColors(int friendColor, int neutralColor, int enemyColor, bool bTintReticle);
	void SetSecondaryReticle(int Index);
	void SetPrimaryReticle(int Index);
	void SetReticleType(int LeftIdx, int RightIdx, bool bVerifyIndices);
	void DrawVisorMIC();
	bool IsDrawingVisor();
	void PostRender();
	void CreateCockpitMovie();
	void CreateVisorScaleformMovie();
	int GetLocalPlayerOwnerIndex();
	void Destroyed();
};


// Class HawkenGame.R_SavedMove
// 0x003C (0x0124 - 0x00E8)
class UR_SavedMove : public USavedMove
{
public:
	unsigned long                                      bHeal : 1;                                                // 0x00E8(0x0004)
	unsigned long                                      bTaunt : 1;                                               // 0x00E8(0x0004)
	TEnumAsByte<ERobotMoveState>                       StartMoveState;                                           // 0x00EC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00ED(0x0003) MISSED OFFSET
	float                                              PostMoveThrusterEnergy;                                   // 0x00F0(0x0004)
	struct FRMovementStateVars                         StartMovementStateVars;                                   // 0x00F4(0x0030)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SavedMove");
		return ptr;
	}


	TEnumAsByte<EDoubleClickDir> STATIC_SetFlags(unsigned char Flags, class APlayerController* PC);
	unsigned char CompressedFlags();
	bool CanCombineWith(class USavedMove* NewMove, class APawn* inPawn, float MaxDelta);
	void ResetMoveFor(class APawn* P);
	void PrepMoveFor(class APawn* P);
	void SetMoveFor(class APlayerController* P, float DeltaTime, const struct FVector& newAccel, TEnumAsByte<EDoubleClickDir> InDoubleClick);
	void SetPawnInitialStateForReplay(class APawn* P);
	void SetInitialPosition(class APawn* P);
	void PostUpdate(class APlayerController* P);
	void Clear();
};


// Class HawkenGame.SeqAct_ShowPopup
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_ShowPopup : public USeqAct_HawkenGfx
{
public:
	struct FString                                     PopupClassNameOverride;                                   // 0x00FC(0x000C) (Edit, NeedCtorLink)
	class UClass*                                      MovieClipClass;                                           // 0x0108(0x0004) (Edit, EditConst)
	class UR_GFxInfoContainer*                         PopupMovieClip;                                           // 0x010C(0x0004)
	unsigned long                                      bAutoShowMovie : 1;                                       // 0x0110(0x0004) (Edit)
	unsigned long                                      bHideCrosshairReticle : 1;                                // 0x0110(0x0004) (Edit)
	unsigned long                                      bReplicated : 1;                                          // 0x0110(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_ShowPopup");
		return ptr;
	}


	bool SetupDialog(class UR_Gfx_Visor* VisorMovie);
	bool OpenPopup();
	class UR_Gfx_Visor* GetVisorMovie();
	void ClearClipReferences();
	void Deactivated();
	void ShowPopup();
	void SendShowPopup();
	void Activated();
};


// Class HawkenGame.R_TeamGameMessage
// 0x0040 (0x0090 - 0x0050)
class UR_TeamGameMessage : public ULocalMessage
{
public:
	struct FString                                     RequestTeamSwapPrefix;                                    // 0x0050(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     RequestTeamSwapPostfix;                                   // 0x005C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     YouAreOnRedMessage;                                       // 0x0068(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     YouAreOnBlueMessage;                                      // 0x0074(0x000C) (Const, Localized, NeedCtorLink)
	struct FColor                                      RedDrawColor;                                             // 0x0080(0x0004)
	struct FColor                                      BlueDrawColor;                                            // 0x0084(0x0004)
	class USoundNodeWave*                              AnnouncerSounds[0x2];                                     // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_TeamGameMessage");
		return ptr;
	}


	struct FColor STATIC_GetColor(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	float STATIC_GetPos(int Switch, class AHUD* myHUD);
	int STATIC_GetFontSize(int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer);
	class USoundNodeWave* STATIC_AnnouncementSound(int MessageIndex, class UObject* OptionalObject, class APlayerController* PC);
	struct FString STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class HawkenGame.R_SeqEvent_ShowCarousel
// 0x0000 (0x0114 - 0x0114)
class UR_SeqEvent_ShowCarousel : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SeqEvent_ShowCarousel");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	void Activated();
};


// Class HawkenGame.SeqAct_AddCallout
// 0x0025 (0x0121 - 0x00FC)
class USeqAct_AddCallout : public USeqAct_HawkenGfx
{
public:
	struct FString                                     CalloutID;                                                // 0x00FC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     CalloutHeaderText;                                        // 0x0108(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FVector2D                                   CalloutPosition;                                          // 0x0114(0x0008) (Edit)
	unsigned long                                      bIsAnimated : 1;                                          // 0x011C(0x0004) (Edit)
	TEnumAsByte<ECalloutOrientation>                   CalloutOrientation;                                       // 0x0120(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_AddCallout");
		return ptr;
	}


	struct FString GetOrientationString();
};


// Class HawkenGame.R_SE_ExplodeOnDeath
// 0x000C (0x024C - 0x0240)
class AR_SE_ExplodeOnDeath : public AR_StatusEffect_Base
{
public:
	float                                              explosionRadius;                                          // 0x0240(0x0004)
	float                                              Damage;                                                   // 0x0244(0x0004)
	float                                              explosionDelay;                                           // 0x0248(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ExplodeOnDeath");
		return ptr;
	}


	void HandleOwnerDied(class AR_Pawn* RP);
};


// Class HawkenGame.R_SE_DetonationDevice
// 0x0000 (0x024C - 0x024C)
class AR_SE_DetonationDevice : public AR_SE_ExplodeOnDeath
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_DetonationDevice");
		return ptr;
	}

};


// Class HawkenGame.R_SE_EnableAirDodge
// 0x0000 (0x0240 - 0x0240)
class AR_SE_EnableAirDodge : public AR_StatusEffect_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_EnableAirDodge");
		return ptr;
	}

};


// Class HawkenGame.R_SE_EnableAir180
// 0x0000 (0x0240 - 0x0240)
class AR_SE_EnableAir180 : public AR_StatusEffect_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_EnableAir180");
		return ptr;
	}

};


// Class HawkenGame.R_Decoy
// 0x0028 (0x01FC - 0x01D4)
class AR_Decoy : public AActor
{
public:
	unsigned char                                      TeamNum;                                                  // 0x01D4(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01D5(0x0003) MISSED OFFSET
	class AR_Pawn*                                     OwnerPawn;                                                // 0x01D8(0x0004) (Net)
	struct FString                                     DisplayName;                                              // 0x01DC(0x000C) (Const, Localized, NeedCtorLink)
	float                                              Health;                                                   // 0x01E8(0x0004)
	float                                              HealthMax;                                                // 0x01EC(0x0004)
	struct FVector                                     IndicatorOffset;                                          // 0x01F0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Decoy");
		return ptr;
	}


	struct FString GetDisplayName();
	float GetHealthPercent();
	bool ShowDefaultIndicator(struct FVector* retIndicatorLoc, struct FVector* retIndicatorSize, struct FString* retDisplayName, float* retHealthPercent, float* retHealthMax);
	void OnOwnerDestroyed();
	bool IsDead();
	bool CanBeHealed();
	void OnPawnTouch(class APawn* P);
	bool WasDeployedByPawn(class APawn* P);
	bool IsFriendly(bool bTeamGame, class APawn* P);
	unsigned char GetTeamNum();
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
};


// Class HawkenGame.R_Dialog
// 0x0034 (0x01A0 - 0x016C)
class UR_Dialog : public UR_GFx_Base
{
public:
	class UGFxObject*                                  DialogRef;                                                // 0x016C(0x0004)
	class UGFxObject*                                  DialogClassRef;                                           // 0x0170(0x0004)
	struct FString                                     DialogRefClassPath;                                       // 0x0174(0x000C) (NeedCtorLink)
	int                                                DialogId;                                                 // 0x0180(0x0004)
	unsigned long                                      Closed : 1;                                               // 0x0184(0x0004)
	unsigned long                                      bNeedToBeClosed : 1;                                      // 0x0184(0x0004)
	unsigned long                                      bFullyLoaded : 1;                                         // 0x0184(0x0004)
	TArray<struct FString>                             IgnoreCommands;                                           // 0x0188(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleDialogFullyLoadedDelegate__Delegate;              // 0x0194(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Dialog");
		return ptr;
	}


	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	void SetDialogReference(class UGFxObject* NewDialogRef);
	void RemoveFromUIManager();
	void AddToUIManager();
	bool ShouldHideCursor();
	void UnRegisterDelegates();
	void RegisterDelegates();
	void SetDelegate_HandleDialogFullyLoaded(const struct FScriptDelegate& Delegated);
	void HandleDialogFullyLoaded();
	void HandleDialogFullyLoadedDelegate();
	class UGFxObject* InternalShowDialog();
	void InitData();
	void OnClose();
	void InternalHide();
	void Hide();
	int show();
	bool Start(bool StartPaused);
	void AddFocusIgnoreCommand(const struct FString& CommandName, class UR_PlayerInput* RPI);
};


// Class HawkenGame.R_DialogManager
// 0x0028 (0x0194 - 0x016C)
class UR_DialogManager : public UR_GFx_Base
{
public:
	TArray<class UR_Dialog*>                           OpenDialogs;                                              // 0x016C(0x000C) (NeedCtorLink)
	TArray<class UR_Dialog*>                           QueuedDialogs;                                            // 0x0178(0x000C) (NeedCtorLink)
	class UGFxObject*                                  DialogClassRef;                                           // 0x0184(0x0004)
	struct FScriptDelegate                             __HandleDialogMouseVisibleChangedDelegate__Delegate;      // 0x0188(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DialogManager");
		return ptr;
	}


	void RemoveQueuedDialog(class UR_Dialog* oldDialog);
	void AddQueuedDialog(class UR_Dialog* newDialog);
	bool IsDialogInQueue(class UR_Dialog* CheckDialog);
	void ShowQueuedDialog();
	bool IsDialogOpen(int DialogId);
	void ClearOpenDialogs(int StartPriority, int MaxPriority);
	int GetNumMessageDialogsOpen(int StartPriority, int MaxPriority);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	void InternalHide(class UGFxObject* dialogGfxRef);
	void CloseDialog(int DialogId);
	void HideDialog(int DialogId);
	class UR_Dialog* GetDialog(int DialogId);
	void UpdateTopOpeningDialog();
	void RemoveOpenDialog(class UR_Dialog* OldOpenDialog);
	void AddOpenDialog(class UR_Dialog* NewOpenDialog);
	void SetDelegate_HandleDialogMouseVisibleChanged(const struct FScriptDelegate& Delegated);
	void HandleDialogMouseVisibleChanged(bool bDialogMouseVisible);
	void HandleDialogMouseVisibleChangedDelegate(bool bDialogMouseVisible);
	class UGFxObject* GetDialogClassReference(const struct FString& DialogClassPath);
	void OnCleanup(bool bUnload);
	bool Start(bool StartPaused);
};


// Class HawkenGame.R_MessageDialog
// 0x0078 (0x0218 - 0x01A0)
class UR_MessageDialog : public UR_Dialog
{
public:
	struct FString                                     Title;                                                    // 0x01A0(0x000C) (NeedCtorLink)
	struct FString                                     Message;                                                  // 0x01AC(0x000C) (NeedCtorLink)
	unsigned long                                      bIsError : 1;                                             // 0x01B8(0x0004)
	unsigned long                                      bIsConfirmation : 1;                                      // 0x01B8(0x0004)
	unsigned long                                      bIsAntiAddiction : 1;                                     // 0x01B8(0x0004)
	unsigned long                                      Shown : 1;                                                // 0x01B8(0x0004)
	unsigned long                                      bShouldAddQueuedDialog : 1;                               // 0x01B8(0x0004)
	unsigned long                                      bShowCheckBox : 1;                                        // 0x01B8(0x0004)
	int                                                DialogPriority;                                           // 0x01BC(0x0004)
	float                                              AutoCloseTime;                                            // 0x01C0(0x0004)
	float                                              DisplayedTime;                                            // 0x01C4(0x0004)
	struct FScriptDelegate                             OnMessageDialogClose;                                     // 0x01C8(0x000C) (NeedCtorLink)
	struct FString                                     UI_ButtonClose;                                           // 0x01D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ButtonYes;                                             // 0x01E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ButtonNo;                                              // 0x01EC(0x000C) (Const, Localized, NeedCtorLink)
	class UR_MessageDialog*                            QueuedDialog;                                             // 0x01F8(0x0004)
	int                                                QueuedDialogId;                                           // 0x01FC(0x0004)
	struct FScriptDelegate                             __HandleMessageDialogCloseDelegate__Delegate;             // 0x0200(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleMessageDialogSubmitDelegate__Delegate;            // 0x020C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MessageDialog");
		return ptr;
	}


	void UpdateDialog(float DeltaTime);
	bool ShouldHideCursor();
	void UnRegisterDelegates();
	void RegisterDelegates();
	void SetDelegate_HandleMessageDialogSubmit(const struct FScriptDelegate& Delegated);
	void HandleMessageDialogSubmit(class UGFxObject* Data);
	void HandleMessageDialogSubmitDelegate(class UGFxObject* Data);
	void OnClose();
	void CloseDialog(TEnumAsByte<EMessageDialogButton> InButton, class UGFxObject* Data);
	void SetDelegate_HandleMessageDialogClose(const struct FScriptDelegate& Delegated);
	void HandleMessageDialogClose(class UGFxObject* Data);
	void HandleMessageDialogCloseDelegate(class UGFxObject* Data);
	class UGFxObject* ShowAntiAddictionDialog(const struct FString& InTitle, const struct FString& InMessage, float ShowDuration);
	class UGFxObject* ShowConfirmationDialog(const struct FString& InTitle, const struct FString& InMessage, TArray<struct FString> LocalizationArray);
	class UGFxObject* ShowMessageDialog(const struct FString& InTitle, const struct FString& InMessage, int InDialogPriority, bool InIsError, TArray<struct FString> LocalizationArray, bool bShouldShowCheckBox);
	void PrepareQueuedDialog();
	int show();
	class UGFxObject* InternalShowDialog();
};


// Class HawkenGame.R_DmgType_AssaultRifle
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_AssaultRifle : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_AssaultRifle");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_AssaultRifle
// 0x000C (0x05D8 - 0x05CC)
class AR_Weap_AssaultRifle : public AR_Weap_Base
{
public:
	class USoundCue*                                   StartFireSnd;                                             // 0x05CC(0x0004)
	class USoundCue*                                   EndFireSnd;                                               // 0x05D0(0x0004)
	class USoundCue*                                   CancelFireSnd;                                            // 0x05D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_AssaultRifle");
		return ptr;
	}


	void AdjustWeaponMaterial(float DeltaTime);
	void BeltFinishTimer();
	void Tick(float DeltaTime);
	void FireAmmunition();
	void StopFiringAnimation();
	void StartFireEnd();
	void StartFiringAnimation();
	void LastEndFireTime();
	void LastStartFireTime();
};


// Class HawkenGame.R_DmgType_AssaultRifle_Berserker_XT
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_AssaultRifle_Berserker_XT : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_AssaultRifle_Berserker_XT");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_AssaultRifle_Berserker_XT
// 0x0000 (0x05D8 - 0x05D8)
class AR_Weap_AssaultRifle_Berserker_XT : public AR_Weap_AssaultRifle
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_AssaultRifle_Berserker_XT");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_AutoRifle
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_AutoRifle : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_AutoRifle");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_AutoRifle
// 0x0008 (0x05D4 - 0x05CC)
class AR_Weap_AutoRifle : public AR_Weap_Base
{
public:
	class USoundCue*                                   ClipSound;                                                // 0x05CC(0x0004)
	class USoundCue*                                   ReloadSound;                                              // 0x05D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_AutoRifle");
		return ptr;
	}


	void STATIC_PlaySpecialWeaponFire(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int BarrelSwitch, bool bPlaySound);
	void FireAmmunition();
};


// Class HawkenGame.R_DmgType_AutoSniper
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_AutoSniper : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_AutoSniper");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_AutoSniper
// 0x0000 (0x05CC - 0x05CC)
class AR_Weap_AutoSniper : public AR_Weap_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_AutoSniper");
		return ptr;
	}


	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_BlastGrenade
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_BlastGrenade : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_BlastGrenade");
		return ptr;
	}

};


// Class HawkenGame.R_Item_BlastGrenade
// 0x0004 (0x026C - 0x0268)
class AR_Item_BlastGrenade : public AR_Item_Base
{
public:
	float                                              MaxThrowMultiplier;                                       // 0x0268(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_BlastGrenade");
		return ptr;
	}


	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
};


// Class HawkenGame.R_DmgType_Blockade
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Blockade : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Blockade");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Shield
// 0x0004 (0x026C - 0x0268)
class AR_Item_Shield : public AR_Item_Base
{
public:
	float                                              MaxThrowMultiplier;                                       // 0x0268(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Shield");
		return ptr;
	}


	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
	void InitDeployedProjectile(class AR_Projectile* DeployedProjectile);
};


// Class HawkenGame.R_Item_Blockade
// 0x0004 (0x0270 - 0x026C)
class AR_Item_Blockade : public AR_Item_Shield
{
public:
	float                                              DeployedBlockadeWidthScale;                               // 0x026C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Blockade");
		return ptr;
	}


	void InitDeployedProjectile(class AR_Projectile* DeployedProjectile);
};


// Class HawkenGame.R_DmgType_Breacher
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Breacher : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Breacher");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Shotgun
// 0x009C (0x0668 - 0x05CC)
class AR_Weap_Shotgun : public AR_Weap_Base
{
public:
	int                                                NumProjPerShot;                                           // 0x05CC(0x0004)
	float                                              SpreadReductionPerSecond;                                 // 0x05D0(0x0004)
	int                                                CurrentFlashIdx;                                          // 0x05D4(0x0004)
	struct FVector                                     ImpactLocations[0xC];                                     // 0x05D8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Shotgun");
		return ptr;
	}


	void ShotgunFire(int shotIdx);
	void SetShotgunFlashLocation(int I, const struct FVector& HitLocation);
	void FireAmmunition();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Weap_Breacher
// 0x0048 (0x06B0 - 0x0668)
class AR_Weap_Breacher : public AR_Weap_Shotgun
{
public:
	float                                              ShotDelay;                                                // 0x0668(0x0004)
	unsigned long                                      bIncrementFlash : 1;                                      // 0x066C(0x0004)
	unsigned long                                      bChargedShot : 1;                                         // 0x066C(0x0004)
	float                                              TimeToCharge;                                             // 0x0670(0x0004)
	float                                              ChargedHeatPerShot;                                       // 0x0674(0x0004)
	int                                                ChargedNumProj;                                           // 0x0678(0x0004)
	float                                              ChargedSpread;                                            // 0x067C(0x0004)
	float                                              ChargedInstantHitDamage;                                  // 0x0680(0x0004)
	float                                              ChargedInstantHitDamageFar;                               // 0x0684(0x0004)
	float                                              ChargedFallOffBeginDist;                                  // 0x0688(0x0004)
	float                                              ChargedFallOffEndDist;                                    // 0x068C(0x0004)
	class USoundCue*                                   ChargeSnd;                                                // 0x0690(0x0004) (Const)
	class USoundCue*                                   ChargedWeaponFireSnd;                                     // 0x0694(0x0004) (Const)
	float                                              OldSpread;                                                // 0x0698(0x0004)
	float                                              OldDamage;                                                // 0x069C(0x0004)
	float                                              OldHeatPerShot;                                           // 0x06A0(0x0004)
	float                                              OldInstantHitDamageFar;                                   // 0x06A4(0x0004)
	float                                              OldFallOffBeginDist;                                      // 0x06A8(0x0004)
	float                                              OldChargedFallOffEndDist;                                 // 0x06AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Breacher");
		return ptr;
	}


	bool PassThroughDamage(class AActor* HitActor);
	void OnForceEndFire();
	void BreacherFireAmmunition();
	void ShotgunFireAmmunition();
	void LoadedFire(float ChargeTime);
	void RestoreUnchargedValues();
	void ApplyChargedValues();
	void DoBeginFire();
	void IncrementFlashCount();
	float GetCooldownTime();
	void STATIC_StartWeaponAnimByIndex(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int Index, bool bPlaySound);
	void StartLoadProjectileTimer();
	bool IsAltFireAnim();
	void StartCooldownTimer();
	void Tick(float DeltaTime);
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewUpgradeFlags);
};


// Class HawkenGame.R_DmgType_BubbleBeam
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_BubbleBeam : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_BubbleBeam");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Beam_Base
// 0x003C (0x0608 - 0x05CC)
class AR_Weap_Beam_Base : public AR_Weap_Base
{
public:
	class AR_Pawn*                                     OwnerPawn;                                                // 0x05CC(0x0004)
	float                                              UpdateTargetRateSeconds;                                  // 0x05D0(0x0004) (Const)
	class AActor*                                      TargetActor;                                              // 0x05D4(0x0004) (Net)
	unsigned long                                      bHoldingFire : 1;                                         // 0x05D8(0x0004)
	unsigned long                                      bWasFiring : 1;                                           // 0x05D8(0x0004)
	float                                              TargetUpdateTimer;                                        // 0x05DC(0x0004)
	float                                              KeepLockonDegrees[0x2];                                   // 0x05E0(0x0004)
	float                                              BeamRange[0x2];                                           // 0x05E8(0x0004)
	float                                              HeatPerSecond[0x2];                                       // 0x05F0(0x0004)
	float                                              AimHelpDist[0x2];                                         // 0x05F8(0x0004)
	class USoundCue*                                   EndFireSnd[0x2];                                          // 0x0600(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Beam_Base");
		return ptr;
	}


	void LastEndFireTime();
	void OnStopRefire();
	void StopFiringAnimation();
	void StartFireEnd();
	void StartFiringAnimation();
	bool TargetValidForMode(class AActor* NewTarget);
	bool CanAffectTarget(class AActor* Target);
	bool CheckLineOfSight(const struct FVector& StartTrace, const struct FVector& TargetLocation, class AActor* TraceTargetActor);
	bool CanIgnoreTargetForLineOfSightCheck(class AActor* BlockingActor);
	void OnAcquireTarget(class AActor* NewTarget, class AActor* LastTarget);
	void UpdateTarget();
	bool ShouldSearchForTarget();
	void UpdateBeamMode();
	void ResetTarget();
	void OnTargetChange(class AActor* NewTarget, class AActor* LastTarget);
	void ModeSwitch();
	void DoEndFire(bool bForceEnd);
	void DoBeginFire();
	float GetCooldownTime();
	bool IsFiring();
	void FireAmmunition();
	void DoFiringLogic(float DeltaTime);
	void Tick(float DeltaTime);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Weap_BubbleBeam
// 0x0000 (0x0608 - 0x0608)
class AR_Weap_BubbleBeam : public AR_Weap_Beam_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_BubbleBeam");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Cannon
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Cannon : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Cannon");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_CannonBall
// 0x0004 (0x05D0 - 0x05CC)
class AR_Weap_CannonBall : public AR_Weap_Base
{
public:
	float                                              LoadedHeatPerShot;                                        // 0x05CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_CannonBall");
		return ptr;
	}


	void STATIC_PlaySpecialWeaponFire(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int BarrelSwitch, bool bPlaySound);
	void STATIC_StopWeaponAnims(class USkeletalMeshComponent* WeapMesh);
	void STATIC_StartWeaponAnimByIndex(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int Index, bool bPlaySound);
	void OnForceEndFire();
	void LoadProjectile();
	void StartLoadProjectileTimer();
	void LoadedFire(float TimerCount);
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewUpgradeFlags);
};


// Class HawkenGame.R_DmgType_ChargeCannon
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_ChargeCannon : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_ChargeCannon");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_ChargeCannon
// 0x0098 (0x0664 - 0x05CC)
class AR_Weap_ChargeCannon : public AR_Weap_Base
{
public:
	float                                              zoomAltMode;                                              // 0x05CC(0x0004)
	int                                                ChargeLevel;                                              // 0x05D0(0x0004)
	float                                              TimeToCharge[0x4];                                        // 0x05D4(0x0004)
	float                                              HeatPerSecondCharge[0x4];                                 // 0x05E4(0x0004)
	float                                              InstantHitDamageCharge[0x10];                             // 0x05F4(0x0004)
	struct FChainDamage                                ChainDmg;                                                 // 0x0634(0x0030)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_ChargeCannon");
		return ptr;
	}


	float GetCooldownTime();
	void OnStopRefire();
	void DrawTempUI(class UCanvas* C);
	void ReleaseZoom();
	void OnForceEndFire();
	void STATIC_OnBeamSpawn(class UParticleSystemComponent* PSC, unsigned char InImpactFireMode);
	void LoadedFire(float TimerCount);
	void STATIC_StartWeaponAnimByIndex(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int Index, bool bPlaySound);
	void LoadProjectile();
	void SetChargeLevel(int NewChargeLevel);
	void StartLoadProjectileTimer();
	void DoChainLink();
	void StartChainDamage(class AActor* HitActor, int ShotChargeLevel);
	void ChainDamageTarget(class AActor* Target);
	class APawn* FindNextTargetPawn(const struct FVector& StartLocation, float Radius);
	bool HasAlreadyHitActor(class AActor* A);
	void ProcessInstantHitAdjusted(unsigned char FiringMode, const struct FImpactInfo& Impact, const struct FVector& StartLoc, int NumHits);
	void Tick(float DeltaTime);
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewUpgradeFlags);
};


// Class HawkenGame.R_DmgType_Detonator
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Detonator : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Detonator");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Detonator
// 0x0004 (0x026C - 0x0268)
class AR_Item_Detonator : public AR_Item_Base
{
public:
	class AR_Proj_Detonator*                           LastShot;                                                 // 0x0268(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Detonator");
		return ptr;
	}


	void Tick(float DeltaTime);
	bool IsDepleted();
	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
	bool CanActivate(class AR_Pawn* Activator, bool bSkipRoleCheck);
};


// Class HawkenGame.R_DmgType_Detonator_3_Slot
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Detonator_3_Slot : public UR_DmgType_Detonator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Detonator_3_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Detonator_3_slot
// 0x0000 (0x026C - 0x026C)
class AR_Item_Detonator_3_slot : public AR_Item_Detonator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Detonator_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Detonator_4_Slot
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Detonator_4_Slot : public UR_DmgType_Detonator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Detonator_4_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Detonator_4_slot
// 0x0000 (0x026C - 0x026C)
class AR_Item_Detonator_4_slot : public AR_Item_Detonator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Detonator_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_EMP
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_EMP : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_EMP");
		return ptr;
	}

};


// Class HawkenGame.R_Item_EMP
// 0x0008 (0x0270 - 0x0268)
class AR_Item_EMP : public AR_Item_Base
{
public:
	class UClass*                                      ProjectileClass;                                          // 0x0268(0x0004)
	float                                              MaxThrowMultiplier;                                       // 0x026C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_EMP");
		return ptr;
	}


	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
};


// Class HawkenGame.R_DmgType_EOC_Predator
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_EOC_Predator : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_EOC_Predator");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_EOC_Predator
// 0x0048 (0x0614 - 0x05CC)
class AR_Weap_EOC_Predator : public AR_Weap_Base
{
public:
	class AR_RepeaterExplosive*                        Mines[0x8];                                               // 0x05CC(0x0004)
	int                                                MinProjNum;                                               // 0x05EC(0x0004)
	int                                                MaxProjNum;                                               // 0x05F0(0x0004)
	float                                              ProjInterval;                                             // 0x05F4(0x0004)
	float                                              ProjectileLoadTime;                                       // 0x05F8(0x0004)
	int                                                NumProj;                                                  // 0x05FC(0x0004)
	int                                                NumProjFired;                                             // 0x0600(0x0004)
	int                                                NumExtraProjectilesLoaded;                                // 0x0604(0x0004)
	class USoundCue*                                   LoadingSound;                                             // 0x0608(0x0004) (Const)
	class USoundCue*                                   DetonateSnd;                                              // 0x060C(0x0004) (Const)
	class USoundCue*                                   DetonateFailSnd;                                          // 0x0610(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_EOC_Predator");
		return ptr;
	}


	void OnForceEndFire();
	void StartLoadProjectileTimer();
	void LoadProjectile();
	void FireAddProj();
	void LoadedFire(float TimerCount);
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
	void OnSpawnPredatorMine(class AR_RepeaterExplosive* NewMine);
	void ServerExplodeMines();
	void STATIC_StartWeaponAnimByIndex(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int Index, bool bPlaySound);
	void DetonateRefreshTimer();
	void BeginAltFire();
	void Destroyed();
};


// Class HawkenGame.R_DmgType_EOC_Predator_V2
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_EOC_Predator_V2 : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_EOC_Predator_V2");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_EOC_Predator_V2
// 0x0004 (0x0618 - 0x0614)
class AR_Weap_EOC_Predator_V2 : public AR_Weap_EOC_Predator
{
public:
	float                                              SetInterval;                                              // 0x0614(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_EOC_Predator_V2");
		return ptr;
	}


	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_ForceField
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_ForceField : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_ForceField");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Grenade
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Grenade : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Grenade");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Grenade
// 0x0008 (0x0270 - 0x0268)
class AR_Item_Grenade : public AR_Item_Base
{
public:
	float                                              MaxThrowMultiplier;                                       // 0x0268(0x0004)
	class AR_Proj_Grenade*                             LastShot;                                                 // 0x026C(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Grenade");
		return ptr;
	}


	void Tick(float DeltaTime);
	bool IsDepleted();
	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
	bool CanActivate(class AR_Pawn* Activator, bool bSkipRoleCheck);
};


// Class HawkenGame.R_DmgType_Grenade_3_Slot
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Grenade_3_Slot : public UR_DmgType_Grenade
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Grenade_3_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Grenade_3_slot
// 0x0000 (0x0270 - 0x0270)
class AR_Item_Grenade_3_slot : public AR_Item_Grenade
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Grenade_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Grenade_4_Slot
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Grenade_4_Slot : public UR_DmgType_Grenade
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Grenade_4_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Grenade_4_slot
// 0x0000 (0x0270 - 0x0270)
class AR_Item_Grenade_4_slot : public AR_Item_Grenade
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Grenade_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_GrenadeLauncher
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_GrenadeLauncher : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_GrenadeLauncher");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_GrenadeLauncher
// 0x0008 (0x05D4 - 0x05CC)
class AR_Weap_GrenadeLauncher : public AR_Weap_Base
{
public:
	class AR_Projectile*                               LastShot;                                                 // 0x05CC(0x0004) (Net)
	float                                              TimeSinceLastFire;                                        // 0x05D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_GrenadeLauncher");
		return ptr;
	}


	class AProjectile* ProjectileFire();
	void EndAltFire();
	void Tick(float DeltaTime);
	void ServerDetonateShot(class AR_Projectile* TheShot);
	void FireAmmunition();
	void TryDetonateShot(bool bFireButton);
	void BeginFire(unsigned char FireModeNum);
	void BeginAltFire();
};


// Class HawkenGame.R_DmgType_GrenadeLauncher_V2
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_GrenadeLauncher_V2 : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_GrenadeLauncher_V2");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_GrenadeLauncher_V2
// 0x0000 (0x05D4 - 0x05D4)
class AR_Weap_GrenadeLauncher_V2 : public AR_Weap_GrenadeLauncher
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_GrenadeLauncher_V2");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_GrenadeLauncher_V3
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_GrenadeLauncher_V3 : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_GrenadeLauncher_V3");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_GrenadeLauncher_V3
// 0x000C (0x05E0 - 0x05D4)
class AR_Weap_GrenadeLauncher_V3 : public AR_Weap_GrenadeLauncher
{
public:
	int                                                NumProjPerShot;                                           // 0x05D4(0x0004)
	int                                                shotsFired;                                               // 0x05D8(0x0004)
	float                                              SetInterval;                                              // 0x05DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_GrenadeLauncher_V3");
		return ptr;
	}


	void MultiFire();
	void FireAmmunition();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
	void BeginAltFire();
};


// Class HawkenGame.R_DmgType_GuidedMissile
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_GuidedMissile : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_GuidedMissile");
		return ptr;
	}

};


// Class HawkenGame.R_Item_GuidedMissile
// 0x0004 (0x026C - 0x0268)
class AR_Item_GuidedMissile : public AR_Item_Base
{
public:
	class AR_Proj_GuidedMissile*                       LastShot;                                                 // 0x0268(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_GuidedMissile");
		return ptr;
	}


	void Tick(float DeltaTime);
	void GuideMissile(const struct FRotator& NewRotation);
	bool CalcCamera(float fDeltaTime, struct FVector* out_Location, struct FRotator* out_Rotation, float* out_FOV);
	bool OverridesCamera();
	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
};


// Class HawkenGame.R_DmgType_H6_Launcher
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_H6_Launcher : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_H6_Launcher");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_H6_Launcher
// 0x0000 (0x05CC - 0x05CC)
class AR_Weap_H6_Launcher : public AR_Weap_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_H6_Launcher");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_HawkinsRPR
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_HawkinsRPR : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_HawkinsRPR");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_HawkinsRPR
// 0x0008 (0x05D4 - 0x05CC)
class AR_Weap_HawkinsRPR : public AR_Weap_Base
{
public:
	class USoundCue*                                   ClipSound;                                                // 0x05CC(0x0004)
	class USoundCue*                                   ReloadSound;                                              // 0x05D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_HawkinsRPR");
		return ptr;
	}


	void STATIC_PlaySpecialWeaponFire(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int BarrelSwitch, bool bPlaySound);
	void FireAmmunition();
};


// Class HawkenGame.R_DmgType_HawkinsRPR_Clone
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_HawkinsRPR_Clone : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_HawkinsRPR_Clone");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_HawkinsRPR_Clone
// 0x0008 (0x05D4 - 0x05CC)
class AR_Weap_HawkinsRPR_Clone : public AR_Weap_Base
{
public:
	class USoundCue*                                   ClipSound;                                                // 0x05CC(0x0004)
	class USoundCue*                                   ReloadSound;                                              // 0x05D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_HawkinsRPR_Clone");
		return ptr;
	}


	void STATIC_PlaySpecialWeaponFire(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int BarrelSwitch, bool bPlaySound);
	void FireAmmunition();
};


// Class HawkenGame.R_DmgType_HeatLauncher
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_HeatLauncher : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_HeatLauncher");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_HeatLauncher
// 0x004C (0x0618 - 0x05CC)
class AR_Weap_HeatLauncher : public AR_Weap_Base
{
public:
	float                                              RefireRate_Charged;                                       // 0x05CC(0x0004)
	float                                              HeatStealPerSecond;                                       // 0x05D0(0x0004)
	float                                              HeatStealRadius;                                          // 0x05D4(0x0004)
	float                                              HeatStealRate;                                            // 0x05D8(0x0004)
	float                                              HeatStealConversionRate_AtMin;                            // 0x05DC(0x0004)
	float                                              HeatStealConversionRate_AtMax;                            // 0x05E0(0x0004)
	float                                              HeatStealStopValue;                                       // 0x05E4(0x0004)
	int                                                MaxPawnsToStealFrom;                                      // 0x05E8(0x0004)
	unsigned long                                      bStealHeatFromEnemies : 1;                                // 0x05EC(0x0004)
	unsigned long                                      bStealHeatFromFriendlies : 1;                             // 0x05EC(0x0004)
	unsigned long                                      bDisableGatherOnOverheat : 1;                             // 0x05EC(0x0004)
	unsigned long                                      bAlwaysGather : 1;                                        // 0x05EC(0x0004) (Const)
	float                                              MinHeatForShot;                                           // 0x05F0(0x0004)
	float                                              MaxHeatForShot;                                           // 0x05F4(0x0004)
	TArray<float>                                      PawnCountConversionMultiplier;                            // 0x05F8(0x000C) (Const, NeedCtorLink)
	float                                              HeatStealRateMin;                                         // 0x0604(0x0004) (Const)
	float                                              HeatStealRadiusSqrd;                                      // 0x0608(0x0004) (Transient)
	float                                              HeatStealTimeAccum;                                       // 0x060C(0x0004) (Transient)
	float                                              CurrentHeatUsed;                                          // 0x0610(0x0004) (Transient)
	float                                              ServerHeatRequirementPercent;                             // 0x0614(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_HeatLauncher");
		return ptr;
	}


	void BeginAltFire();
	void HackFailedFiringTimer(bool ForceEnd);
	void OnServerFireClientMisfire();
	void FireAmmunition();
	bool CanFireProjectile(float heatUsed);
	float GetHeatUsedForProjectile();
	bool GetShouldShowEffect();
	bool GetIsInGatherMode();
	void DoModeSwitch(int NewWeaponMode);
	void OnOverheat();
	float StealHeat(class AR_Pawn* RP, float DeltaTime);
	float GetInaccurateHeatPerSecondTakenFromPlayers(int NumPlayerStolenFrom);
	float AbsorbStolenHeat(float totalAmount, int numPlayersStolenFrom);
	float GetFinalAmountToAbsorb(float startingAmount, int numPlayersStolenFrom, class AR_Pawn* RPawn);
	bool GetShouldStealHeat(class AR_Pawn* RP);
	void UpdateHeatGathering(float DeltaTime);
	void PostBeginPlay();
	void Tick(float DeltaTime);
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewUpgradeFlags);
	class UClass* GetProjectileClass();
};


// Class HawkenGame.R_DmgType_HeavyVulcan
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_HeavyVulcan : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_HeavyVulcan");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_HeavyVulcan
// 0x000C (0x05D8 - 0x05CC)
class AR_Weap_HeavyVulcan : public AR_Weap_Base
{
public:
	class USoundCue*                                   StartFireSnd;                                             // 0x05CC(0x0004)
	class USoundCue*                                   EndFireSnd;                                               // 0x05D0(0x0004)
	class USoundCue*                                   CancelFireSnd;                                            // 0x05D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_HeavyVulcan");
		return ptr;
	}


	void Tick(float DeltaTime);
	void FireAmmunition();
	void StopFiringAnimation();
	void StartFireEnd();
	void StartFiringAnimation();
	void LastEndFireTime();
	void LastStartFireTime();
};


// Class HawkenGame.R_Weap_HomingMissile
// 0x0004 (0x0614 - 0x0610)
class AR_Weap_HomingMissile : public AR_Weap_Homing_Base
{
public:
	float                                              SetInterval;                                              // 0x0610(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_HomingMissile");
		return ptr;
	}


	void IncrementFlashCount();
	class AProjectile* ProjectileFire();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
	void EndFire(unsigned char FireModeNum);
	void BeginFire(unsigned char FireModeNum);
};


// Class HawkenGame.R_DmgType_HomingMissile_V2
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_HomingMissile_V2 : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_HomingMissile_V2");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_HomingMissile_V2
// 0x0004 (0x0618 - 0x0614)
class AR_Weap_HomingMissile_V2 : public AR_Weap_HomingMissile
{
public:
	class USoundCue*                                   FiringSound;                                              // 0x0614(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_HomingMissile_V2");
		return ptr;
	}


	class AProjectile* ProjectileFire();
};


// Class HawkenGame.R_DmgType_HomingMissile_V3
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_HomingMissile_V3 : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_HomingMissile_V3");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_HomingMissile_V3
// 0x0000 (0x0614 - 0x0614)
class AR_Weap_HomingMissile_V3 : public AR_Weap_HomingMissile
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_HomingMissile_V3");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_KE_SABOT
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_KE_SABOT : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_KE_SABOT");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_KE_SABOT
// 0x0014 (0x05E0 - 0x05CC)
class AR_Weap_KE_SABOT : public AR_Weap_Base
{
public:
	float                                              UnZoomSpread;                                             // 0x05CC(0x0004)
	float                                              ZoomSpread;                                               // 0x05D0(0x0004)
	float                                              TimeForZoomSpread;                                        // 0x05D4(0x0004)
	float                                              UnzoomDamageScale;                                        // 0x05D8(0x0004)
	unsigned long                                      newZoomMode : 1;                                          // 0x05DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_KE_SABOT");
		return ptr;
	}


	void SetZoomSpread();
	void OnSetZoom(bool ZoomMode);
	float GetDamageMultiplierForZoom();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_KE_SABOT_V2
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_KE_SABOT_V2 : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_KE_SABOT_V2");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Sniper_V2
// 0x0020 (0x05EC - 0x05CC)
class AR_Weap_Sniper_V2 : public AR_Weap_Base
{
public:
	float                                              UnZoomSpread;                                             // 0x05CC(0x0004)
	float                                              ZoomSpread;                                               // 0x05D0(0x0004)
	float                                              TimeForZoomSpread;                                        // 0x05D4(0x0004)
	float                                              UnzoomDamageScale;                                        // 0x05D8(0x0004)
	unsigned long                                      newZoomMode : 1;                                          // 0x05DC(0x0004)
	float                                              zoomAltMode;                                              // 0x05E0(0x0004)
	float                                              ZoomedTargetFOV1;                                         // 0x05E4(0x0004)
	float                                              ZoomedTargetFOV2;                                         // 0x05E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Sniper_V2");
		return ptr;
	}


	void SetZoomSpread();
	void OnSetZoom(bool ZoomMode);
	float GetDamageMultiplierForZoom();
	void FireAmmunition();
	void BeginAltFire();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Weap_KE_SABOT_V2
// 0x0000 (0x05EC - 0x05EC)
class AR_Weap_KE_SABOT_V2 : public AR_Weap_Sniper_V2
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_KE_SABOT_V2");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Machine
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Machine : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Machine");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Machine
// 0x000C (0x05D8 - 0x05CC)
class AR_Weap_Machine : public AR_Weap_Base
{
public:
	class USoundCue*                                   StartFireSnd;                                             // 0x05CC(0x0004)
	class USoundCue*                                   EndFireSnd;                                               // 0x05D0(0x0004)
	class USoundCue*                                   CancelFireSnd;                                            // 0x05D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Machine");
		return ptr;
	}


	void FireAmmunition();
	void StopFiringAnimation();
	void StartFireEnd();
	void StartFiringAnimation();
	void LastEndFireTime();
	void LastStartFireTime();
};


// Class HawkenGame.R_DmgType_Machine_XTL
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Machine_XTL : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Machine_XTL");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Machine_XT_Left
// 0x0000 (0x05D8 - 0x05D8)
class AR_Weap_Machine_XT_Left : public AR_Weap_Machine
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Machine_XT_Left");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Machine_XTR
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Machine_XTR : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Machine_XTR");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Machine_XT_Right
// 0x0000 (0x05D8 - 0x05D8)
class AR_Weap_Machine_XT_Right : public AR_Weap_Machine
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Machine_XT_Right");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_MiniShotgun
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_MiniShotgun : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_MiniShotgun");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_MiniShotgun
// 0x0000 (0x0668 - 0x0668)
class AR_Weap_MiniShotgun : public AR_Weap_Shotgun
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_MiniShotgun");
		return ptr;
	}


	void FireAmmunition();
	void Tick(float DeltaTime);
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_Missile
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Missile : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Missile");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Missile_V2
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Missile_V2 : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Missile_V2");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_MissileLauncher_V2
// 0x0000 (0x05CC - 0x05CC)
class AR_Weap_MissileLauncher_V2 : public AR_Weap_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_MissileLauncher_V2");
		return ptr;
	}


	void FireAmmunition();
};


// Class HawkenGame.R_DmgType_Missile_V3
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Missile_V3 : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Missile_V3");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_MissileLauncher_V3
// 0x000C (0x05D8 - 0x05CC)
class AR_Weap_MissileLauncher_V3 : public AR_Weap_Base
{
public:
	int                                                NumProjPerShot;                                           // 0x05CC(0x0004)
	int                                                shotsFired;                                               // 0x05D0(0x0004)
	float                                              SetInterval;                                              // 0x05D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_MissileLauncher_V3");
		return ptr;
	}


	void MultiFire();
	void FireAmmunition();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_N_DOW
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_N_DOW : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_N_DOW");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_N_DOW
// 0x0008 (0x05D4 - 0x05CC)
class AR_Weap_N_DOW : public AR_Weap_Base
{
public:
	int                                                NumProjPerShot;                                           // 0x05CC(0x0004)
	class UClass*                                      MainProjectile;                                           // 0x05D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_N_DOW");
		return ptr;
	}


	class UClass* GetProjectileClass();
	class AProjectile* ProjectileFire();
	void EndAltFire();
	void Tick(float DeltaTime);
	void DoBeginFire();
	void BeginFire(unsigned char FireModeNum);
	void IncrementFlashCount();
	void FireAmmunition();
	void BeginAltFire();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_N_DOW_Brawler_XT
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_N_DOW_Brawler_XT : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_N_DOW_Brawler_XT");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_N_DOW_Brawler_XT
// 0x0000 (0x05D4 - 0x05D4)
class AR_Weap_N_DOW_Brawler_XT : public AR_Weap_N_DOW
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_N_DOW_Brawler_XT");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Pistol_Burst
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Pistol_Burst : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Pistol_Burst");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Pistol_Rapid
// 0x0000 (0x05CC - 0x05CC)
class AR_Weap_Pistol_Rapid : public AR_Weap_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Pistol_Rapid");
		return ptr;
	}


	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Weap_Pistol_Burst
// 0x000C (0x05D8 - 0x05CC)
class AR_Weap_Pistol_Burst : public AR_Weap_Pistol_Rapid
{
public:
	int                                                NumProjPerShot;                                           // 0x05CC(0x0004)
	int                                                shotsFired;                                               // 0x05D0(0x0004)
	float                                              SetInterval;                                              // 0x05D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Pistol_Burst");
		return ptr;
	}


	void BurstFire();
	void FireAmmunition();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_Pistol_Mag
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Pistol_Mag : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Pistol_Mag");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Pistol_Mag
// 0x0000 (0x05CC - 0x05CC)
class AR_Weap_Pistol_Mag : public AR_Weap_Pistol_Rapid
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Pistol_Mag");
		return ptr;
	}


	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_Pistol_Rapid
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Pistol_Rapid : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Pistol_Rapid");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_PostDeathExplosion
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_PostDeathExplosion : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_PostDeathExplosion");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_DetonationDevice
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_DetonationDevice : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_DetonationDevice");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_DmgType_Radar
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Radar : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Radar");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_RepairTorch
// 0x0048 (0x0650 - 0x0608)
class AR_Weap_RepairTorch : public AR_Weap_Beam_Base
{
public:
	float                                              TotalDamage;                                              // 0x0608(0x0004)
	float                                              TotalHeal;                                                // 0x060C(0x0004)
	float                                              TotalSelfHeal;                                            // 0x0610(0x0004)
	float                                              totalXP;                                                  // 0x0614(0x0004)
	unsigned long                                      bAmplified : 1;                                           // 0x0618(0x0004)
	unsigned long                                      bSelfHealNoTarget : 1;                                    // 0x0618(0x0004)
	class AR_Ability_Amplification*                    AmplificationAbility;                                     // 0x061C(0x0004)
	float                                              CombatDamageDuration;                                     // 0x0620(0x0004)
	int                                                XPHealIncrement;                                          // 0x0624(0x0004)
	int                                                HealIncrement;                                            // 0x0628(0x0004)
	float                                              HealXPPercent;                                            // 0x062C(0x0004)
	float                                              SelfHealPerSecond;                                        // 0x0630(0x0004)
	float                                              CombatSelfHealPerSecond;                                  // 0x0634(0x0004)
	float                                              CombatHealPerSecond;                                      // 0x0638(0x0004)
	float                                              HealPerSecond;                                            // 0x063C(0x0004)
	float                                              DamagePerSecond;                                          // 0x0640(0x0004)
	int                                                DamageIncrement;                                          // 0x0644(0x0004)
	int                                                VampireIncrement;                                         // 0x0648(0x0004)
	float                                              DamageVampirePercent;                                     // 0x064C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_RepairTorch");
		return ptr;
	}


	void OnTargetChange(class AActor* NewTarget, class AActor* LastTarget);
	bool TargetValidForMode(class AActor* NewTarget);
	bool CanIgnoreTargetForLineOfSightCheck(class AActor* BlockingActor);
	bool ShouldSearchForTarget();
	bool DoHealLogic(float DeltaTime);
	bool DoSelfHealLogic(float DeltaTime);
	void DoDamageLogic(float DeltaTime);
	float GetDamageRateMultiplier();
	float GetHealRateMultiplier();
	void DoFiringLogic(float DeltaTime);
	bool CanHealActor(class AActor* Target);
	bool CanAffectTarget(class AActor* Target);
	void UpdateBeamMode();
	void Tick(float DeltaTime);
	void DoModeSwitch(int NewWeaponMode);
	void BeginAltFire();
	void ResetTarget();
	void PostBeginPlay();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_RepairTorch_V2
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_RepairTorch_V2 : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_RepairTorch_V2");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_RepairTorch_V2
// 0x0000 (0x0650 - 0x0650)
class AR_Weap_RepairTorch_V2 : public AR_Weap_RepairTorch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_RepairTorch_V2");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Repeater
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Repeater : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Repeater");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Repeater
// 0x0034 (0x0600 - 0x05CC)
class AR_Weap_Repeater : public AR_Weap_Base
{
public:
	int                                                MinProjNum;                                               // 0x05CC(0x0004)
	int                                                MaxProjNum;                                               // 0x05D0(0x0004)
	float                                              ProjInterval;                                             // 0x05D4(0x0004)
	float                                              ProjectileLoadTime;                                       // 0x05D8(0x0004)
	int                                                NumProj;                                                  // 0x05DC(0x0004)
	int                                                NumProjFired;                                             // 0x05E0(0x0004)
	int                                                NumExtraProjectilesLoaded;                                // 0x05E4(0x0004)
	class USoundCue*                                   ThreeCansDownSnd;                                         // 0x05E8(0x0004)
	class USoundCue*                                   ThreeCansUpSnd;                                           // 0x05EC(0x0004)
	class USoundCue*                                   CanDownSnd;                                               // 0x05F0(0x0004)
	class USoundCue*                                   CanUpSnd1;                                                // 0x05F4(0x0004)
	class USoundCue*                                   CanUpSnd2;                                                // 0x05F8(0x0004)
	class USoundCue*                                   CanUpSnd3;                                                // 0x05FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Repeater");
		return ptr;
	}


	void OnForceEndFire();
	void StartLoadProjectileTimer();
	void STATIC_CansUpAnim(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int Index, bool bPlaySound);
	void STATIC_CansDownAnim(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int Index, bool bPlaySound);
	void STATIC_StartWeaponAnimByIndex(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int Index, bool bPlaySound);
	void LoadProjectile();
	void FireAddProj();
	void LoadedFire(float TimerCount);
};


// Class HawkenGame.R_DmgType_RF35_FLAK
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_RF35_FLAK : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_RF35_FLAK");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_RF35_FLAK
// 0x0000 (0x0668 - 0x0668)
class AR_Weap_RF35_FLAK : public AR_Weap_Shotgun
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_RF35_FLAK");
		return ptr;
	}


	void FireAmmunition();
	void Tick(float DeltaTime);
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_RotaryCannon
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_RotaryCannon : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_RotaryCannon");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_RotaryCannon
// 0x0054 (0x0620 - 0x05CC)
class AR_Weap_RotaryCannon : public AR_Weap_Base
{
public:
	class USoundCue*                                   StartFireSnd;                                             // 0x05CC(0x0004)
	class USoundCue*                                   EndFireSnd;                                               // 0x05D0(0x0004)
	class USoundCue*                                   CancelFireSnd;                                            // 0x05D4(0x0004)
	class USoundCue*                                   WeaponFireSnd_Fast;                                       // 0x05D8(0x0004)
	float                                              RefireRateIncreasePerShot;                                // 0x05DC(0x0004)
	float                                              RefireRateMaxSpeed;                                       // 0x05E0(0x0004)
	float                                              RefireRateMinForShooting;                                 // 0x05E4(0x0004)
	float                                              RefireRateDecayPerSecond;                                 // 0x05E8(0x0004)
	float                                              DecayStartTime;                                           // 0x05EC(0x0004)
	float                                              RefireRateLinearIncreasePerSecond;                        // 0x05F0(0x0004)
	float                                              AnimationScaleAtStartSpeed;                               // 0x05F4(0x0004)
	float                                              AnimationScaleAtMaxSpeed;                                 // 0x05F8(0x0004)
	float                                              MaxAnimationScaleForRep;                                  // 0x05FC(0x0004) (Const)
	float                                              StopSpinTime;                                             // 0x0600(0x0004) (Const)
	float                                              RefireRateLinearUpdateRate;                               // 0x0604(0x0004) (Const)
	unsigned long                                      bUseLinearRateIncrease : 1;                               // 0x0608(0x0004)
	unsigned long                                      bCurrentlySpinning : 1;                                   // 0x0608(0x0004) (Transient)
	unsigned long                                      bCurrentlyFiring : 1;                                     // 0x0608(0x0004) (Transient)
	float                                              RefireRateRange;                                          // 0x060C(0x0004)
	float                                              LastFireTime;                                             // 0x0610(0x0004) (Transient)
	float                                              currentFireInterval;                                      // 0x0614(0x0004) (Transient)
	float                                              RefireRateStartVal;                                       // 0x0618(0x0004) (Transient)
	float                                              FastFireSoundThreshold;                                   // 0x061C(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_RotaryCannon");
		return ptr;
	}


	void OnAbilityActivated();
	void OnOverheat();
	float GetAnimationSpeedForFireInterval(float interval);
	void SafeSetNewFireInterval(float NewInterval);
	void UpdateAnimationScale(float ForceScale);
	bool IsFireRateAtDefault();
	void UpdateWeaponFiringSound();
	void UpdateLoopingSoundRate();
	float GetNormalizedRotationRate();
	void SpinDownTimer();
	void DoFireRateReduction(float DeltaTime);
	void Tick(float DeltaTime);
	void FireAmmunition();
	void StopFiringAnimation();
	void StartFireEnd();
	void StartFiringAnimation();
	void DoEndFire(bool bForceEnd);
	void DoBeginFire();
	void LinearRefireRateIncrease(float DeltaTime);
	void ResetFireInterval();
	void IncreaseFireInterval(float incVal);
	void DecreaseFireInterval(float decVal);
	void LastEndFireTime();
	void LastStartFireTime();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewUpgradeFlags);
};


// Class HawkenGame.R_DmgType_RotaryCannon_Alternate
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_RotaryCannon_Alternate : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_RotaryCannon_Alternate");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_RotaryCannon_Alternate
// 0x0000 (0x0620 - 0x0620)
class AR_Weap_RotaryCannon_Alternate : public AR_Weap_RotaryCannon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_RotaryCannon_Alternate");
		return ptr;
	}


	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewUpgradeFlags);
};


// Class HawkenGame.R_DmgType_RotaryCannon_Prestige
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_RotaryCannon_Prestige : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_RotaryCannon_Prestige");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_RotaryCannon_Prestige
// 0x0000 (0x0620 - 0x0620)
class AR_Weap_RotaryCannon_Prestige : public AR_Weap_RotaryCannon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_RotaryCannon_Prestige");
		return ptr;
	}


	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewUpgradeFlags);
};


// Class HawkenGame.R_DmgType_RotaryGrenade
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_RotaryGrenade : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_RotaryGrenade");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_RotaryGrenade
// 0x0000 (0x05CC - 0x05CC)
class AR_Weap_RotaryGrenade : public AR_Weap_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_RotaryGrenade");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Seeker
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Seeker : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Seeker");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Seeker
// 0x0008 (0x0618 - 0x0610)
class AR_Weap_Seeker : public AR_Weap_Homing_Base
{
public:
	float                                              SpreadLocked;                                             // 0x0610(0x0004)
	float                                              SpreadUnLocked;                                           // 0x0614(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Seeker");
		return ptr;
	}


	void IncrementFlashCount();
	class AProjectile* ProjectileFire();
};


// Class HawkenGame.R_DmgType_Seeker_Berserker_XT
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Seeker_Berserker_XT : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Seeker_Berserker_XT");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Seeker_Berserker_XT
// 0x0000 (0x0618 - 0x0618)
class AR_Weap_Seeker_Berserker_XT : public AR_Weap_Seeker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Seeker_Berserker_XT");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Shield
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Shield : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Shield");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_ShieldGun
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_ShieldGun : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_ShieldGun");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_ShieldTool
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_ShieldTool : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_ShieldTool");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_ShieldTool
// 0x0000 (0x05CC - 0x05CC)
class AR_Weap_ShieldTool : public AR_Weap_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_ShieldTool");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Shotgun
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Shotgun : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Shotgun");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Shrapnel
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Shrapnel : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Shrapnel");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Siege_Rocket
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Siege_Rocket : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Siege_Rocket");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_SiegeRocketLauncher
// 0x0000 (0x05CC - 0x05CC)
class AR_Weap_SiegeRocketLauncher : public AR_Weap_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_SiegeRocketLauncher");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_SlugRifle
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_SlugRifle : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_SlugRifle");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_SlugRifle
// 0x0014 (0x05E0 - 0x05CC)
class AR_Weap_SlugRifle : public AR_Weap_Base
{
public:
	float                                              ZoomSpread;                                               // 0x05CC(0x0004)
	float                                              UnZoomSpread;                                             // 0x05D0(0x0004)
	float                                              TimeForZoomSpread;                                        // 0x05D4(0x0004)
	float                                              UnzoomDamageScale;                                        // 0x05D8(0x0004)
	unsigned long                                      newZoomMode : 1;                                          // 0x05DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_SlugRifle");
		return ptr;
	}


	void SetZoomSpread();
	void OnSetZoom(bool ZoomMode);
	float GetDamageMultiplierForZoom();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_SMG
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_SMG : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_SMG");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_SMG
// 0x000C (0x05D8 - 0x05CC)
class AR_Weap_SMG : public AR_Weap_Base
{
public:
	class USoundCue*                                   StartFireSnd;                                             // 0x05CC(0x0004)
	class USoundCue*                                   EndFireSnd;                                               // 0x05D0(0x0004)
	class USoundCue*                                   CancelFireSnd;                                            // 0x05D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_SMG");
		return ptr;
	}


	void StopFiringAnimation();
	void StartFireEnd();
	void StartFiringAnimation();
	void LastEndFireTime();
	void LastStartFireTime();
};


// Class HawkenGame.R_DmgType_Sniper
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Sniper : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Sniper");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Sniper
// 0x0014 (0x05E0 - 0x05CC)
class AR_Weap_Sniper : public AR_Weap_Base
{
public:
	float                                              UnZoomSpread;                                             // 0x05CC(0x0004)
	float                                              ZoomSpread;                                               // 0x05D0(0x0004)
	float                                              TimeForZoomSpread;                                        // 0x05D4(0x0004)
	float                                              UnzoomDamageScale;                                        // 0x05D8(0x0004)
	unsigned long                                      newZoomMode : 1;                                          // 0x05DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Sniper");
		return ptr;
	}


	void SetZoomSpread();
	void OnSetZoom(bool ZoomMode);
	float GetDamageMultiplierForZoom();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_Sniper_V2
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Sniper_V2 : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Sniper_V2");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_StickyBomb
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_StickyBomb : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_StickyBomb");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Suppressor
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Suppressor : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Suppressor");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Suppressor
// 0x0000 (0x05CC - 0x05CC)
class AR_Weap_Suppressor : public AR_Weap_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Suppressor");
		return ptr;
	}


	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_Susanoo
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Susanoo : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Susanoo");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Susanoo
// 0x0000 (0x05CC - 0x05CC)
class AR_Weap_Susanoo : public AR_Weap_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Susanoo");
		return ptr;
	}


	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_T32_FLAK
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_T32_FLAK : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_T32_FLAK");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_T32_FLAK
// 0x00E0 (0x06AC - 0x05CC)
class AR_Weap_T32_FLAK : public AR_Weap_Base
{
public:
	int                                                MinProjPerShot;                                           // 0x05CC(0x0004)
	int                                                MaxProjPerShot;                                           // 0x05D0(0x0004)
	int                                                ProjPerLoad;                                              // 0x05D4(0x0004)
	float                                              ProjLoadTime;                                             // 0x05D8(0x0004)
	int                                                CurrentLoadStage;                                         // 0x05DC(0x0004)
	float                                              SpreadReductionPerSecond;                                 // 0x05E0(0x0004)
	int                                                CurrentFlashIdx;                                          // 0x05E4(0x0004)
	struct FVector                                     ImpactLocations[0xF];                                     // 0x05E8(0x000C)
	class USoundCue*                                   ChargeStageSnd[0x3];                                      // 0x069C(0x0004)
	class USoundCue*                                   ChargeStartSnd;                                           // 0x06A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_T32_FLAK");
		return ptr;
	}


	void OnForceEndFire();
	void LoadProjectileAnim();
	void StartLoadProjectileTimer();
	void STATIC_ReleaseAnims(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int Index);
	void STATIC_ChargeAnim(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int Index, bool bPlaySound);
	void STATIC_StartWeaponAnimByIndex(class USkeletalMeshComponent* WeapMesh, class AR_Weap_Base* Weap, int Index, bool bPlaySound);
	void ShotgunFire(int shotIdx);
	void SetShotgunFlashLocation(int I, const struct FVector& HitLocation);
	void FireAmmunitionProj(int NumProjPerShot);
	void FireAmmunition();
	void LoadedFire(float TimerCount);
	void Tick(float DeltaTime);
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_DmgType_T32_FLAK_Brawler_XT
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_T32_FLAK_Brawler_XT : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_T32_FLAK_Brawler_XT");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_T32_FLAK_Brawler_XT
// 0x0000 (0x06AC - 0x06AC)
class AR_Weap_T32_FLAK_Brawler_XT : public AR_Weap_T32_FLAK
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_T32_FLAK_Brawler_XT");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_TriSeeker
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_TriSeeker : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_TriSeeker");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Turret_Base
// 0x0020 (0x0288 - 0x0268)
class AR_Item_Turret_Base : public AR_Item_Base
{
public:
	int                                                MaxActiveTurrets;                                         // 0x0268(0x0004)
	int                                                MaxActiveTurretsAI;                                       // 0x026C(0x0004)
	TEnumAsByte<ETurretType>                           TurretType;                                               // 0x0270(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0271(0x0003) MISSED OFFSET
	class UClass*                                      TurretClass;                                              // 0x0274(0x0004)
	float                                              TurretScale;                                              // 0x0278(0x0004)
	float                                              DeployDist;                                               // 0x027C(0x0004)
	class UClass*                                      ProjectileClassOverride;                                  // 0x0280(0x0004)
	class UClass*                                      MachineGunDamageTypeOverride;                             // 0x0284(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Turret_Base");
		return ptr;
	}


	void InitForAI(class AHawkenAi_ControllerBase* HawkenAI);
	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
};


// Class HawkenGame.R_Item_Turret_Homing
// 0x0000 (0x0288 - 0x0288)
class AR_Item_Turret_Homing : public AR_Item_Turret_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Turret_Homing");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Turret_Homing_Battleship
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Turret_Homing_Battleship : public UR_DmgType_Turret_Homing
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Turret_Homing_Battleship");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Turret_MG
// 0x0000 (0x0288 - 0x0288)
class AR_Item_Turret_MG : public AR_Item_Turret_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Turret_MG");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Turret_Machine_3_Slot
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Turret_Machine_3_Slot : public UR_DmgType_Turret_Machine
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Turret_Machine_3_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Turret_MG_3_slot
// 0x0000 (0x0288 - 0x0288)
class AR_Item_Turret_MG_3_slot : public AR_Item_Turret_MG
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Turret_MG_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Turret_Machine_4_Slot
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Turret_Machine_4_Slot : public UR_DmgType_Turret_Machine
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Turret_Machine_4_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Turret_MG_4_slot
// 0x0000 (0x0288 - 0x0288)
class AR_Item_Turret_MG_4_slot : public AR_Item_Turret_MG
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Turret_MG_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Turret_Machine_Battleship
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Turret_Machine_Battleship : public UR_DmgType_Turret_Machine
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Turret_Machine_Battleship");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Turret_Rocket
// 0x0000 (0x0288 - 0x0288)
class AR_Item_Turret_Rocket : public AR_Item_Turret_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Turret_Rocket");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Turret_Rocket_3_Slot
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Turret_Rocket_3_Slot : public UR_DmgType_Turret_Rocket
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Turret_Rocket_3_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Turret_Rocket_3_Slot
// 0x0000 (0x0288 - 0x0288)
class AR_Item_Turret_Rocket_3_Slot : public AR_Item_Turret_Rocket
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Turret_Rocket_3_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Turret_Rocket_4_Slot
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Turret_Rocket_4_Slot : public UR_DmgType_Turret_Rocket
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Turret_Rocket_4_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Turret_Rocket_4_Slot
// 0x0000 (0x0288 - 0x0288)
class AR_Item_Turret_Rocket_4_Slot : public AR_Item_Turret_Rocket
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Turret_Rocket_4_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_Turret_Rocket_Battleship
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_Turret_Rocket_Battleship : public UR_DmgType_Turret_Rocket
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_Turret_Rocket_Battleship");
		return ptr;
	}

};


// Class HawkenGame.R_DmgType_VampGun
// 0x0000 (0x00BC - 0x00BC)
class UR_DmgType_VampGun : public UR_DamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_DmgType_VampGun");
		return ptr;
	}

};


// Class HawkenGame.R_Drone
// 0x0008 (0x01DC - 0x01D4)
class AR_Drone : public AActor
{
public:
	class UStaticMeshComponent*                        DroneMesh;                                                // 0x01D4(0x0004) (Edit, ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           TheLightEnvironment;                                      // 0x01D8(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Drone");
		return ptr;
	}

};


// Class HawkenGame.R_EnergyPickup
// 0x0000 (0x02B0 - 0x02B0)
class AR_EnergyPickup : public AR_Pickup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_EnergyPickup");
		return ptr;
	}


	void PostBeginPlay();
};


// Class HawkenGame.R_Explore
// 0x0000 (0x05A4 - 0x05A4)
class AR_Explore : public AR_Deathmatch
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Explore");
		return ptr;
	}


	bool STATIC_IsOnlineGame();
};


// Class HawkenGame.R_SeqEvent_PlayIntro
// 0x0000 (0x0114 - 0x0114)
class UR_SeqEvent_PlayIntro : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SeqEvent_PlayIntro");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	void Activated();
};


// Class HawkenGame.R_EULADialog
// 0x0054 (0x01F4 - 0x01A0)
class UR_EULADialog : public UR_Dialog
{
public:
	struct FString                                     Email;                                                    // 0x01A0(0x000C) (NeedCtorLink)
	struct FString                                     UI_DialogTitle;                                           // 0x01AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ButtonAccept;                                          // 0x01B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ButtonCancel;                                          // 0x01C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FScriptDelegate                             __OnEULADialogClosed__Delegate;                           // 0x01D0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleEULADialogAcceptDelegate__Delegate;               // 0x01DC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleEULADialogDeclineDelegate__Delegate;              // 0x01E8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_EULADialog");
		return ptr;
	}


	void UnRegisterDelegates();
	void RegisterDelegates();
	void SetDelegate_HandleEULADialogDecline(const struct FScriptDelegate& Delegated);
	void HandleEULADialogDecline();
	void HandleEULADialogDeclineDelegate();
	void SetDelegate_HandleEULADialogAccept(const struct FScriptDelegate& Delegated);
	void HandleEULADialogAccept();
	void HandleEULADialogAcceptDelegate();
	class UGFxObject* ShowEULADialog(TArray<struct FString> LocalizationArray);
	void OnEULADialogClosed(int InDialogId, bool bCancelled);
	class UGFxObject* InternalShowDialog();
};


// Class HawkenGame.R_HUD_Explore
// 0x0000 (0x1014 - 0x1014)
class AR_HUD_Explore : public AR_HUD
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_HUD_Explore");
		return ptr;
	}


	void SetShowScores(bool bEnableShowScores);
};


// Class HawkenGame.R_PlayerControllerExplore
// 0x000C (0x16D4 - 0x16C8)
class AR_PlayerControllerExplore : public AR_PlayerController
{
public:
	class USoundCue*                                   ThirdPersonSound;                                         // 0x16C8(0x0004)
	class USoundCue*                                   FirstPersonSound;                                         // 0x16CC(0x0004)
	unsigned long                                      bThirdPersonMode : 1;                                     // 0x16D0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PlayerControllerExplore");
		return ptr;
	}


	void StartAltFireMode(unsigned char FireModeNum);
	void ToggleCameraMode();
};


// Class HawkenGame.R_GameInteraction
// 0x0000 (0x016C - 0x016C)
class UR_GameInteraction : public UUDKGameInteraction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameInteraction");
		return ptr;
	}

};


// Class HawkenGame.R_GameplayTips
// 0x0030 (0x006C - 0x003C)
class UR_GameplayTips : public UObject
{
public:
	TArray<struct FSGameplayTip>                       GeneralTips;                                              // 0x003C(0x000C) (NeedCtorLink)
	TArray<struct FSGameplayTip>                       SiegeTips;                                                // 0x0048(0x000C) (NeedCtorLink)
	TArray<struct FSGameplayTip>                       MissileAssaultTips;                                       // 0x0054(0x000C) (NeedCtorLink)
	TArray<struct FString>                             ReplacementCommands;                                      // 0x0060(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameplayTips");
		return ptr;
	}


	int ChooseBestStartingTipIndex(TArray<struct FSGameplayTip>* TipList);
	void ReplaceBoundActionWithKeyBind(struct FString* sTip);
	void BuildListOfAppropriateTips(bool bIncludeGameModeTips, TArray<struct FSGameplayTip>* OutList);
	void GetGameplayTipList(TArray<struct FString>* OutList, int* StartIndex);
};


// Class HawkenGame.R_GameSettingsPersonal
// 0x0000 (0x0124 - 0x0124)
class UR_GameSettingsPersonal : public UR_GameSettingsCommon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameSettingsPersonal");
		return ptr;
	}

};


// Class HawkenGame.R_GameViewportClient
// 0x0014 (0x0148 - 0x0134)
class UR_GameViewportClient : public UUDKGameViewportClient
{
public:
	float                                              XLoadingTextDescPos;                                      // 0x0134(0x0004) (Config)
	float                                              YLoadingTextDescPos;                                      // 0x0138(0x0004) (Config)
	float                                              LoadingTextDescScale;                                     // 0x013C(0x0004) (Config)
	float                                              LoadingTextDescWrapWidth;                                 // 0x0140(0x0004) (Config)
	int                                                ConnectionErrorDialogId;                                  // 0x0144(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GameViewportClient");
		return ptr;
	}


	void OnErrorDialogCloseResync(int DialogId, int SelectionIdx);
	void NotifyConnectionError(TEnumAsByte<EProgressMessageType> MessageType, TEnumAsByte<EProgressMessageSubType> MessageSubType, const struct FString& Message, const struct FString& Title);
	void SetProgressMessage(TEnumAsByte<EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title, bool bIgnoreFutureNetworkMessages, TEnumAsByte<EProgressMessageSubType> MessageSubType);
	void UpdateActiveSplitscreenType();
	void RenderHeader(class UCanvas* Canvas);
	void DrawTransition(class UCanvas* Canvas);
	void PostRender(class UCanvas* Canvas);
};


// Class HawkenGame.R_MechSubType_B_Rookie
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_B_Rookie : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_B_Rookie");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Regenerator
// 0x0004 (0x026C - 0x0268)
class AR_Item_Regenerator : public AR_Item_Base
{
public:
	float                                              RegenerationMultiplier;                                   // 0x0268(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Regenerator");
		return ptr;
	}

};


// Class HawkenGame.SeqEvent_PlayerBoosted
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_PlayerBoosted : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqEvent_PlayerBoosted");
		return ptr;
	}

};


// Class HawkenGame.SeqEvent_PlayerDodged
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_PlayerDodged : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqEvent_PlayerDodged");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_C_FireFighter
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_C_FireFighter : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_C_FireFighter");
		return ptr;
	}

};


// Class HawkenGame.R_SE_ModifyEnergyTransfer
// 0x0008 (0x0248 - 0x0240)
class AR_SE_ModifyEnergyTransfer : public AR_StatusEffect_Base
{
public:
	unsigned long                                      bAffectsHealthPickups : 1;                                // 0x0240(0x0004)
	unsigned long                                      bAffectsEnergyPickups : 1;                                // 0x0240(0x0004)
	unsigned long                                      bAffectsEnergyStation : 1;                                // 0x0240(0x0004)
	unsigned long                                      bAffectsHeatPickups : 1;                                  // 0x0240(0x0004)
	unsigned long                                      bAlsoApplyTransferRatioToRemovedUnits : 1;                // 0x0240(0x0004)
	float                                              EffectTransferRatio;                                      // 0x0244(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ModifyEnergyTransfer");
		return ptr;
	}


	void AdjustEnergyTransferAmount(float EnergyUnitsIn, TEnumAsByte<EnergyPickupType_e> PickupType, bool bEnergyStation, float* out_EnergyUnitsToGain, float* out_EnergyUnitsToRemoveFromSource);
};


// Class HawkenGame.R_JumpPad
// 0x0024 (0x02F0 - 0x02CC)
class AR_JumpPad : public AUDKJumpPad
{
public:
	class USkeletalMeshComponent*                      JumpPadMesh;                                              // 0x02CC(0x0004) (ExportObject, Component, EditInline)
	class UUDKParticleSystemComponent*                 JumpPadParticleEffects;                                   // 0x02D0(0x0004) (ExportObject, Component, EditInline)
	struct FVector                                     effectScale;                                              // 0x02D4(0x000C) (Edit)
	class UParticleSystem*                             JumpPadLoopingEffect;                                     // 0x02E0(0x0004)
	class UParticleSystem*                             JumpPadTriggerEffect;                                     // 0x02E4(0x0004)
	class UParticleSystem*                             JumpPadPawnEffect;                                        // 0x02E8(0x0004)
	unsigned long                                      bTriggerEffect : 1;                                       // 0x02EC(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_JumpPad");
		return ptr;
	}


	void OnSetMaterial(class USeqAct_SetMaterial* Action);
	void PlayTriggerEffect();
	void AttachEffects();
	void PostBeginPlay();
	void PostTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_InventoryManager
// 0x0000 (0x01F0 - 0x01F0)
class AR_InventoryManager : public AInventoryManager
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_InventoryManager");
		return ptr;
	}


	void PrevWeapon();
	void NextWeapon();
	void SwitchToBestWeapon(bool bForceADifferentWeapon);
};


// Class HawkenGame.R_Gfx_Visor_Coop
// 0x010C (0x0D94 - 0x0C88)
class UR_Gfx_Visor_Coop : public UR_Gfx_Visor
{
public:
	class UGFxObject*                                  CoopPlayersArray;                                         // 0x0C88(0x0004)
	class UGFxObject*                                  CoopUpgradesMC;                                           // 0x0C8C(0x0004)
	class UGFxObject*                                  CoopUpgradesInfo;                                         // 0x0C90(0x0004)
	class UGFxObject*                                  CoopConsumablesMC;                                        // 0x0C94(0x0004)
	class UGFxObject*                                  CoopConsumablesInfo;                                      // 0x0C98(0x0004)
	int                                                CoopWaveStatsLastActivated;                               // 0x0C9C(0x0004)
	unsigned long                                      bPostWaveInfoDisplaying : 1;                              // 0x0CA0(0x0004)
	unsigned long                                      bShowCountdown : 1;                                       // 0x0CA0(0x0004)
	unsigned long                                      bShowConsumableHints : 1;                                 // 0x0CA0(0x0004)
	unsigned long                                      bOffenseBoosted : 1;                                      // 0x0CA0(0x0004)
	float                                              ConsumablesHintDuration;                                  // 0x0CA4(0x0004) (Const)
	float                                              LastTimeActivateWeaponUpgrade;                            // 0x0CA8(0x0004)
	float                                              LastTimeActivateArmorUpgrade;                             // 0x0CAC(0x0004)
	float                                              LastTimeActivateHeatUpgrade;                              // 0x0CB0(0x0004)
	float                                              ActivateUpgradeDuration;                                  // 0x0CB4(0x0004)
	float                                              OvershieldPercentage;                                     // 0x0CB8(0x0004)
	TArray<class AR_PRI_Coop*>                         EUPickers;                                                // 0x0CBC(0x000C) (NeedCtorLink)
	struct FString                                     Coop_NextWaveTime;                                        // 0x0CC8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_CoOp_ReviveHint;                                       // 0x0CD4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_CoOp_UpgradeHint;                                      // 0x0CE0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_CoOp_ConsumableHint;                                   // 0x0CEC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_CoOp_ConsumableTitle;                                  // 0x0CF8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_teamEU;                                                // 0x0D04(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_upgradeEUMessage;                                      // 0x0D10(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_upgradeActivationMessage;                              // 0x0D1C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Coop_GettingRevive;                                       // 0x0D28(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ReviveText;                                               // 0x0D34(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_Banner_BossText;                                       // 0x0D40(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_CoOp_CycleThruPlayers;                                 // 0x0D4C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_CoOp_WeaponHint;                                       // 0x0D58(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_CoOp_ArmorHint;                                        // 0x0D64(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_CoOp_HeatHint;                                         // 0x0D70(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ConsumableCostMessage;                                    // 0x0D7C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ChallengeRewardXP;                                     // 0x0D88(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Gfx_Visor_Coop");
		return ptr;
	}


	void ShowXPChallengeReward(int RewardXP);
	bool ShouldShowPersonalInfo();
	bool IsGameHudActive();
	bool IsInCinematicMode();
	void UpdateCoOpCache();
	void DisplayObjectiveIndicators(TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	void DisplayIndicators(TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	class AR_RevivalMarker* GetRevivalMarker(class AR_PRI_Coop* RPRI);
	void UpdateGameSpecificRadar(TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	void CoopASActivateConsumable(int ActivateIndex);
	void CoopASActivateUpgrade(int ActivateIndex);
	void CoOpShowHints(bool bShowUpgradesHint);
	void DisplayCoopUpgradesUI();
	void DisplaySingleUpgradeUI(TEnumAsByte<ECoopUpgradeCategory> UpgradeCategory, const struct FString& BindingCommand, const struct FString& Hint, const struct FString& ImagePath, const struct FSCoopUpgradeAllocations& UpgradesAllocations, unsigned char upgradeLevel, float UpgradeProgress, class UGFxObject* UpgradesArray, bool bBoosted, const struct FString& BoostedString);
	void ShowConsumableHintsTimer(bool bShowHints);
	void ShowAllConsumableHints(bool bShowHints, class UGFxObject** ConsumablesArray);
	void ShowSingleConsumableHint(int SlotIndex, bool bShowHint, class UGFxObject** ConsumablesArray);
	void HandleConsumableSpecificStates(class UClass* ConsumableClass, unsigned char SlotIndex, int ConsumableCooldown);
	void DisplaySingleConsumableUI(unsigned char ClassIndex, unsigned char SlotIndex, int totalCharges, class UGFxObject** ConsumablesArray, class AR_PRI_Coop** RPRI);
	void DisplayCoopConsumablesUI();
	void ValidateConsumablesValues(const struct FConsumablesInfo& AccountConsumables, class AR_PRI_Coop* RPRI);
	bool IsUpgradeAnimationInProgress(TEnumAsByte<ECoopUpgradeCategory> UpgradeType);
	bool IsUpgradeUIActive();
	void SetActivationUpgradeData(TEnumAsByte<ECoopUpgradeCategory> UpgradeType);
	void UpdateGameModeUI_Helper(class AR_TeamInfo* OwnerTeam, class AR_TeamInfo* EnemyTeam);
	void UpdatePlayersInfoUI();
	bool GetInteractiveHintMessage(struct FString* InfoMessage);
	void UpdatePlayerVitals();
	void UpdateEnergyUnits(float Percent, TEnumAsByte<EEnergyStatus> EnergyStatus);
	bool CanPlayerUpgrade();
	bool ShouldShowEnergyUnitIndicators();
	void UpdateReticle();
	void ClearCachedClipReferences();
	void CacheClipReferences();
	void SetLocalizedStringsForGameSpecificUI(class UGFxObject** LocObj);
	void SetLocalizedStringsForUI();
};


// Class HawkenGame.R_ShockCoil
// 0x0004 (0x0218 - 0x0214)
class AR_ShockCoil : public AR_Radar_Base
{
public:
	float                                              LastFireTime;                                             // 0x0214(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ShockCoil");
		return ptr;
	}

};


// Class HawkenGame.R_MapExtent
// 0x0004 (0x01D8 - 0x01D4)
class AR_MapExtent : public AActor
{
public:
	class UStaticMeshComponent*                        BaseMesh;                                                 // 0x01D4(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MapExtent");
		return ptr;
	}

};


// Class HawkenGame.R_Gfx_Visor_Team
// 0x0000 (0x0C88 - 0x0C88)
class UR_Gfx_Visor_Team : public UR_Gfx_Visor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Gfx_Visor_Team");
		return ptr;
	}


	void UpdateGameModeUI_Helper(class AR_TeamInfo* Friend, class AR_TeamInfo* Foe);
};


// Class HawkenGame.R_Gfx_Visor_CTF
// 0x0000 (0x0C88 - 0x0C88)
class UR_Gfx_Visor_CTF : public UR_Gfx_Visor_Team
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Gfx_Visor_CTF");
		return ptr;
	}


	void DisplayGameSpecificObjectiveIndicators(unsigned char LocalTeamNum, TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	void UpdateGameSpecificRadar(TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	void UpdateGameModeUI_Helper(class AR_TeamInfo* Friend, class AR_TeamInfo* Foe);
};


// Class HawkenGame.R_Gfx_Visor_DM
// 0x0000 (0x0C88 - 0x0C88)
class UR_Gfx_Visor_DM : public UR_Gfx_Visor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Gfx_Visor_DM");
		return ptr;
	}


	void UpdateGameModeUI_Helper(class AR_TeamInfo* OwnerTeam, class AR_TeamInfo* EnemyTeam);
};


// Class HawkenGame.R_Gfx_Visor_Explore
// 0x0000 (0x0C88 - 0x0C88)
class UR_Gfx_Visor_Explore : public UR_Gfx_Visor_DM
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Gfx_Visor_Explore");
		return ptr;
	}

};


// Class HawkenGame.R_Gfx_Visor_MA
// 0x0004 (0x0C8C - 0x0C88)
class UR_Gfx_Visor_MA : public UR_Gfx_Visor_Team
{
public:
	class UGFxObject*                                  MissileSiloArray;                                         // 0x0C88(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Gfx_Visor_MA");
		return ptr;
	}


	void DisplayGameSpecificObjectiveIndicators(unsigned char LocalTeamNum, TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	void UpdateGameSpecificRadar(TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	class AR_Turret_BaseMissile* GetMissileSiloByNum(int SiloIndex);
	void UpdateGameModeUI_Helper(class AR_TeamInfo* Friend, class AR_TeamInfo* Foe);
	void InitMissileSiloArray();
	void ClearCachedClipReferences();
};


// Class HawkenGame.R_Gfx_Visor_SG
// 0x0000 (0x0C88 - 0x0C88)
class UR_Gfx_Visor_SG : public UR_Gfx_Visor_Team
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Gfx_Visor_SG");
		return ptr;
	}


	bool ShouldShowEnergyUnitIndicators();
	void DisplayGameSpecificObjectiveIndicators(unsigned char LocalTeamNum, TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	void UpdateGameSpecificRadar(TEnumAsByte<EGameObjective> ObjectiveListParam, int NumObjectives);
	void SetBaseDirections(class UGFxObject* InfoObj, unsigned char LocalTeamNum);
	void UpdateSiegeAntiAirControl(class UGFxObject** Info);
	void UpdateTeamSiegeStatus(class AR_TeamInfo* RTeam, const struct FString& Prefix, class UGFxObject** Info);
	void UpdateGameModeUI_Helper(class AR_TeamInfo* Friend, class AR_TeamInfo* Foe);
};


// Class HawkenGame.R_GFxClikWidget
// 0x0000 (0x0084 - 0x0084)
class UR_GFxClikWidget : public UGFxClikWidget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GFxClikWidget");
		return ptr;
	}


	bool WidgetInitialized(const struct FName& WidgetName, const struct FName& WidgetPath, class UGFxObject* Widget);
	class AR_PlayerController* GetHawkenPC();
	class ULocalPlayer* GetPlayerOwner();
};


// Class HawkenGame.R_GFxInfoContainer
// 0x0018 (0x009C - 0x0084)
class UR_GFxInfoContainer : public UR_GFxClikWidget
{
public:
	class UR_Gfx_Visor*                                OwnerMovie;                                               // 0x0084(0x0004)
	struct FString                                     PopupClassName;                                           // 0x0088(0x000C) (NeedCtorLink)
	class UGFxObject*                                  InfoObj;                                                  // 0x0094(0x0004)
	unsigned long                                      bSuppressReticle : 1;                                     // 0x0098(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GFxInfoContainer");
		return ptr;
	}


	void UnsuppressReticle();
	void SuppressReticle();
	void Recycle();
	void Hide();
	void show();
	void ClearReferences();
	void Publish(bool bAutoShow);
	void ForceInit(class UR_Gfx_Visor* VisorMovie, bool bHideCrosshairReticle);
};


// Class HawkenGame.R_GFxAgentDialog
// 0x0004 (0x00A0 - 0x009C)
class UR_GFxAgentDialog : public UR_GFxInfoContainer
{
public:
	class UTexture*                                    PortraitImageRef;                                         // 0x009C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GFxAgentDialog");
		return ptr;
	}


	void ClearReferences();
	void SetMessageText(const struct FString& MessageText);
	void SetPortraitImage(class UTexture* PortraitImage);
};


// Class HawkenGame.R_GFxHUDDialog
// 0x0018 (0x00B4 - 0x009C)
class UR_GFxHUDDialog : public UR_GFxInfoContainer
{
public:
	class UTexture*                                    BannerImageRef;                                           // 0x009C(0x0004) (Transient)
	class UTexture*                                    InfoGraphicRef;                                           // 0x00A0(0x0004) (Transient)
	TArray<class UTexture*>                            BannerImageCycle;                                         // 0x00A4(0x000C) (Transient, NeedCtorLink)
	class UGFxObject*                                  BannerImageCycleArray;                                    // 0x00B0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GFxHUDDialog");
		return ptr;
	}


	void SetDismissText(const struct FString& DismissText);
	void SetMessageText(const struct FString& MessageText);
	void SetHeaderText(const struct FString& HeaderText);
	void SetInfoGraphic(class UTexture* InfoGraphic);
	void SetBannerCyclePeriod(float CyclePeriod);
	void ClearCycleArray();
	void SetBannerImageCycle(TArray<class UTexture*> ImageCycle);
	void SetBannerImage(class UTexture* BannerImage);
	void Publish(bool bAutoShow);
	void ClearReferences();
	void ForceInit(class UR_Gfx_Visor* VisorMovie, bool bHideCrosshairReticle);
};


// Class HawkenGame.R_GFxHUDKeybindDialog
// 0x0010 (0x00AC - 0x009C)
class UR_GFxHUDKeybindDialog : public UR_GFxInfoContainer
{
public:
	class UGFxObject*                                  KeyConnectorArray;                                        // 0x009C(0x0004)
	TArray<struct FKeyConnectorElement>                KeyConnectorElements;                                     // 0x00A0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GFxHUDKeybindDialog");
		return ptr;
	}


	void Publish(bool bAutoShow);
	void AddKeybindElement(int KeybindIndex, const struct FString& KeybindString, const struct FString& ConnectorString, int LineNumber, class UTexture* ConnectorImage);
	void ClearReferences();
	void ForceInit(class UR_Gfx_Visor* VisorMovie, bool bHideCrosshairReticle);
};


// Class HawkenGame.R_GFxHUDPrompt
// 0x0000 (0x009C - 0x009C)
class UR_GFxHUDPrompt : public UR_GFxInfoContainer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GFxHUDPrompt");
		return ptr;
	}


	void SetMessageText(const struct FString& MessageText);
};


// Class HawkenGame.R_Gib
// 0x001C (0x01F0 - 0x01D4)
class AR_Gib : public AActor
{
public:
	unsigned long                                      bUseUnrealPhysics : 1;                                    // 0x01D4(0x0004)
	class UMeshComponent*                              GibMeshComp;                                              // 0x01D8(0x0004) (ExportObject, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           GibLightEnvironment;                                      // 0x01DC(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    PSC_GibEffect;                                            // 0x01E0(0x0004) (ExportObject, Component, EditInline)
	TArray<struct FStaticMeshDatum>                    GibMeshesData;                                            // 0x01E4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Gib");
		return ptr;
	}


	void TurnOnCollision();
	void SetGibStaticMesh(int GibIndex);
};


// Class HawkenGame.R_GibStaticMeshComponent
// 0x0000 (0x0254 - 0x0254)
class UR_GibStaticMeshComponent : public UStaticMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GibStaticMeshComponent");
		return ptr;
	}

};


// Class HawkenGame.R_Gib_Arm
// 0x0000 (0x01F0 - 0x01F0)
class AR_Gib_Arm : public AR_Gib
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Gib_Arm");
		return ptr;
	}

};


// Class HawkenGame.R_Gib_Leg
// 0x0000 (0x01F0 - 0x01F0)
class AR_Gib_Leg : public AR_Gib
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Gib_Leg");
		return ptr;
	}

};


// Class HawkenGame.R_GibSkeletalMeshComponent
// 0x0000 (0x061C - 0x061C)
class UR_GibSkeletalMeshComponent : public USkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GibSkeletalMeshComponent");
		return ptr;
	}

};


// Class HawkenGame.R_GRI_MA
// 0x0000 (0x05F4 - 0x05F4)
class AR_GRI_MA : public AR_GameReplicationInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_GRI_MA");
		return ptr;
	}

};


// Class HawkenGame.R_HealthPickup
// 0x0004 (0x02B4 - 0x02B0)
class AR_HealthPickup : public AR_Pickup
{
public:
	class AApexEffect*                                 TurbulenceEffect;                                         // 0x02B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_HealthPickup");
		return ptr;
	}


	void UpdateEnergyParticles();
	void Destroyed();
	void PostBeginPlay();
};


// Class HawkenGame.R_HealthPickup_Thrown
// 0x0004 (0x02B8 - 0x02B4)
class AR_HealthPickup_Thrown : public AR_HealthPickup
{
public:
	class UUDKParticleSystemComponent*                 ThrownBaseEffectComponent;                                // 0x02B4(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_HealthPickup_Thrown");
		return ptr;
	}

};


// Class HawkenGame.R_HeatPickup
// 0x001C (0x02CC - 0x02B0)
class AR_HeatPickup : public AR_Pickup
{
public:
	class AApexEffect*                                 TurbulenceEffect;                                         // 0x02B0(0x0004)
	class UParticleSystemComponent*                    RadiusEffectComponent;                                    // 0x02B4(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             RadiusEffect;                                             // 0x02B8(0x0004)
	unsigned long                                      bHavePlayedRadiusEffect : 1;                              // 0x02BC(0x0004) (Transient)
	class USoundCue*                                   ActivationSound;                                          // 0x02C0(0x0004)
	class USoundCue*                                   DrainingSoundOverride;                                    // 0x02C4(0x0004)
	class UAudioComponent*                             LoopingSoundComp;                                         // 0x02C8(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_HeatPickup");
		return ptr;
	}


	void UpdateEnergyParticles();
	void ScaleEnergyParticles();
	void PlayRadiusEffect();
	void Tick(float DeltaTime);
	void Destroyed();
	void PostBeginPlay();
};


// Class HawkenGame.R_HUD_MA
// 0x0000 (0x1014 - 0x1014)
class AR_HUD_MA : public AR_HUD_Team
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_HUD_MA");
		return ptr;
	}

};


// Class HawkenGame.R_HumanPawn
// 0x0000 (0x112C - 0x112C)
class AR_HumanPawn : public AR_NPC
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_HumanPawn");
		return ptr;
	}


	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
};


// Class HawkenGame.R_Internal_Air180
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_Air180 : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_Air180");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_Internal_AirDodge
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_AirDodge : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_AirDodge");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_Internal_ArmorFusor
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_ArmorFusor : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_ArmorFusor");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_ApplyEffectOnKill
// 0x000C (0x024C - 0x0240)
class AR_SE_ApplyEffectOnKill : public AR_StatusEffect_Base
{
public:
	class UClass*                                      EffectToApplyOnKill;                                      // 0x0240(0x0004) (Edit, EditConst)
	class UClass*                                      EffectToApplyOnAssist;                                    // 0x0244(0x0004) (Edit, EditConst)
	unsigned long                                      bKillEffectsCanStack : 1;                                 // 0x0248(0x0004) (Edit, EditConst)
	unsigned long                                      bAssistEffectsCanStack : 1;                               // 0x0248(0x0004) (Edit, EditConst)
	unsigned long                                      bKillEffectsCanStackWithAssistEffects : 1;                // 0x0248(0x0004) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ApplyEffectOnKill");
		return ptr;
	}


	void NotifyAssistMade();
	void NotifyKillMade();
};


// Class HawkenGame.R_SE_ArmorFusor
// 0x0000 (0x024C - 0x024C)
class AR_SE_ArmorFusor : public AR_SE_ApplyEffectOnKill
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ArmorFusor");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_ArmorFusor_Light
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_ArmorFusor_Light : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_ArmorFusor_Light");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_ArmorFusor_Light
// 0x0000 (0x024C - 0x024C)
class AR_SE_ArmorFusor_Light : public AR_SE_ApplyEffectOnKill
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ArmorFusor_Light");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_ArmorReinforcement
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_ArmorReinforcement : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_ArmorReinforcement");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_ModifyHealth
// 0x0004 (0x0244 - 0x0240)
class AR_SE_ModifyHealth : public AR_StatusEffect_Base
{
public:
	float                                              AmountToAdd;                                              // 0x0240(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ModifyHealth");
		return ptr;
	}


	float GetAmountToAdd();
	void StartEffect();
};


// Class HawkenGame.R_SE_ModifyHealth_ByMechType
// 0x000C (0x0250 - 0x0244)
class AR_SE_ModifyHealth_ByMechType : public AR_SE_ModifyHealth
{
public:
	float                                              AmountToAddByMechType[0x3];                               // 0x0244(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ModifyHealth_ByMechType");
		return ptr;
	}


	float GetAmountToAdd();
};


// Class HawkenGame.R_SE_ArmorReinforcement_Health
// 0x0000 (0x0250 - 0x0250)
class AR_SE_ArmorReinforcement_Health : public AR_SE_ModifyHealth_ByMechType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ArmorReinforcement_Health");
		return ptr;
	}

};


// Class HawkenGame.R_SE_ModifyDodgeCooldown
// 0x0004 (0x0244 - 0x0240)
class AR_SE_ModifyDodgeCooldown : public AR_StatusEffect_Base
{
public:
	float                                              AmountToAdd;                                              // 0x0240(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ModifyDodgeCooldown");
		return ptr;
	}


	float GetAmountToAdd();
	void StartEffect();
};


// Class HawkenGame.R_SE_ModifyDodgeCooldown_ByMechType
// 0x000C (0x0250 - 0x0244)
class AR_SE_ModifyDodgeCooldown_ByMechType : public AR_SE_ModifyDodgeCooldown
{
public:
	float                                              AmountToAddByMechType[0x3];                               // 0x0244(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ModifyDodgeCooldown_ByMechType");
		return ptr;
	}


	float GetAmountToAdd();
};


// Class HawkenGame.R_SE_ArmorReinforcement_DodgeCooldown
// 0x0000 (0x0250 - 0x0250)
class AR_SE_ArmorReinforcement_DodgeCooldown : public AR_SE_ModifyDodgeCooldown_ByMechType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ArmorReinforcement_DodgeCooldown");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_CompositeArmor
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_CompositeArmor : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_CompositeArmor");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_ModifyDamage
// 0x0004 (0x0244 - 0x0240)
class AR_SE_ModifyDamage : public AR_StatusEffect_Base
{
public:
	float                                              EffectDamageRatio;                                        // 0x0240(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ModifyDamage");
		return ptr;
	}

};


// Class HawkenGame.R_SE_GiveOnDeath_CompositeArmor
// 0x0000 (0x0240 - 0x0240)
class AR_SE_GiveOnDeath_CompositeArmor : public AR_StatusEffect_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_GiveOnDeath_CompositeArmor");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_Deflectors
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_Deflectors : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_Deflectors");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_ReduceIncomingDamage
// 0x0000 (0x0244 - 0x0244)
class AR_SE_ReduceIncomingDamage : public AR_SE_ModifyDamage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ReduceIncomingDamage");
		return ptr;
	}


	void AdjustIncomingDamage(class UClass* dmgType, class AController* DmgInstigator, class APawn* InstigatorPawn, class AActor* DamageCauser, float OriginalDamage, float* out_Damage, struct FVector* out_Momentum, struct FTraceHitInfo* out_HitInfo);
};


// Class HawkenGame.R_SE_RID_DuringBoostDodge
// 0x0004 (0x0248 - 0x0244)
class AR_SE_RID_DuringBoostDodge : public AR_SE_ReduceIncomingDamage
{
public:
	unsigned long                                      bAffectsHeavyModeBoost : 1;                               // 0x0244(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_RID_DuringBoostDodge");
		return ptr;
	}


	void AdjustIncomingDamage(class UClass* dmgType, class AController* DmgInstigator, class APawn* InstigatorPawn, class AActor* DamageCauser, float OriginalDamage, float* out_Damage, struct FVector* out_Momentum, struct FTraceHitInfo* out_HitInfo);
};


// Class HawkenGame.R_SE_Deflectors
// 0x0000 (0x0248 - 0x0248)
class AR_SE_Deflectors : public AR_SE_RID_DuringBoostDodge
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_Deflectors");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_Deflectors_Light
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_Deflectors_Light : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_Deflectors_Light");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_Deflectors_Light
// 0x0000 (0x0248 - 0x0248)
class AR_SE_Deflectors_Light : public AR_SE_RID_DuringBoostDodge
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_Deflectors_Light");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_EnergyExtractor
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_EnergyExtractor : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_EnergyExtractor");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_EnergyExtractor
// 0x0000 (0x0248 - 0x0248)
class AR_SE_EnergyExtractor : public AR_SE_ModifyEnergyTransfer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_EnergyExtractor");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_EnergyExtractor_Light
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_EnergyExtractor_Light : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_EnergyExtractor_Light");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_EnergyExtractor_Light
// 0x0000 (0x0248 - 0x0248)
class AR_SE_EnergyExtractor_Light : public AR_SE_ModifyEnergyTransfer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_EnergyExtractor_Light");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_EvasiveDevice
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_EvasiveDevice : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_EvasiveDevice");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_ModifySpeedByHealth
// 0x000C (0x0258 - 0x024C)
class AR_SE_ModifySpeedByHealth : public AR_SE_ModifyMovementSpeed
{
public:
	TArray<struct FSHealthSpeedVals>                   ThresholdValues;                                          // 0x024C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ModifySpeedByHealth");
		return ptr;
	}


	void PeriodicCallback();
};


// Class HawkenGame.R_SE_EvasiveDevice
// 0x0000 (0x0258 - 0x0258)
class AR_SE_EvasiveDevice : public AR_SE_ModifySpeedByHealth
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_EvasiveDevice");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_Failsafe
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_Failsafe : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_Failsafe");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_RID_FromSelf
// 0x0004 (0x0248 - 0x0244)
class AR_SE_RID_FromSelf : public AR_SE_ReduceIncomingDamage
{
public:
	unsigned long                                      bAffectFallDamage : 1;                                    // 0x0244(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_RID_FromSelf");
		return ptr;
	}


	void AdjustIncomingDamage(class UClass* dmgType, class AController* DmgInstigator, class APawn* InstigatorPawn, class AActor* DamageCauser, float OriginalDamage, float* out_Damage, struct FVector* out_Momentum, struct FTraceHitInfo* out_HitInfo);
};


// Class HawkenGame.R_SE_Failsafe
// 0x0000 (0x0248 - 0x0248)
class AR_SE_Failsafe : public AR_SE_RID_FromSelf
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_Failsafe");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_Failsafe_Light
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_Failsafe_Light : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_Failsafe_Light");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_Failsafe_Light
// 0x0000 (0x0248 - 0x0248)
class AR_SE_Failsafe_Light : public AR_SE_RID_FromSelf
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_Failsafe_Light");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_FuelConverter
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_FuelConverter : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_FuelConverter");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_IncreaseFuelOnDamageTaken
// 0x0004 (0x0244 - 0x0240)
class AR_SE_IncreaseFuelOnDamageTaken : public AR_StatusEffect_Base
{
public:
	float                                              DamageToFuelMultiplier;                                   // 0x0240(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_IncreaseFuelOnDamageTaken");
		return ptr;
	}


	void NotifyDamageTaken(float Damage, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo, class UClass* dmgType, class AController* DmgInstigator, class APawn* InstigatorPawn, class AActor* DamageCauser);
};


// Class HawkenGame.R_SE_FuelConverter
// 0x0000 (0x0244 - 0x0244)
class AR_SE_FuelConverter : public AR_SE_IncreaseFuelOnDamageTaken
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_FuelConverter");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_FuelConverter_Light
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_FuelConverter_Light : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_FuelConverter_Light");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_FuelConverter_Light
// 0x0000 (0x0244 - 0x0244)
class AR_SE_FuelConverter_Light : public AR_SE_IncreaseFuelOnDamageTaken
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_FuelConverter_Light");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_PowerSurger
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_PowerSurger : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_PowerSurger");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_PowerSurger
// 0x0000 (0x024C - 0x024C)
class AR_SE_PowerSurger : public AR_SE_ApplyEffectOnKill
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_PowerSurger");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_PowerSurger_Light
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_PowerSurger_Light : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_PowerSurger_Light");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_PowerSurger_Light
// 0x0000 (0x024C - 0x024C)
class AR_SE_PowerSurger_Light : public AR_SE_ApplyEffectOnKill
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_PowerSurger_Light");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_Reconstructor
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_Reconstructor : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_Reconstructor");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_GainHealthOutOfCombat
// 0x0004 (0x0250 - 0x024C)
class AR_SE_GainHealthOutOfCombat : public AR_SE_TriggerOutOfCombat
{
public:
	float                                              HealthPerSecond;                                          // 0x024C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_GainHealthOutOfCombat");
		return ptr;
	}


	void PeriodicCallback();
};


// Class HawkenGame.R_SE_Reconstructor
// 0x0000 (0x0250 - 0x0250)
class AR_SE_Reconstructor : public AR_SE_GainHealthOutOfCombat
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_Reconstructor");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_Reconstructor_Light
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_Reconstructor_Light : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_Reconstructor_Light");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_Reconstructor_Light
// 0x0000 (0x0250 - 0x0250)
class AR_SE_Reconstructor_Light : public AR_SE_GainHealthOutOfCombat
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_Reconstructor_Light");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_RepairKit
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_RepairKit : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_RepairKit");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_RepairKit
// 0x0000 (0x0248 - 0x0248)
class AR_SE_RepairKit : public AR_SE_ModifyEnergyTransfer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_RepairKit");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_RepairKit_Light
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_RepairKit_Light : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_RepairKit_Light");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_RepairKit_Light
// 0x0000 (0x0248 - 0x0248)
class AR_SE_RepairKit_Light : public AR_SE_ModifyEnergyTransfer
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_RepairKit_Light");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_Replenisher
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_Replenisher : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_Replenisher");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_MultiEventTrigger
// 0x0004 (0x0244 - 0x0240)
class AR_SE_MultiEventTrigger : public AR_StatusEffect_Base
{
public:
	unsigned long                                      bKillTriggersEvent : 1;                                   // 0x0240(0x0004) (Edit)
	unsigned long                                      bAssistTriggersEvent : 1;                                 // 0x0240(0x0004) (Edit)
	unsigned long                                      bSiloCaptureTriggersEvent : 1;                            // 0x0240(0x0004) (Edit)
	unsigned long                                      bAACaptureTriggersEvent : 1;                              // 0x0240(0x0004) (Edit)
	unsigned long                                      bEUDeliveryTriggersEvent : 1;                             // 0x0240(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_MultiEventTrigger");
		return ptr;
	}


	void NotifyAACaptured();
	void NotifyEUDelivered(int Amount);
	void NotifySiloCaptured();
	void NotifyAssistMade();
	void NotifyKillMade();
	void EventTriggered(TEnumAsByte<EEventType> EventType);
};


// Class HawkenGame.R_SE_ModifyCooldownOnEvent
// 0x0028 (0x026C - 0x0244)
class AR_SE_ModifyCooldownOnEvent : public AR_SE_MultiEventTrigger
{
public:
	float                                              AbilityCooldownAddition_Kill;                             // 0x0244(0x0004) (Edit)
	float                                              AbilityCooldownAddition_Assist;                           // 0x0248(0x0004) (Edit)
	float                                              AbilityCooldownAddition_Silo;                             // 0x024C(0x0004) (Edit)
	float                                              AbilityCooldownAddition_AA;                               // 0x0250(0x0004) (Edit)
	float                                              AbilityCooldownAddition_EU;                               // 0x0254(0x0004) (Edit)
	float                                              ItemCooldownAddition_Kill;                                // 0x0258(0x0004) (Edit)
	float                                              ItemCooldownAddition_Assist;                              // 0x025C(0x0004) (Edit)
	float                                              ItemCooldownAddition_Silo;                                // 0x0260(0x0004) (Edit)
	float                                              ItemCooldownAddition_AA;                                  // 0x0264(0x0004) (Edit)
	float                                              ItemCooldownAddition_EU;                                  // 0x0268(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ModifyCooldownOnEvent");
		return ptr;
	}


	float GetItemCooldownForEvent(TEnumAsByte<EEventType> EventType);
	float GetAbilityCooldownForEvent(TEnumAsByte<EEventType> EventType);
	void EventTriggered(TEnumAsByte<EEventType> EventType);
};


// Class HawkenGame.R_SE_Replenisher
// 0x0000 (0x026C - 0x026C)
class AR_SE_Replenisher : public AR_SE_ModifyCooldownOnEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_Replenisher");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_ShockCoil
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_ShockCoil : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_ShockCoil");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_RID_FromFalling
// 0x0000 (0x0244 - 0x0244)
class AR_SE_RID_FromFalling : public AR_SE_ReduceIncomingDamage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_RID_FromFalling");
		return ptr;
	}


	void AdjustIncomingDamage(class UClass* dmgType, class AController* DmgInstigator, class APawn* InstigatorPawn, class AActor* DamageCauser, float OriginalDamage, float* out_Damage, struct FVector* out_Momentum, struct FTraceHitInfo* out_HitInfo);
};


// Class HawkenGame.R_SE_ShockCoil
// 0x0000 (0x0244 - 0x0244)
class AR_SE_ShockCoil : public AR_SE_RID_FromFalling
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ShockCoil");
		return ptr;
	}

};


// Class HawkenGame.R_Internal_Transmitter
// 0x0000 (0x0118 - 0x0118)
class UR_Internal_Transmitter : public UR_Internal_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Internal_Transmitter");
		return ptr;
	}


	float STATIC_GetValue(int iValIndex);
};


// Class HawkenGame.R_SE_SpotLastKiller
// 0x0000 (0x0240 - 0x0240)
class AR_SE_SpotLastKiller : public AR_StatusEffect_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_SpotLastKiller");
		return ptr;
	}


	void PeriodicCallback();
};


// Class HawkenGame.R_SE_GiveSpotLastKillerOnDeath
// 0x0000 (0x0240 - 0x0240)
class AR_SE_GiveSpotLastKillerOnDeath : public AR_StatusEffect_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_GiveSpotLastKillerOnDeath");
		return ptr;
	}

};


// Class HawkenGame.R_Item_AreaRadar
// 0x0004 (0x026C - 0x0268)
class AR_Item_AreaRadar : public AR_Item_Base
{
public:
	float                                              activeTime;                                               // 0x0268(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_AreaRadar");
		return ptr;
	}


	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
};


// Class HawkenGame.R_Proj_Radar
// 0x0000 (0x0344 - 0x0344)
class AR_Proj_Radar : public AR_Proj_DeployItem_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Radar");
		return ptr;
	}


	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class HawkenGame.R_Radar
// 0x000C (0x0220 - 0x0214)
class AR_Radar : public AR_Radar_Base
{
public:
	float                                              EnemySpottedTime;                                         // 0x0214(0x0004)
	float                                              LastEnemySpottedTime;                                     // 0x0218(0x0004)
	class UAudioComponent*                             LoopingSound;                                             // 0x021C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Radar");
		return ptr;
	}


	void CallEnemySpotted(class AR_Pawn* P);
	void Tick(float DeltaTime);
	void SetRadarProperties(int PropSheetIdx);
};


// Class HawkenGame.R_Item_AreaRadar_3_slot
// 0x0000 (0x026C - 0x026C)
class AR_Item_AreaRadar_3_slot : public AR_Item_AreaRadar
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_AreaRadar_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_AreaRadar_4_slot
// 0x0000 (0x026C - 0x026C)
class AR_Item_AreaRadar_4_slot : public AR_Item_AreaRadar
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_AreaRadar_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_BlastGrenade
// 0x000F (0x0338 - 0x0329)
class AR_Proj_BlastGrenade : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              ExplodeTime;                                              // 0x032C(0x0004)
	float                                              CooldownTime;                                             // 0x0330(0x0004)
	float                                              Bounciness;                                               // 0x0334(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_BlastGrenade");
		return ptr;
	}


	void SpawnExplosionEffects(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ExplodeTimer();
	void ReflectProjectile(const struct FVector& HitNormal);
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	struct FVector GetNormalForDecal();
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
	void PostBeginPlay();
};


// Class HawkenGame.R_Proj_Shield
// 0x0000 (0x0344 - 0x0344)
class AR_Proj_Shield : public AR_Proj_DeployItem_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Shield");
		return ptr;
	}


	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class HawkenGame.R_Proj_Blockade
// 0x0014 (0x0358 - 0x0344)
class AR_Proj_Blockade : public AR_Proj_DeployItem_Base
{
public:
	unsigned long                                      bUndeployed : 1;                                          // 0x0344(0x0004)
	struct FVector                                     InitVelocity;                                             // 0x0348(0x000C)
	float                                              DeployedBlockadeWidthScale;                               // 0x0354(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Blockade");
		return ptr;
	}


	void CreateProjectileLight();
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Init(const struct FVector& Direction);
};


// Class HawkenGame.R_Item_Blockade_3_slot
// 0x0000 (0x0270 - 0x0270)
class AR_Item_Blockade_3_slot : public AR_Item_Blockade
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Blockade_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Blockade_4_slot
// 0x0000 (0x0270 - 0x0270)
class AR_Item_Blockade_4_slot : public AR_Item_Blockade
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Blockade_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Detonator
// 0x0017 (0x0340 - 0x0329)
class AR_Proj_Detonator : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              ExploRadius;                                              // 0x032C(0x0004)
	int                                                ExploDamage;                                              // 0x0330(0x0004)
	float                                              ExploMomentumTransfer;                                    // 0x0334(0x0004)
	int                                                ExploAmmoCost;                                            // 0x0338(0x0004)
	class USoundCue*                                   DetonateExplosionSound;                                   // 0x033C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Detonator");
		return ptr;
	}


	void Explosion();
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void CreateProjectileLight();
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Proj_Detonator_3_Slot
// 0x0000 (0x0340 - 0x0340)
class AR_Proj_Detonator_3_Slot : public AR_Proj_Detonator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Detonator_3_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Detonator_4_Slot
// 0x0000 (0x0340 - 0x0340)
class AR_Proj_Detonator_4_Slot : public AR_Proj_Detonator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Detonator_4_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Disruptor
// 0x0004 (0x026C - 0x0268)
class AR_Item_Disruptor : public AR_Item_Base
{
public:
	float                                              MaxThrowMultiplier;                                       // 0x0268(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Disruptor");
		return ptr;
	}


	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
};


// Class HawkenGame.R_Proj_Grenade
// 0x001B (0x0344 - 0x0329)
class AR_Proj_Grenade : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              ExplodeTime;                                              // 0x032C(0x0004)
	float                                              Bounciness;                                               // 0x0330(0x0004)
	float                                              PawnBounciness;                                           // 0x0334(0x0004)
	unsigned long                                      bExplodeOnPawns : 1;                                      // 0x0338(0x0004) (Const)
	unsigned long                                      bExplodesOnBlockades : 1;                                 // 0x0338(0x0004) (Const)
	unsigned long                                      bUpdateRotationRateOnBounce : 1;                          // 0x0338(0x0004) (Const)
	unsigned long                                      bFromItem : 1;                                            // 0x0338(0x0004)
	class USoundCue*                                   BounceSndSand;                                            // 0x033C(0x0004)
	class USoundCue*                                   BounceSndDefault;                                         // 0x0340(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Grenade");
		return ptr;
	}


	void SpawnExplosionEffects(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ExplodeTimer();
	void ReflectProjectile(const struct FVector& HitNormal, bool bIsPawn);
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	struct FName GetPhysicalMaterial(const struct FVector& HitNormal, const struct FVector& HitLocation);
	struct FVector GetNormalForDecal();
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
	void SetItemProjectileDefaults(class UR_ItemDatabaseProps* Props, int ItemSheetIdx);
	void PostBeginPlay();
};


// Class HawkenGame.R_Proj_Disruptor
// 0x0034 (0x0378 - 0x0344)
class AR_Proj_Disruptor : public AR_Proj_Grenade
{
public:
	float                                              InnerDisruptionTime;                                      // 0x0344(0x0004)
	float                                              OuterDisruptionTime;                                      // 0x0348(0x0004)
	float                                              InnerRadius;                                              // 0x034C(0x0004)
	float                                              OuterRadius;                                              // 0x0350(0x0004)
	float                                              AmbientSoundRadius;                                       // 0x0354(0x0004)
	float                                              ProximityRadius;                                          // 0x0358(0x0004)
	float                                              NextBeepTime;                                             // 0x035C(0x0004)
	float                                              ExplodeTimeRep;                                           // 0x0360(0x0004) (Net)
	float                                              Health;                                                   // 0x0364(0x0004)
	float                                              VerticalAdjust;                                           // 0x0368(0x0004) (Const)
	class UAudioComponent*                             AmbientSoundComponent;                                    // 0x036C(0x0004) (ExportObject, Component, EditInline)
	class USoundCue*                                   AmbientSnd;                                               // 0x0370(0x0004)
	class UClass*                                      ItemClass;                                                // 0x0374(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Disruptor");
		return ptr;
	}


	void DoDisruption();
	void Destroyed();
	void BeepSoundTimer();
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SetItemProjectileDefaults(class UR_ItemDatabaseProps* Props, int ItemSheetIdx);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Item_Disruptor_3_slot
// 0x0000 (0x026C - 0x026C)
class AR_Item_Disruptor_3_slot : public AR_Item_Disruptor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Disruptor_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Disruptor_4_slot
// 0x0000 (0x026C - 0x026C)
class AR_Item_Disruptor_4_slot : public AR_Item_Disruptor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Disruptor_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Drone
// 0x0004 (0x026C - 0x0268)
class AR_Item_Drone : public AR_Item_Base
{
public:
	class AR_NPC_Drone*                                Drone;                                                    // 0x0268(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Drone");
		return ptr;
	}


	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
};


// Class HawkenGame.R_Proj_EMP
// 0x0038 (0x037C - 0x0344)
class AR_Proj_EMP : public AR_Proj_Grenade
{
public:
	float                                              BlastRadius;                                              // 0x0344(0x0004)
	float                                              BlastDurationTurret;                                      // 0x0348(0x0004)
	float                                              BlastDurationRobot;                                       // 0x034C(0x0004)
	float                                              BlastDurationHologram;                                    // 0x0350(0x0004)
	float                                              BlastDurationRadar;                                       // 0x0354(0x0004)
	float                                              AmbientSoundRadius;                                       // 0x0358(0x0004)
	float                                              NextBeepTime;                                             // 0x035C(0x0004)
	float                                              ExplodeTimeRep;                                           // 0x0360(0x0004) (Net)
	float                                              ExplosionScaleRep;                                        // 0x0364(0x0004) (Net)
	float                                              Health;                                                   // 0x0368(0x0004)
	float                                              VerticalAdjust;                                           // 0x036C(0x0004) (Const)
	class UAudioComponent*                             AmbientSoundComponent;                                    // 0x0370(0x0004) (ExportObject, Component, EditInline)
	class USoundCue*                                   AmbientSnd;                                               // 0x0374(0x0004)
	class UClass*                                      ItemClass;                                                // 0x0378(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_EMP");
		return ptr;
	}


	void STATIC_EMPBlast(class AWorldInfo* InWorldInfo, class AController* InInstigatorController, const struct FVector& BlastCenter, float InBlastRadius, float InBlastDurationTurret, float InBlastDurationRobot, float InBlastDurationHologram, float InBlastDurationRadar);
	void Destroyed();
	void BeepSoundTimer();
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SetItemProjectileDefaults(class UR_ItemDatabaseProps* Props, int ItemSheetIdx);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Item_EMP_3_slot
// 0x0000 (0x0270 - 0x0270)
class AR_Item_EMP_3_slot : public AR_Item_EMP
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_EMP_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_EMP_4_slot
// 0x0000 (0x0270 - 0x0270)
class AR_Item_EMP_4_slot : public AR_Item_EMP
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_EMP_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_GravityBomb
// 0x0000 (0x0268 - 0x0268)
class AR_Item_GravityBomb : public AR_Item_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_GravityBomb");
		return ptr;
	}

};


// Class HawkenGame.R_Item_GravityBomb_3_slot
// 0x0000 (0x0268 - 0x0268)
class AR_Item_GravityBomb_3_slot : public AR_Item_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_GravityBomb_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_GravityBomb_4_slot
// 0x0000 (0x0268 - 0x0268)
class AR_Item_GravityBomb_4_slot : public AR_Item_GravityBomb
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_GravityBomb_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Grenade_3_Slot
// 0x0000 (0x0344 - 0x0344)
class AR_Proj_Grenade_3_Slot : public AR_Proj_Grenade
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Grenade_3_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Grenade_4_Slot
// 0x0000 (0x0344 - 0x0344)
class AR_Proj_Grenade_4_Slot : public AR_Proj_Grenade
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Grenade_4_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_GuidedMissile
// 0x0023 (0x034C - 0x0329)
class AR_Proj_GuidedMissile : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	class UClass*                                      ExploDamageType;                                          // 0x032C(0x0004)
	class UClass*                                      ExploTriggerType;                                         // 0x0330(0x0004)
	float                                              ExploRadius;                                              // 0x0334(0x0004)
	int                                                ExploDamage;                                              // 0x0338(0x0004)
	float                                              ExploMomentumTransfer;                                    // 0x033C(0x0004)
	int                                                ExploAmmoCost;                                            // 0x0340(0x0004)
	class USoundCue*                                   DetonateExplosionSound;                                   // 0x0344(0x0004)
	unsigned long                                      IsActive : 1;                                             // 0x0348(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_GuidedMissile");
		return ptr;
	}


	void Tick(float DeltaTime);
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Destroyed();
	void Explode(const struct FVector& HitLoc, const struct FVector& HitNormal);
	void Explosion();
};


// Class HawkenGame.R_Item_HeatMine
// 0x000C (0x0274 - 0x0268)
class AR_Item_HeatMine : public AR_Item_Base
{
public:
	float                                              HeatAmount;                                               // 0x0268(0x0004)
	float                                              MaxThrowMultiplier;                                       // 0x026C(0x0004)
	float                                              ThrowSpeed;                                               // 0x0270(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_HeatMine");
		return ptr;
	}


	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
	void SetItemProperties(class UR_ItemDatabaseProps* Props);
};


// Class HawkenGame.R_Item_HeatMine_3_slot
// 0x0000 (0x0274 - 0x0274)
class AR_Item_HeatMine_3_slot : public AR_Item_HeatMine
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_HeatMine_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_HeatMine_4_slot
// 0x0000 (0x0274 - 0x0274)
class AR_Item_HeatMine_4_slot : public AR_Item_HeatMine
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_HeatMine_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Hologram
// 0x0004 (0x026C - 0x0268)
class AR_Item_Hologram : public AR_Item_Base
{
public:
	int                                                MaxActiveHolograms;                                       // 0x0268(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Hologram");
		return ptr;
	}


	void Tick(float DeltaTime);
	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
};


// Class HawkenGame.R_Item_Hologram_3_slot
// 0x0000 (0x026C - 0x026C)
class AR_Item_Hologram_3_slot : public AR_Item_Hologram
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Hologram_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Hologram_4_slot
// 0x0000 (0x026C - 0x026C)
class AR_Item_Hologram_4_slot : public AR_Item_Hologram
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Hologram_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_LaserMine
// 0x0000 (0x0268 - 0x0268)
class AR_Item_LaserMine : public AR_Item_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_LaserMine");
		return ptr;
	}

};


// Class HawkenGame.R_Item_RadarScrambler
// 0x0004 (0x026C - 0x0268)
class AR_Item_RadarScrambler : public AR_Item_Base
{
public:
	float                                              activeTime;                                               // 0x0268(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_RadarScrambler");
		return ptr;
	}


	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
};


// Class HawkenGame.R_Proj_RadarScrambler
// 0x0000 (0x0344 - 0x0344)
class AR_Proj_RadarScrambler : public AR_Proj_DeployItem_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_RadarScrambler");
		return ptr;
	}


	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class HawkenGame.R_RadarScrambler
// 0x0008 (0x021C - 0x0214)
class AR_RadarScrambler : public AR_Radar_Base
{
public:
	class UUDKParticleSystemComponent*                 AuraEffect;                                               // 0x0214(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             LoopingSound;                                             // 0x0218(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_RadarScrambler");
		return ptr;
	}


	void Tick(float DeltaTime);
	void PostBeginPlay();
};


// Class HawkenGame.R_Item_RadarScrambler_3_slot
// 0x0000 (0x026C - 0x026C)
class AR_Item_RadarScrambler_3_slot : public AR_Item_RadarScrambler
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_RadarScrambler_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_RadarScrambler_4_slot
// 0x0000 (0x026C - 0x026C)
class AR_Item_RadarScrambler_4_slot : public AR_Item_RadarScrambler
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_RadarScrambler_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_RepairCharge
// 0x000C (0x0274 - 0x0268)
class AR_Item_RepairCharge : public AR_Item_Base
{
public:
	float                                              HealthAmount;                                             // 0x0268(0x0004)
	float                                              MaxThrowMultiplier;                                       // 0x026C(0x0004)
	float                                              ThrowSpeed;                                               // 0x0270(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_RepairCharge");
		return ptr;
	}


	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
	void SetItemProperties(class UR_ItemDatabaseProps* Props);
};


// Class HawkenGame.R_Item_RepairCharge_3_slot
// 0x0000 (0x0274 - 0x0274)
class AR_Item_RepairCharge_3_slot : public AR_Item_RepairCharge
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_RepairCharge_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_RepairCharge_4_slot
// 0x0000 (0x0274 - 0x0274)
class AR_Item_RepairCharge_4_slot : public AR_Item_RepairCharge
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_RepairCharge_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Shield_3_slot
// 0x0000 (0x026C - 0x026C)
class AR_Item_Shield_3_slot : public AR_Item_Shield
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Shield_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Shield_4_slot
// 0x0000 (0x026C - 0x026C)
class AR_Item_Shield_4_slot : public AR_Item_Shield
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Shield_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Shield_Tutorial
// 0x0004 (0x026C - 0x0268)
class AR_Item_Shield_Tutorial : public AR_Item_Base
{
public:
	float                                              MaxThrowMultiplier;                                       // 0x0268(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Shield_Tutorial");
		return ptr;
	}


	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
	void InitDeployedProjectile(class AR_Projectile* DeployedProjectile);
};


// Class HawkenGame.R_Proj_Shield_Tutorial
// 0x0003 (0x032C - 0x0329)
class AR_Proj_Shield_Tutorial : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Shield_Tutorial");
		return ptr;
	}


	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class HawkenGame.R_Item_ShockCoil
// 0x0008 (0x0270 - 0x0268)
class AR_Item_ShockCoil : public AR_Item_Base
{
public:
	float                                              activeTime;                                               // 0x0268(0x0004)
	class UClass*                                      ItemProjectileClass;                                      // 0x026C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_ShockCoil");
		return ptr;
	}


	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
};


// Class HawkenGame.R_Proj_ShockCoil
// 0x0000 (0x0344 - 0x0344)
class AR_Proj_ShockCoil : public AR_Proj_DeployItem_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_ShockCoil");
		return ptr;
	}

};


// Class HawkenGame.R_Item_ShockCoil_3_slot
// 0x0000 (0x0270 - 0x0270)
class AR_Item_ShockCoil_3_slot : public AR_Item_ShockCoil
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_ShockCoil_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_ShockCoil_4_slot
// 0x0000 (0x0270 - 0x0270)
class AR_Item_ShockCoil_4_slot : public AR_Item_ShockCoil
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_ShockCoil_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_SmokeScreen
// 0x0000 (0x0268 - 0x0268)
class AR_Item_SmokeScreen : public AR_Item_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_SmokeScreen");
		return ptr;
	}

};


// Class HawkenGame.R_Item_StickyBomb
// 0x0000 (0x0268 - 0x0268)
class AR_Item_StickyBomb : public AR_Item_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_StickyBomb");
		return ptr;
	}

};


// Class HawkenGame.R_Item_Teleporter
// 0x0014 (0x027C - 0x0268)
class AR_Item_Teleporter : public AR_Item_Base
{
public:
	int                                                portalSize;                                               // 0x0268(0x0004)
	class AR_Portal*                                   Portal[0x2];                                              // 0x026C(0x0004)
	int                                                hold;                                                     // 0x0274(0x0004)
	float                                              distanceFromWall;                                         // 0x0278(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_Teleporter");
		return ptr;
	}


	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
	void DoPortal(unsigned char I, const struct FVector& StartShot, const struct FVector& EndShot, class AR_Pawn* Activator);
};


// Class HawkenGame.R_Portal
// 0x0034 (0x0208 - 0x01D4)
class AR_Portal : public AActor
{
public:
	class UMaterialInstanceConstant*                   PortalMaterialInstance;                                   // 0x01D4(0x0004)
	class UStaticMeshComponent*                        StaticMesh;                                               // 0x01D8(0x0004) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        traceMesh;                                                // 0x01DC(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             PortalHum;                                                // 0x01E0(0x0004) (ExportObject, Component, EditInline)
	class AR_Pawn*                                     PortalOwner;                                              // 0x01E4(0x0004) (Net)
	float                                              MaxViewDist;                                              // 0x01E8(0x0004) (Edit)
	unsigned long                                      Enabled : 1;                                              // 0x01EC(0x0004) (Edit)
	class USceneCapturePortalComponent*                pCaptureComponent;                                        // 0x01F0(0x0004) (Edit, ExportObject, Component, EditInline)
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x01F4(0x0004)
	TArray<class AActor*>                              ignoreArray;                                              // 0x01F8(0x000C) (NeedCtorLink)
	class AR_Portal*                                   MyTarget;                                                 // 0x0204(0x0004) (Edit, Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Portal");
		return ptr;
	}


	bool StopsProjectile(class AProjectile* P);
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	void PostBeginPlay();
	void setClientTarget(class AR_Portal* targ);
	void setTarget(class AR_Portal* targ);
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void Tick(float DeltaTime);
	float distanceFromPlane(const struct FVector& P);
	void tele(class AActor* A, const struct FVector& aLoc, bool isProjectile);
	void updatePos(const struct FVector& Loc, const struct FRotator& Rot);
	void Touch(class AActor* A, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void touched(class AActor* A, const struct FVector& HitNormal);
	void UnTouch(class AActor* Other);
	void unTouched(class AActor* Other);
	struct FVector TransformVectorDir(const struct FVector& Dir);
	struct FRotator TransformRotation(const struct FRotator& Dir);
	struct FVector vfp(const struct FPlane& P);
	struct FRotator TransformDir(const struct FRotator& Dir);
	struct FVector TransformHitLocation(const struct FVector& HitLocation, bool isProjectile);
	void STATIC_PortalRotate(const struct FMatrix& sourceTranspose, const struct FMatrix& Dest, bool flippX, bool flippY, struct FVector* vec);
	struct FRotator STATIC_rfa(const struct FVector& X, const struct FVector& Y, const struct FVector& Z);
	void STATIC_rotateVecByNormals(const struct FVector& entryNormal, const struct FVector& exitNormal, struct FVector* vec);
	struct FVector STATIC_multiplyVectorWithMatrix(const struct FVector& V, const struct FMatrix& M);
	struct FMatrix STATIC_transpose(const struct FMatrix& M);
	void Refresh();
	void ReplicatedEvent(const struct FName& VarName);
	void OnDeath();
	void Deactivate();
};


// Class HawkenGame.R_Item_TrophySystem
// 0x0008 (0x0270 - 0x0268)
class AR_Item_TrophySystem : public AR_Item_Base
{
public:
	float                                              activeTime;                                               // 0x0268(0x0004)
	class UClass*                                      ItemProjectileClass;                                      // 0x026C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_TrophySystem");
		return ptr;
	}


	bool OnActivate(class AR_Pawn* Activator, float ChargeTime);
};


// Class HawkenGame.R_TrophyTurret
// 0x0000 (0x0214 - 0x0214)
class AR_TrophyTurret : public AR_Radar_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_TrophyTurret");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_TrophyTurret
// 0x0000 (0x0344 - 0x0344)
class AR_Proj_TrophyTurret : public AR_Proj_DeployItem_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_TrophyTurret");
		return ptr;
	}

};


// Class HawkenGame.R_Item_TrophySystem_3_slot
// 0x0000 (0x0270 - 0x0270)
class AR_Item_TrophySystem_3_slot : public AR_Item_TrophySystem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_TrophySystem_3_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Item_TrophySystem_4_slot
// 0x0000 (0x0270 - 0x0270)
class AR_Item_TrophySystem_4_slot : public AR_Item_TrophySystem
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Item_TrophySystem_4_slot");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Dummy
// 0x0000 (0x05CC - 0x05CC)
class AR_Weap_Dummy : public AR_Weap_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Dummy");
		return ptr;
	}


	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Proj_Turret_Rocket
// 0x001F (0x0348 - 0x0329)
class AR_Proj_Turret_Rocket : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              LaunchTime;                                               // 0x032C(0x0004)
	struct FVector                                     Horizontal;                                               // 0x0330(0x000C)
	struct FVector                                     Vertical;                                                 // 0x033C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Turret_Rocket");
		return ptr;
	}


	void Tick(float DeltaTime);
};


// Class HawkenGame.R_Proj_Turret_Rocket_3_Slot
// 0x0000 (0x0348 - 0x0348)
class AR_Proj_Turret_Rocket_3_Slot : public AR_Proj_Turret_Rocket
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Turret_Rocket_3_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Turret_Rocket_4_Slot
// 0x0000 (0x0348 - 0x0348)
class AR_Proj_Turret_Rocket_4_Slot : public AR_Proj_Turret_Rocket
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Turret_Rocket_4_Slot");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_CannonBall
// 0x001B (0x0344 - 0x0329)
class AR_Proj_CannonBall : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	struct FVector                                     FirstPersonOffset;                                        // 0x032C(0x000C) (Const)
	struct FVector                                     ThirdPersonOffset;                                        // 0x0338(0x000C) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_CannonBall");
		return ptr;
	}


	void Tick(float DeltaTime);
	void PostBeginPlay();
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Proj_LoadedCannonBall
// 0x0000 (0x0344 - 0x0344)
class AR_Proj_LoadedCannonBall : public AR_Proj_CannonBall
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_LoadedCannonBall");
		return ptr;
	}

};


// Class HawkenGame.R_RepeaterExplosive
// 0x002F (0x0358 - 0x0329)
class AR_RepeaterExplosive : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              ExplodeTime;                                              // 0x032C(0x0004)
	float                                              ProximityDistance;                                        // 0x0330(0x0004)
	unsigned long                                      bExplodeOnProximity : 1;                                  // 0x0334(0x0004) (Const)
	unsigned char                                      TeamIndex;                                                // 0x0338(0x0001) (Net)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0339(0x0003) MISSED OFFSET
	struct FVector                                     FriendlyColor;                                            // 0x033C(0x000C) (Const)
	struct FVector                                     enemyColor;                                               // 0x0348(0x000C) (Const)
	float                                              MaxTraceRate;                                             // 0x0354(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_RepeaterExplosive");
		return ptr;
	}


	void SpawnExplosionEffects(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void RetraceTimer();
	void Tick(float DeltaTime);
	void SetProjectileTeam();
	struct FVector GetHitNormal();
	void ExplodeTimer();
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_ItemSpawner
// 0x0003 (0x01E0 - 0x01DD)
class AR_ItemSpawner : public AStaticMeshActor
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x01DD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ItemSpawner");
		return ptr;
	}

};


// Class HawkenGame.R_PlantBulb
// 0x0015 (0x01E9 - 0x01D4)
class AR_PlantBulb : public AActor
{
public:
	class UAnimNodeBlendList*                          StateList;                                                // 0x01D4(0x0004)
	class UUDKSkeletalMeshComponent*                   PlantMesh;                                                // 0x01D8(0x0004) (ExportObject, Component, EditInline)
	class UAnimNodeAdditiveBlending*                   AdditiveBlendNode;                                        // 0x01DC(0x0004)
	class UAnimNodeSequence*                           AdditiveAnim;                                             // 0x01E0(0x0004)
	class UParticleSystem*                             PoppedEffect;                                             // 0x01E4(0x0004) (Edit)
	TEnumAsByte<EPlantState_e>                         PlantState;                                               // 0x01E8(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PlantBulb");
		return ptr;
	}


	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent);
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PlantIdle();
	void PlantGrow();
	void PlayAdditiveAnim();
	void AddPop();
	void PlantPopped();
	void CooldownTimer();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void PostBeginPlay();
};


// Class HawkenGame.R_RadialBlur
// 0x0000 (0x00C0 - 0x00C0)
class UR_RadialBlur : public URadialBlurComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_RadialBlur");
		return ptr;
	}

};


// Class HawkenGame.R_LaserMine
// 0x0043 (0x036C - 0x0329)
class AR_LaserMine : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              Health;                                                   // 0x032C(0x0004) (Net)
	unsigned char                                      TeamIndex;                                                // 0x0330(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0331(0x0003) MISSED OFFSET
	unsigned long                                      bTeamTrip : 1;                                            // 0x0334(0x0004)
	float                                              ProximityDistance;                                        // 0x0338(0x0004)
	float                                              ArmTime;                                                  // 0x033C(0x0004)
	float                                              ExplodeTime;                                              // 0x0340(0x0004)
	float                                              TimeAlive;                                                // 0x0344(0x0004)
	float                                              NextTraceTime;                                            // 0x0348(0x0004)
	float                                              TraceUpdateRate;                                          // 0x034C(0x0004)
	float                                              TraceDistance;                                            // 0x0350(0x0004)
	struct FVector                                     BeamTraceEndLoc;                                          // 0x0354(0x000C) (Net)
	struct FVector                                     ExplosionLoc;                                             // 0x0360(0x000C) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_LaserMine");
		return ptr;
	}


	void OnOwnerDestroyed();
	bool IsDead();
	bool CanBeHealed();
	void OnPawnTouch(class APawn* P);
	bool WasDeployedByPawn(class APawn* P);
	float GetHealthPercent();
	bool ShowDefaultIndicator(struct FVector* retIndicatorLoc, struct FVector* retIndicatorSize, struct FString* retDisplayName, float* retHealthPercent, float* retHealthMax);
	struct FString GetDisplayName();
	bool IsFriendly(bool bTeamGame, class APawn* P);
};


// Class HawkenGame.R_LevitateVolume
// 0x0008 (0x0248 - 0x0240)
class AR_LevitateVolume : public APhysicsVolume
{
public:
	float                                              LevitateSpeed;                                            // 0x0240(0x0004) (Edit)
	float                                              LevitateAccel;                                            // 0x0244(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_LevitateVolume");
		return ptr;
	}


	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class HawkenGame.R_LoadingScreen
// 0x0000 (0x016C - 0x016C)
class UR_LoadingScreen : public UR_GFx_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_LoadingScreen");
		return ptr;
	}


	bool Start(bool StartPaused);
};


// Class HawkenGame.R_LoginDialog
// 0x009C (0x023C - 0x01A0)
class UR_LoginDialog : public UR_Dialog
{
public:
	struct FString                                     Email;                                                    // 0x01A0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             OnLoginDialogClosed;                                      // 0x01AC(0x000C) (NeedCtorLink)
	struct FString                                     UI_LabelLogin;                                            // 0x01B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelEmail;                                            // 0x01C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelPassword;                                         // 0x01D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelCitizenID;                                        // 0x01DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_LabelCreateAccount;                                    // 0x01E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ButtonConfirm;                                         // 0x01F4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     UI_ButtonCancel;                                          // 0x0200(0x000C) (Const, Localized, NeedCtorLink)
	struct FScriptDelegate                             __HandleLoginDialogSubmitDelegate__Delegate;              // 0x020C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleLoginDialogClosedDelegate__Delegate;              // 0x0218(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleLoginDialogCreateAccountDelegate__Delegate;       // 0x0224(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleOpenPasswordRecoveryDelegate__Delegate;           // 0x0230(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_LoginDialog");
		return ptr;
	}


	void HideStatusTicker();
	void ShowStatusTicker(const struct FString& Message, const struct FString& Type);
	void UnRegisterDelegates();
	void RegisterDelegates();
	void SetDelegate_HandleOpenPasswordRecovery(const struct FScriptDelegate& Delegated);
	void HandleOpenPasswordRecovery();
	void HandleOpenPasswordRecoveryDelegate();
	void SetDelegate_HandleLoginDialogCreateAccount(const struct FScriptDelegate& Delegated);
	void HandleLoginDialogCreateAccount();
	void HandleLoginDialogCreateAccountDelegate();
	void SetDelegate_HandleLoginDialogClosed(const struct FScriptDelegate& Delegated);
	void HandleLoginDialogClosed(class UGFxObject* Data);
	void HandleLoginDialogClosedDelegate(class UGFxObject* Data);
	void SetDelegate_HandleLoginDialogSubmit(const struct FScriptDelegate& Delegated);
	void HandleLoginDialogSubmit(class UGFxObject* Data);
	void HandleLoginDialogSubmitDelegate(class UGFxObject* Data);
	class UGFxObject* ShowLoginDialog(bool InFailed, const struct FString& InEmail, TArray<struct FString> LocalizationArray, bool bIsChinaBuild);
	class UGFxObject* InternalShowDialog();
};


// Class HawkenGame.R_MechSubType_A_Berserker
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_A_Berserker : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_A_Berserker");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_A_Infiltrator
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_A_Infiltrator : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_A_Infiltrator");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_B_Raider
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_B_Raider : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_B_Raider");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_A_Sniper
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_A_Sniper : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_A_Sniper");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_A_Technician
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_A_Technician : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_A_Technician");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_B_Bruiser
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_B_Bruiser : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_B_Bruiser");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_B_Demolition
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_B_Demolition : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_B_Demolition");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_B_Forger
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_B_Forger : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_B_Forger");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_B_Sharpshooter
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_B_Sharpshooter : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_B_Sharpshooter");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_C_Brawler
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_C_Brawler : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_C_Brawler");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_C_Mortarer
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_C_Mortarer : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_C_Mortarer");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_C_Rocketeer
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_C_Rocketeer : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_C_Rocketeer");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_A_Scout
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_A_Scout : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_A_Scout");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_C_Grenadier
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_C_Grenadier : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_C_Grenadier");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_B_Assault
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_B_Assault : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_B_Assault");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_C_Vanguard
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_C_Vanguard : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_C_Vanguard");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_B_Predator
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_B_Predator : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_B_Predator");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_A_G2_Infiltrator
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_A_G2_Infiltrator : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_A_G2_Infiltrator");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_B_G2_Sharpshooter
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_B_G2_Sharpshooter : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_B_G2_Sharpshooter");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_C_G2_Raider
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_C_G2_Raider : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_C_G2_Raider");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_C_Vanguard_3
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_C_Vanguard_3 : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_C_Vanguard_3");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_B_G2_Assault
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_B_G2_Assault : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_B_G2_Assault");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_A_Pusher
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_A_Pusher : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_A_Pusher");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_C_SiegeTank
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_C_SiegeTank : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_C_SiegeTank");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_A_G2_Berserker
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_A_G2_Berserker : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_A_G2_Berserker");
		return ptr;
	}

};


// Class HawkenGame.R_MechSubType_C_Brawler_BossMode
// 0x0000 (0x0718 - 0x0718)
class UR_MechSubType_C_Brawler_BossMode : public UR_MechSubType_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSubType_C_Brawler_BossMode");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_VampGun
// 0x0040 (0x060C - 0x05CC)
class AR_Weap_VampGun : public AR_Weap_Base
{
public:
	float                                              UpdateTargetRateSeconds;                                  // 0x05CC(0x0004)
	class AActor*                                      TargetActor;                                              // 0x05D0(0x0004) (Net)
	float                                              TotalDamage;                                              // 0x05D4(0x0004)
	float                                              TotalHeal;                                                // 0x05D8(0x0004)
	float                                              TotalSelfHeal;                                            // 0x05DC(0x0004)
	float                                              totalXP;                                                  // 0x05E0(0x0004)
	unsigned long                                      IsFiring : 1;                                             // 0x05E4(0x0004)
	unsigned long                                      bCanRepairTarget : 1;                                     // 0x05E4(0x0004)
	float                                              TargetUpdateTimer;                                        // 0x05E8(0x0004)
	TEnumAsByte<EHealBeamMode_e>                       TargetBeamMode;                                           // 0x05EC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x05ED(0x0003) MISSED OFFSET
	float                                              DamageVampirePercent;                                     // 0x05F0(0x0004)
	float                                              KeepLockonDegrees;                                        // 0x05F4(0x0004)
	float                                              BeamRange;                                                // 0x05F8(0x0004)
	float                                              HeatPerSecond;                                            // 0x05FC(0x0004)
	float                                              DamagePerSecond;                                          // 0x0600(0x0004)
	int                                                DamageIncrement;                                          // 0x0604(0x0004)
	int                                                VampireIncrement;                                         // 0x0608(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_VampGun");
		return ptr;
	}


	void UpdateTarget();
	void FireAmmunition();
	void DoDamageLogic(float DeltaTime);
	void DoFiringLogic(float DeltaTime);
	bool CanHealActor(class AActor* Target);
	void UpdateBeamMode();
	bool CanAffectTarget(class AActor* Target);
	void Tick(float DeltaTime);
	void DoEndFire(bool bForceEnd);
	void DoBeginFire();
	float GetCooldownTime();
	void BeginAltFire();
	void ResetTarget();
	void PostBeginPlay();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_MechSwapStation
// 0x0027 (0x0204 - 0x01DD)
class AR_MechSwapStation : public AStaticMeshActor
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x01DD(0x0003) MISSED OFFSET
	struct FVector                                     MechLocation;                                             // 0x01E0(0x000C)
	struct FRotator                                    MechRotation;                                             // 0x01EC(0x000C)
	int                                                ActivatorTeam;                                            // 0x01F8(0x0004) (Edit)
	class AR_PlayerController*                         PlayerActivator;                                          // 0x01FC(0x0004) (Transient)
	unsigned long                                      bPending : 1;                                             // 0x0200(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MechSwapStation");
		return ptr;
	}


	bool Interactive_Activate(class AActor* EventInstigator);
	bool Interactive_IsValidFor(class AActor* A);
	float Interactive_GetMaxInteractiveDist();
	float Interactive_GetMinInteractiveAngle();
	struct FRotator Interactive_GetRotation();
	struct FVector Interactive_GetLocation(const struct FVector& TraceHitLoc);
	class AR_Pawn* GetActivatorPawn(class AActor* Activator);
	class AR_PlayerController* GetActivatorController(class AActor* Activator);
	void Tick(float DeltaTime);
	bool CanUseSwapper(class AR_Pawn* RPawn, struct FString* FailReason);
	bool WrongTeam(class AR_Pawn* RPawn);
	bool Activate(class AController* EventInstigator);
	struct FVector GetHintTestLocation(const struct FVector& TraceHitLoc);
	float GetHintRange();
	TEnumAsByte<EHintType> GetHint(class AR_Pawn* RPawn);
};


// Class HawkenGame.R_MenuGame
// 0x0000 (0x0450 - 0x0450)
class AR_MenuGame : public AR_MenuGameBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MenuGame");
		return ptr;
	}

};


// Class HawkenGame.R_PRI_MA
// 0x0000 (0x0730 - 0x0730)
class AR_PRI_MA : public AR_PlayerReplicationInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PRI_MA");
		return ptr;
	}

};


// Class HawkenGame.R_MissileLight
// 0x0000 (0x0220 - 0x0220)
class UR_MissileLight : public UUDKExplosionLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MissileLight");
		return ptr;
	}

};


// Class HawkenGame.R_MoonDrill
// 0x0041 (0x0215 - 0x01D4)
class AR_MoonDrill : public AActor
{
public:
	class UAnimNodeSlot*                               AnimationSlot;                                            // 0x01D4(0x0004)
	float                                              CurrentRotation;                                          // 0x01D8(0x0004)
	class UUDKSkelControl_Rotate*                      DrillRotateControl;                                       // 0x01DC(0x0004)
	unsigned long                                      DrillIsUp : 1;                                            // 0x01E0(0x0004)
	unsigned long                                      DrillTurning : 1;                                         // 0x01E0(0x0004) (Net)
	int                                                DrillRotation;                                            // 0x01E4(0x0004) (Net)
	class UStaticMeshComponent*                        BaseMesh;                                                 // 0x01E8(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              DrillDownTime;                                            // 0x01EC(0x0004) (Edit)
	float                                              DrillUpTime;                                              // 0x01F0(0x0004) (Edit)
	float                                              DrillRotateRate;                                          // 0x01F4(0x0004) (Edit, Net)
	TArray<float>                                      DrillAngles;                                              // 0x01F8(0x000C) (Edit, NeedCtorLink)
	int                                                RotateCenter;                                             // 0x0204(0x0004) (Edit, Net)
	int                                                TargetIndex;                                              // 0x0208(0x0004)
	int                                                TargetAngle;                                              // 0x020C(0x0004) (Net)
	class UUDKSkeletalMeshComponent*                   DrillMesh;                                                // 0x0210(0x0004) (ExportObject, Component, EditInline)
	TEnumAsByte<ER_MoonDrill_DrillState_e>             DrillState;                                               // 0x0214(0x0001) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MoonDrill");
		return ptr;
	}


	void PlayDownAnim();
	void PlayUpAnim();
	void DrillDownTimer();
	void DrillUpTimer();
	void DrillTurningTimer();
	void Tick(float DeltaTime);
	void CooldownTimer();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_MoonPump
// 0x0009 (0x01DD - 0x01D4)
class AR_MoonPump : public AActor
{
public:
	class UAnimNodeSlot*                               AnimationSlot;                                            // 0x01D4(0x0004)
	class UUDKSkeletalMeshComponent*                   DrillMesh;                                                // 0x01D8(0x0004) (ExportObject, Component, EditInline)
	TEnumAsByte<ER_MoonPump_DrillState_e>              PumpState;                                                // 0x01DC(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MoonPump");
		return ptr;
	}


	void PlayPump();
	void PlayDrill();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void PostBeginPlay();
};


// Class HawkenGame.R_MoonSpinner
// 0x002D (0x0201 - 0x01D4)
class AR_MoonSpinner : public AActor
{
public:
	class UAnimNodeSlot*                               AnimationSlot;                                            // 0x01D4(0x0004)
	float                                              CurrentRotation;                                          // 0x01D8(0x0004)
	unsigned long                                      IdleRight : 1;                                            // 0x01DC(0x0004)
	class UStaticMeshComponent*                        BaseMesh;                                                 // 0x01E0(0x0004) (Edit, ExportObject, Component, EditInline)
	class UUDKSkeletalMeshComponent*                   DrillMesh;                                                // 0x01E4(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             SpinnerLiftEffect;                                        // 0x01E8(0x0004)
	class UParticleSystem*                             DustupParticles;                                          // 0x01EC(0x0004)
	class UParticleSystemComponent*                    DrillUpEffect;                                            // 0x01F0(0x0004) (ExportObject, Component, EditInline)
	float                                              SpinnerDownTime;                                          // 0x01F4(0x0004) (Edit)
	float                                              AnimRateScale;                                            // 0x01F8(0x0004) (Edit)
	float                                              EffectHeightOffset;                                       // 0x01FC(0x0004) (Edit)
	TEnumAsByte<ER_MoonSpinner_DrillState_e>           DrillState;                                               // 0x0200(0x0001) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_MoonSpinner");
		return ptr;
	}


	void PlaySpinToLeft();
	void PlaySpinToRight();
	void Tick(float DeltaTime);
	void CooldownTimer();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Mushroom
// 0x0024 (0x0260 - 0x023C)
class AR_Mushroom : public AFracturedStaticMeshActor
{
public:
	class UStaticMeshComponent*                        SproutStaticMeshComp;                                     // 0x023C(0x0004) (ExportObject, Component, EditInline)
	class UStaticMesh*                                 SproutSM[0x4];                                            // 0x0240(0x0004)
	class UFracturedStaticMesh*                        DishMesh[0x4];                                            // 0x0250(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Mushroom");
		return ptr;
	}


	void Tick(float DeltaTime);
	void PostBeginPlay();
};


// Class HawkenGame.R_NetSplineActor
// 0x0004 (0x0228 - 0x0224)
class AR_NetSplineActor : public ASplineActor
{
public:
	int                                                AAIndex;                                                  // 0x0224(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_NetSplineActor");
		return ptr;
	}

};


// Class HawkenGame.SeqEvent_CoOpCinematicTriggered
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_CoOpCinematicTriggered : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqEvent_CoOpCinematicTriggered");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	void Activated();
};


// Class HawkenGame.R_Proj_Rocket
// 0x001F (0x0348 - 0x0329)
class AR_Proj_Rocket : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              LaunchTime;                                               // 0x032C(0x0004)
	struct FVector                                     Horizontal;                                               // 0x0330(0x000C)
	struct FVector                                     Vertical;                                                 // 0x033C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Rocket");
		return ptr;
	}


	void SpawnExplosionEffects(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Tick(float DeltaTime);
	void PostBeginPlay();
};


// Class HawkenGame.R_PathTargetNode
// 0x0000 (0x02B4 - 0x02B4)
class AR_PathTargetNode : public AR_PathNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PathTargetNode");
		return ptr;
	}

};


// Class HawkenGame.R_PlayerControllerHorde
// 0x0000 (0x16C8 - 0x16C8)
class AR_PlayerControllerHorde : public AR_PlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PlayerControllerHorde");
		return ptr;
	}

};


// Class HawkenGame.R_PostDeathExplosion
// 0x0008 (0x0331 - 0x0329)
class AR_PostDeathExplosion : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              ProximityDistance;                                        // 0x032C(0x0004)
	unsigned char                                      TeamIndex;                                                // 0x0330(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PostDeathExplosion");
		return ptr;
	}


	void DoExplosion();
	void SpawnExplosionEffects(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void Tick(float DeltaTime);
	void StartExplosionTimer(float ExplodeDelay);
};


// Class HawkenGame.R_RocketExplosionLight
// 0x0000 (0x0220 - 0x0220)
class UR_RocketExplosionLight : public UUDKExplosionLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_RocketExplosionLight");
		return ptr;
	}

};


// Class HawkenGame.R_PredatorExplosive
// 0x0000 (0x0358 - 0x0358)
class AR_PredatorExplosive : public AR_RepeaterExplosive
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PredatorExplosive");
		return ptr;
	}


	void SpawnExplosionEffects(const struct FVector& HitLocation, const struct FVector& HitNormal);
	struct FVector GetHitNormal();
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
};


// Class HawkenGame.R_PredatorExplosive_V2
// 0x0000 (0x0358 - 0x0358)
class AR_PredatorExplosive_V2 : public AR_RepeaterExplosive
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_PredatorExplosive_V2");
		return ptr;
	}


	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
};


// Class HawkenGame.R_Taunt
// 0x0094 (0x0268 - 0x01D4)
class AR_Taunt : public AActor
{
public:
	unsigned char                                      Type;                                                     // 0x01D4(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01D5(0x0003) MISSED OFFSET
	int                                                bStartDeployed;                                           // 0x01D8(0x0004)
	class UUDKSkeletalMeshComponent*                   TauntMesh;                                                // 0x01DC(0x0004) (ExportObject, Component, EditInline)
	class UUDKParticleSystemComponent*                 TauntParticles;                                           // 0x01E0(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystem*                             ParticleTaunts[0x10];                                     // 0x01E4(0x0004)
	class USoundCue*                                   TauntSounds[0x10];                                        // 0x0224(0x0004)
	float                                              EffectDelay;                                              // 0x0264(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Taunt");
		return ptr;
	}


	void Tick(float DeltaTime);
	void SetType(int newType);
	void Reset();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Proj_AntiAirMissile
// 0x0013 (0x033C - 0x0329)
class AR_Proj_AntiAirMissile : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              StartHomingTime;                                          // 0x032C(0x0004)
	float                                              TimeActive;                                               // 0x0330(0x0004)
	int                                                TeamIndex;                                                // 0x0334(0x0004)
	unsigned long                                      bProjectileDamagedBattleship : 1;                         // 0x0338(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_AntiAirMissile");
		return ptr;
	}


	void Destroyed();
	void DamageBattleship();
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Tick(float DeltaTime);
};


// Class HawkenGame.R_RocketLight
// 0x0000 (0x0220 - 0x0220)
class UR_RocketLight : public UUDKExplosionLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_RocketLight");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Battleship
// 0x001B (0x0344 - 0x0329)
class AR_Proj_Battleship : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	struct FVector                                     HomingLocation;                                           // 0x032C(0x000C) (Net)
	unsigned long                                      bTargetLock : 1;                                          // 0x0338(0x0004) (Net)
	unsigned long                                      bPredictTarget : 1;                                       // 0x0338(0x0004)
	unsigned long                                      bPawnMissile : 1;                                         // 0x0338(0x0004)
	float                                              StartHomingTime;                                          // 0x033C(0x0004)
	float                                              TimeActive;                                               // 0x0340(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Battleship");
		return ptr;
	}


	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Tick(float DeltaTime);
};


// Class HawkenGame.R_Proj_Bugshot
// 0x000B (0x0334 - 0x0329)
class AR_Proj_Bugshot : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              ExplodeTime;                                              // 0x032C(0x0004)
	float                                              CooldownTime;                                             // 0x0330(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Bugshot");
		return ptr;
	}


	void ExplodeTimer();
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PostBeginPlay();
};


// Class HawkenGame.R_Proj_BugSpit
// 0x000B (0x0334 - 0x0329)
class AR_Proj_BugSpit : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              ExplodeTime;                                              // 0x032C(0x0004)
	float                                              CooldownTime;                                             // 0x0330(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_BugSpit");
		return ptr;
	}


	void ExplodeTimer();
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PostBeginPlay();
};


// Class HawkenGame.R_Proj_Decoy
// 0x0000 (0x0344 - 0x0344)
class AR_Proj_Decoy : public AR_Proj_DeployItem_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Decoy");
		return ptr;
	}


	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class HawkenGame.R_Proj_RepeaterShot
// 0x0037 (0x0360 - 0x0329)
class AR_Proj_RepeaterShot : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	struct FRotator                                    FlightRotation;                                           // 0x032C(0x000C) (Edit)
	class UClass*                                      DeployedProjClass;                                        // 0x0338(0x0004)
	int                                                WeaponHand;                                               // 0x033C(0x0004)
	unsigned char                                      TeamIndex;                                                // 0x0340(0x0001) (Net)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0341(0x0003) MISSED OFFSET
	struct FVector                                     FriendlyColor;                                            // 0x0344(0x000C) (Const)
	struct FVector                                     enemyColor;                                               // 0x0350(0x000C) (Const)
	float                                              DistanceFromSurface;                                      // 0x035C(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_RepeaterShot");
		return ptr;
	}


	void OnSpawnMine(class AR_RepeaterExplosive* NewBomb);
	void GetMineRotation(const struct FVector& HitNormal, struct FRotator* AdjustRotation);
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SetProjectileTeam();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class HawkenGame.R_Proj_EOC_Predator
// 0x0000 (0x0360 - 0x0360)
class AR_Proj_EOC_Predator : public AR_Proj_RepeaterShot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_EOC_Predator");
		return ptr;
	}


	void GetMineRotation(const struct FVector& HitNormal, struct FRotator* AdjustRotation);
	void OnSpawnMine(class AR_RepeaterExplosive* NewBomb);
};


// Class HawkenGame.R_Proj_EOC_Predator_V2
// 0x0000 (0x0360 - 0x0360)
class AR_Proj_EOC_Predator_V2 : public AR_Proj_RepeaterShot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_EOC_Predator_V2");
		return ptr;
	}


	void GetMineRotation(const struct FVector& HitNormal, struct FRotator* AdjustRotation);
	void OnSpawnMine(class AR_RepeaterExplosive* NewBomb);
};


// Class HawkenGame.R_Proj_GrenadeLauncher
// 0x0005 (0x0349 - 0x0344)
class AR_Proj_GrenadeLauncher : public AR_Proj_Grenade
{
public:
	float                                              ProximityDistance;                                        // 0x0344(0x0004)
	unsigned char                                      TeamIndex;                                                // 0x0348(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_GrenadeLauncher");
		return ptr;
	}


	void Tick(float DeltaTime);
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Proj_GrenadeLauncher_Buffed
// 0x0003 (0x034C - 0x0349)
class AR_Proj_GrenadeLauncher_Buffed : public AR_Proj_GrenadeLauncher
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0349(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_GrenadeLauncher_Buffed");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_GrenadeLauncher_V2
// 0x0000 (0x0344 - 0x0344)
class AR_Proj_GrenadeLauncher_V2 : public AR_Proj_Grenade
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_GrenadeLauncher_V2");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_GrenadeLauncher_V3
// 0x0000 (0x0344 - 0x0344)
class AR_Proj_GrenadeLauncher_V3 : public AR_Proj_Grenade
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_GrenadeLauncher_V3");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_H6_Launcher
// 0x0005 (0x0349 - 0x0344)
class AR_Proj_H6_Launcher : public AR_Proj_Grenade
{
public:
	float                                              ProximityDistance;                                        // 0x0344(0x0004)
	unsigned char                                      TeamIndex;                                                // 0x0348(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_H6_Launcher");
		return ptr;
	}


	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void Tick(float DeltaTime);
	void PostBeginPlay();
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Proj_HeatLauncher
// 0x0018 (0x035C - 0x0344)
class AR_Proj_HeatLauncher : public AR_Proj_Grenade
{
public:
	float                                              ProximityDistance;                                        // 0x0344(0x0004)
	float                                              HeatGivenBase;                                            // 0x0348(0x0004)
	float                                              HeatGiven_Charged;                                        // 0x034C(0x0004)
	float                                              DamageRadiusSqr;                                          // 0x0350(0x0004) (Transient)
	unsigned char                                      TeamIndex;                                                // 0x0354(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0355(0x0003) MISSED OFFSET
	unsigned long                                      bScaleVisuals : 1;                                        // 0x0358(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_HeatLauncher");
		return ptr;
	}


	void NonSingularHitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool ShouldGiveHeatToPawn(class AR_Pawn* RP);
	void Tick(float DeltaTime);
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Proj_HeatLauncherCharged
// 0x0000 (0x035C - 0x035C)
class AR_Proj_HeatLauncherCharged : public AR_Proj_HeatLauncher
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_HeatLauncherCharged");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_HomingMissile_V2
// 0x0000 (0x0348 - 0x0348)
class AR_Proj_HomingMissile_V2 : public AR_Proj_HomingMissile
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_HomingMissile_V2");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_HomingMissile_V3
// 0x0000 (0x0348 - 0x0348)
class AR_Proj_HomingMissile_V3 : public AR_Proj_HomingMissile
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_HomingMissile_V3");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_LaserMine
// 0x0007 (0x0330 - 0x0329)
class AR_Proj_LaserMine : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	class UClass*                                      LaserMineClass;                                           // 0x032C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_LaserMine");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_LoadedCannonBall_Buffed
// 0x0000 (0x0344 - 0x0344)
class AR_Proj_LoadedCannonBall_Buffed : public AR_Proj_LoadedCannonBall
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_LoadedCannonBall_Buffed");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_N_DOW
// 0x000B (0x0334 - 0x0329)
class AR_Proj_N_DOW : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              ExplodeTime;                                              // 0x032C(0x0004)
	float                                              TimeAlive;                                                // 0x0330(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_N_DOW");
		return ptr;
	}


	void Tick(float DeltaTime);
	void PostBeginPlay();
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Proj_N_DOW_Alt
// 0x000B (0x0334 - 0x0329)
class AR_Proj_N_DOW_Alt : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              ExplodeTime;                                              // 0x032C(0x0004)
	float                                              TimeAlive;                                                // 0x0330(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_N_DOW_Alt");
		return ptr;
	}


	void Tick(float DeltaTime);
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Proj_N_DOW_Alt_Brawler_XT
// 0x0000 (0x0334 - 0x0334)
class AR_Proj_N_DOW_Alt_Brawler_XT : public AR_Proj_N_DOW_Alt
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_N_DOW_Alt_Brawler_XT");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_N_DOW_Brawler_XT
// 0x0000 (0x0334 - 0x0334)
class AR_Proj_N_DOW_Brawler_XT : public AR_Proj_N_DOW
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_N_DOW_Brawler_XT");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_N_DOW_Main
// 0x0000 (0x0334 - 0x0334)
class AR_Proj_N_DOW_Main : public AR_Proj_N_DOW
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_N_DOW_Main");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_N_DOW_Main_Brawler_XT
// 0x0000 (0x0334 - 0x0334)
class AR_Proj_N_DOW_Main_Brawler_XT : public AR_Proj_N_DOW_Brawler_XT
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_N_DOW_Main_Brawler_XT");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Rocket_V2
// 0x002B (0x0354 - 0x0329)
class AR_Proj_Rocket_V2 : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	float                                              LaunchTime;                                               // 0x032C(0x0004)
	struct FVector                                     Horizontal;                                               // 0x0330(0x000C)
	struct FVector                                     Vertical;                                                 // 0x033C(0x000C)
	float                                              ProximityDistance;                                        // 0x0348(0x0004)
	unsigned char                                      TeamIndex;                                                // 0x034C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x034D(0x0003) MISSED OFFSET
	unsigned long                                      StartTimer : 1;                                           // 0x0350(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Rocket_V2");
		return ptr;
	}


	void SpawnExplosionEffects(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Tick(float DeltaTime);
	void PostBeginPlay();
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Proj_Rocket_V3
// 0x0000 (0x0354 - 0x0354)
class AR_Proj_Rocket_V3 : public AR_Proj_Rocket_V2
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Rocket_V3");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_RotaryCannon_Prestige
// 0x001B (0x0344 - 0x0329)
class AR_Proj_RotaryCannon_Prestige : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	struct FVector                                     FirstPersonOffset;                                        // 0x032C(0x000C) (Const)
	struct FVector                                     ThirdPersonOffset;                                        // 0x0338(0x000C) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_RotaryCannon_Prestige");
		return ptr;
	}


	void Tick(float DeltaTime);
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Proj_RotaryGrenade
// 0x0005 (0x0349 - 0x0344)
class AR_Proj_RotaryGrenade : public AR_Proj_Grenade
{
public:
	float                                              ProximityDistance;                                        // 0x0344(0x0004)
	unsigned char                                      TeamIndex;                                                // 0x0348(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_RotaryGrenade");
		return ptr;
	}


	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void Tick(float DeltaTime);
	void PostBeginPlay();
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Proj_RotaryGrenade_Buffed
// 0x0003 (0x034C - 0x0349)
class AR_Proj_RotaryGrenade_Buffed : public AR_Proj_RotaryGrenade
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0349(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_RotaryGrenade_Buffed");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Seeker
// 0x0033 (0x035C - 0x0329)
class AR_Proj_Seeker : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	struct FVector                                     HomingLocation;                                           // 0x032C(0x000C) (Net)
	unsigned long                                      bTargetLock : 1;                                          // 0x0338(0x0004) (Net)
	unsigned long                                      bPredictTarget : 1;                                       // 0x0338(0x0004)
	unsigned long                                      bPawnMissile : 1;                                         // 0x0338(0x0004)
	float                                              StartHomingTime;                                          // 0x033C(0x0004)
	float                                              TimeActive;                                               // 0x0340(0x0004)
	struct FVector                                     FirstPersonOffset;                                        // 0x0344(0x000C) (Const)
	struct FVector                                     ThirdPersonOffset;                                        // 0x0350(0x000C) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Seeker");
		return ptr;
	}


	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Tick(float DeltaTime);
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Proj_Seeker_Berserker_XT
// 0x0000 (0x035C - 0x035C)
class AR_Proj_Seeker_Berserker_XT : public AR_Proj_Seeker
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Seeker_Berserker_XT");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_ShieldGun
// 0x0003 (0x032C - 0x0329)
class AR_Proj_ShieldGun : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_ShieldGun");
		return ptr;
	}


	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class HawkenGame.R_ShieldGun
// 0x0028 (0x01FC - 0x01D4)
class AR_ShieldGun : public AActor
{
public:
	class UAudioComponent*                             ShieldHum;                                                // 0x01D4(0x0004) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        ShieldMesh;                                               // 0x01D8(0x0004) (ExportObject, Component, EditInline)
	int                                                Health;                                                   // 0x01DC(0x0004) (Net)
	float                                              ShieldSize;                                               // 0x01E0(0x0004)
	float                                              TimeAlive;                                                // 0x01E4(0x0004)
	float                                              ExpandTime;                                               // 0x01E8(0x0004)
	float                                              ContractTime;                                             // 0x01EC(0x0004)
	class UUDKParticleSystemComponent*                 ExpandParticleEffect;                                     // 0x01F0(0x0004) (ExportObject, Component, EditInline)
	class UUDKParticleSystemComponent*                 ContractParticleEffect;                                   // 0x01F4(0x0004) (ExportObject, Component, EditInline)
	class AApexEffect*                                 TurbulenceEffect;                                         // 0x01F8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ShieldGun");
		return ptr;
	}


	void Destroyed();
	void Tick(float DeltaTime);
	bool ShouldImpact(class AProjectile* P, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PostBeginPlay();
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
};


// Class HawkenGame.R_Proj_Shrapnel_Rocket
// 0x0003 (0x032C - 0x0329)
class AR_Proj_Shrapnel_Rocket : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Shrapnel_Rocket");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Siege_Rocket
// 0x0003 (0x032C - 0x0329)
class AR_Proj_Siege_Rocket : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Siege_Rocket");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Siege_Rocket_Simulated
// 0x0000 (0x032C - 0x032C)
class AR_Proj_Siege_Rocket_Simulated : public AR_Proj_Siege_Rocket
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Siege_Rocket_Simulated");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_StickyBomb
// 0x0003 (0x032C - 0x0329)
class AR_Proj_StickyBomb : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_StickyBomb");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Suppressor
// 0x001B (0x0344 - 0x0329)
class AR_Proj_Suppressor : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET
	struct FVector                                     FirstPersonOffset;                                        // 0x032C(0x000C) (Const)
	struct FVector                                     ThirdPersonOffset;                                        // 0x0338(0x000C) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Suppressor");
		return ptr;
	}


	void Tick(float DeltaTime);
	void SetProjectileDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Proj_TriSeeker
// 0x0003 (0x032C - 0x0329)
class AR_Proj_TriSeeker : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_TriSeeker");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Turret_Battleship_Rocket
// 0x0000 (0x0348 - 0x0348)
class AR_Proj_Turret_Battleship_Rocket : public AR_Proj_Turret_Rocket
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Turret_Battleship_Rocket");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Turret_HomingMissile_BaseDefense
// 0x0000 (0x0348 - 0x0348)
class AR_Proj_Turret_HomingMissile_BaseDefense : public AR_Proj_Turret_HomingMissile
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Turret_HomingMissile_BaseDefense");
		return ptr;
	}

};


// Class HawkenGame.R_Proj_Turret_Rocket_BaseDefense
// 0x0000 (0x0348 - 0x0348)
class AR_Proj_Turret_Rocket_BaseDefense : public AR_Proj_Turret_Rocket
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Proj_Turret_Rocket_BaseDefense");
		return ptr;
	}

};


// Class HawkenGame.R_ProximityMine
// 0x0003 (0x032C - 0x0329)
class AR_ProximityMine : public AR_Projectile
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0329(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ProximityMine");
		return ptr;
	}

};


// Class HawkenGame.R_ReportDialog
// 0x0030 (0x01D0 - 0x01A0)
class UR_ReportDialog : public UR_Dialog
{
public:
	struct FString                                     ReportedPlayerName;                                       // 0x01A0(0x000C) (NeedCtorLink)
	struct FString                                     Description;                                              // 0x01AC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleReportDialogSubmitDelegate__Delegate;             // 0x01B8(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleReportDialogCancelDelegate__Delegate;             // 0x01C4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ReportDialog");
		return ptr;
	}


	void UnRegisterDelegates();
	void RegisterDelegates();
	void SetDelegate_HandleReportDialogCancel(const struct FScriptDelegate& Delegated);
	void HandleReportDialogCancel();
	void HandleReportDialogCancelDelegate();
	void SetDelegate_HandleReportDialogSubmit(const struct FScriptDelegate& Delegated);
	void HandleReportDialogSubmit();
	void HandleReportDialogSubmitDelegate();
	class UGFxObject* ShowReportDialog(const struct FString& RPName);
	class UGFxObject* InternalShowDialog();
};


// Class HawkenGame.R_SceneCapture
// 0x0000 (0x01D4 - 0x01D4)
class AR_SceneCapture : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SceneCapture");
		return ptr;
	}

};


// Class HawkenGame.R_Scout
// 0x0000 (0x0504 - 0x0504)
class AR_Scout : public AUDKScout
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Scout");
		return ptr;
	}

};


// Class HawkenGame.R_SE_ApplyEffectByMechType
// 0x000C (0x024C - 0x0240)
class AR_SE_ApplyEffectByMechType : public AR_StatusEffect_Base
{
public:
	class UClass*                                      EffectToApplyOnMechA;                                     // 0x0240(0x0004) (Edit, EditConst)
	class UClass*                                      EffectToApplyOnMechB;                                     // 0x0244(0x0004) (Edit, EditConst)
	class UClass*                                      EffectToApplyOnMechC;                                     // 0x0248(0x0004) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ApplyEffectByMechType");
		return ptr;
	}


	void StartEffect();
};


// Class HawkenGame.R_SE_HealthRegen_Large
// 0x0000 (0x0250 - 0x0250)
class AR_SE_HealthRegen_Large : public AR_SE_GainHealthOverTime
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_HealthRegen_Large");
		return ptr;
	}

};


// Class HawkenGame.R_SE_HealthRegen_Medium
// 0x0000 (0x0250 - 0x0250)
class AR_SE_HealthRegen_Medium : public AR_SE_GainHealthOverTime
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_HealthRegen_Medium");
		return ptr;
	}

};


// Class HawkenGame.R_SE_HealthRegen_Small
// 0x0000 (0x0250 - 0x0250)
class AR_SE_HealthRegen_Small : public AR_SE_GainHealthOverTime
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_HealthRegen_Small");
		return ptr;
	}

};


// Class HawkenGame.R_SE_CompositeArmor
// 0x0000 (0x0244 - 0x0244)
class AR_SE_CompositeArmor : public AR_SE_ReduceIncomingDamage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_CompositeArmor");
		return ptr;
	}

};


// Class HawkenGame.R_SE_IncreaseIncomingDamage
// 0x0000 (0x0244 - 0x0244)
class AR_SE_IncreaseIncomingDamage : public AR_SE_ModifyDamage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_IncreaseIncomingDamage");
		return ptr;
	}


	void AdjustIncomingDamage(class UClass* dmgType, class AController* DmgInstigator, class APawn* InstigatorPawn, class AActor* DamageCauser, float OriginalDamage, float* out_Damage, struct FVector* out_Momentum, struct FTraceHitInfo* out_HitInfo);
};


// Class HawkenGame.R_SE_IncreaseOutgoingDamage
// 0x000C (0x0250 - 0x0244)
class AR_SE_IncreaseOutgoingDamage : public AR_SE_ModifyDamage
{
public:
	TArray<TEnumAsByte<EDamageCategories>>             DamageCategories;                                         // 0x0244(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_IncreaseOutgoingDamage");
		return ptr;
	}


	void RemoveEffectModifier();
	void ApplyEffectModifier();
	void StopEffect();
	void StartEffect();
};


// Class HawkenGame.R_SE_ModifySpeed_Large
// 0x0000 (0x024C - 0x024C)
class AR_SE_ModifySpeed_Large : public AR_SE_ModifyMovementSpeed
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ModifySpeed_Large");
		return ptr;
	}

};


// Class HawkenGame.R_SE_ModifySpeed_Medium
// 0x0000 (0x024C - 0x024C)
class AR_SE_ModifySpeed_Medium : public AR_SE_ModifyMovementSpeed
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ModifySpeed_Medium");
		return ptr;
	}

};


// Class HawkenGame.R_SE_ModifySpeed_Small
// 0x0000 (0x024C - 0x024C)
class AR_SE_ModifySpeed_Small : public AR_SE_ModifyMovementSpeed
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ModifySpeed_Small");
		return ptr;
	}

};


// Class HawkenGame.R_SE_ReduceOutgoingDamage
// 0x0000 (0x0244 - 0x0244)
class AR_SE_ReduceOutgoingDamage : public AR_SE_ModifyDamage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SE_ReduceOutgoingDamage");
		return ptr;
	}

};


// Class HawkenGame.R_SeqAct_ToggleBackgroundBlur
// 0x0004 (0x0100 - 0x00FC)
class UR_SeqAct_ToggleBackgroundBlur : public USequenceAction
{
public:
	float                                              BlendTime;                                                // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SeqAct_ToggleBackgroundBlur");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.R_SeqCond_IsGameType
// 0x0008 (0x00EC - 0x00E4)
class UR_SeqCond_IsGameType : public USequenceCondition
{
public:
	struct FName                                       GameTypeName;                                             // 0x00E4(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SeqCond_IsGameType");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.R_SeqCond_IsOfflineTDM
// 0x0000 (0x00E4 - 0x00E4)
class UR_SeqCond_IsOfflineTDM : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_SeqCond_IsOfflineTDM");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.R_ShootingRangeTarget
// 0x0050 (0x0224 - 0x01D4)
class AR_ShootingRangeTarget : public AActor
{
public:
	class UUDKSkeletalMeshComponent*                   TargetMesh;                                               // 0x01D4(0x0004) (ExportObject, Component, EditInline)
	float                                              Speed;                                                    // 0x01D8(0x0004) (Edit)
	float                                              MaxSpeed;                                                 // 0x01DC(0x0004)
	float                                              MinSpeed;                                                 // 0x01E0(0x0004)
	struct FVector                                     TargetLocation;                                           // 0x01E4(0x000C)
	float                                              TotalTargetDamage;                                        // 0x01F0(0x0004)
	float                                              Health;                                                   // 0x01F4(0x0004) (Edit)
	unsigned long                                      bMobile : 1;                                              // 0x01F8(0x0004) (Edit)
	float                                              DamageTakenPerSecond[0x5];                                // 0x01FC(0x0004)
	int                                                HitsTakenPerSecond[0x5];                                  // 0x0210(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ShootingRangeTarget");
		return ptr;
	}


	void Tick(float DeltaTime);
	void PostBeginPlay();
	void RespawnTarget();
	void DPS();
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* dmgType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
};


// Class HawkenGame.R_ShootingRangeTarget_B
// 0x0000 (0x0224 - 0x0224)
class AR_ShootingRangeTarget_B : public AR_ShootingRangeTarget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ShootingRangeTarget_B");
		return ptr;
	}

};


// Class HawkenGame.R_ShootingRangeTarget_C
// 0x0000 (0x0224 - 0x0224)
class AR_ShootingRangeTarget_C : public AR_ShootingRangeTarget
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ShootingRangeTarget_C");
		return ptr;
	}

};


// Class HawkenGame.R_Spline_Follower_NPC
// 0x0008 (0x0220 - 0x0218)
class AR_Spline_Follower_NPC : public AR_Spline_Follower
{
public:
	unsigned long                                      IsFalling : 1;                                            // 0x0218(0x0004)
	unsigned long                                      IsFlying : 1;                                             // 0x0218(0x0004)
	class UUDKSkeletalMeshComponent*                   Mesh;                                                     // 0x021C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Spline_Follower_NPC");
		return ptr;
	}


	void GoRagdoll();
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void HideMesh(bool Hidden);
	void PostBeginPlay();
};


// Class HawkenGame.R_Teleporter
// 0x0008 (0x01DC - 0x01D4)
class AR_Teleporter : public AActor
{
public:
	class UStaticMeshComponent*                        TeleporterMesh;                                           // 0x01D4(0x0004) (ExportObject, Component, EditInline)
	int                                                TeamIndex;                                                // 0x01D8(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Teleporter");
		return ptr;
	}


	void SetTeam(int NewTeamIndex, class AR_Pawn* NewTurretOwner);
};


// Class HawkenGame.R_ToastManager
// 0x0008 (0x0174 - 0x016C)
class UR_ToastManager : public UR_GFx_Base
{
public:
	class UGFxObject*                                  MessageToastRef;                                          // 0x016C(0x0004)
	class UGFxObject*                                  AchievementToastRef;                                      // 0x0170(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_ToastManager");
		return ptr;
	}


	void AddAchievementToast(const struct FString& Message, const struct FString& IconPath, const struct FString& Title, int AchievementType);
	void AddMessage(const struct FString& Message);
	void OnCleanup(bool bUnload);
	bool Start(bool StartPaused);
};


// Class HawkenGame.R_TrainingTurret
// 0x0014 (0x01E8 - 0x01D4)
class AR_TrainingTurret : public AActor
{
public:
	class UClass*                                      ProjectileClass;                                          // 0x01D4(0x0004)
	class USkeletalMeshComponent*                      TurretMesh;                                               // 0x01D8(0x0004) (ExportObject, Component, EditInline)
	float                                              CooldownTime;                                             // 0x01DC(0x0004)
	float                                              TimeToShoot;                                              // 0x01E0(0x0004)
	unsigned long                                      bActive : 1;                                              // 0x01E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_TrainingTurret");
		return ptr;
	}


	void Tick(float DeltaTime);
	void FireProjectile();
	void PostBeginPlay();
};


// Class HawkenGame.R_TrophyTurretShield
// 0x0000 (0x01D4 - 0x01D4)
class AR_TrophyTurretShield : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_TrophyTurretShield");
		return ptr;
	}

};


// Class HawkenGame.R_WaitingDialog
// 0x0050 (0x01F0 - 0x01A0)
class UR_WaitingDialog : public UR_Dialog
{
public:
	struct FString                                     Title;                                                    // 0x01A0(0x000C) (NeedCtorLink)
	struct FString                                     Message;                                                  // 0x01AC(0x000C) (NeedCtorLink)
	unsigned long                                      bCancelButton : 1;                                        // 0x01B8(0x0004)
	unsigned long                                      bShowSpinner : 1;                                         // 0x01B8(0x0004)
	unsigned long                                      bModal : 1;                                               // 0x01B8(0x0004)
	int                                                DialogPriority;                                           // 0x01BC(0x0004)
	struct FScriptDelegate                             OnWaitingDialogClosed;                                    // 0x01C0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             OnInputCaptured;                                          // 0x01CC(0x000C) (NeedCtorLink)
	struct FString                                     UI_ButtonCancel;                                          // 0x01D8(0x000C) (Const, Localized, NeedCtorLink)
	struct FScriptDelegate                             __HandleWaitingDialogClosedDelegate__Delegate;            // 0x01E4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_WaitingDialog");
		return ptr;
	}


	void UnRegisterDelegates();
	void RegisterDelegates();
	void SetDelegate_HandleWaitingDialogClosed(const struct FScriptDelegate& Delegated);
	void HandleWaitingDialogClosed(class UGFxObject* Data);
	void HandleWaitingDialogClosedDelegate(class UGFxObject* Data);
	bool FilterButtonInput(int ControllerId, const struct FName& ButtonName, TEnumAsByte<EInputEvent> InputEvent);
	class UGFxObject* ShowWaitingDialog(const struct FString& InTitle, const struct FString& InMessage, bool InCancelButton, bool InShowSpinner, TArray<struct FString> LocalizationArray, bool InModal);
	void OnClose();
	void Hide();
	class UGFxObject* InternalShowDialog();
};


// Class HawkenGame.R_VictimMessage
// 0x0060 (0x00B0 - 0x0050)
class UR_VictimMessage : public ULocalMessage
{
public:
	struct FString                                     YouWereKilledBy;                                          // 0x0050(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     KilledByTrailer;                                          // 0x005C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     OrbSuicideString;                                         // 0x0068(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     RunOverString;                                            // 0x0074(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     SpiderMineString;                                         // 0x0080(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     ScorpionKamikazeString;                                   // 0x008C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     ViperKamikazeString;                                      // 0x0098(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     TelefragString;                                           // 0x00A4(0x000C) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_VictimMessage");
		return ptr;
	}


	struct FString STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class HawkenGame.R_WanderBot
// 0x0034 (0x046C - 0x0438)
class AR_WanderBot : public AUDKBot
{
public:
	struct FVector                                     TempDest;                                                 // 0x0438(0x000C) (Edit)
	struct FVector                                     nextlocation;                                             // 0x0444(0x000C)
	class AActor*                                      Destination;                                              // 0x0450(0x0004) (Edit)
	class APawn*                                       CurrentEnemy;                                             // 0x0454(0x0004) (Edit)
	unsigned long                                      bDebugAI : 1;                                             // 0x0458(0x0004)
	unsigned long                                      bResetCombatTimer : 1;                                    // 0x0458(0x0004)
	float                                              FearRadiusWandering;                                      // 0x045C(0x0004)
	float                                              FearRadiusFighting;                                       // 0x0460(0x0004)
	float                                              FightingRadius;                                           // 0x0464(0x0004)
	float                                              ReactionTime;                                             // 0x0468(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_WanderBot");
		return ptr;
	}


	void ExecuteWhatToDoNext();
	void UpdateDestination();
	void SetCombatTimer();
	void StopMovement();
	bool FireWeaponAt(class AActor* A);
	class AActor* GetFocus();
	void FaceEnemy(class APawn* FacePawn);
	void GotoFightingState();
	void OnAcquireEnemy();
	void PlayingEmote();
	void PlayEmote(const struct FName& TauntName);
	void OnUpdateDestination(const struct FString& Label);
	bool FindNavMeshPath();
	class AActor* FindHidePoint(float MinDistance);
	class AActor* FindWanderPoint();
	class APawn* FindClosestEnemy();
	void Tick(float DeltaTime);
};


// Class HawkenGame.R_Weap_BurstRifle
// 0x000C (0x05D8 - 0x05CC)
class AR_Weap_BurstRifle : public AR_Weap_Base
{
public:
	int                                                NumProjPerShot;                                           // 0x05CC(0x0004)
	int                                                shotsFired;                                               // 0x05D0(0x0004)
	float                                              SetInterval;                                              // 0x05D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_BurstRifle");
		return ptr;
	}


	void BurstFire();
	void FireAmmunition();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_WeapAttach_ChargeCannon
// 0x001C (0x0200 - 0x01E4)
class AR_WeapAttach_ChargeCannon : public AR_WeapAttach_Base
{
public:
	class UParticleSystem*                             ChargeParticles[0x4];                                     // 0x01E4(0x0004) (Const)
	struct FName                                       ChargeSocket;                                             // 0x01F4(0x0008) (Const)
	class UUDKParticleSystemComponent*                 ChargeFXComp;                                             // 0x01FC(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_WeapAttach_ChargeCannon");
		return ptr;
	}


	void UpdateChargeFX(int NewChargeState);
	void OnUpdateFOV(float NewFirstPersonFOV);
	void AttachThirdPersonEffects(class USkeletalMeshComponent** WeaponMesh);
	void AttachFirstPersonEffects(class USkeletalMeshComponent** WeaponMesh);
};


// Class HawkenGame.R_Weap_ImpactGrenade
// 0x0000 (0x05CC - 0x05CC)
class AR_Weap_ImpactGrenade : public AR_Weap_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_ImpactGrenade");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_Portal
// 0x0028 (0x05F4 - 0x05CC)
class AR_Weap_Portal : public AR_Weap_Base
{
public:
	class AR_Projectile*                               Shot1;                                                    // 0x05CC(0x0004) (Net)
	class AR_Projectile*                               Shot2;                                                    // 0x05D0(0x0004) (Net)
	float                                              ShrapnelSpread;                                           // 0x05D4(0x0004)
	class UClass*                                      ShrapnelProjectile;                                       // 0x05D8(0x0004)
	float                                              TimeSinceLastFire;                                        // 0x05DC(0x0004)
	int                                                portalSize;                                               // 0x05E0(0x0004)
	class AR_Portal*                                   Portal[0x2];                                              // 0x05E4(0x0004)
	int                                                hold;                                                     // 0x05EC(0x0004)
	float                                              distanceFromWall;                                         // 0x05F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Portal");
		return ptr;
	}


	void EndAltFire();
	void Tick(float DeltaTime);
	void FireAmmunition();
	void BeginFire(unsigned char FireModeNum);
	void BeginAltFire();
	void DoPortal(unsigned char I, const struct FVector& StartShot, const struct FVector& EndShot);
};


// Class HawkenGame.R_Weap_ShieldGun
// 0x0010 (0x05DC - 0x05CC)
class AR_Weap_ShieldGun : public AR_Weap_Base
{
public:
	class AR_Projectile*                               LastShot;                                                 // 0x05CC(0x0004) (Net)
	float                                              ShrapnelSpread;                                           // 0x05D0(0x0004)
	class UClass*                                      ShrapnelProjectile;                                       // 0x05D4(0x0004)
	float                                              TimeSinceLastFire;                                        // 0x05D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_ShieldGun");
		return ptr;
	}


	class AProjectile* ProjectileFire();
	void EndAltFire();
	void Tick(float DeltaTime);
	void FireAmmunition();
};


// Class HawkenGame.R_Weap_ShrapnelLauncher
// 0x0000 (0x05CC - 0x05CC)
class AR_Weap_ShrapnelLauncher : public AR_Weap_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_ShrapnelLauncher");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_SiegeRocketLauncher_Sec
// 0x0000 (0x05CC - 0x05CC)
class AR_Weap_SiegeRocketLauncher_Sec : public AR_Weap_SiegeRocketLauncher
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_SiegeRocketLauncher_Sec");
		return ptr;
	}

};


// Class HawkenGame.R_Weap_SlugTOO
// 0x0014 (0x05E0 - 0x05CC)
class AR_Weap_SlugTOO : public AR_Weap_Base
{
public:
	float                                              ZoomSpread;                                               // 0x05CC(0x0004)
	float                                              UnZoomSpread;                                             // 0x05D0(0x0004)
	float                                              TimeForZoomSpread;                                        // 0x05D4(0x0004)
	float                                              UnzoomDamageScale;                                        // 0x05D8(0x0004)
	unsigned long                                      newZoomMode : 1;                                          // 0x05DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_SlugTOO");
		return ptr;
	}


	void SetZoomSpread();
	void OnSetZoom(bool ZoomMode);
	float GetDamageMultiplierForZoom();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Weap_Sniper_Flak
// 0x000C (0x05D8 - 0x05CC)
class AR_Weap_Sniper_Flak : public AR_Weap_Base
{
public:
	int                                                NumProjPerShot;                                           // 0x05CC(0x0004)
	int                                                shotsFired;                                               // 0x05D0(0x0004)
	float                                              SetInterval;                                              // 0x05D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_Sniper_Flak");
		return ptr;
	}


	void OnForceEndFire();
	void FlakFire();
	void FireAmmunition();
	void SetWeaponDefaults(class UR_ItemDatabaseProps* Props, int NewLevel);
};


// Class HawkenGame.R_Weap_TriSeeker
// 0x0000 (0x0610 - 0x0610)
class AR_Weap_TriSeeker : public AR_Weap_Homing_Base
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.R_Weap_TriSeeker");
		return ptr;
	}

};


// Class HawkenGame.SeqAct_AddKeybindString
// 0x0028 (0x013C - 0x0114)
class USeqAct_AddKeybindString : public USeqAct_ShowPopup
{
public:
	TArray<struct FInstructionChunk>                   KeybindStringChunks;                                      // 0x0114(0x000C) (Edit, NeedCtorLink)
	struct FString                                     ConnectorString;                                          // 0x0120(0x000C) (NeedCtorLink, Deprecated)
	struct FString                                     KeyVariablePath;                                          // 0x012C(0x000C) (NeedCtorLink, Deprecated)
	class UR_GFxHUDKeybindDialog*                      KeybindMC;                                                // 0x0138(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_AddKeybindString");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	struct FString GetKeybindForCommand(const struct FString& KeybindCommand);
	bool OpenPopup();
	void ClearClipReferences();
};


// Class HawkenGame.SeqAct_ClosePopup
// 0x000C (0x0108 - 0x00FC)
class USeqAct_ClosePopup : public USeqAct_HawkenGfx
{
public:
	TArray<class UR_GFxInfoContainer*>                 PopupMovieClips;                                          // 0x00FC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_ClosePopup");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	void Activated();
};


// Class HawkenGame.SeqAct_ConcatenateStrings
// 0x0028 (0x0124 - 0x00FC)
class USeqAct_ConcatenateStrings : public USequenceAction
{
public:
	struct FString                                     ValueA;                                                   // 0x00FC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     ValueB;                                                   // 0x0108(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      ConcatenateWithSpace : 1;                                 // 0x0114(0x0004) (Edit)
	struct FString                                     StringResult;                                             // 0x0118(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_ConcatenateStrings");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.SeqAct_CoOpCinematicFinished
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_CoOpCinematicFinished : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_CoOpCinematicFinished");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.SeqAct_CoOpPauseWaveSpawns
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_CoOpPauseWaveSpawns : public USequenceAction
{
public:
	float                                              ResumeDelay;                                              // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_CoOpPauseWaveSpawns");
		return ptr;
	}


	void SetPaused(class AR_CoOp* CoOpGame, bool bPaused);
	void Activated();
};


// Class HawkenGame.SeqAct_SetAgentText
// 0x001C (0x0118 - 0x00FC)
class USeqAct_SetAgentText : public USeqAct_HawkenGfx
{
public:
	struct FString                                     agentName;                                                // 0x00FC(0x000C) (NeedCtorLink)
	TEnumAsByte<EAgentPortraitExpression>              AgentExpression;                                          // 0x0108(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0109(0x0003) MISSED OFFSET
	struct FString                                     AgentText;                                                // 0x010C(0x000C) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_SetAgentText");
		return ptr;
	}


	struct FString GetExpressionText();
};


// Class HawkenGame.SeqAct_SetHintText
// 0x001C (0x0118 - 0x00FC)
class USeqAct_SetHintText : public USeqAct_HawkenGfx
{
public:
	unsigned long                                      bEnableHint : 1;                                          // 0x00FC(0x0004) (Edit)
	struct FString                                     HeaderText;                                               // 0x0100(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     HintText;                                                 // 0x010C(0x000C) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_SetHintText");
		return ptr;
	}

};


// Class HawkenGame.SeqAct_ShowHUDAgent
// 0x0014 (0x0128 - 0x0114)
class USeqAct_ShowHUDAgent : public USeqAct_ShowPopup
{
public:
	class UTexture*                                    AgentPortrait;                                            // 0x0114(0x0004) (Edit)
	struct FString                                     MessageText;                                              // 0x0118(0x000C) (Edit, Const, Localized, NeedCtorLink)
	class UR_GFxAgentDialog*                           DialogMC;                                                 // 0x0124(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_ShowHUDAgent");
		return ptr;
	}


	bool OpenPopup();
	void ClearClipReferences();
};


// Class HawkenGame.SeqAct_ShowHUDDialog
// 0x0040 (0x0154 - 0x0114)
class USeqAct_ShowHUDDialog : public USeqAct_ShowPopup
{
public:
	class UTexture*                                    BannerImage;                                              // 0x0114(0x0004) (Edit)
	class UTexture*                                    InfoGraphic;                                              // 0x0118(0x0004) (Edit)
	TArray<class UTexture*>                            BannerImageCycle;                                         // 0x011C(0x000C) (Edit, NeedCtorLink)
	float                                              BannerImageCyclePeriod;                                   // 0x0128(0x0004) (Edit)
	struct FString                                     HeaderText;                                               // 0x012C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     MessageText;                                              // 0x0138(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     DismissText;                                              // 0x0144(0x000C) (Edit, Const, Localized, NeedCtorLink)
	class UR_GFxHUDDialog*                             DialogMC;                                                 // 0x0150(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_ShowHUDDialog");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	bool OpenPopup();
	void ClearClipReferences();
};


// Class HawkenGame.SeqAct_ShowHUDPrompt
// 0x0010 (0x0124 - 0x0114)
class USeqAct_ShowHUDPrompt : public USeqAct_ShowPopup
{
public:
	class UR_GFxHUDPrompt*                             PromptMC;                                                 // 0x0114(0x0004)
	struct FString                                     MessageText;                                              // 0x0118(0x000C) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_ShowHUDPrompt");
		return ptr;
	}


	bool OpenPopup();
	void ClearClipReferences();
};


// Class HawkenGame.SeqAct_TriggerChatterEvent
// 0x0010 (0x010C - 0x00FC)
class USeqAct_TriggerChatterEvent : public USequenceAction
{
public:
	class AR_Pawn*                                     Speaker;                                                  // 0x00FC(0x0004)
	class AR_Pawn*                                     SpeakingTo;                                               // 0x0100(0x0004)
	TEnumAsByte<EChatterEvent>                         RequestedEvent;                                           // 0x0104(0x0001) (Edit)
	TEnumAsByte<ESpeechPriority>                       Priority;                                                 // 0x0105(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0106(0x0002) MISSED OFFSET
	unsigned long                                      bForceDialog : 1;                                         // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.SeqAct_TriggerChatterEvent");
		return ptr;
	}


	void Activated();
};


// Class HawkenGame.TestCommandlet
// 0x0070 (0x00EC - 0x007C)
class UTestCommandlet : public UCommandlet
{
public:
	int                                                RotationTarget[0xA];                                      // 0x007C(0x0004)
	TArray<struct FMapVerificationNub>                 MapsToVerify;                                             // 0x00A4(0x000C) (NeedCtorLink)
	class UObject*                                     NormalVar;                                                // 0x00B0(0x0004)
	class UObject*                                     ObjStaticArray[0xA];                                      // 0x00B4(0x0004)
	TArray<class UObject*>                             ObjDynamicArray;                                          // 0x00DC(0x000C) (NeedCtorLink)
	struct FStructWithObjTest                          ObjStructVar;                                             // 0x00E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class HawkenGame.TestCommandlet");
		return ptr;
	}


	void DoAngleLerpTest();
	void DoRadToUnrTest();
	void DoGameTypeTest();
	void ShowLocation();
	void DoPushStateTest();
	void DoObjectPropertyIteratorTest();
	int Main(const struct FString& Params);
	struct FString STATIC_PadString(int PaddingCount, const struct FString& StringToPad, const struct FString& PaddingChars, bool bPrependPadding);
	int STATIC_BlendRot(float DeltaTime, int currentVal, int newVal);
	float STATIC_AngleLerp(float From, float To, float Amount);
	int STATIC_GetClosestAngle(int AngleA, int AngleB);
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
