#pragma once

// Hawken (1.5.3.142579) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

namespace Classes
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class Engine.Actor
// 0x0198 (0x01D4 - 0x003C)
class AActor : public UObject
{
public:
	TArray<class UActorComponent*>                     Components;                                               // 0x003C(0x000C) (Const, ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UActorComponent*>                     AllComponents;                                            // 0x0048(0x000C) (Const, ExportObject, Transient, Component, NeedCtorLink, EditInline)
	float                                              DrawScale;                                                // 0x0054(0x0004) (Edit, Const, Net)
	struct FVector                                     DrawScale3D;                                              // 0x0058(0x000C) (Edit, Const)
	struct FVector                                     PrePivot;                                                 // 0x0064(0x000C) (Edit, Const)
	struct FColor                                      EditorIconColor;                                          // 0x0070(0x0004) (Edit)
	struct FRenderCommandFence                         DetachFence;                                              // 0x0074(0x0004) (Const, Native)
	float                                              CustomTimeDilation;                                       // 0x0078(0x0004)
	struct FRotator                                    Rotation;                                                 // 0x007C(0x000C) (Edit, Const, Net)
	struct FVector                                     Location;                                                 // 0x0088(0x000C) (Edit, Const, Net)
	TEnumAsByte<EPhysics>                              Physics;                                                  // 0x0094(0x0001) (Edit, Const, Net)
	TEnumAsByte<ENetRole>                              RemoteRole;                                               // 0x0095(0x0001) (Net)
	TEnumAsByte<ENetRole>                              Role;                                                     // 0x0096(0x0001) (Net)
	TEnumAsByte<ECollisionType>                        CollisionType;                                            // 0x0097(0x0001) (Edit, Const, Transient)
	TEnumAsByte<ECollisionType>                        ReplicatedCollisionType;                                  // 0x0098(0x0001) (Net, Transient)
	TEnumAsByte<ETickingGroup>                         TickGroup;                                                // 0x0099(0x0001) (Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x009A(0x0002) MISSED OFFSET
	class AActor*                                      Owner;                                                    // 0x009C(0x0004) (Const, Net)
	class AActor*                                      Base;                                                     // 0x00A0(0x0004) (Edit, Const, Net)
	TArray<struct FTimerData>                          Timers;                                                   // 0x00A4(0x000C) (Const, NeedCtorLink)
	unsigned long                                      bStatic : 1;                                              // 0x00B0(0x0004) (Const)
	unsigned long                                      bHidden : 1;                                              // 0x00B0(0x0004) (Edit, Const, Net)
	unsigned long                                      bNoDelete : 1;                                            // 0x00B0(0x0004) (Const)
	unsigned long                                      bDeleteMe : 1;                                            // 0x00B0(0x0004) (Const)
	unsigned long                                      bTicked : 1;                                              // 0x00B0(0x0004) (Const, Transient)
	unsigned long                                      bOnlyOwnerSee : 1;                                        // 0x00B0(0x0004) (Const)
	unsigned long                                      bTickIsDisabled : 1;                                      // 0x00B0(0x0004) (Const)
	unsigned long                                      bWorldGeometry : 1;                                       // 0x00B0(0x0004)
	unsigned long                                      bIgnoreRigidBodyPawns : 1;                                // 0x00B0(0x0004)
	unsigned long                                      bOrientOnSlope : 1;                                       // 0x00B0(0x0004)
	unsigned long                                      bIgnoreEncroachers : 1;                                   // 0x00B0(0x0004) (Const)
	unsigned long                                      bPushedByEncroachers : 1;                                 // 0x00B0(0x0004)
	unsigned long                                      bDestroyedByInterpActor : 1;                              // 0x00B0(0x0004)
	unsigned long                                      bRouteBeginPlayEvenIfStatic : 1;                          // 0x00B0(0x0004) (Const)
	unsigned long                                      bIsMoving : 1;                                            // 0x00B0(0x0004) (Const)
	unsigned long                                      bAlwaysEncroachCheck : 1;                                 // 0x00B0(0x0004)
	unsigned long                                      bHasAlternateTargetLocation : 1;                          // 0x00B0(0x0004)
	unsigned long                                      bCanStepUpOn : 1;                                         // 0x00B0(0x0004) (Edit)
	unsigned long                                      bNetTemporary : 1;                                        // 0x00B0(0x0004) (Const)
	unsigned long                                      bOnlyRelevantToOwner : 1;                                 // 0x00B0(0x0004) (Const)
	unsigned long                                      bNetDirty : 1;                                            // 0x00B0(0x0004) (Transient)
	unsigned long                                      bAlwaysRelevant : 1;                                      // 0x00B0(0x0004)
	unsigned long                                      bReplicateInstigator : 1;                                 // 0x00B0(0x0004)
	unsigned long                                      bReplicateMovement : 1;                                   // 0x00B0(0x0004)
	unsigned long                                      bSkipActorPropertyReplication : 1;                        // 0x00B0(0x0004)
	unsigned long                                      bUpdateSimulatedPosition : 1;                             // 0x00B0(0x0004)
	unsigned long                                      bTearOff : 1;                                             // 0x00B0(0x0004) (Net)
	unsigned long                                      bOnlyDirtyReplication : 1;                                // 0x00B0(0x0004)
	unsigned long                                      bAllowFluidSurfaceInteraction : 1;                        // 0x00B0(0x0004) (Edit)
	unsigned long                                      bDemoRecording : 1;                                       // 0x00B0(0x0004) (Transient)
	unsigned long                                      bDemoOwner : 1;                                           // 0x00B0(0x0004)
	unsigned long                                      bForceDemoRelevant : 1;                                   // 0x00B0(0x0004)
	unsigned long                                      bNetInitialRotation : 1;                                  // 0x00B4(0x0004) (Const)
	unsigned long                                      bReplicateRigidBodyLocation : 1;                          // 0x00B4(0x0004)
	unsigned long                                      bKillDuringLevelTransition : 1;                           // 0x00B4(0x0004)
	unsigned long                                      bExchangedRoles : 1;                                      // 0x00B4(0x0004) (Const)
	unsigned long                                      bConsiderAllStaticMeshComponentsForStreaming : 1;         // 0x00B4(0x0004) (Edit)
	unsigned long                                      bDebug : 1;                                               // 0x00B4(0x0004) (Edit)
	unsigned long                                      bPostRenderIfNotVisible : 1;                              // 0x00B4(0x0004)
	unsigned long                                      bForceNetUpdate : 1;                                      // 0x00B4(0x0004) (Transient)
	unsigned long                                      bPendingNetUpdate : 1;                                    // 0x00B4(0x0004) (Const, Transient)
	unsigned long                                      bHardAttach : 1;                                          // 0x00B4(0x0004) (Edit, Const, Net)
	unsigned long                                      bIgnoreBaseRotation : 1;                                  // 0x00B4(0x0004) (Edit)
	unsigned long                                      bShadowParented : 1;                                      // 0x00B4(0x0004) (Edit)
	unsigned long                                      bSkipAttachedMoves : 1;                                   // 0x00B4(0x0004) (Edit)
	unsigned long                                      bCanBeAdheredTo : 1;                                      // 0x00B4(0x0004)
	unsigned long                                      bCanBeFrictionedTo : 1;                                   // 0x00B4(0x0004)
	unsigned long                                      bHurtEntry : 1;                                           // 0x00B4(0x0004)
	unsigned long                                      bGameRelevant : 1;                                        // 0x00B4(0x0004)
	unsigned long                                      bMovable : 1;                                             // 0x00B4(0x0004) (Const)
	unsigned long                                      bDestroyInPainVolume : 1;                                 // 0x00B4(0x0004)
	unsigned long                                      bCanBeDamaged : 1;                                        // 0x00B4(0x0004)
	unsigned long                                      bShouldBaseAtStartup : 1;                                 // 0x00B4(0x0004)
	unsigned long                                      bPendingDelete : 1;                                       // 0x00B4(0x0004)
	unsigned long                                      bCanTeleport : 1;                                         // 0x00B4(0x0004)
	unsigned long                                      bAlwaysTick : 1;                                          // 0x00B4(0x0004) (Const)
	unsigned long                                      bBlocksNavigation : 1;                                    // 0x00B4(0x0004) (Edit)
	unsigned long                                      BlockRigidBody : 1;                                       // 0x00B4(0x0004) (Edit, Const, Transient)
	unsigned long                                      bCollideWhenPlacing : 1;                                  // 0x00B4(0x0004)
	unsigned long                                      bCollideActors : 1;                                       // 0x00B4(0x0004) (Const, Net)
	unsigned long                                      bCollideWorld : 1;                                        // 0x00B4(0x0004) (Net)
	unsigned long                                      bCollideComplex : 1;                                      // 0x00B4(0x0004) (Edit)
	unsigned long                                      bBlockActors : 1;                                         // 0x00B4(0x0004) (Net)
	unsigned long                                      bProjTarget : 1;                                          // 0x00B4(0x0004) (Net)
	unsigned long                                      bBlocksTeleport : 1;                                      // 0x00B8(0x0004)
	unsigned long                                      bMoveIgnoresDestruction : 1;                              // 0x00B8(0x0004)
	unsigned long                                      bProjectileMoveSingleBlocking : 1;                        // 0x00B8(0x0004)
	unsigned long                                      bBlockExplosionTraces : 1;                                // 0x00B8(0x0004) (Edit)
	unsigned long                                      bBlockIndicatorInvisibility : 1;                          // 0x00B8(0x0004) (Edit)
	unsigned long                                      bBlockWeapons : 1;                                        // 0x00B8(0x0004) (Edit)
	unsigned long                                      bOnlyBlockPawns : 1;                                      // 0x00B8(0x0004) (Edit)
	unsigned long                                      bNoEncroachCheck : 1;                                     // 0x00B8(0x0004) (Edit)
	unsigned long                                      bCollideAsEncroacher : 1;                                 // 0x00B8(0x0004)
	unsigned long                                      bPhysRigidBodyOutOfWorldCheck : 1;                        // 0x00B8(0x0004) (Edit)
	unsigned long                                      bComponentOutsideWorld : 1;                               // 0x00B8(0x0004) (Const, Transient)
	unsigned long                                      bForceOctreeSNFilter : 1;                                 // 0x00B8(0x0004)
	unsigned long                                      bForceOctreeMNFilter : 1;                                 // 0x00B8(0x0004)
	unsigned long                                      bRigidBodyWasAwake : 1;                                   // 0x00B8(0x0004) (Const, Transient)
	unsigned long                                      bCallRigidBodyWakeEvents : 1;                             // 0x00B8(0x0004)
	unsigned long                                      bBounce : 1;                                              // 0x00B8(0x0004)
	unsigned long                                      bJustTeleported : 1;                                      // 0x00B8(0x0004) (Const)
	unsigned long                                      bEnableMobileTouch : 1;                                   // 0x00B8(0x0004) (Edit)
	unsigned long                                      bNetInitial : 1;                                          // 0x00B8(0x0004) (Const)
	unsigned long                                      bNetOwner : 1;                                            // 0x00B8(0x0004) (Const, Net)
	unsigned long                                      bHiddenEd : 1;                                            // 0x00B8(0x0004) (Const)
	unsigned long                                      bEditable : 1;                                            // 0x00B8(0x0004) (Const)
	unsigned long                                      bHiddenEdGroup : 1;                                       // 0x00B8(0x0004) (Const, Deprecated)
	unsigned long                                      bHiddenEdLayer : 1;                                       // 0x00B8(0x0004) (Const)
	unsigned long                                      bHiddenEdCustom : 1;                                      // 0x00B8(0x0004) (Const)
	unsigned long                                      bHiddenEdTemporary : 1;                                   // 0x00B8(0x0004) (Transient)
	unsigned long                                      bHiddenEdLevel : 1;                                       // 0x00B8(0x0004) (Transient)
	unsigned long                                      bHiddenEdScene : 1;                                       // 0x00B8(0x0004) (Transient)
	unsigned long                                      bEdShouldSnap : 1;                                        // 0x00B8(0x0004) (Edit)
	unsigned long                                      bTempEditor : 1;                                          // 0x00B8(0x0004) (Const, Transient)
	unsigned long                                      bPathColliding : 1;                                       // 0x00B8(0x0004) (Edit)
	unsigned long                                      bPathTemp : 1;                                            // 0x00B8(0x0004) (Transient)
	unsigned long                                      bScriptInitialized : 1;                                   // 0x00BC(0x0004)
	unsigned long                                      bLockLocation : 1;                                        // 0x00BC(0x0004) (Edit)
	unsigned long                                      bForceAllowKismetModification : 1;                        // 0x00BC(0x0004) (Const)
	unsigned long                                      bDebugEffectIsRelevant : 1;                               // 0x00BC(0x0004) (Edit)
	unsigned long                                      bLoadIfPhysXLevel0 : 1;                                   // 0x00BC(0x0004) (Edit)
	unsigned long                                      bLoadIfPhysXLevel1 : 1;                                   // 0x00BC(0x0004) (Edit)
	unsigned long                                      bLoadIfPhysXLevel2 : 1;                                   // 0x00BC(0x0004) (Edit)
	int                                                SkelMeshCompTickTag;                                      // 0x00C0(0x0004) (Const, Transient)
	int                                                NetTag;                                                   // 0x00C4(0x0004) (Const, Transient)
	float                                              NetUpdateTime;                                            // 0x00C8(0x0004) (Const)
	float                                              NetUpdateFrequency;                                       // 0x00CC(0x0004)
	float                                              NetPriority;                                              // 0x00D0(0x0004)
	float                                              LastNetUpdateTime;                                        // 0x00D4(0x0004) (Const, Transient)
	float                                              TimeSinceLastTick;                                        // 0x00D8(0x0004)
	class APawn*                                       Instigator;                                               // 0x00DC(0x0004) (Net)
	class AWorldInfo*                                  WorldInfo;                                                // 0x00E0(0x0004) (Const, Transient)
	float                                              LifeSpan;                                                 // 0x00E4(0x0004)
	float                                              CreationTime;                                             // 0x00E8(0x0004) (Const)
	float                                              LastRenderTime;                                           // 0x00EC(0x0004) (Transient)
	struct FName                                       Tag;                                                      // 0x00F0(0x0008) (Edit)
	struct FName                                       InitialState;                                             // 0x00F8(0x0008)
	struct FName                                       Layer;                                                    // 0x0100(0x0008) (Edit)
	struct FName                                       Group;                                                    // 0x0108(0x0008) (Deprecated)
	struct FQWord                                      HiddenEditorViews;                                        // 0x0110(0x0008) (Transient)
	TArray<class AActor*>                              Touching;                                                 // 0x0118(0x000C) (Const, Transient, NeedCtorLink)
	TArray<class AActor*>                              Children;                                                 // 0x0124(0x000C) (Const, Transient, NeedCtorLink)
	float                                              LatentFloat;                                              // 0x0130(0x0004) (Const)
	class UAnimNodeSequence*                           LatentSeqNode;                                            // 0x0134(0x0004) (Const)
	class APhysicsVolume*                              PhysicsVolume;                                            // 0x0138(0x0004) (Const, Transient)
	struct FVector                                     Velocity;                                                 // 0x013C(0x000C) (Net)
	struct FVector                                     Acceleration;                                             // 0x0148(0x000C)
	struct FVector                                     AngularVelocity;                                          // 0x0154(0x000C) (Const, Transient)
	class USkeletalMeshComponent*                      BaseSkelComponent;                                        // 0x0160(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FName                                       BaseBoneName;                                             // 0x0164(0x0008) (Edit)
	TArray<class AActor*>                              Attached;                                                 // 0x016C(0x000C) (Const, NeedCtorLink)
	struct FVector                                     RelativeLocation;                                         // 0x0178(0x000C) (Const, Net)
	struct FRotator                                    RelativeRotation;                                         // 0x0184(0x000C) (Const, Net)
	class UPrimitiveComponent*                         CollisionComponent;                                       // 0x0190(0x0004) (Edit, ExportObject, EditConst, Component, EditInline)
	int                                                OverlapTag;                                               // 0x0194(0x0004) (Native)
	class USOHubComponentBase*                         SOHub;                                                    // 0x0198(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FRotator                                    RotationRate;                                             // 0x019C(0x000C) (Edit)
	class AActor*                                      PendingTouch;                                             // 0x01A8(0x0004)
	class UClass*                                      MessageClass;                                             // 0x01AC(0x0004)
	TArray<class UClass*>                              SupportedEvents;                                          // 0x01B0(0x000C) (Const, NeedCtorLink)
	TArray<class USequenceEvent*>                      GeneratedEvents;                                          // 0x01BC(0x000C) (Const, NeedCtorLink)
	TArray<class USeqAct_Latent*>                      LatentActions;                                            // 0x01C8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Actor");
		return ptr;
	}


	class USpriteComponent* GetActorSpriteComponent();
	int GetActorMetrics(TEnumAsByte<EActorMetricsType> MetricsType);
	bool OnMobileTouch(class APlayerController* InPC, const struct FVector2D& TouchLocation);
	bool IsMobileTouchEnabled();
	bool ShouldBeHiddenBySHOW_NavigationNodes();
	bool WillOverlap(const struct FVector& PosA, const struct FVector& VelA, const struct FVector& PosB, const struct FVector& VelB, float StepSize, float Radius, float* Time);
	struct FVector GetAvoidanceVector(const struct FVector& GoalLocation, float CollisionRadius, float MaxSpeed, int NumSamples, float VelocityStepRate, float MaxTimeTilOverlap, TArray<class AActor*>* Obstacles);
	void ReplicationEnded();
	void PostDemoRewind();
	void AnimTreeUpdated(class USkeletalMeshComponent* SkelMesh);
	bool SupportsKismetModification(class USequenceOp* AskingOp, struct FString* Reason);
	class UParticleSystem* GetAnimTrailParticleSystem(class UAnimNotify_Trails* AnimNotifyData);
	void TrailsNotifyEnd(class UAnimNotify_Trails* AnimNotifyData);
	void TrailsNotifyTick(class UAnimNotify_Trails* AnimNotifyData);
	void TrailsNotify(class UAnimNotify_Trails* AnimNotifyData);
	bool CreateForceField(class UAnimNotify_ForceField* AnimNotifyData);
	bool PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData);
	void GetAimAdhesionExtent(float* Width, float* Height, struct FVector* Center);
	void GetAimFrictionExtent(float* Width, float* Height, struct FVector* Center);
	bool IsInPersistentLevel(bool bIncludeLevelStreamingPersistent);
	void OnRigidBodySpringOverextension(class URB_BodyInstance* BodyInstance);
	struct FGuid STATIC_GetPackageGuid(const struct FName& PackageName);
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void RootMotionExtracted(class USkeletalMeshComponent* SkelComp, struct FBoneAtom* ExtractedRootMotionDelta);
	void RootMotionProcessed(class USkeletalMeshComponent* SkelComp);
	void RootMotionModeChanged(class USkeletalMeshComponent* SkelComp);
	void PostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir);
	void NativePostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir);
	void SetHUDLocation(const struct FVector& NewHUDLocation);
	void OnRanOver(class ASVehicle* Vehicle, class UPrimitiveComponent* RunOverComponent, int WheelIndex);
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	void InterpolationChanged(class USeqAct_Interp* InterpAction);
	void InterpolationFinished(class USeqAct_Interp* InterpAction);
	void InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst);
	void SpawnedByKismet();
	class AActor* GetCurrentTarget();
	struct FVector GetTargetLocation(class AActor* RequestedBy, bool bRequestAlternateLoc);
	void FindGoodEndView(class APlayerController* PC, struct FRotator* GoodRotation);
	void NotifyLocalPlayerTeamReceived();
	unsigned char ScriptGetTeamNum();
	unsigned char GetTeamNum();
	void PawnBaseDied();
	bool IsPlayerOwned();
	void GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	bool IsStationary();
	class UFaceFXAsset* GetActorFaceFXAsset();
	bool CanActorPlayFaceFXAnim();
	bool IsActorPlayingFaceFXAnim();
	void TickSkelControl(float DeltaTime, class USkeletalMeshComponent* SkelComp, class USkelControlBase* SkelCtrl);
	void SetSkelControlScale(const struct FName& SkelControlName, float Scale);
	void SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight);
	void StopActorFaceFXAnim();
	bool PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay);
	void FinishAnimControl(class UInterpGroup* InInterpGroup);
	void SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void BeginAnimControl(class UInterpGroup* InInterpGroup);
	void OnAnimPlay(class UAnimNodeSequence* SeqNode);
	void OnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action);
	void OnAttachToActor(class USeqAct_AttachToActor* Action);
	void OnToggleHidden(class USeqAct_ToggleHidden* Action);
	void OnChangeCollision(class USeqAct_ChangeCollision* Action);
	void OnSetPhysics(class USeqAct_SetPhysics* Action);
	void OnSetBlockRigidBody(class USeqAct_SetBlockRigidBody* Action);
	void OnSetVelocity(class USeqAct_SetVelocity* Action);
	void OnTeleport(class USeqAct_Teleport* Action);
	void OnModifyHealth(class USeqAct_ModifyHealth* Action);
	void PrestreamTextures(float Seconds, bool bEnableStreaming, int CinematicTextureGroups);
	void ShutDown();
	void SetNetUpdateTime(float NewUpdateTime);
	void ForceNetRelevant();
	void OnDestroy(class USeqAct_Destroy* Action);
	void ClearLatentAction(class UClass* actionClass, bool bAborted, class USeqAct_Latent* exceptionAction);
	bool FindEventsOfClass(class UClass* EventClass, bool bIncludeDisabled, TArray<class USequenceEvent*>* out_EventList);
	bool ActivateEventClass(class UClass* InClass, class AActor* InInstigator, bool bTest, TArray<class USequenceEvent*>* EventList, TArray<int>* ActivateIndices, TArray<class USequenceEvent*>* ActivatedEvents);
	bool TriggerGlobalEventClass(class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex);
	void ReceivedNewEvent(class USequenceEvent* Evt);
	bool TriggerEventClass(class UClass* InEventClass, class AActor* InInstigator, int ActivateIndex, bool bTest, TArray<class USequenceEvent*>* ActivatedEvents);
	void DebugMessagePlayer(const struct FString& msg);
	bool ImpactEffectIsRelevant(class APawn* EffectInstigator, const struct FVector& SpawnLocation, bool bForceDedicated, float VisibleCullDistance, float HiddenCullDistance, bool bSkipLOSCheck);
	bool ActorEffectIsRelevant(class APawn* EffectInstigator, bool bForceDedicated, float VisibleCullDistance, float HiddenCullDistance);
	bool EffectIsRelevant(const struct FVector& SpawnLocation, bool bForceDedicated, float VisibleCullDistance, float HiddenCullDistance);
	void ApplyFluidSurfaceImpact(class AFluidSurfaceActor* Fluid, const struct FVector& HitLocation);
	bool CanSplash();
	void PlayTeleportEffect(bool bOut, bool bSound);
	bool IsInPain();
	void Reset();
	class UAudioComponent* GetFaceFXAudioComponent();
	void ModifyHearSoundComponent(class UAudioComponent* AC);
	struct FString GetPhysicsName();
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	struct FString GetDebugName();
	void MatchStarting();
	struct FString STATIC_GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3);
	void STATIC_ReplaceText(const struct FString& Replace, const struct FString& With, struct FString* Text);
	struct FString GetHumanReadableName();
	struct FString GetItemName(const struct FString& FullName);
	bool CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	void EndViewTarget(class APlayerController* PC);
	void BecomeViewTarget(class APlayerController* PC);
	bool CheckForErrors();
	void DebugFreezeGame(class AActor* ActorToLookAt);
	float GetGravityZ();
	void CheckHitInfo(class UPrimitiveComponent* FallBackComponent, const struct FVector& Dir, struct FTraceHitInfo* HitInfo, struct FVector* out_HitLocation);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent);
	bool HealDamage(float Amount, class AController* Healer, class UClass* DamageType);
	void TakeDamage(float DamageAmount, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void KilledBy(class APawn* EventInstigator);
	bool HurtRadius(float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage);
	bool StopsProjectile(class AProjectile* P);
	void NotifySkelControlBeyondLimit(class USkelControlLookAt* LookAt);
	void ConstraintBrokenNotify(class AActor* ConOwner, class URB_ConstraintSetup* ConSetup, class URB_ConstraintInstance* ConInstance);
	void SetInitialState();
	void PostBeginPlay();
	void BroadcastLocalizedTeamMessage(int TeamIndex, class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void BroadcastLocalizedMessage(class UClass* InMessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void PreBeginPlay();
	class APlayerController* GetALocalPlayerController();
	void LocalPlayerControllers(class UClass* BaseClass, class APlayerController** PC);
	void AllOwnedComponents(class UClass* BaseClass, class UActorComponent** OutComponent);
	void ComponentList(class UClass* BaseClass, class UActorComponent** out_Component);
	void OverlappingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bIgnoreHidden, class AActor** out_Actor);
	void CollidingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bUseOverlapCheck, class UClass* InterfaceClass, class AActor** Actor, struct FTraceHitInfo* HitInfo);
	void VisibleCollidingActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, bool bIgnoreHidden, const struct FVector& Extent, bool bTraceActors, class UClass* InterfaceClass, bool bExplosionTrace, bool bTracePawnEyes, class AActor** Actor, struct FTraceHitInfo* HitInfo);
	void VisibleActors(class UClass* BaseClass, float Radius, const struct FVector& Loc, class AActor** Actor);
	void TraceActors(class UClass* BaseClass, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, int ExtraTraceFlags, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm, struct FTraceHitInfo* HitInfo);
	void TouchingActors(class UClass* BaseClass, class AActor** Actor);
	void BasedActors(class UClass* BaseClass, class AActor** Actor);
	void ChildActors(class UClass* BaseClass, class AActor** Actor);
	void DynamicActors(class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor);
	void AllActors(class UClass* BaseClass, class UClass* InterfaceClass, class AActor** Actor);
	struct FString GetURLMap();
	void PostTeleport(class ATeleporter* OutTeleporter);
	bool PreTeleport(class ATeleporter* InTeleporter);
	struct FVector GetDestination(class AController* C);
	bool CalculateMinSpeedTrajectory(const struct FVector& End, const struct FVector& Start, float MaxTossSpeed, float MinTossSpeed, const struct FVector& CollisionSize, float TerminalVelocity, float GravityZ, bool bOnlyTraceUp, struct FVector* out_Velocity);
	bool SuggestTossVelocity(const struct FVector& Destination, const struct FVector& Start, float TossSpeed, float BaseTossZ, float DesiredZPct, const struct FVector& CollisionSize, float TerminalVelocity, float OverrideGravityZ, bool bOnlyTraceUp, struct FVector* TossVelocity);
	bool PlayerCanSeeMe(bool bForceLOSCheck);
	void MakeNoise(float Loudness, const struct FName& NoiseType);
	void PlaySound(class USoundCue* InSoundCue, bool bNotReplicated, bool bNoRepToOwner, bool bStopWhenOwnerDestroyed, const struct FVector& SoundLocation, bool bNoRepToRelevant);
	class UAudioComponent* CreateAudioComponent(class USoundCue* InSoundCue, bool bPlay, bool bStopWhenOwnerDestroyed, bool bUseLocation, const struct FVector& SourceLocation, bool bAttachToSelf);
	void ResetTimerTimeDilation(const struct FName& TimerName, class UObject* inObj);
	void ModifyTimerTimeDilation(const struct FName& TimerName, float InTimerTimeDilation, class UObject* inObj);
	float GetRemainingTimeForTimer(const struct FName& TimerFuncName, class UObject* inObj);
	float GetTimerRate(const struct FName& TimerFuncName, class UObject* inObj);
	void SetTimerCount(float InCount, const struct FName& inTimerFunc, class UObject* inObj);
	float GetTimerCount(const struct FName& inTimerFunc, class UObject* inObj);
	bool IsTimerActive(const struct FName& inTimerFunc, class UObject* inObj);
	void PauseTimer(bool bPause, const struct FName& inTimerFunc, class UObject* inObj);
	void ClearAllTimers(class UObject* inObj);
	void ClearTimer(const struct FName& inTimerFunc, class UObject* inObj);
	void SetTimer(float InRate, bool inbLoop, const struct FName& inTimerFunc, class UObject* inObj);
	void TornOff();
	bool Destroy();
	class AActor* Spawn(class UClass* SpawnClass, class AActor* SpawnOwner, const struct FName& SpawnTag, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* ActorTemplate, bool bNoCollisionFail);
	bool IsBlockedBy(class AActor* Other);
	void GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight);
	void GetComponentsBoundingBox(struct FBox* ActorBox);
	bool IsOverlapping(class AActor* A);
	bool ContainsPoint(const struct FVector& Spot);
	bool FindSpot(const struct FVector& BoxExtent, struct FVector* SpotLocation);
	bool TraceAllPhysicsAssetInteractions(class USkeletalMeshComponent* SkelMeshComp, const struct FVector& EndTrace, const struct FVector& StartTrace, const struct FVector& Extent, TArray<struct FImpactInfo>* out_Hits);
	bool FastTrace(const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& BoxExtent, bool bTraceBullet);
	bool PointCheckComponent(class UPrimitiveComponent* InComponent, const struct FVector& PointLocation, const struct FVector& PointExtent);
	bool TraceComponent(class UPrimitiveComponent* InComponent, const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& Extent, bool bComplexCollision, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo);
	class AActor* Trace(const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bTraceActors, const struct FVector& Extent, int ExtraTraceFlags, struct FVector* HitLocation, struct FVector* HitNormal, struct FTraceHitInfo* HitInfo);
	void VolumeBasedDestroy(class APhysicsVolume* PV);
	void OutsideWorldBounds();
	void FellOutOfWorld(class UClass* dmgType);
	bool UsedBy(class APawn* User);
	bool OverRotated(struct FRotator* out_Desired, struct FRotator* out_Actual);
	bool ClampRotation(const struct FRotator& rBase, const struct FRotator& rUpperLimits, const struct FRotator& rLowerLimits, struct FRotator* out_Rot);
	void OnSleepRBPhysics();
	void OnWakeRBPhysics();
	void RanInto(class AActor* Other);
	void EncroachedBy(class AActor* Other);
	bool EncroachingOn(class AActor* Other);
	void CollisionChanged();
	class AActor* SpecialHandling(class APawn* Other);
	void Detach(class AActor* Other);
	void Attach(class AActor* Other);
	void BaseChange();
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void UnTouch(class AActor* Other);
	void PostTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PhysicsVolumeChange(class APhysicsVolume* NewVolume);
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void Falling();
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void Timer();
	void Tick(float DeltaTime);
	void LostChild(class AActor* Other);
	void GainedChild(class AActor* Other);
	void Destroyed();
	void SetTickIsDisabled(bool bInDisabled);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
	void ReattachComponent(class UActorComponent* ComponentToReattach);
	void DetachComponent(class UActorComponent* ExComponent);
	void AttachComponent(class UActorComponent* NewComponent);
	void UnClock(float* Time);
	void Clock(float* Time);
	void SetPhysics(TEnumAsByte<EPhysics> newPhysics);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetHidden(bool bNewHidden);
	void ChartData(const struct FString& DataName, float DataValue);
	void STATIC_FlushDebugStrings();
	void STATIC_DrawDebugFrustrum(unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines, struct FMatrix* FrustumToWorld);
	void STATIC_DrawDebugString(const struct FVector& TextLocation, const struct FString& Text, class AActor* TestBaseActor, const struct FColor& TextColor, float Duration);
	void STATIC_DrawDebugCone(const struct FVector& Origin, const struct FVector& Direction, float Length, float AngleWidth, float AngleHeight, int NumSides, const struct FColor& DrawColor, bool bPersistentLines);
	void STATIC_DrawDebugCylinder(const struct FVector& Start, const struct FVector& End, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines);
	void STATIC_DrawDebugSphere(const struct FVector& Center, float Radius, int Segments, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines);
	void STATIC_DrawDebugCoordinateSystem(const struct FVector& AxisLoc, const struct FRotator& AxisRot, float Scale, bool bPersistentLines);
	void STATIC_DrawDebugStar(const struct FVector& Position, float Size, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines);
	void STATIC_DrawDebugBox(const struct FVector& Center, const struct FVector& Extent, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines);
	void STATIC_DrawDebugPoint(const struct FVector& Position, float Size, const struct FLinearColor& PointColor, bool bPersistentLines);
	void STATIC_DrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, unsigned char R, unsigned char G, unsigned char B, bool bPersistentLines);
	void STATIC_FlushPersistentDebugLines();
	struct FVector STATIC_GetBasedPosition(const struct FBasedPosition& BP);
	void STATIC_SetBasedPosition(const struct FVector& pos, class AActor* ForcedBase, struct FBasedPosition* BP);
	struct FVector STATIC_BP2Vect(const struct FBasedPosition& BP);
	void STATIC_Vect2BP(const struct FVector& pos, class AActor* ForcedBase, struct FBasedPosition* BP);
	void SetForcedInitialReplicatedProperty(class UProperty* PropToReplicate, bool bAdd);
	void ReplicatedEvent(const struct FName& VarName);
	struct FVector GetAggregateBaseVelocity(class AActor* TestBase);
	bool IsOwnedBy(class AActor* TestActor);
	class AActor* GetBaseMost();
	bool IsBasedOn(class AActor* TestActor);
	void SearchForBaseBelow(float HeightBelow, class AActor** NewBase, struct FVector* HitNormal);
	void FindBase();
	void SetOwner(class AActor* NewOwner);
	void SetBase(class AActor* NewBase, const struct FVector& NewFloor, class USkeletalMeshComponent* SkelComp, const struct FName& AttachName);
	float GetTerminalVelocity();
	void AutonomousPhysics(float DeltaSeconds);
	bool MoveSmooth(const struct FVector& Delta);
	int fixedTurn(int Current, int Desired, int DeltaRate);
	void SetShadowParentOnAllAttachedComponents(class UPrimitiveComponent* MyPrimComp, class ULightEnvironmentComponent* MyLightEnv);
	void SetHardAttach(bool bNewHardAttach);
	bool SetRelativeLocation(const struct FVector& NewLocation);
	bool SetRelativeRotation(const struct FRotator& NewRotation);
	void SetZone(bool bForceRefresh);
	TEnumAsByte<EMoveDir> MovingWhichWay(float* Amount);
	bool SetRotation(const struct FRotator& NewRotation);
	bool SetLocation(const struct FVector& NewLocation);
	bool Move(const struct FVector& Delta);
	void SetDrawScale3D(const struct FVector& NewScale3D);
	void SetDrawScale(float NewScale);
	void SetCollisionType(TEnumAsByte<ECollisionType> NewCollisionType);
	void SetCollisionSize(float NewRadius, float NewHeight);
	void SetCollision(bool bNewColActors, bool bNewBlockActors, bool bNewIgnoreEncroachers);
	void FinishAnim(class UAnimNodeSequence* SeqNode, bool bFinishOnBlendOut);
	void Sleep(float Seconds);
	struct FString ConsoleCommand(const struct FString& Command, bool bWriteToLog);
	void ForceUpdateComponents(bool bCollisionUpdate, bool bTransformOnly);
};


// Class Engine.Info
// 0x0000 (0x01D4 - 0x01D4)
class AInfo : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Info");
		return ptr;
	}

};


// Class Engine.ZoneInfo
// 0x0010 (0x01E4 - 0x01D4)
class AZoneInfo : public AInfo
{
public:
	float                                              KillZ;                                                    // 0x01D4(0x0004) (Edit)
	float                                              SoftKill;                                                 // 0x01D8(0x0004) (Edit)
	class UClass*                                      KillZDamageType;                                          // 0x01DC(0x0004) (Edit)
	unsigned long                                      bSoftKillZ : 1;                                           // 0x01E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ZoneInfo");
		return ptr;
	}

};


// Class Engine.MusicTrackDataStructures
// 0x0000 (0x003C - 0x003C)
class UMusicTrackDataStructures : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MusicTrackDataStructures");
		return ptr;
	}

};


// Class Engine.Brush
// 0x0024 (0x01F8 - 0x01D4)
class ABrush : public AActor
{
public:
	TEnumAsByte<ECsgOper>                              CsgOper;                                                  // 0x01D4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01D5(0x0003) MISSED OFFSET
	struct FColor                                      BrushColor;                                               // 0x01D8(0x0004) (Edit)
	int                                                PolyFlags;                                                // 0x01DC(0x0004)
	unsigned long                                      bColored : 1;                                             // 0x01E0(0x0004) (Edit)
	unsigned long                                      bSolidWhenSelected : 1;                                   // 0x01E0(0x0004)
	unsigned long                                      bPlaceableFromClassBrowser : 1;                           // 0x01E0(0x0004)
	class UModel*                                      Brush;                                                    // 0x01E4(0x0004) (Const, ExportObject)
	class UBrushComponent*                             BrushComponent;                                           // 0x01E8(0x0004) (Const, ExportObject, EditConst, Component, EditInline)
	TArray<struct FGeomSelection>                      SavedSelections;                                          // 0x01EC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Brush");
		return ptr;
	}

};


// Class Engine.Volume
// 0x0008 (0x0200 - 0x01F8)
class AVolume : public ABrush
{
public:
	class AActor*                                      AssociatedActor;                                          // 0x01F8(0x0004)
	unsigned long                                      bForcePawnWalk : 1;                                       // 0x01FC(0x0004) (Edit)
	unsigned long                                      bProcessAllActors : 1;                                    // 0x01FC(0x0004) (Edit)
	unsigned long                                      bPawnsOnly : 1;                                           // 0x01FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Volume");
		return ptr;
	}


	void ProcessActorSetVolume(class AActor* Other);
	void CollisionChanged();
	void OnToggle(class USeqAct_Toggle* Action);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void PostBeginPlay();
	bool EncompassesPoint(const struct FVector& Loc);
	bool Encompasses(class AActor* Other);
};


// Class Engine.PostProcessVolume
// 0x015C (0x035C - 0x0200)
class APostProcessVolume : public AVolume
{
public:
	float                                              Priority;                                                 // 0x0200(0x0004) (Edit)
	unsigned long                                      bOverrideWorldPostProcessChain : 1;                       // 0x0204(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x0204(0x0004) (Edit, Net)
	struct FPostProcessSettings                        Settings;                                                 // 0x0208(0x0150) (Edit, NeedCtorLink)
	class APostProcessVolume*                          NextLowerPriorityVolume;                                  // 0x0358(0x0004) (Const, Transient, NoImport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PostProcessVolume");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class Engine.ReverbVolume
// 0x0040 (0x0240 - 0x0200)
class AReverbVolume : public AVolume
{
public:
	float                                              Priority;                                                 // 0x0200(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x0204(0x0004) (Edit, Net)
	struct FReverbSettings                             Settings;                                                 // 0x0208(0x0010) (Edit)
	struct FInteriorSettings                           AmbientZoneSettings;                                      // 0x0218(0x0024) (Edit)
	class AReverbVolume*                               NextLowerPriorityVolume;                                  // 0x023C(0x0004) (Const, Transient, NoImport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReverbVolume");
		return ptr;
	}

};


// Class Engine.WorldInfo
// 0x0684 (0x0868 - 0x01E4)
class AWorldInfo : public AZoneInfo
{
public:
	struct FPostProcessSettings                        DefaultPostProcessSettings;                               // 0x01E4(0x0150) (Edit, Config, NeedCtorLink)
	class UPostProcessChain*                           WorldPostProcessChain;                                    // 0x0334(0x0004) (Edit)
	unsigned long                                      bPersistPostProcessToNextLevel : 1;                       // 0x0338(0x0004) (Edit, Config)
	unsigned long                                      bFogEnabled : 1;                                          // 0x0338(0x0004) (Edit)
	unsigned long                                      bBumpOffsetEnabled : 1;                                   // 0x0338(0x0004) (Edit)
	unsigned long                                      bUseGammaCorrection : 1;                                  // 0x0338(0x0004) (Edit)
	unsigned long                                      bMapNeedsLightingFullyRebuilt : 1;                        // 0x0338(0x0004)
	unsigned long                                      bMapHasMultipleDominantLightsAffectingOnePrimitive : 1;   // 0x0338(0x0004)
	unsigned long                                      bMapHasPathingErrors : 1;                                 // 0x0338(0x0004)
	unsigned long                                      bRequestedBlockOnAsyncLoading : 1;                        // 0x0338(0x0004)
	unsigned long                                      bBegunPlay : 1;                                           // 0x0338(0x0004)
	unsigned long                                      bPlayersOnly : 1;                                         // 0x0338(0x0004)
	unsigned long                                      bPlayersOnlyPending : 1;                                  // 0x0338(0x0004)
	unsigned long                                      bSuspendAI : 1;                                           // 0x0338(0x0004)
	unsigned long                                      bDropDetail : 1;                                          // 0x0338(0x0004) (Transient)
	unsigned long                                      bAggressiveLOD : 1;                                       // 0x0338(0x0004) (Transient)
	unsigned long                                      bStartup : 1;                                             // 0x0338(0x0004)
	unsigned long                                      bPathsRebuilt : 1;                                        // 0x0338(0x0004)
	unsigned long                                      bHasPathNodes : 1;                                        // 0x0338(0x0004)
	unsigned long                                      bIsMenuLevel : 1;                                         // 0x0338(0x0004) (Const, Transient)
	unsigned long                                      bOfflineApproved : 1;                                     // 0x0338(0x0004) (Edit, Const)
	unsigned long                                      bIsWinterMode : 1;                                        // 0x0338(0x0004) (Const, Transient)
	unsigned long                                      bDebugPauseExecution : 1;                                 // 0x0338(0x0004) (Const, Transient)
	unsigned long                                      bDebugStepExecution : 1;                                  // 0x0338(0x0004) (Const, Transient)
	unsigned long                                      bUseConsoleInput : 1;                                     // 0x0338(0x0004) (Transient)
	unsigned long                                      bMinimizeBSPSections : 1;                                 // 0x0338(0x0004) (Edit)
	unsigned long                                      bNoDefaultInventoryForPlayer : 1;                         // 0x0338(0x0004) (Edit)
	unsigned long                                      bNoPathWarnings : 1;                                      // 0x0338(0x0004) (Edit)
	unsigned long                                      bNoMobileMapWarnings : 1;                                 // 0x0338(0x0004) (Edit, Config)
	unsigned long                                      bHighPriorityLoading : 1;                                 // 0x0338(0x0004) (Net)
	unsigned long                                      bHighPriorityLoadingLocal : 1;                            // 0x0338(0x0004)
	unsigned long                                      bUseProcBuildingRulesetOverride : 1;                      // 0x0338(0x0004) (Edit)
	unsigned long                                      bInteractiveMode : 1;                                     // 0x0338(0x0004) (Const, Transient)
	unsigned long                                      bSupportDoubleBufferedPhysics : 1;                        // 0x0338(0x0004) (Edit)
	unsigned long                                      bPhysicsIgnoreDeltaTime : 1;                              // 0x033C(0x0004) (Edit)
	unsigned long                                      bEnableChanceOfPhysicsChunkOverride : 1;                  // 0x033C(0x0004) (Edit, Config)
	unsigned long                                      bLimitExplosionChunkSize : 1;                             // 0x033C(0x0004) (Edit, Config)
	unsigned long                                      bLimitDamageChunkSize : 1;                                // 0x033C(0x0004) (Edit, Config)
	unsigned long                                      bPrecomputeVisibility : 1;                                // 0x033C(0x0004) (Edit)
	unsigned long                                      bPlaceCellsOnSurfaces : 1;                                // 0x033C(0x0004) (Edit)
	unsigned long                                      bAllowTemporalAA : 1;                                     // 0x033C(0x0004) (Edit, Config, GlobalConfig)
	unsigned long                                      bUseGlobalIllumination : 1;                               // 0x033C(0x0004) (Edit)
	unsigned long                                      bForceNoPrecomputedLighting : 1;                          // 0x033C(0x0004) (Edit)
	unsigned long                                      bHaveActiveCrowd : 1;                                     // 0x033C(0x0004)
	unsigned long                                      bAllowHostMigration : 1;                                  // 0x033C(0x0004) (Config)
	unsigned long                                      bGameplayFramePause : 1;                                  // 0x033C(0x0004)
	float                                              SquintModeKernelSize;                                     // 0x0340(0x0004) (Edit, Config)
	class APostProcessVolume*                          HighestPriorityPostProcessVolume;                         // 0x0344(0x0004) (Const, Transient, NoImport)
	struct FReverbSettings                             DefaultReverbSettings;                                    // 0x0348(0x0010) (Edit, Config)
	struct FInteriorSettings                           DefaultAmbientZoneSettings;                               // 0x0358(0x0024) (Edit, Config)
	float                                              FogStart;                                                 // 0x037C(0x0004) (Edit)
	float                                              FogEnd;                                                   // 0x0380(0x0004) (Edit)
	struct FColor                                      FogColor;                                                 // 0x0384(0x0004) (Edit)
	float                                              BumpEnd;                                                  // 0x0388(0x0004) (Edit)
	class AReverbVolume*                               HighestPriorityReverbVolume;                              // 0x038C(0x0004) (Const, Transient, NoImport)
	TArray<class AMassiveLODOverrideVolume*>           MassiveLODOverrideVolumes;                                // 0x0390(0x000C) (Const, Transient, NeedCtorLink, NoImport)
	TArray<class APortalVolume*>                       PortalVolumes;                                            // 0x039C(0x000C) (Const, Transient, NeedCtorLink, NoImport)
	TArray<class AEnvironmentVolume*>                  EnvironmentVolumes;                                       // 0x03A8(0x000C) (Const, Transient, NeedCtorLink, NoImport)
	TArray<class ULevelStreaming*>                     StreamingLevels;                                          // 0x03B4(0x000C) (Edit, Const, EditConst, NeedCtorLink, EditInline)
	struct FDouble                                     LastTimeUnbuiltLightingWasEncountered;                    // 0x03C0(0x0008) (Transient)
	class UBookMark*                                   BookMarks[0xA];                                           // 0x03C8(0x0004) (Edit)
	class UKismetBookMark*                             KismetBookMarks[0xA];                                     // 0x03F0(0x0004) (Edit)
	TArray<class UClipPadEntry*>                       ClipPadEntries;                                           // 0x0418(0x000C) (Edit, NeedCtorLink, EditInline)
	float                                              TimeDilation;                                             // 0x0424(0x0004) (Net)
	float                                              DemoPlayTimeDilation;                                     // 0x0428(0x0004)
	float                                              TimeSeconds;                                              // 0x042C(0x0004) (Transient)
	float                                              RealTimeSeconds;                                          // 0x0430(0x0004) (Transient)
	float                                              AudioTimeSeconds;                                         // 0x0434(0x0004) (Transient)
	float                                              DeltaSeconds;                                             // 0x0438(0x0004) (Const, Transient)
	float                                              PauseDelay;                                               // 0x043C(0x0004) (Transient)
	float                                              RealTimeToUnPause;                                        // 0x0440(0x0004) (Transient)
	class APlayerReplicationInfo*                      Pauser;                                                   // 0x0444(0x0004) (Net)
	struct FString                                     VisibleGroups;                                            // 0x0448(0x000C) (NeedCtorLink, Deprecated)
	struct FString                                     VisibleLayers;                                            // 0x0454(0x000C) (NeedCtorLink)
	class UParticleSystem*                             LevelParticles;                                           // 0x0460(0x0004) (Edit)
	class UTexture2D*                                  DefaultTexture;                                           // 0x0464(0x0004)
	class UTexture2D*                                  WireframeTexture;                                         // 0x0468(0x0004)
	class UTexture2D*                                  WhiteSquareTexture;                                       // 0x046C(0x0004)
	class UTexture2D*                                  LargeVertex;                                              // 0x0470(0x0004)
	class UTexture2D*                                  BSPVertex;                                                // 0x0474(0x0004)
	TArray<struct FString>                             DeferredExecs;                                            // 0x0478(0x000C) (NeedCtorLink)
	class AGameReplicationInfo*                        GRI;                                                      // 0x0484(0x0004) (Transient)
	TEnumAsByte<ENetMode>                              NetMode;                                                  // 0x0488(0x0001)
	TEnumAsByte<ETravelType>                           NextTravelType;                                           // 0x0489(0x0001)
	TEnumAsByte<EVisibilityAggressiveness>             VisibilityAggressiveness;                                 // 0x048A(0x0001) (Edit)
	TEnumAsByte<EPreferredLightmapType>                PreferredLightmapType;                                    // 0x048B(0x0001)
	TEnumAsByte<ELightingBuildQuality>                 LevelLightingQuality;                                     // 0x048C(0x0001) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x3];                                       // 0x048D(0x0003) MISSED OFFSET
	struct FString                                     ComputerName;                                             // 0x0490(0x000C) (NeedCtorLink)
	struct FString                                     EngineVersion;                                            // 0x049C(0x000C) (NeedCtorLink)
	struct FString                                     MinNetVersion;                                            // 0x04A8(0x000C) (NeedCtorLink)
	class AGameInfo*                                   Game;                                                     // 0x04B4(0x0004)
	float                                              StallZ;                                                   // 0x04B8(0x0004) (Edit)
	float                                              WorldGravityZ;                                            // 0x04BC(0x0004) (Net, Transient)
	float                                              DefaultGravityZ;                                          // 0x04C0(0x0004) (Const, Config, GlobalConfig)
	float                                              GlobalGravityZ;                                           // 0x04C4(0x0004) (Edit)
	float                                              RBPhysicsGravityScaling;                                  // 0x04C8(0x0004) (Config, GlobalConfig)
	class ANavigationPoint*                            NavigationPointList;                                      // 0x04CC(0x0004) (Const, Transient)
	class AController*                                 ControllerList;                                           // 0x04D0(0x0004) (Const)
	class APawn*                                       PawnList;                                                 // 0x04D4(0x0004) (Const)
	class ACoverLink*                                  CoverList;                                                // 0x04D8(0x0004) (Const, Transient)
	class APylon*                                      PylonList;                                                // 0x04DC(0x0004) (Const, Transient)
	float                                              MoveRepSize;                                              // 0x04E0(0x0004)
	TArray<struct FNetViewer>                          ReplicationViewers;                                       // 0x04E4(0x000C) (Const, NeedCtorLink)
	struct FString                                     NextURL;                                                  // 0x04F0(0x000C) (NeedCtorLink)
	float                                              NextSwitchCountdown;                                      // 0x04FC(0x0004)
	int                                                PackedLightAndShadowMapTextureSize;                       // 0x0500(0x0004) (Edit)
	struct FVector                                     DefaultColorScale;                                        // 0x0504(0x000C) (Edit)
	class UClass*                                      DefaultGameType;                                          // 0x0510(0x0004) (Edit)
	TArray<class UClass*>                              GameTypesSupportedOnThisMap;                              // 0x0514(0x000C) (Edit, NeedCtorLink)
	class UClass*                                      GameTypeForPIE;                                           // 0x0520(0x0004) (Edit)
	TArray<class UObject*>                             ClientDestroyedActorContent;                              // 0x0524(0x000C) (Const, EditConst, NeedCtorLink)
	TArray<struct FName>                               PreparingLevelNames;                                      // 0x0530(0x000C) (Const, Transient, NeedCtorLink)
	struct FName                                       CommittedPersistentLevelName;                             // 0x053C(0x0008) (Const, Transient)
	class UObjectReferencer*                           PersistentMapForcedObjects;                               // 0x0544(0x0004)
	class UAudioComponent*                             MusicComp;                                                // 0x0548(0x0004) (ExportObject, Transient, Component, EditInline)
	struct FMusicTrackStruct                           CurrentMusicTrack;                                        // 0x054C(0x0024) (Transient, NeedCtorLink)
	struct FMusicTrackStruct                           ReplicatedMusicTrack;                                     // 0x0570(0x0024) (Net, Transient, NeedCtorLink)
	struct FString                                     Title;                                                    // 0x0594(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     Author;                                                   // 0x05A0(0x000C) (Edit, NeedCtorLink)
	class UMapInfo*                                    MyMapInfo;                                                // 0x05AC(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	struct FString                                     EmitterPoolClassPath;                                     // 0x05B0(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class AEmitterPool*                                MyEmitterPool;                                            // 0x05BC(0x0004) (Transient)
	class AApexEffectPool*                             MyApexEffectPool;                                         // 0x05C0(0x0004) (Transient)
	struct FString                                     DecalManagerClassPath;                                    // 0x05C4(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class ADecalManager*                               MyDecalManager;                                           // 0x05D0(0x0004) (Transient)
	struct FString                                     FractureManagerClassPath;                                 // 0x05D4(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class AFractureManager*                            MyFractureManager;                                        // 0x05E0(0x0004) (Transient)
	struct FString                                     ParticleEventManagerClassPath;                            // 0x05E4(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class AParticleEventManager*                       MyParticleEventManager;                                   // 0x05F0(0x0004) (Transient)
	class UProcBuildingRuleset*                        ProcBuildingRulesetOverride;                              // 0x05F4(0x0004) (Edit)
	int                                                SkelMeshCompTickTagCount;                                 // 0x05F8(0x0004) (Const, Transient)
	float                                              MaxPhysicsDeltaTime;                                      // 0x05FC(0x0004) (Edit)
	int                                                MaxPhysicsSubsteps;                                       // 0x0600(0x0004) (Config)
	struct FPhysXSceneProperties                       PhysicsProperties;                                        // 0x0604(0x003C) (Edit, EditInline)
	TArray<struct FCompartmentRunList>                 CompartmentRunFrames;                                     // 0x0640(0x000C) (Edit, NeedCtorLink)
	float                                              DefaultSkinWidth;                                         // 0x064C(0x0004) (Edit)
	float                                              ApexLODResourceBudget;                                    // 0x0650(0x0004) (Edit)
	float                                              ApexDestructionLODResourceValue;                          // 0x0654(0x0004) (Edit)
	float                                              ApexClothingLODResourceValue;                             // 0x0658(0x0004) (Edit)
	struct FApexModuleDestructibleSettings             DestructibleSettings;                                     // 0x065C(0x0014) (Edit)
	class UPhysicsLODVerticalEmitter*                  EmitterVertical;                                          // 0x0670(0x0004)
	struct FPhysXVerticalProperties                    VerticalProperties;                                       // 0x0674(0x0018) (Edit, EditInline)
	TArray<struct FPointer>                            WorldAttractors;                                          // 0x068C(0x000C) (Native)
	float                                              ChanceOfPhysicsChunkOverride;                             // 0x0698(0x0004) (Edit, Config)
	float                                              MaxExplosionChunkSize;                                    // 0x069C(0x0004) (Edit, Config)
	float                                              MaxDamageChunkSize;                                       // 0x06A0(0x0004) (Edit, Config)
	float                                              FractureExplosionVelScale;                                // 0x06A4(0x0004) (Edit, Config)
	int                                                MaxNumFacturedChunksToSpawnInAFrame;                      // 0x06A8(0x0004) (Edit)
	int                                                NumFacturedChunksSpawnedThisFrame;                        // 0x06AC(0x0004) (Transient)
	float                                              FracturedMeshWeaponDamage;                                // 0x06B0(0x0004) (Config)
	int                                                VisibilityCellSize;                                       // 0x06B4(0x0004) (Edit)
	float                                              CharacterLitIndirectBrightness;                           // 0x06B8(0x0004) (Edit)
	float                                              CharacterLitIndirectContrastFactor;                       // 0x06BC(0x0004) (Edit)
	float                                              CharacterShadowedIndirectBrightness;                      // 0x06C0(0x0004) (Edit)
	float                                              CharacterShadowedIndirectContrastFactor;                  // 0x06C4(0x0004) (Edit)
	float                                              CharacterLightingContrastFactor;                          // 0x06C8(0x0004) (Edit)
	class UTexture2D*                                  ImageReflectionEnvironmentTexture;                        // 0x06CC(0x0004) (Edit)
	struct FLinearColor                                ImageReflectionEnvironmentColor;                          // 0x06D0(0x0010) (Edit)
	float                                              ImageReflectionEnvironmentRotation;                       // 0x06E0(0x0004) (Edit)
	struct FMap_Mirror                                 ScreenMessages;                                           // 0x06E4(0x003C) (Native, Transient)
	TArray<struct FScreenMessageString>                PriorityScreenMessages;                                   // 0x0720(0x000C) (Native, Transient)
	int                                                MaxTrianglesPerLeaf;                                      // 0x072C(0x0004)
	class ULightmassLevelSettings*                     LMLevelSettings;                                          // 0x0730(0x0004) (ExportObject, NeedCtorLink, EditInline, Deprecated)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x0734(0x003C) UNKNOWN PROPERTY: MapProperty Engine.WorldInfo.LandscapeInfoMap
	struct FLightmassWorldInfoSettings                 LightmassSettings;                                        // 0x0770(0x0058) (Edit)
	unsigned char                                      UnknownData02[0x3C];                                      // 0x07C8(0x003C) UNKNOWN PROPERTY: MapProperty Engine.WorldInfo.NavMeshPathConstraintCache
	unsigned char                                      UnknownData03[0x3C];                                      // 0x0804(0x003C) UNKNOWN PROPERTY: MapProperty Engine.WorldInfo.NavMeshPathGoalEvaluatorCache
	class ACrowdPopulationManagerBase*                 PopulationManager;                                        // 0x0840(0x0004)
	struct FHostMigrationState                         PeerHostMigration;                                        // 0x0844(0x001C) (Const, Transient, NeedCtorLink)
	float                                              HostMigrationTimeout;                                     // 0x0860(0x0004) (Config)
	class APhysicsVolume*                              FirstPhysicsVolume;                                       // 0x0864(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WorldInfo");
		return ptr;
	}


	void ClearObjectPools();
	void ToggleHostMigration(bool bEnabled);
	void NotifyHostMigrationStateChanged(TEnumAsByte<EHostMigrationProgress> NewState, TEnumAsByte<EHostMigrationProgress> OldState);
	bool BeginHostMigration();
	bool CanBeginHostMigration();
	class AEnvironmentVolume* FindEnvironmentVolume(const struct FVector& TestLocation);
	class AWorldInfo* STATIC_GetWorldInfo();
	struct FWorldFractureSettings GetWorldFractureSettings();
	void DoMemoryTracking();
	bool GetDemoRewindPoints(TArray<int>* OutRewindPoints);
	void GetDemoFrameInfo(int* CurrentFrame, int* TotalFrames);
	bool IsPlayingDemo();
	bool IsRecordingDemo();
	TEnumAsByte<EDetailMode> GetDetailMode();
	struct FString GetMapName(bool bIncludePrefix);
	void SetMapInfo(class UMapInfo* NewMapInfo);
	class UMapInfo* GetMapInfo();
	void SetSeamlessTravelMidpointPause(bool bNowPaused);
	bool IsInSeamlessTravel();
	void SeamlessTravel(const struct FString& URL, bool bAbsolute, const struct FGuid& MapPackageGuid);
	void CommitMapChange();
	void CancelPendingMapChange();
	bool IsMapChangeReady();
	bool IsPreparingMapChange();
	void PrepareMapChange(TArray<struct FName>* LevelNames);
	void NotifyMatchStarted(bool bShouldActivateLevelStartupEvents, bool bShouldActivateLevelBeginningEvents, bool bShouldActivateLevelLoadedEvents);
	class UPlayer* GetFirstClientConnection();
	void AllClientConnections(class UPlayer** ClientConnection, int* ClientIP, int* ClientPort);
	void AllPawns(class UClass* BaseClass, const struct FVector& TestLocation, float TestRadius, class APawn** P);
	void AllControllers(class UClass* BaseClass, class AController** C);
	void NavigationPointCheck(const struct FVector& Point, const struct FVector& Extent, TArray<class ANavigationPoint*>* Navs, TArray<class UReachSpec*>* Specs);
	void RadiusNavigationPoints(class UClass* BaseClass, const struct FVector& Point, float Radius, class ANavigationPoint** N);
	void AllNavigationPoints(class UClass* BaseClass, class ANavigationPoint** N);
	void Reset();
	void PostBeginPlay();
	void PreBeginPlay();
	void ThisIsNeverExecuted(class ADefaultPhysicsVolume* P);
	void ServerTravel(const struct FString& URL, bool bAbsolute, bool bShouldSkipGameNotify);
	class UClass* GetGameClass();
	struct FString GetAddressURL();
	void VerifyNavList();
	void ForceGarbageCollection(bool bFullPurge);
	bool STATIC_IsClientOnlyBuild();
	bool STATIC_IsPCConsoleBuild();
	bool STATIC_IsPlayInMobilePreview();
	bool STATIC_IsPlayInPreview();
	bool STATIC_IsPlayInEditor();
	bool STATIC_IsWithGFx();
	bool STATIC_IsConsoleBuild(TEnumAsByte<EConsoleType> ConsoleType);
	bool STATIC_IsDemoBuild();
	struct FString GetLocalURL();
	void SetLevelRBGravity(const struct FVector& NewGrav);
	TArray<class USequence*> GetAllRootSequences();
	class USequence* GetGameSequence();
	float GetGravityZ();
	void UpdateMusicTrack(const struct FMusicTrackStruct& NewMusicTrack);
	void SetMusicVolume(float VolumeMultiplier);
	bool STATIC_IsMenuLevel(const struct FString& MapName);
	void AddOnScreenDebugMessage(int Key, float TimeToDisplay, const struct FColor& DisplayColor, const struct FString& DebugMessage);
	void ReplicatedEvent(const struct FName& VarName);
	class UNavMeshPathGoalEvaluator* GetNavMeshPathGoalEvaluatorFromCache(class UClass* GoalEvalClass, class UNavigationHandle* Requestor);
	class UNavMeshPathConstraint* GetNavMeshPathConstraintFromCache(class UClass* ConstraintClass, class UNavigationHandle* Requestor);
	void ReleaseCachedConstraintsAndEvaluators();
};


// Class Engine.OnlineSubsystem
// 0x00CC (0x0108 - 0x003C)
class UOnlineSubsystem : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x003C(0x0004) (Const, Native, NoExport)
	TScriptInterface<class UOnlineAccountInterface>    AccountInterface;                                         // 0x0040(0x0008)
	TScriptInterface<class UOnlinePlayerInterface>     PlayerInterface;                                          // 0x0048(0x0008)
	TScriptInterface<class UOnlinePlayerInterfaceEx>   PlayerInterfaceEx;                                        // 0x0050(0x0008)
	TScriptInterface<class UOnlineSystemInterface>     SystemInterface;                                          // 0x0058(0x0008)
	TScriptInterface<class UOnlineGameInterface>       GameInterface;                                            // 0x0060(0x0008)
	TScriptInterface<class UOnlineContentInterface>    ContentInterface;                                         // 0x0068(0x0008)
	TScriptInterface<class UOnlineVoiceInterface>      VoiceInterface;                                           // 0x0070(0x0008)
	TScriptInterface<class UOnlineStatsInterface>      StatsInterface;                                           // 0x0078(0x0008)
	TScriptInterface<class UOnlineNewsInterface>       NewsInterface;                                            // 0x0080(0x0008)
	TScriptInterface<class UOnlinePartyChatInterface>  PartyChatInterface;                                       // 0x0088(0x0008)
	TScriptInterface<class UOnlineTitleFileInterface>  TitleFileInterface;                                       // 0x0090(0x0008)
	TScriptInterface<class UOnlineTitleFileCacheInterface> TitleFileCacheInterface;                                  // 0x0098(0x0008)
	TScriptInterface<class UUserCloudFileInterface>    UserCloudInterface;                                       // 0x00A0(0x0008)
	TScriptInterface<class USharedCloudFileInterface>  SharedCloudInterface;                                     // 0x00A8(0x0008)
	TScriptInterface<class UOnlineSocialInterface>     SocialInterface;                                          // 0x00B0(0x0008)
	TScriptInterface<class UOnlineAuthInterface>       AuthInterface;                                            // 0x00B8(0x0008)
	TScriptInterface<class UOnlineClanInterface>       ClanInterface;                                            // 0x00C0(0x0008)
	TArray<struct FNamedInterface>                     NamedInterfaces;                                          // 0x00C8(0x000C) (NeedCtorLink)
	TArray<struct FNamedInterfaceDef>                  NamedInterfaceDefs;                                       // 0x00D4(0x000C) (Config, NeedCtorLink)
	TArray<struct FNamedSession>                       Sessions;                                                 // 0x00E0(0x000C) (Const, NeedCtorLink)
	unsigned long                                      bUseBuildIdOverride : 1;                                  // 0x00EC(0x0004) (Config)
	int                                                BuildIdOverride;                                          // 0x00F0(0x0004) (Config)
	struct FString                                     IniLocPatcherClassName;                                   // 0x00F4(0x000C) (Config, NeedCtorLink)
	class UIniLocPatcher*                              Patcher;                                                  // 0x0100(0x0004) (Transient)
	float                                              AsyncMinCompletionTime;                                   // 0x0104(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineSubsystem");
		return ptr;
	}


	void SetDebugSpewLevel(int DebugSpewLevel);
	void DumpVoiceRegistration();
	void DumpSessionState();
	void STATIC_DumpGameSettings(class UOnlineGameSettings* GameSettings);
	int STATIC_GetNumSupportedLogins();
	int GetBuildUniqueId();
	struct FUniqueNetId GetPlayerUniqueNetIdFromIndex(int UserIndex);
	bool STATIC_StringToUniqueNetId(const struct FString& UniqueNetIdString, struct FUniqueNetId* out_UniqueId);
	struct FString STATIC_UniqueNetIdToString(struct FUniqueNetId* IdToConvert);
	class UObject* GetNamedInterface(const struct FName& InterfaceName);
	void SetNamedInterface(const struct FName& InterfaceName, class UObject* NewInterface);
	bool SetClanInterface(class UObject* InClanInterface);
	bool SetSharedCloudInterface(class UObject* InCloudInterface);
	bool SetUserCloudInterface(class UObject* InCloudInterface);
	bool SetAuthInterface(class UObject* InAuthInterface);
	bool SetSocialInterface(class UObject* InSocialInterface);
	bool SetTitleFileCacheInterface(class UObject* NewInterface);
	bool SetTitleFileInterface(class UObject* NewInterface);
	bool SetPartyChatInterface(class UObject* NewInterface);
	bool SetNewsInterface(class UObject* NewInterface);
	bool SetStatsInterface(class UObject* NewInterface);
	bool SetVoiceInterface(class UObject* NewInterface);
	bool SetContentInterface(class UObject* NewInterface);
	bool SetGameInterface(class UObject* NewInterface);
	bool SetSystemInterface(class UObject* NewInterface);
	bool SetPlayerInterfaceEx(class UObject* NewInterface);
	bool SetPlayerInterface(class UObject* NewInterface);
	bool SetAccountInterface(class UObject* NewInterface);
	void Exit();
	bool PostInit();
	bool Init();
};


// Class Engine.DownloadableContentEnumerator
// 0x0030 (0x006C - 0x003C)
class UDownloadableContentEnumerator : public UObject
{
public:
	TArray<struct FOnlineContent>                      DLCBundles;                                               // 0x003C(0x000C) (NeedCtorLink)
	struct FString                                     DLCRootDir;                                               // 0x0048(0x000C) (NeedCtorLink)
	TArray<struct FScriptDelegate>                     FindDLCDelegates;                                         // 0x0054(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnFindDLCComplete__Delegate;                            // 0x0060(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DownloadableContentEnumerator");
		return ptr;
	}


	void TriggerFindDLCDelegates();
	void InstallDLC(const struct FString& DLCName);
	void InstallAllDLC();
	void DeleteDLC(const struct FString& DLCName);
	void ClearFindDLCDelegate(const struct FScriptDelegate& InDelegate);
	void AddFindDLCDelegate(const struct FScriptDelegate& InDelegate);
	void OnFindDLCComplete();
	void FindDLC();
};


// Class Engine.DownloadableContentManager
// 0x0088 (0x00C4 - 0x003C)
class UDownloadableContentManager : public UObject
{
public:
	TArray<struct FPointer>                            DLCConfigCacheChanges;                                    // 0x003C(0x000C) (Const, Native, Transient)
	TArray<struct FString>                             InstalledDLC;                                             // 0x0048(0x000C) (Const, Transient, NeedCtorLink)
	struct FMap_Mirror                                 NonPackageFilePathMap;                                    // 0x0054(0x003C) (Const, Native, Transient)
	TArray<class UClass*>                              ClassesToReload;                                          // 0x0090(0x000C) (Const, Native, Transient)
	TArray<class UObject*>                             ObjectsToReload;                                          // 0x009C(0x000C) (Const, Native, Transient)
	TArray<struct FString>                             QueuedFullyLoadPackageInis;                               // 0x00A8(0x000C) (Const, Transient, NeedCtorLink)
	class UGameEngine*                                 GameEngine;                                               // 0x00B4(0x0004) (Const, Transient)
	struct FScriptDelegate                             __OnRefreshComplete__Delegate;                            // 0x00B8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DownloadableContentManager");
		return ptr;
	}


	void OnRefreshComplete();
	void AddPackagesToFullyLoad(const struct FString& Filename);
	void RefreshDLCEnumComplete();
	void RefreshDLC();
	void OnContentChange();
	void OnStorageDeviceChange();
	void OnLoginChange(unsigned char LocalUserNum);
	void Init();
	void InstallNonPackageFiles(struct FOnlineContent* DLCBundle);
	void InstallPackages(struct FOnlineContent* DLCBundle);
	void UpdateObjectLists();
	void MarkPerObjectConfigPendingKill(const struct FString& Section);
	void AddSectionToObjectList(const struct FString& Section);
	bool GetDLCNonPackageFilePath(const struct FName& NonPackageFileName, struct FString* Path);
	void ClearDLC();
	void InstallDLCs(TArray<struct FOnlineContent>* DLCBundles);
	bool InstallDLC(struct FOnlineContent* DLCBundle);
};


// Class Engine.Engine
// 0x0634 (0x0674 - 0x0040)
class UEngine : public USubsystem
{
public:
	class UFont*                                       TinyFont;                                                 // 0x0040(0x0004)
	struct FString                                     TinyFontName;                                             // 0x0044(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UFont*                                       SmallFont;                                                // 0x0050(0x0004)
	struct FString                                     SmallFontName;                                            // 0x0054(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UFont*                                       MediumFont;                                               // 0x0060(0x0004)
	struct FString                                     MediumFontName;                                           // 0x0064(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UFont*                                       LargeFont;                                                // 0x0070(0x0004)
	struct FString                                     LargeFontName;                                            // 0x0074(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UFont*                                       SubtitleFont;                                             // 0x0080(0x0004)
	struct FString                                     SubtitleFontName;                                         // 0x0084(0x000C) (Config, GlobalConfig, NeedCtorLink)
	TArray<class UFont*>                               AdditionalFonts;                                          // 0x0090(0x000C) (NeedCtorLink)
	TArray<struct FString>                             AdditionalFontNames;                                      // 0x009C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UClass*                                      ConsoleClass;                                             // 0x00A8(0x0004)
	struct FString                                     ConsoleClassName;                                         // 0x00AC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UClass*                                      GameViewportClientClass;                                  // 0x00B8(0x0004)
	struct FString                                     GameViewportClientClassName;                              // 0x00BC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UClass*                                      DataStoreClientClass;                                     // 0x00C8(0x0004)
	struct FString                                     DataStoreClientClassName;                                 // 0x00CC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UClass*                                      ItemDatabasePropertyClass;                                // 0x00D8(0x0004)
	struct FString                                     ItemDatabasePropertyClassName;                            // 0x00DC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UObject*                                     ItemDatabaseProperties;                                   // 0x00E8(0x0004)
	float                                              LongServerFrameTime;                                      // 0x00EC(0x0004) (Config, GlobalConfig)
	unsigned long                                      bLogServerTickStats : 1;                                  // 0x00F0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bTrailEmitterCalculateOnce : 1;                           // 0x00F0(0x0004)
	unsigned long                                      UseProcBuildingLODTextureCropping : 1;                    // 0x00F0(0x0004) (Config, GlobalConfig)
	unsigned long                                      ForcePowerOfTwoProcBuildingLODTextures : 1;               // 0x00F0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bCombineSimilarMappings : 1;                              // 0x00F0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bRenderLightMapDensityGrayscale : 1;                      // 0x00F0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bScreenshotRequested : 1;                                 // 0x00F0(0x0004)
	unsigned long                                      bUseSound : 1;                                            // 0x00F0(0x0004) (Transient)
	unsigned long                                      bUseBackgroundLevelStreaming : 1;                         // 0x00F0(0x0004) (Edit, Config)
	unsigned long                                      bSubtitlesEnabled : 1;                                    // 0x00F0(0x0004) (Edit, Config)
	unsigned long                                      bSubtitlesForcedOff : 1;                                  // 0x00F0(0x0004) (Edit, Config)
	unsigned long                                      bSmoothFrameRate : 1;                                     // 0x00F0(0x0004) (Config)
	unsigned long                                      bCheckForMultiplePawnsSpawnedInAFrame : 1;                // 0x00F0(0x0004) (Config)
	unsigned long                                      bShouldGenerateSimpleLightmaps : 1;                       // 0x00F0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bForceStaticTerrain : 1;                                  // 0x00F0(0x0004) (Edit, Config)
	unsigned long                                      bForceCPUSkinning : 1;                                    // 0x00F0(0x0004) (Config)
	unsigned long                                      bUsePostProcessEffects : 1;                               // 0x00F0(0x0004) (Config)
	unsigned long                                      bOnScreenKismetWarnings : 1;                              // 0x00F0(0x0004) (Config)
	unsigned long                                      bEnableKismetLogging : 1;                                 // 0x00F0(0x0004) (Config)
	unsigned long                                      bAllowMatureLanguage : 1;                                 // 0x00F0(0x0004) (Config)
	unsigned long                                      bForceDisablePhysXMeshEffects : 1;                        // 0x00F0(0x0004) (Config)
	unsigned long                                      bPauseOnLossOfFocus : 1;                                  // 0x00F0(0x0004) (Config)
	unsigned long                                      bCheckParticleRenderSize : 1;                             // 0x00F0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bEnableColorClear : 1;                                    // 0x00F0(0x0004) (Const, Config, GlobalConfig)
	unsigned long                                      bAreConstraintsDirty : 1;                                 // 0x00F0(0x0004) (Transient)
	unsigned long                                      bHasPendingGlobalReattach : 1;                            // 0x00F0(0x0004) (Transient)
	unsigned long                                      bEnableOnScreenDebugMessages : 1;                         // 0x00F0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bEnableOnScreenDebugMessagesDisplay : 1;                  // 0x00F0(0x0004) (Transient)
	unsigned long                                      bSuppressMapWarnings : 1;                                 // 0x00F0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bCookSeparateSharedMPGameContent : 1;                     // 0x00F0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bUseRecastNavMesh : 1;                                    // 0x00F0(0x0004) (Config, GlobalConfig)
	unsigned long                                      bDisableAILogging : 1;                                    // 0x00F0(0x0004)
	unsigned long                                      bUseNormalMapsForSimpleLightMaps : 1;                     // 0x00F4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bStartWithMatineeCapture : 1;                             // 0x00F4(0x0004) (Transient)
	unsigned long                                      bCompressMatineeCapture : 1;                              // 0x00F4(0x0004) (Transient)
	unsigned long                                      bLockReadOnlyLevels : 1;                                  // 0x00F4(0x0004) (Transient)
	unsigned long                                      bIsFocusLost : 1;                                         // 0x00F4(0x0004) (Transient)
	float                                              TickAvg;                                                  // 0x00F8(0x0004)
	float                                              TickMax;                                                  // 0x00FC(0x0004)
	float                                              TickDeltaAvg;                                             // 0x0100(0x0004)
	float                                              TickDeltaMax;                                             // 0x0104(0x0004)
	class UClass*                                      LocalPlayerClass;                                         // 0x0108(0x0004)
	struct FString                                     LocalPlayerClassName;                                     // 0x010C(0x000C) (Config, NeedCtorLink)
	class UMaterial*                                   DefaultMaterial;                                          // 0x0118(0x0004)
	struct FString                                     DefaultMaterialName;                                      // 0x011C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   DefaultDecalMaterial;                                     // 0x0128(0x0004)
	struct FString                                     DefaultDecalMaterialName;                                 // 0x012C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UTexture*                                    DefaultTexture;                                           // 0x0138(0x0004)
	struct FString                                     DefaultTextureName;                                       // 0x013C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   WireframeMaterial;                                        // 0x0148(0x0004)
	struct FString                                     WireframeMaterialName;                                    // 0x014C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   EmissiveTexturedMaterial;                                 // 0x0158(0x0004)
	struct FString                                     EmissiveTexturedMaterialName;                             // 0x015C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   GeomMaterial;                                             // 0x0168(0x0004)
	struct FString                                     GeomMaterialName;                                         // 0x016C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   DefaultFogVolumeMaterial;                                 // 0x0178(0x0004)
	struct FString                                     DefaultFogVolumeMaterialName;                             // 0x017C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   TickMaterial;                                             // 0x0188(0x0004)
	struct FString                                     TickMaterialName;                                         // 0x018C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   CrossMaterial;                                            // 0x0198(0x0004)
	struct FString                                     CrossMaterialName;                                        // 0x019C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   LevelColorationLitMaterial;                               // 0x01A8(0x0004)
	struct FString                                     LevelColorationLitMaterialName;                           // 0x01AC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   LevelColorationUnlitMaterial;                             // 0x01B8(0x0004)
	struct FString                                     LevelColorationUnlitMaterialName;                         // 0x01BC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   LightingTexelDensityMaterial;                             // 0x01C8(0x0004)
	struct FString                                     LightingTexelDensityName;                                 // 0x01CC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   ShadedLevelColorationLitMaterial;                         // 0x01D8(0x0004)
	struct FString                                     ShadedLevelColorationLitMaterialName;                     // 0x01DC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   ShadedLevelColorationUnlitMaterial;                       // 0x01E8(0x0004)
	struct FString                                     ShadedLevelColorationUnlitMaterialName;                   // 0x01EC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   RemoveSurfaceMaterial;                                    // 0x01F8(0x0004)
	struct FString                                     RemoveSurfaceMaterialName;                                // 0x01FC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   VertexColorMaterial;                                      // 0x0208(0x0004)
	struct FString                                     VertexColorMaterialName;                                  // 0x020C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   VertexColorViewModeMaterial_ColorOnly;                    // 0x0218(0x0004)
	struct FString                                     VertexColorViewModeMaterialName_ColorOnly;                // 0x021C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   VertexColorViewModeMaterial_AlphaAsColor;                 // 0x0228(0x0004)
	struct FString                                     VertexColorViewModeMaterialName_AlphaAsColor;             // 0x022C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   VertexColorViewModeMaterial_RedOnly;                      // 0x0238(0x0004)
	struct FString                                     VertexColorViewModeMaterialName_RedOnly;                  // 0x023C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   VertexColorViewModeMaterial_GreenOnly;                    // 0x0248(0x0004)
	struct FString                                     VertexColorViewModeMaterialName_GreenOnly;                // 0x024C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   VertexColorViewModeMaterial_BlueOnly;                     // 0x0258(0x0004)
	struct FString                                     VertexColorViewModeMaterialName_BlueOnly;                 // 0x025C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   HeatmapMaterial;                                          // 0x0268(0x0004)
	struct FString                                     HeatmapMaterialName;                                      // 0x026C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   BoneWeightMaterial;                                       // 0x0278(0x0004)
	struct FString                                     BoneWeightMaterialName;                                   // 0x027C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   TangentColorMaterial;                                     // 0x0288(0x0004)
	struct FString                                     TangentColorMaterialName;                                 // 0x028C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   MobileEmulationMasterMaterial;                            // 0x0298(0x0004)
	struct FString                                     MobileEmulationMasterMaterialName;                        // 0x029C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   ProcBuildingSimpleMaterial;                               // 0x02A8(0x0004)
	struct FString                                     ProcBuildingSimpleMaterialName;                           // 0x02AC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UStaticMesh*                                 BuildingQuadStaticMesh;                                   // 0x02B8(0x0004)
	struct FString                                     BuildingQuadStaticMeshName;                               // 0x02BC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	float                                              ProcBuildingLODColorTexelsPerWorldUnit;                   // 0x02C8(0x0004) (Config, GlobalConfig)
	float                                              ProcBuildingLODLightingTexelsPerWorldUnit;                // 0x02CC(0x0004) (Config, GlobalConfig)
	int                                                MaxProcBuildingLODColorTextureSize;                       // 0x02D0(0x0004) (Config, GlobalConfig)
	int                                                MaxProcBuildingLODLightingTextureSize;                    // 0x02D4(0x0004) (Config, GlobalConfig)
	float                                              MaxRMSDForCombiningMappings;                              // 0x02D8(0x0004) (Config, GlobalConfig)
	int                                                ImageReflectionTextureSize;                               // 0x02DC(0x0004) (Config, GlobalConfig)
	struct FLinearColor                                LightingOnlyBrightness;                                   // 0x02E0(0x0010) (Config, GlobalConfig)
	TArray<struct FColor>                              LightComplexityColors;                                    // 0x02F0(0x000C) (Config, GlobalConfig, NeedCtorLink)
	TArray<struct FLinearColor>                        ShaderComplexityColors;                                   // 0x02FC(0x000C) (Config, GlobalConfig, NeedCtorLink)
	float                                              MaxPixelShaderAdditiveComplexityCount;                    // 0x0308(0x0004) (Config, GlobalConfig)
	float                                              MinTextureDensity;                                        // 0x030C(0x0004) (Config, GlobalConfig)
	float                                              IdealTextureDensity;                                      // 0x0310(0x0004) (Config, GlobalConfig)
	float                                              MaxTextureDensity;                                        // 0x0314(0x0004) (Config, GlobalConfig)
	float                                              MinLightMapDensity;                                       // 0x0318(0x0004) (Config, GlobalConfig)
	float                                              IdealLightMapDensity;                                     // 0x031C(0x0004) (Config, GlobalConfig)
	float                                              MaxLightMapDensity;                                       // 0x0320(0x0004) (Config, GlobalConfig)
	float                                              RenderLightMapDensityGrayscaleScale;                      // 0x0324(0x0004) (Config, GlobalConfig)
	float                                              RenderLightMapDensityColorScale;                          // 0x0328(0x0004) (Config, GlobalConfig)
	struct FLinearColor                                LightMapDensityVertexMappedColor;                         // 0x032C(0x0010) (Config, GlobalConfig)
	struct FLinearColor                                LightMapDensitySelectedColor;                             // 0x033C(0x0010) (Config, GlobalConfig)
	TArray<struct FStatColorMapping>                   StatColorMappings;                                        // 0x034C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   EditorBrushMaterial;                                      // 0x0358(0x0004)
	struct FString                                     EditorBrushMaterialName;                                  // 0x035C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                      // 0x0368(0x0004)
	struct FString                                     DefaultPhysMaterialName;                                  // 0x036C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UPhysicalMaterial*                           LandscapeHolePhysMaterial;                                // 0x0378(0x0004)
	struct FString                                     LandscapeHolePhysMaterialName;                            // 0x037C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UApexDestructibleDamageParameters*           ApexDamageParams;                                         // 0x0388(0x0004)
	struct FString                                     ApexDamageParamsName;                                     // 0x038C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   TerrainErrorMaterial;                                     // 0x0398(0x0004)
	struct FString                                     TerrainErrorMaterialName;                                 // 0x039C(0x000C) (Config, GlobalConfig, NeedCtorLink)
	int                                                TerrainMaterialMaxTextureCount;                           // 0x03A8(0x0004) (Config, GlobalConfig)
	int                                                TerrainTessellationCheckCount;                            // 0x03AC(0x0004) (Config, GlobalConfig)
	float                                              TerrainTessellationCheckDistance;                         // 0x03B0(0x0004) (Config, GlobalConfig)
	class UClass*                                      OnlineSubsystemClass;                                     // 0x03B4(0x0004)
	struct FString                                     DefaultOnlineSubsystemName;                               // 0x03B8(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UPostProcessChain*                           DefaultPostProcess;                                       // 0x03C4(0x0004)
	struct FString                                     DefaultPostProcessName;                                   // 0x03C8(0x000C) (Config, NeedCtorLink)
	class UPostProcessChain*                           ThumbnailSkeletalMeshPostProcess;                         // 0x03D4(0x0004)
	struct FString                                     ThumbnailSkeletalMeshPostProcessName;                     // 0x03D8(0x000C) (Config, NeedCtorLink)
	class UPostProcessChain*                           ThumbnailParticleSystemPostProcess;                       // 0x03E4(0x0004)
	struct FString                                     ThumbnailParticleSystemPostProcessName;                   // 0x03E8(0x000C) (Config, NeedCtorLink)
	class UPostProcessChain*                           ThumbnailMaterialPostProcess;                             // 0x03F4(0x0004)
	struct FString                                     ThumbnailMaterialPostProcessName;                         // 0x03F8(0x000C) (Config, NeedCtorLink)
	class UPostProcessChain*                           DefaultUIScenePostProcess;                                // 0x0404(0x0004)
	struct FString                                     DefaultUIScenePostProcessName;                            // 0x0408(0x000C) (Config, NeedCtorLink)
	class UMaterial*                                   DefaultUICaretMaterial;                                   // 0x0414(0x0004)
	struct FString                                     DefaultUICaretMaterialName;                               // 0x0418(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   SceneCaptureReflectActorMaterial;                         // 0x0424(0x0004)
	struct FString                                     SceneCaptureReflectActorMaterialName;                     // 0x0428(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UMaterial*                                   SceneCaptureCubeActorMaterial;                            // 0x0434(0x0004)
	struct FString                                     SceneCaptureCubeActorMaterialName;                        // 0x0438(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UTexture2D*                                  ScreenDoorNoiseTexture;                                   // 0x0444(0x0004)
	struct FString                                     ScreenDoorNoiseTextureName;                               // 0x0448(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UTexture2D*                                  ImageGrainNoiseTexture;                                   // 0x0454(0x0004)
	struct FString                                     ImageGrainNoiseTextureName;                               // 0x0458(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UTexture2D*                                  RandomAngleTexture;                                       // 0x0464(0x0004)
	struct FString                                     RandomAngleTextureName;                                   // 0x0468(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UTexture2D*                                  RandomNormalTexture;                                      // 0x0474(0x0004)
	struct FString                                     RandomNormalTextureName;                                  // 0x0478(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UTexture2D*                                  RandomMirrorDiscTexture;                                  // 0x0484(0x0004)
	struct FString                                     RandomMirrorDiscTextureName;                              // 0x0488(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UTexture*                                    WeightMapPlaceholderTexture;                              // 0x0494(0x0004)
	struct FString                                     WeightMapPlaceholderTextureName;                          // 0x0498(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UTexture2D*                                  LightMapDensityTexture;                                   // 0x04A4(0x0004)
	struct FString                                     LightMapDensityTextureName;                               // 0x04A8(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UTexture2D*                                  LightMapDensityNormal;                                    // 0x04B4(0x0004)
	struct FString                                     LightMapDensityNormalName;                                // 0x04B8(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class USoundNodeWave*                              DefaultSound;                                             // 0x04C4(0x0004)
	struct FString                                     DefaultSoundName;                                         // 0x04C8(0x000C) (Config, GlobalConfig, NeedCtorLink)
	float                                              TimeBetweenPurgingPendingKillObjects;                     // 0x04D4(0x0004) (Edit, Config)
	class UClient*                                     Client;                                                   // 0x04D8(0x0004) (Const)
	TArray<class ULocalPlayer*>                        GamePlayers;                                              // 0x04DC(0x000C) (AlwaysInit, NeedCtorLink)
	class UGameViewportClient*                         GameViewport;                                             // 0x04E8(0x0004) (Const)
	TArray<struct FString>                             DeferredCommands;                                         // 0x04EC(0x000C) (AlwaysInit, NeedCtorLink)
	int                                                TickCycles;                                               // 0x04F8(0x0004)
	int                                                GameCycles;                                               // 0x04FC(0x0004)
	int                                                ClientCycles;                                             // 0x0500(0x0004)
	float                                              MaxSmoothedFrameRate;                                     // 0x0504(0x0004) (Config)
	float                                              MinSmoothedFrameRate;                                     // 0x0508(0x0004) (Config)
	int                                                NumPawnsAllowedToBeSpawnedInAFrame;                       // 0x050C(0x0004) (Config)
	struct FPointer                                    RemoteControlExec;                                        // 0x0510(0x0004) (Native)
	struct FPointer                                    MobileMaterialEmulator;                                   // 0x0514(0x0004) (Native)
	struct FColor                                      C_WorldBox;                                               // 0x0518(0x0004) (Edit)
	struct FColor                                      C_BrushWire;                                              // 0x051C(0x0004) (Edit)
	struct FColor                                      C_AddWire;                                                // 0x0520(0x0004) (Edit)
	struct FColor                                      C_SubtractWire;                                           // 0x0524(0x0004) (Edit)
	struct FColor                                      C_SemiSolidWire;                                          // 0x0528(0x0004) (Edit)
	struct FColor                                      C_NonSolidWire;                                           // 0x052C(0x0004) (Edit)
	struct FColor                                      C_WireBackground;                                         // 0x0530(0x0004) (Edit)
	struct FColor                                      C_ScaleBoxHi;                                             // 0x0534(0x0004) (Edit)
	struct FColor                                      C_VolumeCollision;                                        // 0x0538(0x0004) (Edit)
	struct FColor                                      C_BSPCollision;                                           // 0x053C(0x0004) (Edit)
	struct FColor                                      C_OrthoBackground;                                        // 0x0540(0x0004) (Edit)
	struct FColor                                      C_Volume;                                                 // 0x0544(0x0004) (Edit)
	struct FColor                                      C_BrushShape;                                             // 0x0548(0x0004) (Edit)
	float                                              StreamingDistanceFactor;                                  // 0x054C(0x0004) (Edit)
	struct FString                                     ScoutClassName;                                           // 0x0550(0x000C) (Const, Config, NeedCtorLink)
	TEnumAsByte<ETransitionType>                       TransitionType;                                           // 0x055C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x055D(0x0003) MISSED OFFSET
	struct FString                                     TransitionDescription;                                    // 0x0560(0x000C) (NeedCtorLink)
	struct FString                                     TransitionGameType;                                       // 0x056C(0x000C) (NeedCtorLink)
	float                                              MeshLODRange;                                             // 0x0578(0x0004) (Config)
	float                                              CameraRotationThreshold;                                  // 0x057C(0x0004) (Config)
	float                                              CameraTranslationThreshold;                               // 0x0580(0x0004) (Config)
	float                                              PrimitiveProbablyVisibleTime;                             // 0x0584(0x0004) (Config)
	float                                              PercentUnoccludedRequeries;                               // 0x0588(0x0004) (Config)
	float                                              MaxOcclusionPixelsFraction;                               // 0x058C(0x0004) (Config)
	int                                                PhysXLevel;                                               // 0x0590(0x0004) (Config, GlobalConfig)
	int                                                MaxFluidNumVerts;                                         // 0x0594(0x0004) (Config)
	float                                              FluidSimulationTimeLimit;                                 // 0x0598(0x0004) (Config)
	int                                                MaxParticleResize;                                        // 0x059C(0x0004) (Config)
	int                                                MaxParticleResizeWarn;                                    // 0x05A0(0x0004) (Config)
	int                                                MaxParticleVertexMemory;                                  // 0x05A4(0x0004) (Config)
	int                                                MaxParticleSpriteCount;                                   // 0x05A8(0x0004) (Transient)
	int                                                MaxParticleSubUVCount;                                    // 0x05AC(0x0004) (Transient)
	int                                                BeginUPTryCount;                                          // 0x05B0(0x0004) (Config)
	TArray<struct FDropNoteInfo>                       PendingDroppedNotes;                                      // 0x05B4(0x000C) (Transient, NeedCtorLink)
	struct FString                                     DynamicCoverMeshComponentName;                            // 0x05C0(0x000C) (Config, GlobalConfig, NeedCtorLink)
	float                                              NetClientTicksPerSecond;                                  // 0x05CC(0x0004) (Config, GlobalConfig)
	float                                              MaxTrackedOcclusionIncrement;                             // 0x05D0(0x0004) (Config, GlobalConfig)
	float                                              TrackedOcclusionStepSize;                                 // 0x05D4(0x0004) (Config, GlobalConfig)
	struct FLinearColor                                DefaultSelectedMaterialColor;                             // 0x05D8(0x0010) (Config, GlobalConfig)
	struct FLinearColor                                DefaultHoveredMaterialColor;                              // 0x05E8(0x0010) (Config, GlobalConfig)
	struct FLinearColor                                SelectedMaterialColor;                                    // 0x05F8(0x0010) (Transient)
	struct FLinearColor                                UnselectedMaterialColor;                                  // 0x0608(0x0010) (Transient)
	TArray<struct FName>                               IgnoreSimulatedFuncWarnings;                              // 0x0618(0x000C) (Config, GlobalConfig, NeedCtorLink)
	struct FString                                     DefaultAISubsystemName;                                   // 0x0624(0x000C) (Config, GlobalConfig, NeedCtorLink)
	class UAISubsystem*                                AISys;                                                    // 0x0630(0x0004)
	int                                                ScreenSaverInhibitorSemaphore;                            // 0x0634(0x0004) (Transient)
	struct FPointer                                    ScreenSaverInhibitor;                                     // 0x0638(0x0004) (Transient)
	class UTranslationContext*                         GlobalTranslationContext;                                 // 0x063C(0x0004)
	struct FDouble                                     LoadingMovieStartTime;                                    // 0x0640(0x0008) (Const, Transient)
	struct FString                                     MatineeCaptureName;                                       // 0x0648(0x000C) (Transient, NeedCtorLink)
	struct FString                                     MatineePackageCaptureName;                                // 0x0654(0x000C) (Transient, NeedCtorLink)
	struct FString                                     VisibleLevelsForMatineeCapture;                           // 0x0660(0x000C) (Transient, NeedCtorLink)
	int                                                MatineeCaptureFPS;                                        // 0x066C(0x0004) (Transient)
	int                                                MatineeCaptureType;                                       // 0x0670(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Engine");
		return ptr;
	}


	bool STATIC_IsFocusLost();
	int STATIC_GetPhysXLevel();
	float GetSystemSettingFloat(const struct FString& SettingName);
	int GetSystemSettingInt(const struct FString& SettingName);
	bool GetSystemSettingBool(const struct FString& SettingName);
	void STATIC_LaunchURL(const struct FString& URL);
	bool STATIC_BasicLoadObject(class UObject* Obj, const struct FString& PathName, bool bIsSaveGame, int Version);
	bool STATIC_BasicSaveObject(class UObject* Obj, const struct FString& PathName, bool bIsSaveGame, int Version, bool bEncrypt);
	void AddTextureStreamingSlaveLoc(const struct FVector& InLoc, float BoostFactor, bool bOverrideLocation, float OverrideDuration);
	class UPostProcessChain* STATIC_GetWorldPostProcessChain();
	class UPostProcessChain* STATIC_GetDefaultPostProcessChain();
	class UEngine* STATIC_GetEngine();
	bool STATIC_VisibilityTestBothViews();
	bool STATIC_IsStereoBuffer();
	bool STATIC_IsAnyStereo3DEnabled();
	bool STATIC_IsRealDStereoEnabled();
	void STATIC_AddOverlayWrapped(class UFont* Font, const struct FString& Text, float X, float Y, float ScaleX, float ScaleY, float WrapWidth);
	void STATIC_AddOverlay(class UFont* Font, const struct FString& Text, float X, float Y, float ScaleX, float ScaleY, bool bIsCentered);
	void STATIC_RemoveAllOverlays();
	struct FString FindLoadingMovieByMapName(const struct FString& MapName);
	bool STATIC_IsPlayingMapLoadingMovie(const struct FString& MapName);
	void STATIC_StopMovie(bool bDelayStopUntilGameHasRendered);
	bool STATIC_PlayLoadMapMovie(const struct FString& PendingURL);
	class UAISubsystem* STATIC_GetAISubsystem();
	struct FString STATIC_GetLastMovieName();
	class UAudioDevice* STATIC_GetAudioDevice();
	bool STATIC_IsUsingES2Renderer();
	bool STATIC_IsStereoscopic3D();
	bool STATIC_IsSplitScreen();
	class UFont* STATIC_GetAdditionalFont(int AdditionalFontIndex);
	class UFont* STATIC_GetSubtitleFont();
	class UFont* STATIC_GetLargeFont();
	class UFont* STATIC_GetMediumFont();
	class UFont* STATIC_GetSmallFont();
	class UFont* STATIC_GetTinyFont();
	bool STATIC_HasNetworkConnection();
	struct FString STATIC_BuildBugSubmissionString(const struct FString& BugField, const struct FString& BugFieldData);
	struct FString STATIC_GetDevicePushNotificationToken();
	float STATIC_GetOSVersion();
	struct FString STATIC_GetDeviceUUID();
	struct FString STATIC_GetBuildDate();
	class AWorldInfo* STATIC_GetCurrentWorldInfo();
	bool STATIC_IsGame();
	bool STATIC_IsEditor();
};


// Class Engine.GameEngine
// 0x0164 (0x07D8 - 0x0674)
class UGameEngine : public UEngine
{
public:
	class UPendingLevel*                               GPendingLevel;                                            // 0x0674(0x0004)
	struct FString                                     PendingLevelPlayerControllerClassName;                    // 0x0678(0x000C) (Config, NeedCtorLink)
	struct FURL                                        LastURL;                                                  // 0x0684(0x0044) (NeedCtorLink)
	struct FURL                                        LastRemoteURL;                                            // 0x06C8(0x0044) (NeedCtorLink)
	TArray<struct FString>                             ServerActors;                                             // 0x070C(0x000C) (Config, NeedCtorLink)
	struct FString                                     TravelURL;                                                // 0x0718(0x000C) (NeedCtorLink)
	unsigned char                                      TravelType;                                               // 0x0724(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0725(0x0003) MISSED OFFSET
	unsigned long                                      bWorldWasLoadedThisTick : 1;                              // 0x0728(0x0004) (Const, Transient)
	unsigned long                                      bCheckForMovieCapture : 1;                                // 0x0728(0x0004) (Const, Transient)
	unsigned long                                      bTriggerPostLoadMap : 1;                                  // 0x0728(0x0004) (Const, Transient)
	unsigned long                                      bStartedLoadMapMovie : 1;                                 // 0x0728(0x0004) (Const, Transient)
	unsigned long                                      bShouldCommitPendingMapChange : 1;                        // 0x0728(0x0004) (Const)
	unsigned long                                      bClearAnimSetLinkupCachesOnLoadMap : 1;                   // 0x0728(0x0004) (Config)
	unsigned long                                      bEnableSecondaryDisplay : 1;                              // 0x0728(0x0004) (Config)
	unsigned long                                      bEnableSecondaryViewport : 1;                             // 0x0728(0x0004) (Config)
	class UOnlineSubsystem*                            OnlineSubsystem;                                          // 0x072C(0x0004) (Const, Transient)
	class UDownloadableContentEnumerator*              DLCEnumerator;                                            // 0x0730(0x0004) (Const, Transient)
	struct FString                                     DownloadableContentEnumeratorClassName;                   // 0x0734(0x000C) (Config, NeedCtorLink)
	class UDownloadableContentManager*                 DLCManager;                                               // 0x0740(0x0004) (Const, Transient)
	struct FString                                     DownloadableContentManagerClassName;                      // 0x0744(0x000C) (Config, NeedCtorLink)
	TArray<struct FName>                               LevelsToLoadForPendingMapChange;                          // 0x0750(0x000C) (Const, NeedCtorLink)
	TArray<class ULevel*>                              LoadedLevelsForPendingMapChange;                          // 0x075C(0x000C) (Const, NeedCtorLink)
	struct FString                                     PendingMapChangeFailureDescription;                       // 0x0768(0x000C) (Const, NeedCtorLink)
	float                                              MaxDeltaTime;                                             // 0x0774(0x0004) (Config)
	struct FString                                     SecondaryViewportClientClassName;                         // 0x0778(0x000C) (Config, NeedCtorLink)
	TArray<class UScriptViewportClient*>               SecondaryViewportClients;                                 // 0x0784(0x000C) (AlwaysInit, NeedCtorLink)
	TArray<struct FPointer>                            SecondaryViewportFrames;                                  // 0x0790(0x000C) (AlwaysInit, NeedCtorLink)
	TArray<struct FLevelStreamingStatus>               PendingLevelStreamingStatusUpdates;                       // 0x079C(0x000C) (Const, NeedCtorLink)
	TArray<class UObjectReferencer*>                   ObjectReferencers;                                        // 0x07A8(0x000C) (Const, NeedCtorLink)
	TArray<struct FFullyLoadedPackagesInfo>            PackagesToFullyLoad;                                      // 0x07B4(0x000C) (NeedCtorLink)
	TArray<struct FNamedNetDriver>                     NamedNetDrivers;                                          // 0x07C0(0x000C) (Const, Transient, NeedCtorLink)
	TArray<struct FAnimTag>                            AnimTags;                                                 // 0x07CC(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameEngine");
		return ptr;
	}


	void STATIC_SetServerMaxTickRate(float NewMaxTickRate);
	struct FString STATIC_GetGameVersionString();
	bool STATIC_HasSecondaryScreenActive();
	class UDownloadableContentManager* STATIC_GetDLCManager();
	class UDownloadableContentEnumerator* STATIC_GetDLCEnumerator();
	class UOnlineSubsystem* STATIC_GetOnlineSubsystem();
	void DestroyNamedNetDriver(const struct FName& NetDriverName);
	bool CreateNamedNetDriver(const struct FName& NetDriverName);
};


// Class Engine.EngineBaseTypes
// 0x0000 (0x003C - 0x003C)
class UEngineBaseTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EngineBaseTypes");
		return ptr;
	}

};


// Class Engine.BrushShape
// 0x0000 (0x01F8 - 0x01F8)
class ABrushShape : public ABrush
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BrushShape");
		return ptr;
	}

};


// Class Engine.BlockingVolume
// 0x0004 (0x0204 - 0x0200)
class ABlockingVolume : public AVolume
{
public:
	unsigned long                                      bBlockCamera : 1;                                         // 0x0200(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlockingVolume");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class Engine.DynamicBlockingVolume
// 0x0004 (0x0208 - 0x0204)
class ADynamicBlockingVolume : public ABlockingVolume
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0204(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicBlockingVolume");
		return ptr;
	}


	void ApplyCheckpointRecord(struct ADynamicBlockingVolume_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct ADynamicBlockingVolume_FCheckpointRecord* Record);
	void PostBeginPlay();
};


// Class Engine.CullDistanceVolume
// 0x0010 (0x0210 - 0x0200)
class ACullDistanceVolume : public AVolume
{
public:
	TArray<struct FCullDistanceSizePair>               CullDistances;                                            // 0x0200(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bEnabled : 1;                                             // 0x020C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CullDistanceVolume");
		return ptr;
	}

};


// Class Engine.KMeshProps
// 0x0044 (0x0080 - 0x003C)
class UKMeshProps : public UObject
{
public:
	struct FVector                                     COMNudge;                                                 // 0x003C(0x000C) (Edit)
	struct FKAggregateGeom                             AggGeom;                                                  // 0x0048(0x0038) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KMeshProps");
		return ptr;
	}

};


// Class Engine.LevelGridVolume
// 0x0088 (0x0288 - 0x0200)
class ALevelGridVolume : public AVolume
{
public:
	struct FString                                     LevelGridVolumeName;                                      // 0x0200(0x000C) (Edit, Const, NeedCtorLink)
	TEnumAsByte<ELevelGridCellShape>                   CellShape;                                                // 0x020C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x020D(0x0003) MISSED OFFSET
	int                                                Subdivisions[0x3];                                        // 0x0210(0x0004) (Edit, Const)
	float                                              LoadingDistance;                                          // 0x021C(0x0004) (Edit, Const)
	float                                              KeepLoadedRange;                                          // 0x0220(0x0004) (Edit, Const)
	struct FKConvexElem                                CellConvexElem;                                           // 0x0224(0x0064) (Const, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelGridVolume");
		return ptr;
	}

};


// Class Engine.LevelStreamingVolume
// 0x0018 (0x0218 - 0x0200)
class ALevelStreamingVolume : public AVolume
{
public:
	TArray<class ULevelStreaming*>                     StreamingLevels;                                          // 0x0200(0x000C) (Edit, Const, EditConst, NeedCtorLink, NoImport)
	unsigned long                                      bEditorPreVisOnly : 1;                                    // 0x020C(0x0004) (Edit)
	unsigned long                                      bDisabled : 1;                                            // 0x020C(0x0004) (Edit)
	unsigned long                                      bTestDistanceToVolume : 1;                                // 0x020C(0x0004) (Edit)
	TEnumAsByte<EStreamingVolumeUsage>                 StreamingUsage;                                           // 0x0210(0x0001) (Edit)
	TEnumAsByte<EStreamingVolumeUsage>                 Usage;                                                    // 0x0211(0x0001) (Deprecated)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0212(0x0002) MISSED OFFSET
	float                                              TestVolumeDistance;                                       // 0x0214(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingVolume");
		return ptr;
	}


	void ApplyCheckpointRecord(struct ALevelStreamingVolume_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct ALevelStreamingVolume_FCheckpointRecord* Record);
	void OnToggle(class USeqAct_Toggle* Action);
};


// Class Engine.LightmassCharacterIndirectDetailVolume
// 0x0000 (0x0200 - 0x0200)
class ALightmassCharacterIndirectDetailVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassCharacterIndirectDetailVolume");
		return ptr;
	}

};


// Class Engine.LightmassImportanceVolume
// 0x0000 (0x0200 - 0x0200)
class ALightmassImportanceVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassImportanceVolume");
		return ptr;
	}

};


// Class Engine.MassiveLODOverrideVolume
// 0x0000 (0x0200 - 0x0200)
class AMassiveLODOverrideVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MassiveLODOverrideVolume");
		return ptr;
	}

};


// Class Engine.PathBlockingVolume
// 0x0000 (0x0200 - 0x0200)
class APathBlockingVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathBlockingVolume");
		return ptr;
	}

};


// Class Engine.PhysicsVolume
// 0x0040 (0x0240 - 0x0200)
class APhysicsVolume : public AVolume
{
public:
	struct FVector                                     ZoneVelocity;                                             // 0x0200(0x000C) (Edit)
	unsigned long                                      bVelocityAffectsWalking : 1;                              // 0x020C(0x0004) (Edit)
	unsigned long                                      bPainCausing : 1;                                         // 0x020C(0x0004) (Edit)
	unsigned long                                      bAIShouldIgnorePain : 1;                                  // 0x020C(0x0004) (Edit)
	unsigned long                                      bEntryPain : 1;                                           // 0x020C(0x0004) (Edit)
	unsigned long                                      BACKUP_bPainCausing : 1;                                  // 0x020C(0x0004)
	unsigned long                                      bDestructive : 1;                                         // 0x020C(0x0004) (Edit)
	unsigned long                                      bNoInventory : 1;                                         // 0x020C(0x0004) (Edit)
	unsigned long                                      bMoveProjectiles : 1;                                     // 0x020C(0x0004) (Edit)
	unsigned long                                      bBounceVelocity : 1;                                      // 0x020C(0x0004) (Edit)
	unsigned long                                      bNeutralZone : 1;                                         // 0x020C(0x0004) (Edit)
	unsigned long                                      bCrowdAgentsPlayDeathAnim : 1;                            // 0x020C(0x0004) (Edit)
	unsigned long                                      bPhysicsOnContact : 1;                                    // 0x020C(0x0004) (Edit)
	unsigned long                                      bWaterVolume : 1;                                         // 0x020C(0x0004)
	float                                              GroundFriction;                                           // 0x0210(0x0004) (Edit)
	float                                              TerminalVelocity;                                         // 0x0214(0x0004) (Edit)
	float                                              DamagePerSec;                                             // 0x0218(0x0004) (Edit)
	class UClass*                                      DamageType;                                               // 0x021C(0x0004) (Edit)
	int                                                Priority;                                                 // 0x0220(0x0004) (Edit)
	float                                              FluidFriction;                                            // 0x0224(0x0004) (Edit)
	float                                              PainInterval;                                             // 0x0228(0x0004) (Edit)
	float                                              RigidBodyDamping;                                         // 0x022C(0x0004) (Edit)
	float                                              MaxDampingForce;                                          // 0x0230(0x0004) (Edit)
	class AInfo*                                       PainTimer;                                                // 0x0234(0x0004)
	class AController*                                 DamageInstigator;                                         // 0x0238(0x0004)
	class APhysicsVolume*                              NextPhysicsVolume;                                        // 0x023C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsVolume");
		return ptr;
	}


	void ApplyCheckpointRecord(struct APhysicsVolume_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct APhysicsVolume_FCheckpointRecord* Record);
	bool ShouldSaveForCheckpoint();
	void OnSetDamageInstigator(class USeqAct_SetDamageInstigator* Action);
	void NotifyPawnBecameViewTarget(class APawn* P, class APlayerController* PC);
	void ModifyPlayer(class APawn* PlayerPawn);
	void CausePainTo(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void TimerPop(class AVolumeTimer* T);
	void CollisionChanged();
	void OnToggle(class USeqAct_Toggle* inAction);
	void PawnLeavingVolume(class APawn* Other);
	void PawnEnteredVolume(class APawn* Other);
	void ActorLeavingVolume(class AActor* Other);
	void ActorEnteredVolume(class AActor* Other);
	void PhysicsChangedFor(class AActor* Other);
	void Reset();
	void PostBeginPlay();
	struct FVector GetZoneVelocityForActor(class AActor* TheActor);
	float GetGravityZ();
};


// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x0240 - 0x0240)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DefaultPhysicsVolume");
		return ptr;
	}


	void Destroyed();
};


// Class Engine.GravityVolume
// 0x0004 (0x0244 - 0x0240)
class AGravityVolume : public APhysicsVolume
{
public:
	float                                              GravityZ;                                                 // 0x0240(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GravityVolume");
		return ptr;
	}

};


// Class Engine.LadderVolume
// 0x0034 (0x0274 - 0x0240)
class ALadderVolume : public APhysicsVolume
{
public:
	struct FRotator                                    WallDir;                                                  // 0x0240(0x000C) (Edit)
	struct FVector                                     LookDir;                                                  // 0x024C(0x000C)
	struct FVector                                     ClimbDir;                                                 // 0x0258(0x000C)
	class ALadder*                                     LadderList;                                               // 0x0264(0x0004) (Const)
	unsigned long                                      bNoPhysicalLadder : 1;                                    // 0x0268(0x0004) (Edit)
	unsigned long                                      bAutoPath : 1;                                            // 0x0268(0x0004) (Edit)
	unsigned long                                      bAllowLadderStrafing : 1;                                 // 0x0268(0x0004) (Edit)
	class APawn*                                       PendingClimber;                                           // 0x026C(0x0004)
	class UArrowComponent*                             WallDirArrow;                                             // 0x0270(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LadderVolume");
		return ptr;
	}


	void PhysicsChangedFor(class AActor* Other);
	void PawnLeavingVolume(class APawn* P);
	void PawnEnteredVolume(class APawn* P);
	bool InUse(class APawn* Ignored);
	void PostBeginPlay();
};


// Class Engine.PortalVolume
// 0x000C (0x020C - 0x0200)
class APortalVolume : public AVolume
{
public:
	TArray<class APortalTeleporter*>                   Portals;                                                  // 0x0200(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PortalVolume");
		return ptr;
	}

};


// Class Engine.PrecomputedVisibilityOverrideVolume
// 0x0018 (0x0218 - 0x0200)
class APrecomputedVisibilityOverrideVolume : public AVolume
{
public:
	TArray<class AActor*>                              OverrideVisibleActors;                                    // 0x0200(0x000C) (Edit, NeedCtorLink)
	TArray<class AActor*>                              OverrideInvisibleActors;                                  // 0x020C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrecomputedVisibilityOverrideVolume");
		return ptr;
	}

};


// Class Engine.PrecomputedVisibilityVolume
// 0x0000 (0x0200 - 0x0200)
class APrecomputedVisibilityVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrecomputedVisibilityVolume");
		return ptr;
	}

};


// Class Engine.TriggerVolume
// 0x0000 (0x0200 - 0x0200)
class ATriggerVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerVolume");
		return ptr;
	}


	bool StopsProjectile(class AProjectile* P);
	void PostBeginPlay();
};


// Class Engine.DroppedPickup
// 0x0010 (0x01E4 - 0x01D4)
class ADroppedPickup : public AActor
{
public:
	class AInventory*                                  Inventory;                                                // 0x01D4(0x0004)
	class UClass*                                      InventoryClass;                                           // 0x01D8(0x0004) (Net)
	class ANavigationPoint*                            PickupCache;                                              // 0x01DC(0x0004)
	unsigned long                                      bFadeOut : 1;                                             // 0x01E0(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DroppedPickup");
		return ptr;
	}


	void RecheckValidTouch();
	void PickedUpBy(class APawn* P);
	void GiveTo(class APawn* P);
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	float DetourWeight(class APawn* Other, float PathWeight);
	void EncroachedBy(class AActor* Other);
	void SetPickupParticles(class UParticleSystemComponent* PickupParticles);
	void SetPickupMesh(class UPrimitiveComponent* PickupMesh);
	void Reset();
	void ReplicatedEvent(const struct FName& VarName);
	void Destroyed();
	void RemoveFromNavigation();
	void AddToNavigation();
};


// Class Engine.DynamicSMActor
// 0x003C (0x0210 - 0x01D4)
class ADynamicSMActor : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x01D8(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UStaticMesh*                                 ReplicatedMesh;                                           // 0x01DC(0x0004) (Net, Transient)
	class UMaterialInterface*                          ReplicatedMaterial0;                                      // 0x01E0(0x0004) (Net)
	class UMaterialInterface*                          ReplicatedMaterial1;                                      // 0x01E4(0x0004) (Net)
	unsigned long                                      bForceStaticDecals : 1;                                   // 0x01E8(0x0004) (Net)
	unsigned long                                      bPawnCanBaseOn : 1;                                       // 0x01E8(0x0004) (Edit)
	unsigned long                                      bSafeBaseIfAsleep : 1;                                    // 0x01E8(0x0004) (Edit)
	struct FVector                                     ReplicatedMeshTranslation;                                // 0x01EC(0x000C) (Net)
	struct FRotator                                    ReplicatedMeshRotation;                                   // 0x01F8(0x000C) (Net)
	struct FVector                                     ReplicatedMeshScale3D;                                    // 0x0204(0x000C) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicSMActor");
		return ptr;
	}


	void SetLightEnvironmentToNotBeDynamic();
	void Detach(class AActor* Other);
	void Attach(class AActor* Other);
	bool CanBasePawn(class APawn* P);
	void SetStaticMesh(class UStaticMesh* NewMesh, const struct FVector& NewTranslation, const struct FRotator& NewRotation, const struct FVector& NewScale3D);
	void OnSetMaterial(class USeqAct_SetMaterial* Action);
	void OnSetMesh(class USeqAct_SetMesh* Action);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class Engine.InterpActor
// 0x002C (0x023C - 0x0210)
class AInterpActor : public ADynamicSMActor
{
public:
	unsigned long                                      bShouldSaveForCheckpoint : 1;                             // 0x0210(0x0004)
	unsigned long                                      bMonitorMover : 1;                                        // 0x0210(0x0004)
	unsigned long                                      bMonitorZVelocity : 1;                                    // 0x0210(0x0004)
	unsigned long                                      bDestroyProjectilesOnEncroach : 1;                        // 0x0210(0x0004) (Edit)
	unsigned long                                      bContinueOnEncroachPhysicsObject : 1;                     // 0x0210(0x0004) (Edit)
	unsigned long                                      bStopOnEncroach : 1;                                      // 0x0210(0x0004) (Edit)
	unsigned long                                      bShouldShadowParentAllAttachedActors : 1;                 // 0x0210(0x0004) (Edit)
	unsigned long                                      bIsLift : 1;                                              // 0x0210(0x0004)
	class ANavigationPoint*                            MyMarker;                                                 // 0x0214(0x0004)
	float                                              MaxZVelocity;                                             // 0x0218(0x0004)
	float                                              StayOpenTime;                                             // 0x021C(0x0004)
	class USoundCue*                                   OpenSound;                                                // 0x0220(0x0004) (Edit)
	class USoundCue*                                   OpeningAmbientSound;                                      // 0x0224(0x0004) (Edit)
	class USoundCue*                                   OpenedSound;                                              // 0x0228(0x0004) (Edit)
	class USoundCue*                                   CloseSound;                                               // 0x022C(0x0004) (Edit)
	class USoundCue*                                   ClosingAmbientSound;                                      // 0x0230(0x0004) (Edit)
	class USoundCue*                                   ClosedSound;                                              // 0x0234(0x0004) (Edit)
	class UAudioComponent*                             AmbientSoundComponent;                                    // 0x0238(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpActor");
		return ptr;
	}


	void ApplyCheckpointRecord(struct AInterpActor_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct AInterpActor_FCheckpointRecord* Record);
	bool ShouldSaveForCheckpoint();
	void ShutDown();
	void InterpolationChanged(class USeqAct_Interp* InterpAction);
	void InterpolationFinished(class USeqAct_Interp* InterpAction);
	void InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst);
	void PlayMovingSound(bool bClosing);
	void FinishedOpen();
	void Restart();
	void Detach(class AActor* Other);
	void Attach(class AActor* Other);
	void RanInto(class AActor* Other);
	bool EncroachingOn(class AActor* Other);
	void PostBeginPlay();
};


// Class Engine.Emitter
// 0x000C (0x01E0 - 0x01D4)
class AEmitter : public AActor
{
public:
	class UParticleSystemComponent*                    ParticleSystemComponent;                                  // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x01D8(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bDestroyOnSystemFinish : 1;                               // 0x01DC(0x0004)
	unsigned long                                      bPostUpdateTickGroup : 1;                                 // 0x01DC(0x0004) (Edit)
	unsigned long                                      bCurrentlyActive : 1;                                     // 0x01DC(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Emitter");
		return ptr;
	}


	void HideSelf();
	void ApplyCheckpointRecord(struct AEmitter_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct AEmitter_FCheckpointRecord* Record);
	bool ShouldSaveForCheckpoint();
	void OnSetParticleSysParam(class USeqAct_SetParticleSysParam* Action);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void SetExtColorParameter(const struct FName& ParameterName, unsigned char Red, unsigned char Green, unsigned char Blue, unsigned char Alpha);
	void SetColorParameter(const struct FName& ParameterName, const struct FColor& Param);
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void ShutDown();
	void OnParticleEventGenerator(class USeqAct_ParticleEventGenerator* Action);
	void OnToggle(class USeqAct_Toggle* Action);
	void OnParticleSystemFinished(class UParticleSystemComponent* FinishedComponent);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
	void SetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish);
};


// Class Engine.ActorComponent
// 0x000D (0x0055 - 0x0048)
class UActorComponent : public UComponent
{
public:
	struct FPointer                                    Scene;                                                    // 0x0048(0x0004) (Const, Native, Transient)
	class AActor*                                      Owner;                                                    // 0x004C(0x0004) (Const, Transient)
	unsigned long                                      bAttached : 1;                                            // 0x0050(0x0004) (Const, Native, Transient)
	unsigned long                                      bTickInEditor : 1;                                        // 0x0050(0x0004) (Const)
	unsigned long                                      bNeedsReattach : 1;                                       // 0x0050(0x0004) (Const, Transient)
	unsigned long                                      bNeedsUpdateTransform : 1;                                // 0x0050(0x0004) (Const, Transient)
	TEnumAsByte<ETickingGroup>                         TickGroup;                                                // 0x0054(0x0001) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorComponent");
		return ptr;
	}


	void DetachFromAny();
	void ForceUpdate(bool bTransformOnly);
	void SetComponentRBFixed(bool bFixed);
	void SetTickGroup(TEnumAsByte<ETickingGroup> NewTickGroup);
};


// Class Engine.LightComponent
// 0x0113 (0x0168 - 0x0055)
class ULightComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	struct FPointer                                    SceneInfo;                                                // 0x0058(0x0004) (Const, Native, Transient, NoImport)
	unsigned char                                      UnknownData01[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FMatrix                                     WorldToLight;                                             // 0x0060(0x0040) (Const, Native, Transient)
	struct FMatrix                                     LightToWorld;                                             // 0x00A0(0x0040) (Const, Native, Transient)
	struct FGuid                                       LightGuid;                                                // 0x00E0(0x0010) (Const, DuplicateTransient)
	struct FGuid                                       LightmapGuid;                                             // 0x00F0(0x0010) (Const, DuplicateTransient)
	float                                              Brightness;                                               // 0x0100(0x0004) (Edit, Const)
	struct FColor                                      LightColor;                                               // 0x0104(0x0004) (Edit, Const)
	class ULightFunction*                              Function;                                                 // 0x0108(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      bEnabled : 1;                                             // 0x010C(0x0004) (Edit, Const)
	unsigned long                                      CastShadows : 1;                                          // 0x010C(0x0004) (Edit, Const)
	unsigned long                                      CastStaticShadows : 1;                                    // 0x010C(0x0004) (Edit, Const)
	unsigned long                                      CastDynamicShadows : 1;                                   // 0x010C(0x0004) (Edit)
	unsigned long                                      bCastCompositeShadow : 1;                                 // 0x010C(0x0004) (Edit)
	unsigned long                                      bAffectCompositeShadowDirection : 1;                      // 0x010C(0x0004) (Edit)
	unsigned long                                      bNonModulatedSelfShadowing : 1;                           // 0x010C(0x0004) (Edit)
	unsigned long                                      bSelfShadowOnly : 1;                                      // 0x010C(0x0004) (Edit)
	unsigned long                                      bAllowPreShadow : 1;                                      // 0x010C(0x0004)
	unsigned long                                      bForceDynamicLight : 1;                                   // 0x010C(0x0004) (Const)
	unsigned long                                      UseDirectLightMap : 1;                                    // 0x010C(0x0004) (Const)
	unsigned long                                      bHasLightEverBeenBuiltIntoLightMap : 1;                   // 0x010C(0x0004) (Const)
	unsigned long                                      bCanAffectDynamicPrimitivesOutsideDynamicChannel : 1;     // 0x010C(0x0004) (Const)
	unsigned long                                      bRenderLightShafts : 1;                                   // 0x010C(0x0004) (Edit)
	unsigned long                                      bUseImageReflectionSpecular : 1;                          // 0x010C(0x0004) (Edit)
	unsigned long                                      bPrecomputedLightingIsValid : 1;                          // 0x010C(0x0004) (Const)
	unsigned long                                      bExplicitlyAssignedLight : 1;                             // 0x010C(0x0004) (Const)
	unsigned long                                      bAllowCompositingIntoDLE : 1;                             // 0x010C(0x0004)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x0110(0x0004) (Const, ExportObject, Component, EditInline)
	struct FLightingChannelContainer                   LightingChannels;                                         // 0x0114(0x0004) (Edit, Const)
	TEnumAsByte<ELightAffectsClassification>           LightAffectsClassification;                               // 0x0118(0x0001) (Edit, Const, EditConst)
	TEnumAsByte<ELightShadowMode>                      LightShadowMode;                                          // 0x0119(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x2];                                       // 0x011A(0x0002) MISSED OFFSET
	struct FLinearColor                                ModShadowColor;                                           // 0x011C(0x0010) (Edit)
	float                                              ModShadowFadeoutTime;                                     // 0x012C(0x0004)
	float                                              ModShadowFadeoutExponent;                                 // 0x0130(0x0004)
	int                                                LightListIndex;                                           // 0x0134(0x0004) (Const, Native, DuplicateTransient)
	TEnumAsByte<EShadowProjectionTechnique>            ShadowProjectionTechnique;                                // 0x0138(0x0001)
	TEnumAsByte<EShadowFilterQuality>                  ShadowFilterQuality;                                      // 0x0139(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x2];                                       // 0x013A(0x0002) MISSED OFFSET
	int                                                MinShadowResolution;                                      // 0x013C(0x0004) (Edit)
	int                                                MaxShadowResolution;                                      // 0x0140(0x0004) (Edit)
	int                                                ShadowFadeResolution;                                     // 0x0144(0x0004) (Edit)
	float                                              OcclusionDepthRange;                                      // 0x0148(0x0004) (Edit)
	float                                              BloomScale;                                               // 0x014C(0x0004) (Edit)
	float                                              BloomThreshold;                                           // 0x0150(0x0004) (Edit)
	float                                              BloomScreenBlendThreshold;                                // 0x0154(0x0004) (Edit)
	struct FColor                                      BloomTint;                                                // 0x0158(0x0004) (Edit)
	float                                              RadialBlurPercent;                                        // 0x015C(0x0004) (Edit)
	float                                              OcclusionMaskDarkness;                                    // 0x0160(0x0004) (Edit)
	float                                              ReflectionSpecularBrightness;                             // 0x0164(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightComponent");
		return ptr;
	}


	void OnUpdatePropertyLightColor();
	void OnUpdatePropertyBrightness();
	void OnUpdatePropertyOcclusionMaskDarkness();
	void OnUpdatePropertyBloomTint();
	void OnUpdatePropertyBloomScale();
	void UpdateLightShaftParameters();
	void UpdateColorAndBrightness();
	struct FVector GetDirection();
	struct FVector GetOrigin();
	void SetLightProperties(float NewBrightness, const struct FColor& NewLightColor, class ULightFunction* NewLightFunction);
	void SetEnabled(bool bSetEnabled);
};


// Class Engine.EmitterPool
// 0x0064 (0x0238 - 0x01D4)
class AEmitterPool : public AActor
{
public:
	class UParticleSystemComponent*                    PSCTemplate;                                              // 0x01D4(0x0004) (ExportObject, Component, EditInline)
	TArray<class UParticleSystemComponent*>            PoolComponents;                                           // 0x01D8(0x000C) (Const, ExportObject, Transient, Component, NeedCtorLink, EditInline)
	TArray<class UParticleSystemComponent*>            ActiveComponents;                                         // 0x01E4(0x000C) (ExportObject, Transient, Component, NeedCtorLink, EditInline)
	class UParticleSystemComponent*                    PhysXSurrogateComponent;                                  // 0x01F0(0x0004) (Edit, ExportObject, Transient, Component, EditInline)
	class UParticleSystemComponent*                    PhysXSurrogateComponentHalfDownsampling;                  // 0x01F4(0x0004) (Edit, ExportObject, Transient, Component, EditInline)
	class UParticleSystemComponent*                    PhysXSurrogateComponentQuarterDownsampling;               // 0x01F8(0x0004) (Edit, ExportObject, Transient, Component, EditInline)
	int                                                MaxActiveEffects;                                         // 0x01FC(0x0004)
	unsigned long                                      bLogPoolOverflow : 1;                                     // 0x0200(0x0004) (Config, GlobalConfig)
	unsigned long                                      bLogPoolOverflowList : 1;                                 // 0x0200(0x0004) (Config, GlobalConfig)
	TArray<struct FEmitterBaseInfo>                    RelativePSCs;                                             // 0x0204(0x000C) (Transient, Component, NeedCtorLink)
	float                                              SMC_MIC_ReductionTime;                                    // 0x0210(0x0004)
	float                                              SMC_MIC_CurrentReductionTime;                             // 0x0214(0x0004) (Transient)
	int                                                IdealStaticMeshComponents;                                // 0x0218(0x0004)
	int                                                IdealMaterialInstanceConstants;                           // 0x021C(0x0004)
	TArray<class UStaticMeshComponent*>                FreeSMComponents;                                         // 0x0220(0x000C) (Const, ExportObject, Transient, Component, NeedCtorLink, EditInline)
	TArray<class UMaterialInstanceConstant*>           FreeMatInstConsts;                                        // 0x022C(0x000C) (Const, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EmitterPool");
		return ptr;
	}


	void PostBeginPlay();
	class UParticleSystemComponent* SpawnEmitterCustomLifetime(class UParticleSystem* EmitterTemplate, bool bSkipAutoActivate);
	class UParticleSystemComponent* SpawnEmitterMeshAttachment(class UParticleSystem* EmitterTemplate, class USkeletalMeshComponent* Mesh, const struct FName& AttachPointName, bool bAttachToSocket, const struct FVector& RelativeLoc, const struct FRotator& RelativeRot);
	class UParticleSystemComponent* SpawnEmitter(class UParticleSystem* EmitterTemplate, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, class AActor* AttachToActor, class AActor* InInstigator, int MaxDLEPooledReuses, bool bInheritScaleFromBase);
	class UParticleSystemComponent* GetPooledComponent(class UParticleSystem* EmitterTemplate, bool bAutoActivate);
	class UMaterialInstanceConstant* GetFreeMatInstConsts(bool bCreateNewObject);
	void FreeMaterialInstanceConstants(class UStaticMeshComponent* SMC);
	class UStaticMeshComponent* GetFreeStaticMeshComponent(bool bCreateNewObject);
	void FreeStaticMeshComponents(class UParticleSystemComponent* PSC);
	void ReturnToPool(class UParticleSystemComponent* PSC);
	void ClearPoolComponents(bool bClearActive);
	void OnParticleSystemFinished(class UParticleSystemComponent* PSC);
};


// Class Engine.Canvas
// 0x00A8 (0x00E4 - 0x003C)
class UCanvas : public UObject
{
public:
	class UFont*                                       Font;                                                     // 0x003C(0x0004)
	float                                              OrgX;                                                     // 0x0040(0x0004)
	float                                              OrgY;                                                     // 0x0044(0x0004)
	float                                              ClipX;                                                    // 0x0048(0x0004)
	float                                              ClipY;                                                    // 0x004C(0x0004)
	float                                              CurX;                                                     // 0x0050(0x0004) (Const)
	float                                              CurY;                                                     // 0x0054(0x0004) (Const)
	float                                              CurZ;                                                     // 0x0058(0x0004) (Const)
	float                                              CurYL;                                                    // 0x005C(0x0004)
	struct FColor                                      DrawColor;                                                // 0x0060(0x0004)
	unsigned long                                      bCenter : 1;                                              // 0x0064(0x0004)
	unsigned long                                      bNoSmooth : 1;                                            // 0x0064(0x0004)
	int                                                SizeX;                                                    // 0x0068(0x0004) (Const)
	int                                                SizeY;                                                    // 0x006C(0x0004) (Const)
	struct FPointer                                    Canvas;                                                   // 0x0070(0x0004) (Const, Native)
	struct FPointer                                    SceneView;                                                // 0x0074(0x0004) (Const, Native)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) MISSED OFFSET
	struct FMatrix                                     ViewProjectionMatrix;                                     // 0x0080(0x0040)
	struct FRotator                                    ViewRotation;                                             // 0x00C0(0x000C)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	struct FPlane                                      ColorModulate;                                            // 0x00D0(0x0010)
	class UTexture2D*                                  DefaultTexture;                                           // 0x00E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Canvas");
		return ptr;
	}


	void DrawDebugGraph(const struct FString& Title, float ValueX, float ValueY, float UL_X, float UL_Y, float W, float H, const struct FVector2D& RangeX, const struct FVector2D& RangeY);
	void DrawTextureDoubleLine(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Spacing, float Width, const struct FColor& LineColor, const struct FColor& AltLineColor, class UTexture* Tex, float U, float V, float UL, float VL);
	void DrawTextureLine(const struct FVector& StartPoint, const struct FVector& EndPoint, float Perc, float Width, const struct FColor& LineColor, class UTexture* LineTexture, float U, float V, float UL, float VL);
	void Draw2DLine(float X1, float Y1, float X2, float Y2, const struct FColor& LineColor);
	void SetDrawColorStruct(const struct FColor& C);
	void SetDrawColor(unsigned char R, unsigned char G, unsigned char B, unsigned char A);
	void DrawBox(float Width, float Height);
	void DrawRect(float RectX, float RectY, class UTexture* Tex);
	void DrawIcon(const struct FCanvasIcon& Icon, float X, float Y, float Scale);
	void DrawScaledIcon(const struct FCanvasIcon& Icon, float X, float Y, const struct FVector& Scale);
	struct FCanvasIcon MakeIcon(class UTexture* Texture, float U, float V, float UL, float VL);
	void DrawTextureBlended(class UTexture* Tex, float Scale, TEnumAsByte<ECanvasBlendMode> Blend);
	void DrawBlendedTile(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, TEnumAsByte<ECanvasBlendMode> Blend);
	void DrawTexture(class UTexture* Tex, float Scale);
	void PopMaskRegion();
	void PushMaskRegion(float X, float Y, float XL, float YL);
	void SetClip(float X, float Y);
	void SetOrigin(float X, float Y);
	void SetPos(float PosX, float PosY, float PosZ);
	class UFont* GetDefaultCanvasFont();
	void Reset(bool bKeepOrigin);
	void PopTransform();
	void PushTranslationMatrix(const struct FVector& TranslationVector);
	void DeProject(const struct FVector2D& ScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection);
	struct FVector Project(const struct FVector& WorldPos);
	void DrawText(const struct FString& Text, bool CR, float XScale, float YScale, struct FFontRenderInfo* RenderInfo);
	void TextSize(const struct FString& String, float XScale, float YScale, float* XL, float* YL);
	void StrLen(const struct FString& String, float* XL, float* YL);
	struct FFontRenderInfo STATIC_CreateFontRenderInfo(bool bClipText, bool bEnableShadow, const struct FLinearColor& GlowColor, const struct FVector2D& GlowOuterRadius, const struct FVector2D& GlowInnerRadius);
	void DrawTris(class UTexture* Tex, TArray<struct FCanvasUVTri> Triangles, const struct FColor& InColor);
	void DrawTileStretched(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, bool bStretchHorizontally, bool bStretchVertically, float ScalingFactor);
	void DrawTimer(class UTexture* Tex, float StartTime, float TotalTime, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, TEnumAsByte<EBlendMode> Blend);
	void DrawRotatedMaterialTile(class UMaterialInterface* Mat, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY);
	void DrawRotatedTile(class UTexture* Tex, const struct FRotator& Rotation, float XL, float YL, float U, float V, float UL, float VL, float AnchorX, float AnchorY);
	void DrawMaterialTile(class UMaterialInterface* Mat, float XL, float YL, float U, float V, float UL, float VL, bool bClipTile);
	void PreOptimizeDrawTiles(int Num, class UTexture* Tex, TEnumAsByte<EBlendMode> Blend);
	void DrawTile(class UTexture* Tex, float XL, float YL, float U, float V, float UL, float VL, const struct FLinearColor& LColor, bool ClipTile, TEnumAsByte<EBlendMode> Blend);
};


// Class Engine.HUD
// 0x0288 (0x045C - 0x01D4)
class AHUD : public AActor
{
public:
	struct FColor                                      WhiteColor;                                               // 0x01D4(0x0004) (Const)
	struct FColor                                      GreenColor;                                               // 0x01D8(0x0004) (Const)
	struct FColor                                      RedColor;                                                 // 0x01DC(0x0004) (Const)
	class APlayerController*                           PlayerOwner;                                              // 0x01E0(0x0004)
	unsigned long                                      bLostFocusPaused : 1;                                     // 0x01E4(0x0004) (Transient)
	unsigned long                                      bShowHUD : 1;                                             // 0x01E4(0x0004)
	unsigned long                                      bShowHUDSetting : 1;                                      // 0x01E4(0x0004)
	unsigned long                                      bShowScores : 1;                                          // 0x01E4(0x0004)
	unsigned long                                      bShowDebugInfo : 1;                                       // 0x01E4(0x0004)
	unsigned long                                      bShowBadConnectionAlert : 1;                              // 0x01E4(0x0004) (Edit)
	unsigned long                                      bShowDirectorInfoDebug : 1;                               // 0x01E4(0x0004) (Config)
	unsigned long                                      bShowDirectorInfoHUD : 1;                                 // 0x01E4(0x0004) (Config)
	unsigned long                                      bMessageBeep : 1;                                         // 0x01E4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bRenderFullScreen : 1;                                    // 0x01E4(0x0004)
	unsigned long                                      bScaleCanvasForCinematicMode : 1;                         // 0x01E4(0x0004)
	unsigned long                                      bShowOverlays : 1;                                        // 0x01E4(0x0004)
	float                                              HudCanvasScale;                                           // 0x01E8(0x0004) (Config, GlobalConfig)
	TArray<class AActor*>                              PostRenderedActors;                                       // 0x01EC(0x000C) (NeedCtorLink)
	TArray<struct FConsoleMessage>                     ConsoleMessages;                                          // 0x01F8(0x000C) (NeedCtorLink)
	struct FColor                                      ConsoleColor;                                             // 0x0204(0x0004) (Const)
	int                                                ConsoleMessageCount;                                      // 0x0208(0x0004) (Config)
	int                                                ConsoleFontSize;                                          // 0x020C(0x0004) (Config, GlobalConfig)
	int                                                MessageFontOffset;                                        // 0x0210(0x0004) (Config, GlobalConfig)
	int                                                MaxHUDAreaMessageCount;                                   // 0x0214(0x0004)
	struct FHudLocalizedMessage                        LocalMessages[0x8];                                       // 0x0218(0x0040) (Edit, Transient, NeedCtorLink)
	float                                              ConsoleMessagePosX;                                       // 0x0418(0x0004) (Edit)
	float                                              ConsoleMessagePosY;                                       // 0x041C(0x0004) (Edit)
	class UCanvas*                                     Canvas;                                                   // 0x0420(0x0004)
	float                                              LastHUDRenderTime;                                        // 0x0424(0x0004) (Transient)
	float                                              RenderDelta;                                              // 0x0428(0x0004) (Transient)
	float                                              SizeX;                                                    // 0x042C(0x0004) (Transient)
	float                                              SizeY;                                                    // 0x0430(0x0004) (Transient)
	float                                              CenterX;                                                  // 0x0434(0x0004) (Transient)
	float                                              CenterY;                                                  // 0x0438(0x0004) (Transient)
	float                                              RatioX;                                                   // 0x043C(0x0004) (Transient)
	float                                              RatioY;                                                   // 0x0440(0x0004) (Transient)
	TArray<struct FName>                               DebugDisplay;                                             // 0x0444(0x000C) (Config, GlobalConfig, NeedCtorLink)
	TArray<struct FKismetDrawTextInfo>                 KismetTextInfo;                                           // 0x0450(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HUD");
		return ptr;
	}


	void OnLostFocusPause(bool bEnable);
	void NotifyBindPostProcessEffects();
	void PlayerOwnerDied();
	class UFont* STATIC_GetFontSizeIndex(int FontSize);
	void DrawText(const struct FString& Text, const struct FVector2D& Position, class UFont* TextFont, const struct FVector2D& FontScale, const struct FColor& TextColor, struct FFontRenderInfo* RenderInfo);
	void DisplayKismetMessages();
	void DisplayLocalMessages();
	void DrawMessageText(const struct FHudLocalizedMessage& LocalMessage, float ScreenX, float ScreenY);
	void DrawMessage(int I, float PosY, float* DX, float* DY);
	void GetScreenCoords(float PosY, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* InMessage);
	void AddLocalizedMessage(int Index, class UClass* InMessageClass, const struct FString& CriticalString, int Switch, float Position, float Lifetime, int FontSize, const struct FColor& DrawColor, int MessageCount, class UObject* OptionalObject);
	void LocalizedMessage(class UClass* InMessageClass, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, const struct FString& CriticalString, int Switch, float Position, float Lifetime, int FontSize, const struct FColor& DrawColor, class UObject* OptionalObject);
	void AddConsoleMessage(const struct FString& M, class UClass* InMessageClass, class APlayerReplicationInfo* PRI, float Lifetime);
	bool ShouldShowConsoleMessage(const struct FConsoleMessage& InConsoleMessage);
	void DisplayConsoleMessages();
	void Message(class APlayerReplicationInfo* PRI, const struct FString& msg, const struct FName& MsgType, float Lifetime);
	void ClearMessage(struct FHudLocalizedMessage* M);
	void DisplayBadConnectionAlert();
	void DrawHUD();
	void PostRender();
	void PreCalcValues();
	void DrawRoute(class APawn* Target);
	void ShowDebugInfo(float* out_YL, float* out_YPos);
	void ToggleDirectorInfoDebug();
	void ToggleDirectorInfoHUD();
	bool ShouldDisplayDebug(const struct FName& DebugType);
	void ShowDebug(const struct FName& DebugType);
	void SetShowScores(bool bNewValue);
	void ShowScores();
	void ShowHUD();
	void ToggleHUD();
	void SetVisible(bool bNewVisible);
	void AddPostRenderedActor(class AActor* A);
	void RemovePostRenderedActor(class AActor* A);
	void DrawActorOverlays(const struct FVector& ViewPoint, const struct FRotator& ViewRotation);
	void PostBeginPlay();
	void Draw2DLine(int X1, int Y1, int X2, int Y2, const struct FColor& LineColor);
	void Draw3DLine(const struct FVector& Start, const struct FVector& End, const struct FColor& LineColor);
};


// Class Engine.AutoTestManager
// 0x009C (0x0270 - 0x01D4)
class AAutoTestManager : public AInfo
{
public:
	unsigned long                                      bAutomatedPerfTesting : 1;                                // 0x01D4(0x0004)
	unsigned long                                      bAutoContinueToNextRound : 1;                             // 0x01D4(0x0004)
	unsigned long                                      bUsingAutomatedTestingMapList : 1;                        // 0x01D4(0x0004)
	unsigned long                                      bAutomatedTestingWithOpen : 1;                            // 0x01D4(0x0004)
	unsigned long                                      bExitOnCyclesComplete : 1;                                // 0x01D4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bCheckingForFragmentation : 1;                            // 0x01D4(0x0004)
	unsigned long                                      bCheckingForMemLeaks : 1;                                 // 0x01D4(0x0004)
	unsigned long                                      bDoingASentinelRun : 1;                                   // 0x01D4(0x0004)
	unsigned long                                      bSentinelStreamingLevelStillLoading : 1;                  // 0x01D4(0x0004) (Transient)
	int                                                AutomatedPerfRemainingTime;                               // 0x01D8(0x0004)
	int                                                AutomatedTestingMapIndex;                                 // 0x01DC(0x0004)
	TArray<struct FString>                             AutomatedMapTestingList;                                  // 0x01E0(0x000C) (Config, GlobalConfig, NeedCtorLink)
	int                                                NumAutomatedMapTestingCycles;                             // 0x01EC(0x0004) (Config, GlobalConfig)
	int                                                NumberOfMatchesPlayed;                                    // 0x01F0(0x0004)
	int                                                NumMapListCyclesDone;                                     // 0x01F4(0x0004)
	struct FString                                     AutomatedTestingExecCommandToRunAtStartMatch;             // 0x01F8(0x000C) (NeedCtorLink)
	struct FString                                     AutomatedMapTestingTransitionMap;                         // 0x0204(0x000C) (NeedCtorLink)
	struct FString                                     SentinelTaskDescription;                                  // 0x0210(0x000C) (NeedCtorLink)
	struct FString                                     SentinelTaskParameter;                                    // 0x021C(0x000C) (NeedCtorLink)
	struct FString                                     SentinelTagDesc;                                          // 0x0228(0x000C) (NeedCtorLink)
	class APlayerController*                           SentinelPC;                                               // 0x0234(0x0004) (Transient)
	TArray<struct FVector>                             SentinelTravelArray;                                      // 0x0238(0x000C) (Transient, NeedCtorLink)
	int                                                SentinelNavigationIdx;                                    // 0x0244(0x0004) (Transient)
	int                                                SentinelIdx;                                              // 0x0248(0x0004) (Transient)
	int                                                NumRotationsIncrement;                                    // 0x024C(0x0004) (Transient)
	int                                                TravelPointsIncrement;                                    // 0x0250(0x0004) (Transient)
	int                                                NumMinutesPerMap;                                         // 0x0254(0x0004) (Config)
	TArray<struct FString>                             CommandsToRunAtEachTravelTheWorldNode;                    // 0x0258(0x000C) (Config, NeedCtorLink)
	struct FString                                     CommandStringToExec;                                      // 0x0264(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AutoTestManager");
		return ptr;
	}


	bool CheckForSentinelRun();
	void StartMatch();
	struct FString GetNextAutomatedTestingMap();
	void IncrementNumberOfMatchesPlayed();
	void IncrementAutomatedTestingMapIndex();
	void CloseAutomatedMapTestTimer();
	void StartAutomatedMapTestTimerWorker();
	void StartAutomatedMapTestTimer();
	void DoMemoryTracking();
	void DoTimeBasedSentinelStatGathering();
	void DoSentinel_ViewDependentMemoryAtSpecificLocation(struct FVector* InLocation, struct FRotator* InRotation);
	void DoSentinel_PerfAtSpecificLocation(struct FVector* InLocation, struct FRotator* InRotation);
	void DoSentinel_MemoryAtSpecificLocation(const struct FVector& InLocation, const struct FRotator& InRotation);
	void GetTravelLocations(const struct FName& LevelName, class APlayerController* PC, TArray<struct FVector>* TravelPoints);
	void HandlePerLoadedMapAudioStats();
	void DoSentinelActionPerLoadedMap();
	void DoTravelTheWorld();
	void EndSentinelRun(TEnumAsByte<EAutomatedRunResult> RunResult);
	void AddSentinelPerTimePeriodStats(const struct FVector& InLocation, const struct FRotator& InRotation);
	void BeginSentinelRun(const struct FString& TaskDescription, const struct FString& TaskParameter, const struct FString& TagDesc);
	void InitializeOptions(const struct FString& Options);
	void Timer();
	void PostBeginPlay();
};


// Class Engine.CoverGroup
// 0x0014 (0x01E8 - 0x01D4)
class ACoverGroup : public AInfo
{
public:
	TArray<struct FActorReference>                     CoverLinkRefs;                                            // 0x01D4(0x000C) (Edit, NeedCtorLink)
	float                                              AutoSelectRadius;                                         // 0x01E0(0x0004) (Edit)
	float                                              AutoSelectHeight;                                         // 0x01E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverGroup");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void ToggleGroup();
	void DisableGroup();
	void EnableGroup();
};


// Class Engine.FileWriter
// 0x0018 (0x01EC - 0x01D4)
class AFileWriter : public AInfo
{
public:
	struct FPointer                                    ArchivePtr;                                               // 0x01D4(0x0004) (Const, Native)
	struct FString                                     Filename;                                                 // 0x01D8(0x000C) (Const, NeedCtorLink)
	TEnumAsByte<EFWFileType>                           FileType;                                                 // 0x01E4(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01E5(0x0003) MISSED OFFSET
	unsigned long                                      bFlushEachWrite : 1;                                      // 0x01E8(0x0004)
	unsigned long                                      bWantsAsyncWrites : 1;                                    // 0x01E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FileWriter");
		return ptr;
	}


	void Destroyed();
	void Logf(const struct FString& logString);
	void CloseFile();
	bool OpenFile(const struct FString& InFilename, TEnumAsByte<EFWFileType> InFileType, const struct FString& InExtension, bool bUnique, bool bIncludeTimeStamp);
};


// Class Engine.FileLog
// 0x0000 (0x01EC - 0x01EC)
class AFileLog : public AFileWriter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FileLog");
		return ptr;
	}


	void CloseLog();
	void OpenLog(const struct FString& LogFilename, const struct FString& extension, bool bUnique);
};


// Class Engine.GameInfo
// 0x01C8 (0x039C - 0x01D4)
class AGameInfo : public AInfo
{
public:
	unsigned long                                      bRestartLevel : 1;                                        // 0x01D4(0x0004)
	unsigned long                                      bPauseable : 1;                                           // 0x01D4(0x0004)
	unsigned long                                      bTeamGame : 1;                                            // 0x01D4(0x0004)
	unsigned long                                      bGameEnded : 1;                                           // 0x01D4(0x0004)
	unsigned long                                      bOverTime : 1;                                            // 0x01D4(0x0004)
	unsigned long                                      bDelayedStart : 1;                                        // 0x01D4(0x0004)
	unsigned long                                      bWaitingToStartMatch : 1;                                 // 0x01D4(0x0004)
	unsigned long                                      bHideAdvertisementDuringMatch : 1;                        // 0x01D4(0x0004)
	unsigned long                                      bChangeLevels : 1;                                        // 0x01D4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bAlreadyChanged : 1;                                      // 0x01D4(0x0004)
	unsigned long                                      bAdminCanPause : 1;                                       // 0x01D4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bGameRestarted : 1;                                       // 0x01D4(0x0004)
	unsigned long                                      bLevelChange : 1;                                         // 0x01D4(0x0004)
	unsigned long                                      bKickLiveIdlers : 1;                                      // 0x01D4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bUsingArbitration : 1;                                    // 0x01D4(0x0004)
	unsigned long                                      bHasArbitratedHandshakeBegun : 1;                         // 0x01D4(0x0004)
	unsigned long                                      bNeedsEndGameHandshake : 1;                               // 0x01D4(0x0004)
	unsigned long                                      bIsEndGameHandshakeComplete : 1;                          // 0x01D4(0x0004)
	unsigned long                                      bHasEndGameHandshakeBegun : 1;                            // 0x01D4(0x0004)
	unsigned long                                      bFixedPlayerStart : 1;                                    // 0x01D4(0x0004)
	unsigned long                                      bDoFearCostFallOff : 1;                                   // 0x01D4(0x0004)
	unsigned long                                      bUseSeamlessTravel : 1;                                   // 0x01D4(0x0004)
	unsigned long                                      bHasNetworkError : 1;                                     // 0x01D4(0x0004)
	unsigned long                                      bRequiresPushToTalk : 1;                                  // 0x01D4(0x0004) (Const)
	unsigned long                                      bIsStandbyCheckingEnabled : 1;                            // 0x01D4(0x0004) (Config)
	unsigned long                                      bIsStandbyCheckingOn : 1;                                 // 0x01D4(0x0004)
	unsigned long                                      bHasStandbyCheatTriggered : 1;                            // 0x01D4(0x0004)
	struct FString                                     CauseEventCommand;                                        // 0x01D8(0x000C) (NeedCtorLink)
	struct FString                                     BugLocString;                                             // 0x01E4(0x000C) (NeedCtorLink)
	struct FString                                     BugRotString;                                             // 0x01F0(0x000C) (NeedCtorLink)
	TArray<class APlayerController*>                   PendingArbitrationPCs;                                    // 0x01FC(0x000C) (NeedCtorLink)
	TArray<class APlayerController*>                   ArbitrationPCs;                                           // 0x0208(0x000C) (NeedCtorLink)
	float                                              ArbitrationHandshakeTimeout;                              // 0x0214(0x0004) (Config, GlobalConfig)
	float                                              GameDifficulty;                                           // 0x0218(0x0004) (Config, GlobalConfig)
	int                                                GoreLevel;                                                // 0x021C(0x0004) (Config, GlobalConfig)
	float                                              GameSpeed;                                                // 0x0220(0x0004)
	float                                              MoveSpeedFactor;                                          // 0x0224(0x0004) (Config, GlobalConfig)
	float                                              JumpSpeedFactor;                                          // 0x0228(0x0004) (Config, GlobalConfig)
	class UClass*                                      DefaultPawnClass;                                         // 0x022C(0x0004)
	class UClass*                                      HUDType;                                                  // 0x0230(0x0004)
	class UClass*                                      SecondaryHUDType;                                         // 0x0234(0x0004)
	int                                                MaxSpectators;                                            // 0x0238(0x0004) (Config, GlobalConfig)
	int                                                MaxSpectatorsAllowed;                                     // 0x023C(0x0004)
	int                                                NumSpectators;                                            // 0x0240(0x0004)
	int                                                MaxPlayers;                                               // 0x0244(0x0004) (Config)
	int                                                MaxPlayersAllowed;                                        // 0x0248(0x0004)
	int                                                NumPlayers;                                               // 0x024C(0x0004)
	int                                                NumBots;                                                  // 0x0250(0x0004)
	int                                                NumTravellingPlayers;                                     // 0x0254(0x0004)
	int                                                CurrentID;                                                // 0x0258(0x0004)
	struct FString                                     DefaultPlayerName;                                        // 0x025C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GameName;                                                 // 0x0268(0x000C) (Const, Localized, NeedCtorLink)
	float                                              FearCostFallOff;                                          // 0x0274(0x0004)
	int                                                GoalScore;                                                // 0x0278(0x0004) (Config)
	int                                                MaxLives;                                                 // 0x027C(0x0004) (Config)
	int                                                TimeLimit;                                                // 0x0280(0x0004) (Config)
	class UClass*                                      DeathMessageClass;                                        // 0x0284(0x0004)
	class UClass*                                      GameMessageClass;                                         // 0x0288(0x0004)
	class AMutator*                                    BaseMutator;                                              // 0x028C(0x0004)
	class UClass*                                      AccessControlClass;                                       // 0x0290(0x0004)
	class AAccessControl*                              AccessControl;                                            // 0x0294(0x0004)
	class UClass*                                      BroadcastHandlerClass;                                    // 0x0298(0x0004)
	class ABroadcastHandler*                           BroadcastHandler;                                         // 0x029C(0x0004)
	class UClass*                                      AutoTestManagerClass;                                     // 0x02A0(0x0004)
	class AAutoTestManager*                            MyAutoTestManager;                                        // 0x02A4(0x0004)
	class UClass*                                      PlayerControllerClass;                                    // 0x02A8(0x0004)
	class UClass*                                      PlayerReplicationInfoClass;                               // 0x02AC(0x0004)
	class UClass*                                      GameReplicationInfoClass;                                 // 0x02B0(0x0004) (Edit)
	class AGameReplicationInfo*                        GameReplicationInfo;                                      // 0x02B4(0x0004)
	class ACrowdPopulationManagerBase*                 PopulationManager;                                        // 0x02B8(0x0004)
	class UClass*                                      PopulationManagerClass;                                   // 0x02BC(0x0004)
	float                                              MaxIdleTime;                                              // 0x02C0(0x0004) (Config, GlobalConfig)
	float                                              MaxTimeMargin;                                            // 0x02C4(0x0004) (Config, GlobalConfig)
	float                                              TimeMarginSlack;                                          // 0x02C8(0x0004) (Config, GlobalConfig)
	float                                              MinTimeMargin;                                            // 0x02CC(0x0004) (Config, GlobalConfig)
	float                                              HawkenMinReportRate;                                      // 0x02D0(0x0004) (Config, GlobalConfig)
	float                                              HawkenMaxTimeMargin;                                      // 0x02D4(0x0004) (Config, GlobalConfig)
	TArray<class APlayerReplicationInfo*>              InactivePRIArray;                                         // 0x02D8(0x000C) (NeedCtorLink)
	TArray<struct FScriptDelegate>                     Pausers;                                                  // 0x02E4(0x000C) (NeedCtorLink)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x02F0(0x0004)
	TScriptInterface<class UOnlineGameInterface>       GameInterface;                                            // 0x02F4(0x0008)
	class UClass*                                      OnlineStatsWriteClass;                                    // 0x02FC(0x0004)
	int                                                LeaderboardId;                                            // 0x0300(0x0004)
	int                                                ArbitratedLeaderboardId;                                  // 0x0304(0x0004)
	class ACoverReplicator*                            CoverReplicatorBase;                                      // 0x0308(0x0004)
	class UClass*                                      OnlineGameSettingsClass;                                  // 0x030C(0x0004) (Const)
	struct FString                                     ServerOptions;                                            // 0x0310(0x000C) (NeedCtorLink)
	int                                                AdjustedNetSpeed;                                         // 0x031C(0x0004)
	float                                              LastNetSpeedUpdateTime;                                   // 0x0320(0x0004)
	int                                                TotalNetBandwidth;                                        // 0x0324(0x0004) (Config, GlobalConfig)
	int                                                MinDynamicBandwidth;                                      // 0x0328(0x0004) (Config, GlobalConfig)
	int                                                MaxDynamicBandwidth;                                      // 0x032C(0x0004) (Config, GlobalConfig)
	float                                              StandbyRxCheatTime;                                       // 0x0330(0x0004) (Config)
	float                                              StandbyTxCheatTime;                                       // 0x0334(0x0004) (Config)
	int                                                BadPingThreshold;                                         // 0x0338(0x0004) (Config)
	float                                              PercentMissingForRxStandby;                               // 0x033C(0x0004) (Config)
	float                                              PercentMissingForTxStandby;                               // 0x0340(0x0004) (Config)
	float                                              PercentForBadPing;                                        // 0x0344(0x0004) (Config)
	float                                              JoinInProgressStandbyWaitTime;                            // 0x0348(0x0004) (Config)
	class UMaterial*                                   StreamingPauseIcon;                                       // 0x034C(0x0004)
	TArray<struct FGameClassShortName>                 GameInfoClassAliases;                                     // 0x0350(0x000C) (Edit, Const, Config, NeedCtorLink)
	struct FString                                     DefaultGameType;                                          // 0x035C(0x000C) (Config, NeedCtorLink)
	TArray<struct FGameTypePrefix>                     DefaultMapPrefixes;                                       // 0x0368(0x000C) (Config, NeedCtorLink)
	TArray<struct FGameTypePrefix>                     CustomMapPrefixes;                                        // 0x0374(0x000C) (Config, NeedCtorLink)
	TArray<struct FString>                             RequiredRoles;                                            // 0x0380(0x000C) (NeedCtorLink)
	int                                                AnimTreePoolSize;                                         // 0x038C(0x0004) (Config)
	struct FScriptDelegate                             __CanUnpause__Delegate;                                   // 0x0390(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameInfo");
		return ptr;
	}


	float GetTeamScore(int TeamIdx);
	void ClearOnlineDelegates();
	void InitCrowdPopulationManager();
	void OnEngineHasLoaded();
	void OnDestroyOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	void StandbyCheatDetected(TEnumAsByte<EStandbyType> StandbyType);
	void EnableStandbyCheatDetection(bool bIsEnabled);
	void BeginBVT(const struct FString& TagDesc);
	bool CheckForSentinelRun();
	bool ShouldAutoContinueToNextRound();
	bool IsDoingASentinelRun();
	bool IsCheckingForMemLeaks();
	bool IsCheckingForFragmentation();
	bool IsAutomatedPerfTesting();
	void SetBandwidthLimit(float AsyncIOBandwidthLimit);
	void DoTravelTheWorld();
	void TellClientsToTravelToSession(const struct FName& SessionName, class UClass* SearchClass, unsigned char PlatformSpecificInfo);
	void TellClientsPartyHostIsLeaving(const struct FUniqueNetId& PartyHostPlayerId);
	void TellClientsToReturnToPartyHost();
	void OnServerCreateComplete(const struct FName& SessionName, bool bWasSuccessful);
	void RegisterServer();
	void OnLoginChange(unsigned char LocalUserNum);
	void OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode);
	void ClearAutoLoginDelegates();
	bool ProcessServerLogin();
	void MatineeCancelled();
	void RecalculateSkillRating();
	void UpdateGameplayMuteList(class APlayerController* PC);
	void NotifyArbitratedMatchEnd();
	bool MatchIsInProgress();
	void ArbitrationRegistrationComplete(const struct FName& SessionName, bool bWasSuccessful);
	void RegisterServerForArbitration();
	void StartArbitratedMatch();
	void StartArbitrationRegistration();
	void ProcessClientRegistrationCompletion(class APlayerController* PC, bool bWasSuccessful);
	void UpdateGameSettingsCounts();
	void SetSeamlessTravelViewTarget(class APlayerController* PC);
	void HandleSeamlessTravelPlayer(class AController** C);
	void UpdateGameSettings();
	void PostSeamlessTravel();
	void SwapPlayerControllers(class APlayerController* OldPC, class APlayerController* NewPC);
	void GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList);
	void OverridePRI(class APlayerController* PC, class APlayerReplicationInfo* OldPRI);
	bool FindInactivePRI(class APlayerController* PC);
	void AddInactivePRI(class APlayerReplicationInfo* PRI, class APlayerController* PC);
	void PostCommitMapChange();
	void PreCommitMapChange(const struct FString& PreviousMapName, const struct FString& NextMapName);
	bool AllowPausing(class APlayerController* PC);
	bool AllowCheats(class APlayerController* P);
	bool STATIC_AllowMutator(const struct FString& MutatorClassName);
	bool PlayerCanRestart(class APlayerController* aPlayer);
	bool PlayerCanRestartGame(class APlayerController* aPlayer);
	void DriverLeftVehicle(class AVehicle* V, class APawn* P);
	bool CanLeaveVehicle(class AVehicle* V, class APawn* P);
	void DriverEnteredVehicle(class AVehicle* V, class APawn* P);
	void ModifyScoreKill(class AController* Killer, class AController* Other);
	void ScoreKill(class AController* Killer, class AController* Other);
	bool CheckScore(class APlayerReplicationInfo* Scorer);
	void ScoreObjective(class APlayerReplicationInfo* Scorer, int Score);
	void AddObjectiveScore(class APlayerReplicationInfo* Scorer, int Score);
	float RatePlayerStart(class APlayerStart* P, unsigned char Team, class AController* Player);
	class APlayerStart* ChoosePlayerStart(class AController* Player, unsigned char InTeam);
	class ANavigationPoint* FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName);
	bool ShouldSpawnAtStartSpot(class AController* Player);
	void EndLogging(const struct FString& Reason);
	void GameEventsPoll();
	void EndOnlineGame();
	void PerformEndGameHandling();
	void EndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	void WriteOnlinePlayerScores();
	void WriteOnlineStats();
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	bool CheckModifiedEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	void BroadcastLocalizedTeam(int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void BroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void BroadcastTeam(class AController* Sender, const struct FString& msg, const struct FName& Type);
	void Broadcast(class AActor* Sender, const struct FString& msg, const struct FName& Type);
	void RestartGame();
	bool GetTravelType();
	struct FString GetNextMap();
	void SendPlayer(class APlayerController* aPlayer, const struct FString& URL);
	unsigned char PickTeam(unsigned char Current, class AController* C);
	bool ChangeTeam(class AController* Other, int N, bool bNewTeam);
	void ChangeName(class AController* Other, const struct FString& S, bool bNameChange);
	void DiscardInventory(class APawn* Other, class AController* Killer);
	bool PickupQuery(class APawn* Other, class UClass* ItemClass, class AActor* Pickup);
	bool ShouldRespawn(class APickupFactory* Other);
	bool CheckRelevance(class AActor* Other);
	void ReduceDamageFloat(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser, float* Damage, struct FVector* Momentum);
	void ReduceDamage(class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum);
	bool CanSpectate(class APlayerController* Viewer, class APlayerReplicationInfo* ViewTarget);
	void KickBan(const struct FString& S);
	void Kick(const struct FString& S);
	void BroadcastDeathMessage(class AController* Killer, class AController* Other, class UClass* DamageType);
	bool PreventDeath(class APawn* KilledPawn, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void Killed(class AController* Killer, class AController* KilledPlayer, class APawn* KilledPawn, class UClass* DamageType);
	void NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType);
	void SetPlayerDefaults(class APawn* PlayerPawn);
	void Mutate(const struct FString& MutateString, class APlayerController* Sender);
	void AddDefaultInventory(class APawn* P);
	void AcceptInventory(class APawn* PlayerPawn);
	void UnregisterPlayer(class APlayerController* PC);
	void Logout(class AController* Exiting);
	void PreExit();
	int CalculatedNetSpeed();
	void UpdateNetSpeeds();
	void PostLogin(class APlayerController* NewPlayer);
	void UpdateBestNextHosts();
	int BestNextHostSort(class APlayerController* A, class APlayerController* B);
	void GenericPlayerInitialization(class AController* C);
	void ReplicateStreamingStatus(class APlayerController* PC);
	class UClass* GetDefaultPlayerClass(class AController* C);
	class APawn* SpawnDefaultPawnFor(class AController* NewPlayer, class ANavigationPoint* StartSpot);
	void RestartPlayer(class AController* NewPlayer);
	void StartBots();
	void StartHumans();
	void OnStartOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	void StartOnlineGame();
	void StartMatch();
	class APlayerController* Login(const struct FString& Portal, const struct FString& Options, const struct FUniqueNetId& UniqueId, struct FString* ErrorMessage);
	class APlayerController* SpawnPlayerController(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	int GetNextPlayerID();
	bool AtCapacity(bool bSpectator);
	void STATIC_RejectLogin(class UPlayer* InPlayer, const struct FString& Error);
	void STATIC_ResumeLogin(class UPlayer* InPlayer);
	class UPlayer* STATIC_PauseLogin();
	void PreLogin(const struct FString& Options, const struct FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, struct FString* ErrorMessage);
	void SetGamePassword(const struct FString& Password);
	bool RequiresPassword();
	class APlayerController* ProcessClientTravel(const struct FGuid& NextMapGuid, bool bSeamless, bool bAbsolute, struct FString* URL);
	void ProcessServerTravel(const struct FString& URL, bool bAbsolute);
	void RemoveMutator(class AMutator* MutatorToRemove);
	void AddNewMutator(class AMutator* NewMutator);
	bool CanAddMutator(const struct FString& mutname);
	void AddMutator(const struct FString& mutname, bool bUserAdded);
	void NotifyPendingConnectionLost();
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
	class UClass* STATIC_SetGameType(const struct FString& MapName, const struct FString& Options, const struct FString& Portal);
	struct FString STATIC_GetDefaultGameClassPath(const struct FString& MapName, const struct FString& Options, const struct FString& Portal);
	int STATIC_GetIntOption(const struct FString& Options, const struct FString& ParseString, int CurrentValue);
	bool STATIC_HasOption(const struct FString& Options, const struct FString& InKey);
	struct FString STATIC_ParseOption(const struct FString& Options, const struct FString& InKey);
	void STATIC_GetKeyValue(const struct FString& Pair, struct FString* Key, struct FString* Value);
	bool STATIC_GrabOption(struct FString* Options, struct FString* Result);
	void SetGameSpeed(float T);
	void DebugPause();
	void ForceClearUnpauseDelegates(class AActor* PauseActor);
	void ClearPause();
	bool SetPause(class APlayerController* PC, const struct FScriptDelegate& CanUnpauseDelegate);
	bool CanUnpause();
	int GetNumHumanTeams();
	int GetNumPlayers();
	struct FString GetNetworkNumber();
	void InitGameReplicationInfo();
	void ForceKickPlayer(class APlayerController* PC, const struct FString& KickReason);
	void KickIdler(class APlayerController* PC);
	void GameEnding();
	void NotifyNavigationChanged(class ANavigationPoint* N);
	void DoNavFearCostFallOff();
	bool ShouldStartInCinematicMode(int* OutHidePlayer, int* OutHideHud, int* OutDisableMovement, int* OutDisableTurning, int* OutDisableInput);
	void Timer();
	void ResetLevel();
	bool ShouldReset(class AActor* ActorToReset);
	void Reset();
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void PostBeginPlay();
	class ACoverReplicator* GetCoverReplicator();
	void PreBeginPlay();
	bool GetMapCommonPackageName(struct FString* InFilename, struct FString* OutCommonPackageName);
	bool GetSupportedGameTypes(bool bCheckExt, struct FString* InFilename, struct FGameTypePrefix* OutGameType);
};


// Class Engine.Mutator
// 0x0014 (0x01E8 - 0x01D4)
class AMutator : public AInfo
{
public:
	class AMutator*                                    NextMutator;                                              // 0x01D4(0x0004)
	TArray<struct FString>                             GroupNames;                                               // 0x01D8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bUserAdded : 1;                                           // 0x01E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Mutator");
		return ptr;
	}


	void NetDamage(int OriginalDamage, class APawn* injured, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, class AActor* DamageCauser, int* Damage, struct FVector* Momentum);
	void ScoreKill(class AController* Killer, class AController* Killed);
	void ScoreObjective(class APlayerReplicationInfo* Scorer, int Score);
	bool PreventDeath(class APawn* Killed, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	bool OverridePickupQuery(class APawn* Other, class UClass* ItemClass, class AActor* Pickup, unsigned char* bAllowPickup);
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason);
	bool HandleRestartGame();
	class ANavigationPoint* FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName);
	void GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList);
	void InitMutator(const struct FString& Options, struct FString* ErrorMessage);
	void DriverLeftVehicle(class AVehicle* V, class APawn* P);
	bool CanLeaveVehicle(class AVehicle* V, class APawn* P);
	void DriverEnteredVehicle(class AVehicle* V, class APawn* P);
	void NotifyLogin(class AController* NewPlayer);
	void NotifyLogout(class AController* Exiting);
	bool CheckReplacement(class AActor* Other);
	bool CheckRelevance(class AActor* Other);
	bool IsRelevant(class AActor* Other);
	bool AlwaysKeep(class AActor* Other);
	void AddMutator(class AMutator* M);
	void ModifyPlayer(class APawn* Other);
	void ModifyLogin(struct FString* Portal, struct FString* Options);
	void Mutate(const struct FString& MutateString, class APlayerController* Sender);
	void Destroyed();
	bool MutatorIsAllowed();
	void PreBeginPlay();
};


// Class Engine.PotentialClimbWatcher
// 0x0000 (0x01D4 - 0x01D4)
class APotentialClimbWatcher : public AInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PotentialClimbWatcher");
		return ptr;
	}


	void Tick(float DeltaTime);
};


// Class Engine.Route
// 0x001C (0x01F0 - 0x01D4)
class ARoute : public AInfo
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;                    // 0x01D4(0x0004) (Const, Native, NoExport)
	TEnumAsByte<ERouteType>                            RouteType;                                                // 0x01D8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01D9(0x0003) MISSED OFFSET
	TArray<struct FActorReference>                     RouteList;                                                // 0x01DC(0x000C) (Edit, NeedCtorLink)
	float                                              FudgeFactor;                                              // 0x01E8(0x0004) (Edit)
	int                                                RouteIndexOffset;                                         // 0x01EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Route");
		return ptr;
	}


	int MoveOntoRoutePath(class APawn* P, TEnumAsByte<ERouteDirection> RouteDirection, float DistFudgeFactor);
	int ResolveRouteIndex(int Idx, TEnumAsByte<ERouteDirection> RouteDirection, unsigned char* out_bComplete, unsigned char* out_bReverse);
};


// Class Engine.WindPointSource
// 0x0004 (0x01D8 - 0x01D4)
class AWindPointSource : public AInfo
{
public:
	class UWindPointSourceComponent*                   Component;                                                // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WindPointSource");
		return ptr;
	}

};


// Class Engine.Inventory
// 0x004C (0x0220 - 0x01D4)
class AInventory : public AActor
{
public:
	class AInventory*                                  Inventory;                                                // 0x01D4(0x0004) (Net)
	class AInventoryManager*                           InvManager;                                               // 0x01D8(0x0004) (Net)
	struct FString                                     ItemName;                                                 // 0x01DC(0x000C) (Const, Localized, NeedCtorLink)
	unsigned long                                      bDropOnDeath : 1;                                         // 0x01E8(0x0004)
	unsigned long                                      bDelayedSpawn : 1;                                        // 0x01E8(0x0004)
	unsigned long                                      bPredictRespawns : 1;                                     // 0x01E8(0x0004)
	float                                              RespawnTime;                                              // 0x01EC(0x0004) (Edit)
	float                                              MaxDesireability;                                         // 0x01F0(0x0004)
	struct FString                                     PickupMessage;                                            // 0x01F4(0x000C) (Edit, Const, Localized, NeedCtorLink)
	class USoundCue*                                   PickupSound;                                              // 0x0200(0x0004) (Edit)
	struct FString                                     PickupForce;                                              // 0x0204(0x000C) (Edit, NeedCtorLink)
	class UClass*                                      DroppedPickupClass;                                       // 0x0210(0x0004)
	class UPrimitiveComponent*                         DroppedPickupMesh;                                        // 0x0214(0x0004) (ExportObject, Component, EditInline)
	class UPrimitiveComponent*                         PickupFactoryMesh;                                        // 0x0218(0x0004) (ExportObject, Component, EditInline)
	class UParticleSystemComponent*                    DroppedPickupParticles;                                   // 0x021C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Inventory");
		return ptr;
	}


	struct FString STATIC_GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3);
	void DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity);
	bool DenyPickupQuery(class UClass* ItemClass, class AActor* Pickup);
	void ItemRemovedFromInvManager();
	void ClientGivenTo(class APawn* NewOwner, bool bDoNotActivate);
	void GivenTo(class APawn* thisPawn, bool bDoNotActivate);
	void AnnouncePickup(class APawn* Other);
	void GiveTo(class APawn* Other);
	float STATIC_DetourWeight(class APawn* Other, float PathWeight);
	float STATIC_BotDesireability(class AActor* PickupHolder, class APawn* P, class AController* C);
	void Destroyed();
	struct FString GetHumanReadableName();
};


// Class Engine.Weapon
// 0x00A4 (0x02C4 - 0x0220)
class AWeapon : public AInventory
{
public:
	unsigned char                                      CurrentFireMode;                                          // 0x0220(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0221(0x0003) MISSED OFFSET
	TArray<struct FName>                               FiringStatesArray;                                        // 0x0224(0x000C) (NeedCtorLink)
	TArray<TEnumAsByte<EWeaponFireType>>               WeaponFireTypes;                                          // 0x0230(0x000C) (NeedCtorLink)
	TArray<class UClass*>                              WeaponProjectiles;                                        // 0x023C(0x000C) (NeedCtorLink)
	TArray<float>                                      FireInterval;                                             // 0x0248(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      Spread;                                                   // 0x0254(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      InstantHitDamage;                                         // 0x0260(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      InstantHitMomentum;                                       // 0x026C(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              InstantHitDamageTypes;                                    // 0x0278(0x000C) (NeedCtorLink)
	float                                              EquipTime;                                                // 0x0284(0x0004) (Edit)
	float                                              PutDownTime;                                              // 0x0288(0x0004) (Edit)
	struct FVector                                     FireOffset;                                               // 0x028C(0x000C) (Edit)
	unsigned long                                      bWeaponPutDown : 1;                                       // 0x0298(0x0004)
	unsigned long                                      bCanThrow : 1;                                            // 0x0298(0x0004)
	unsigned long                                      bWasOptionalSet : 1;                                      // 0x0298(0x0004)
	unsigned long                                      bWasDoNotActivate : 1;                                    // 0x0298(0x0004)
	unsigned long                                      bInstantHit : 1;                                          // 0x0298(0x0004)
	unsigned long                                      bMeleeWeapon : 1;                                         // 0x0298(0x0004)
	float                                              WeaponRange;                                              // 0x029C(0x0004) (Edit)
	class UMeshComponent*                              Mesh;                                                     // 0x02A0(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              DefaultAnimSpeed;                                         // 0x02A4(0x0004) (Edit)
	float                                              Priority;                                                 // 0x02A8(0x0004) (Config)
	class AAIController*                               AIController;                                             // 0x02AC(0x0004)
	TArray<unsigned char>                              ShouldFireOnRelease;                                      // 0x02B0(0x000C) (NeedCtorLink)
	float                                              AIRating;                                                 // 0x02BC(0x0004)
	float                                              CachedMaxRange;                                           // 0x02C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Weapon");
		return ptr;
	}


	float GetAimParams(struct FVector* projStart, struct FVector* TargetLoc);
	float GetTargetDistance();
	void CacheAIController();
	void WeaponIsDown();
	bool StillFiring(unsigned char FireMode);
	bool ShouldRefire();
	void NotifyWeaponFinishedFiring(unsigned char FireMode);
	void NotifyWeaponFired(unsigned char FireMode);
	void HandleFinishedFiring();
	bool TryPutDown();
	struct FVector GetPhysicalFireStartLoc(const struct FVector& AimDir);
	struct FVector GetMuzzleLoc();
	void CustomFire();
	class AProjectile* ProjectileFire();
	void ProcessInstantHit(unsigned char FiringMode, const struct FImpactInfo& Impact, int NumHits);
	void InstantFire();
	bool PassThroughDamage(class AActor* HitActor);
	struct FImpactInfo CalcWeaponFire(const struct FVector& StartTrace, const struct FVector& EndTrace, const struct FVector& Extent, TArray<struct FImpactInfo>* ImpactList);
	class AActor* GetTraceOwner();
	float GetTraceRange();
	struct FRotator GetAdjustedAim(const struct FVector& StartFireLoc);
	void FireAmmunition();
	void FireModeUpdated(unsigned char FiringMode, bool bViaReplication);
	void SetCurrentFireMode(unsigned char FiringModeNum);
	void SendToFiringState(unsigned char FireModeNum);
	void ForceEndFire();
	void EndFire(unsigned char FireModeNum);
	void ServerStopFire(unsigned char FireModeNum);
	void StopFire(unsigned char FireModeNum);
	void BeginFire(unsigned char FireModeNum);
	void ServerStartFire(unsigned char FireModeNum);
	void StartFire(unsigned char FireModeNum);
	void ClientWeaponSet(bool bOptionalSet, bool bDoNotActivate);
	void ClientGivenTo(class APawn* NewOwner, bool bDoNotActivate);
	void DetachWeapon();
	void AttachWeaponTo(class USkeletalMeshComponent* MeshCpnt, const struct FName& SocketName);
	void ClearFlashLocation();
	void SetFlashLocation(const struct FVector& HitLocation);
	void ClearFlashCount();
	void IncrementFlashCount();
	void WeaponEmpty();
	bool DenyPickupQuery(class UClass* ItemClass, class AActor* Pickup);
	void PutDownWeapon();
	void Activate();
	void TimeWeaponEquipping();
	void TimeWeaponPutDown();
	void RefireCheckTimer();
	void TimeWeaponFiring(unsigned char FireModeNum);
	float GetFireInterval(unsigned char FireModeNum);
	void StopFireEffects(unsigned char FireModeNum);
	void PlayFireEffects(unsigned char FireModeNum, const struct FVector& HitLocation);
	void StopWeaponAnimation();
	void PlayWeaponAnimation(const struct FName& Sequence, float fDesiredDuration, bool bLoop, class USkeletalMeshComponent* SkelMesh);
	class UAnimNodeSequence* GetWeaponAnimNodeSeq();
	bool FireOnRelease();
	bool CanAttack(class AActor* Other);
	float GetWeaponRating();
	float GetAIRating();
	float MaxRange();
	struct FRotator AddSpread(const struct FRotator& BaseAim);
	class UClass* GetProjectileClass();
	void ClearPendingFire(int FireMode);
	void SetPendingFire(int FireMode);
	bool PendingFire(int FireMode);
	int GetPendingFireLength();
	bool HasAnyAmmo();
	bool HasAmmo(unsigned char FireModeNum, int Amount);
	int AddAmmo(int Amount);
	void ConsumeAmmo(unsigned char FireModeNum);
	void GetWeaponDebug(TArray<struct FString>* DebugInfo);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	bool DenyClientWeaponSet();
	bool IsFiring();
	void ClientWeaponThrown();
	bool CanThrow();
	void DropFrom(const struct FVector& StartLocation, const struct FVector& StartVelocity);
	bool DoOverridePrevWeapon();
	bool DoOverrideNextWeapon();
	void HolderDied();
	void ItemRemovedFromInvManager();
	void Destroyed();
};


// Class Engine.InventoryManager
// 0x001C (0x01F0 - 0x01D4)
class AInventoryManager : public AActor
{
public:
	class AInventory*                                  InventoryChain;                                           // 0x01D4(0x0004) (Net)
	class AWeapon*                                     PendingWeapon;                                            // 0x01D8(0x0004)
	class AWeapon*                                     LastAttemptedSwitchToWeapon;                              // 0x01DC(0x0004)
	unsigned long                                      bMustHoldWeapon : 1;                                      // 0x01E0(0x0004)
	TArray<int>                                        PendingFire;                                              // 0x01E4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InventoryManager");
		return ptr;
	}


	void UpdateController();
	void ClientWeaponSet(class AWeapon* NewWeapon, bool bOptionalSet, bool bDoNotActivate);
	void ChangedWeapon();
	void ClearPendingWeapon();
	bool CancelWeaponChange();
	void SetPendingWeapon(class AWeapon* DesiredWeapon);
	void InternalSetCurrentWeapon(class AWeapon* DesiredWeapon);
	void ServerSetCurrentWeapon(class AWeapon* DesiredWeapon);
	void SetCurrentWeapon(class AWeapon* DesiredWeapon);
	void NextWeapon();
	void PrevWeapon();
	void SwitchToBestWeapon(bool bForceADifferentWeapon);
	class AWeapon* GetBestWeapon(bool bForceADifferentWeapon);
	float GetWeaponRatingFor(class AWeapon* W);
	void DrawHUD(class AHUD* H);
	void OwnerDied();
	void DiscardInventory();
	void RemoveFromInventory(class AInventory* ItemToRemove);
	bool AddInventory(class AInventory* NewItem, bool bDoNotActivate);
	class AInventory* CreateInventory(class UClass* NewInventoryItemClass, bool bDoNotActivate);
	class AInventory* FindInventoryType(class UClass* DesiredClass, bool bAllowSubclass);
	bool HandlePickupQuery(class UClass* ItemClass, class AActor* Pickup);
	void Destroyed();
	void SetupFor(class APawn* P);
	void InventoryActors(class UClass* BaseClass, class AInventory** Inv);
	void ClearAllPendingFire(class AWeapon* InWeapon);
	bool IsPendingFire(class AWeapon* InWeapon, int InFiringMode);
	void ClearPendingFire(class AWeapon* InWeapon, int InFiringMode);
	void SetPendingFire(class AWeapon* InWeapon, int InFiringMode);
	int GetPendingFireLength(class AWeapon* InWeapon);
	void PostBeginPlay();
};


// Class Engine.Keypoint
// 0x0004 (0x01D8 - 0x01D4)
class AKeypoint : public AActor
{
public:
	class USpriteComponent*                            SpriteComp;                                               // 0x01D4(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Keypoint");
		return ptr;
	}

};


// Class Engine.TargetPoint
// 0x0008 (0x01E0 - 0x01D8)
class ATargetPoint : public AKeypoint
{
public:
	class UTexture2D*                                  SpawnSpriteTexture;                                       // 0x01D8(0x0004) (Transient)
	int                                                SpawnRefCount;                                            // 0x01DC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TargetPoint");
		return ptr;
	}

};


// Class Engine.MaterialInstanceActor
// 0x0004 (0x01D8 - 0x01D4)
class AMaterialInstanceActor : public AActor
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                                  // 0x01D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceActor");
		return ptr;
	}

};


// Class Engine.MatineeActor
// 0x00B4 (0x0288 - 0x01D4)
class AMatineeActor : public AActor
{
public:
	class USeqAct_Interp*                              InterpAction;                                             // 0x01D4(0x0004) (Const, Net)
	unsigned long                                      bIsPlaying : 1;                                           // 0x01D8(0x0004) (Net)
	unsigned long                                      bReversePlayback : 1;                                     // 0x01D8(0x0004) (Net)
	unsigned long                                      bPaused : 1;                                              // 0x01D8(0x0004) (Net)
	unsigned long                                      AllAIGroupsInitialized : 1;                               // 0x01D8(0x0004) (Transient)
	float                                              PlayRate;                                                 // 0x01DC(0x0004) (Net)
	float                                              Position;                                                 // 0x01E0(0x0004) (Net)
	struct FName                                       AIGroupNames[0xA];                                        // 0x01E4(0x0008) (Net)
	class APawn*                                       AIGroupPawns[0xA];                                        // 0x0234(0x0004) (Net)
	int                                                AIGroupInitStage[0xA];                                    // 0x025C(0x0004) (Transient)
	float                                              ClientSidePositionErrorTolerance;                         // 0x0284(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatineeActor");
		return ptr;
	}


	void CheckPriorityRefresh();
	void Update();
	void AddAIGroupActor(class UInterpGroupInstAI* AIGroupInst);
};


// Class Engine.NavigationPoint
// 0x00D8 (0x02AC - 0x01D4)
class ANavigationPoint : public AActor
{
public:
	unsigned long                                      bEndPoint : 1;                                            // 0x01D4(0x0004) (Transient)
	unsigned long                                      bTransientEndPoint : 1;                                   // 0x01D4(0x0004) (Transient)
	unsigned long                                      bHideEditorPaths : 1;                                     // 0x01D4(0x0004) (Transient)
	unsigned long                                      bCanReach : 1;                                            // 0x01D4(0x0004) (Transient)
	unsigned long                                      bBlocked : 1;                                             // 0x01D4(0x0004) (Edit)
	unsigned long                                      bOneWayPath : 1;                                          // 0x01D4(0x0004) (Edit)
	unsigned long                                      bNeverUseStrafing : 1;                                    // 0x01D4(0x0004)
	unsigned long                                      bAlwaysUseStrafing : 1;                                   // 0x01D4(0x0004)
	unsigned long                                      bForceNoStrafing : 1;                                     // 0x01D4(0x0004) (Const)
	unsigned long                                      bAutoBuilt : 1;                                           // 0x01D4(0x0004) (Const)
	unsigned long                                      bSpecialMove : 1;                                         // 0x01D4(0x0004)
	unsigned long                                      bNoAutoConnect : 1;                                       // 0x01D4(0x0004)
	unsigned long                                      bNotBased : 1;                                            // 0x01D4(0x0004) (Const)
	unsigned long                                      bPathsChanged : 1;                                        // 0x01D4(0x0004) (Const)
	unsigned long                                      bDestinationOnly : 1;                                     // 0x01D4(0x0004) (Edit)
	unsigned long                                      bSourceOnly : 1;                                          // 0x01D4(0x0004)
	unsigned long                                      bSpecialForced : 1;                                       // 0x01D4(0x0004)
	unsigned long                                      bMustBeReachable : 1;                                     // 0x01D4(0x0004)
	unsigned long                                      bBlockable : 1;                                           // 0x01D4(0x0004)
	unsigned long                                      bFlyingPreferred : 1;                                     // 0x01D4(0x0004)
	unsigned long                                      bMayCausePain : 1;                                        // 0x01D4(0x0004)
	unsigned long                                      bAlreadyVisited : 1;                                      // 0x01D4(0x0004) (Transient)
	unsigned long                                      bVehicleDestination : 1;                                  // 0x01D4(0x0004) (Edit)
	unsigned long                                      bMakeSourceOnly : 1;                                      // 0x01D4(0x0004) (Edit)
	unsigned long                                      bMustTouchToReach : 1;                                    // 0x01D4(0x0004)
	unsigned long                                      bCanWalkOnToReach : 1;                                    // 0x01D4(0x0004)
	unsigned long                                      bBuildLongPaths : 1;                                      // 0x01D4(0x0004)
	unsigned long                                      bBlockedForVehicles : 1;                                  // 0x01D4(0x0004) (Edit)
	unsigned long                                      bPreferredVehiclePath : 1;                                // 0x01D4(0x0004) (Edit)
	unsigned long                                      bHasCrossLevelPaths : 1;                                  // 0x01D4(0x0004) (Const)
	unsigned long                                      bShouldSaveForCheckpoint : 1;                             // 0x01D4(0x0004) (Transient)
	struct FNavigationOctreeObject                     NavOctreeObject;                                          // 0x01D8(0x0034) (Const, Native, Transient)
	TArray<class UReachSpec*>                          PathList;                                                 // 0x020C(0x000C) (Edit, Const, EditConst, DuplicateTransient, NeedCtorLink, EditInline)
	TArray<struct FActorReference>                     EditorProscribedPaths;                                    // 0x0218(0x000C) (DuplicateTransient, NeedCtorLink)
	TArray<struct FActorReference>                     EditorForcedPaths;                                        // 0x0224(0x000C) (DuplicateTransient, NeedCtorLink)
	TArray<struct FActorReference>                     Volumes;                                                  // 0x0230(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	int                                                visitedWeight;                                            // 0x023C(0x0004)
	int                                                bestPathWeight;                                           // 0x0240(0x0004) (Const)
	class ANavigationPoint*                            nextNavigationPoint;                                      // 0x0244(0x0004) (Const)
	class ANavigationPoint*                            nextOrdered;                                              // 0x0248(0x0004) (Const)
	class ANavigationPoint*                            prevOrdered;                                              // 0x024C(0x0004) (Const)
	class ANavigationPoint*                            previousPath;                                             // 0x0250(0x0004) (Const)
	int                                                Cost;                                                     // 0x0254(0x0004)
	int                                                ExtraCost;                                                // 0x0258(0x0004) (Edit)
	int                                                TransientCost;                                            // 0x025C(0x0004) (Transient)
	int                                                FearCost;                                                 // 0x0260(0x0004) (Transient)
	TArray<struct FDebugNavCost>                       CostArray;                                                // 0x0264(0x000C) (Transient, NeedCtorLink)
	class ADroppedPickup*                              InventoryCache;                                           // 0x0270(0x0004)
	float                                              InventoryDist;                                            // 0x0274(0x0004)
	float                                              LastDetourWeight;                                         // 0x0278(0x0004) (Const)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x027C(0x0004) (ExportObject, Component, EditInline)
	struct FCylinder                                   MaxPathSize;                                              // 0x0280(0x0008) (Edit, Const, EditConst)
	struct FGuid                                       NavGuid;                                                  // 0x0288(0x0010) (Edit, Const, EditConst, DuplicateTransient)
	class USpriteComponent*                            GoodSprite;                                               // 0x0298(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	class USpriteComponent*                            BadSprite;                                                // 0x029C(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	int                                                NetworkID;                                                // 0x02A0(0x0004) (Edit, Const, EditConst)
	class APawn*                                       AnchoredPawn;                                             // 0x02A4(0x0004) (Transient)
	float                                              LastAnchoredPawnTime;                                     // 0x02A8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationPoint");
		return ptr;
	}


	struct FString GetDebugAbbrev();
	void ApplyCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record);
	bool ShouldSaveForCheckpoint();
	void ShutDown();
	void OnToggle(class USeqAct_Toggle* inAction);
	bool IsOnDifferentNetwork(class ANavigationPoint* Nav);
	bool STATIC_GetAllNavInRadius(class AActor* ChkActor, const struct FVector& ChkPoint, float Radius, bool bSkipBlocked, int inNetworkID, const struct FCylinder& MinSize, TArray<class ANavigationPoint*>* out_NavList);
	class ANavigationPoint* STATIC_GetNearestNavToPoint(class AActor* ChkActor, const struct FVector& ChkPoint, class UClass* RequiredClass, TArray<class ANavigationPoint*> ExcludeList);
	class ANavigationPoint* STATIC_GetNearestNavToActor(class AActor* ChkActor, class UClass* RequiredClass, TArray<class ANavigationPoint*> ExcludeList, float MinDist);
	bool ProceedWithMove(class APawn* Other);
	bool SuggestMovePreparation(class APawn* Other);
	float DetourWeight(class APawn* Other, float PathWeight);
	bool Accept(class AActor* Incoming, class AActor* Source);
	int SpecialCost(class APawn* Seeker, class UReachSpec* Path);
	bool CanTeleport(class AActor* A);
	bool IsUsableAnchorFor(class APawn* P);
	class UReachSpec* GetReachSpecTo(class ANavigationPoint* Nav, class UClass* SpecClass);
	void GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight);
};


// Class Engine.Pylon
// 0x00C8 (0x0374 - 0x02AC)
class APylon : public ANavigationPoint
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;                    // 0x02AC(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IInterface_NavigationHandle;                      // 0x02B0(0x0004) (Const, Native, NoExport)
	struct FPointer                                    NavMeshPtr;                                               // 0x02B4(0x0004) (Const, Native)
	struct FPointer                                    ObstacleMesh;                                             // 0x02B8(0x0004) (Const, Native)
	struct FPointer                                    DynamicObstacleMesh;                                      // 0x02BC(0x0004) (Const, Native)
	struct FPointer                                    WorkingSetPtr;                                            // 0x02C0(0x0004) (Const, Native, Transient)
	struct FPointer                                    PathObjectsThatAffectThisPylon;                           // 0x02C4(0x0004) (Const, Native, Transient)
	TArray<struct FVector>                             NextPassSeedList;                                         // 0x02C8(0x000C) (Const, Transient, NeedCtorLink)
	struct FOctreeElementId                            OctreeId;                                                 // 0x02D4(0x0008) (Const, Native)
	struct FPointer                                    OctreeIWasAddedTo;                                        // 0x02DC(0x0004) (Const, Native)
	class APylon*                                      NextPylon;                                                // 0x02E0(0x0004) (Const)
	TArray<class AVolume*>                             ExpansionVolumes;                                         // 0x02E4(0x000C) (Edit, NeedCtorLink)
	float                                              ExpansionRadius;                                          // 0x02F0(0x0004) (Edit)
	float                                              MaxExpansionRadius;                                       // 0x02F4(0x0004) (Const)
	class UDrawPylonRadiusComponent*                   PylonRadiusPreview;                                       // 0x02F8(0x0004) (ExportObject, Component, EditInline)
	unsigned long                                      bImportedMesh : 1;                                        // 0x02FC(0x0004)
	unsigned long                                      bUseExpansionSphereOverride : 1;                          // 0x02FC(0x0004)
	unsigned long                                      bNeedsCostCheck : 1;                                      // 0x02FC(0x0004)
	unsigned long                                      bPylonInHighLevelPath : 1;                                // 0x02FC(0x0004) (Transient)
	unsigned long                                      bUseRecast : 1;                                           // 0x02FC(0x0004) (Edit)
	unsigned long                                      bAllowRecastGenerator : 1;                                // 0x02FC(0x0004) (Transient)
	unsigned long                                      bDrawEdgePolys : 1;                                       // 0x02FC(0x0004) (Edit)
	unsigned long                                      bDrawPolyBounds : 1;                                      // 0x02FC(0x0004) (Edit)
	unsigned long                                      bRenderInShowPaths : 1;                                   // 0x02FC(0x0004) (Edit)
	unsigned long                                      bDrawWalkableSurface : 1;                                 // 0x02FC(0x0004) (Edit)
	unsigned long                                      bDrawObstacleSurface : 1;                                 // 0x02FC(0x0004) (Edit)
	unsigned long                                      bSolidObstaclesInGame : 1;                                // 0x02FC(0x0004) (Edit)
	unsigned long                                      bBuildThisPylon : 1;                                      // 0x02FC(0x0004) (Transient)
	unsigned long                                      bDisabled : 1;                                            // 0x02FC(0x0004)
	unsigned long                                      bForceObstacleMeshCollision : 1;                          // 0x02FC(0x0004)
	struct FVector                                     ExpansionSphereCenter;                                    // 0x0300(0x000C)
	class UNavMeshRenderingComponent*                  RenderingComp;                                            // 0x030C(0x0004) (ExportObject, Component, EditInline)
	class USpriteComponent*                            BrokenSprite;                                             // 0x0310(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	TArray<class APylon*>                              ImposterPylons;                                           // 0x0314(0x000C) (Edit, NeedCtorLink)
	TArray<class AActor*>                              OnBuild_DisableCollisionForThese;                         // 0x0320(0x000C) (Edit, NeedCtorLink)
	TArray<class AActor*>                              OnBuild_EnableCollisionForThese;                          // 0x032C(0x000C) (Edit, NeedCtorLink)
	float                                              MaxPolyHeight_Optional;                                   // 0x0338(0x0004) (Edit)
	unsigned char                                      NavMeshGenerator;                                         // 0x033C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x033D(0x0003) MISSED OFFSET
	TArray<struct FKAggregateGeom>                     VoxelFilterBounds;                                        // 0x0340(0x000C) (Transient, NeedCtorLink)
	TArray<struct FMatrix>                             VoxelFilterTM;                                            // 0x034C(0x000C) (Transient, NeedCtorLink)
	int                                                DebugEdgeCount;                                           // 0x0358(0x0004) (Edit)
	struct FVector                                     DebugPathExtent;                                          // 0x035C(0x000C) (Transient)
	struct FVector                                     DebugPathStartLocation;                                   // 0x0368(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Pylon");
		return ptr;
	}


	bool CanReachPylon(class APylon* DestPylon, class AController* C);
	void OnToggle(class USeqAct_Toggle* Action);
	bool IsEnabled();
	void SetEnabled(bool bEnabled);
	void PostBeginPlay();
	void NotifyPathChanged();
	void VerifyTopLevelConnections();
	struct FVector GetTestPathExtent();
	void FlushDynamicEdges();
	void UpdateMeshForPreExistingNavMeshObstacles();
	void OnPylonStatusChange();
};


// Class Engine.CoverLink
// 0x0089 (0x0335 - 0x02AC)
class ACoverLink : public ANavigationPoint
{
public:
	unsigned long                                      GLOBAL_bUseSlotMarkers : 1;                               // 0x02AC(0x0004) (Config, GlobalConfig)
	unsigned long                                      bDisabled : 1;                                            // 0x02AC(0x0004) (Edit)
	unsigned long                                      bClaimAllSlots : 1;                                       // 0x02AC(0x0004) (Edit)
	unsigned long                                      bAutoSort : 1;                                            // 0x02AC(0x0004) (Edit)
	unsigned long                                      bAutoAdjust : 1;                                          // 0x02AC(0x0004) (Edit)
	unsigned long                                      bCircular : 1;                                            // 0x02AC(0x0004) (Edit)
	unsigned long                                      bLooped : 1;                                              // 0x02AC(0x0004) (Edit)
	unsigned long                                      bPlayerOnly : 1;                                          // 0x02AC(0x0004) (Edit)
	unsigned long                                      bDynamicCover : 1;                                        // 0x02AC(0x0004)
	unsigned long                                      bFractureOnTouch : 1;                                     // 0x02AC(0x0004) (Edit)
	unsigned long                                      bDebug_FireLinks : 1;                                     // 0x02AC(0x0004) (Edit)
	unsigned long                                      bDebug_ExposedLinks : 1;                                  // 0x02AC(0x0004) (Edit)
	unsigned long                                      bDebug_CoverGen : 1;                                      // 0x02AC(0x0004) (Edit)
	unsigned long                                      bDoAutoSlotDensityFixup : 1;                              // 0x02AC(0x0004) (Edit)
	float                                              LeanTraceDist;                                            // 0x02B0(0x0004)
	TArray<struct FCoverSlot>                          Slots;                                                    // 0x02B4(0x000C) (Edit, NeedCtorLink, EditInline)
	TArray<struct FDynamicLinkInfo>                    DynamicLinkInfos;                                         // 0x02C0(0x000C) (NeedCtorLink)
	TArray<class APawn*>                               Claims;                                                   // 0x02CC(0x000C) (NeedCtorLink)
	float                                              InvalidateDistance;                                       // 0x02D8(0x0004) (Edit)
	float                                              MaxFireLinkDist;                                          // 0x02DC(0x0004) (Edit)
	struct FVector                                     CircularOrigin;                                           // 0x02E0(0x000C) (Const)
	float                                              CircularRadius;                                           // 0x02EC(0x0004) (Const)
	float                                              AlignDist;                                                // 0x02F0(0x0004) (Const)
	float                                              AutoCoverSlotInterval;                                    // 0x02F4(0x0004) (Const)
	float                                              StandHeight;                                              // 0x02F8(0x0004) (Const)
	float                                              MidHeight;                                                // 0x02FC(0x0004) (Const)
	struct FVector                                     StandingLeanOffset;                                       // 0x0300(0x000C) (Const)
	struct FVector                                     CrouchLeanOffset;                                         // 0x030C(0x000C) (Const)
	struct FVector                                     PopupOffset;                                              // 0x0318(0x000C) (Const)
	float                                              SlipDist;                                                 // 0x0324(0x0004) (Const)
	float                                              TurnDist;                                                 // 0x0328(0x0004) (Const)
	float                                              DangerScale;                                              // 0x032C(0x0004) (Edit)
	class ACoverLink*                                  NextCoverLink;                                            // 0x0330(0x0004) (Const)
	TEnumAsByte<ECoverLocationDescription>             LocationDescription;                                      // 0x0334(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverLink");
		return ptr;
	}


	struct FString GetDebugAbbrev();
	TEnumAsByte<ECoverLocationDescription> GetLocationDescription(int SlotIdx);
	struct FString GetDebugString(int SlotIdx);
	int AddCoverSlot(const struct FVector& SlotLocation, const struct FRotator& SlotRotation, int SlotIdx, bool bForceSlotUpdate, class AScout* Scout);
	void BreakFracturedMeshes(const struct FVector& Origin, float Radius, float RBStrength, class UClass* DamageType);
	bool GetSwatTurnTarget(int SlotIdx, int Direction, struct FCoverInfo* out_Info);
	void ShutDown();
	void ApplyCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct ANavigationPoint_FCheckpointRecord* Record);
	void OnToggle(class USeqAct_Toggle* inAction);
	bool IsEnabled();
	bool AutoAdjustSlot(int SlotIdx, bool bOnlyCheckLeans);
	void OnModifyCover(class USeqAct_ModifyCover* Action);
	void SetSlotPlayerOnly(int SlotIdx, bool bInPlayerOnly);
	void NotifySlotOwnerCoverDisabled(int SlotIdx, bool bAIOnly);
	void SetSlotEnabled(int SlotIdx, bool bEnable);
	void SetDisabled(bool bNewDisabled);
	void GetSlotActions(int SlotIdx, TArray<TEnumAsByte<ECoverAction>>* Actions);
	bool HasFireLinkTo(int SlotIdx, const struct FCoverInfo& ChkCover, bool bAllowFallbackLinks);
	bool GetFireLinkTo(int SlotIdx, const struct FCoverInfo& ChkCover, TEnumAsByte<ECoverAction> ChkAction, TEnumAsByte<ECoverType> ChkType, int* out_FireLinkIdx, TArray<int>* out_Items);
	bool AllowLeftTransition(int SlotIdx);
	bool AllowRightTransition(int SlotIdx);
	int GetSlotIdxToRight(int SlotIdx, int Cnt);
	int GetSlotIdxToLeft(int SlotIdx, int Cnt);
	bool IsRightEdgeSlot(int SlotIdx, bool bIgnoreLeans);
	bool IsLeftEdgeSlot(int SlotIdx, bool bIgnoreLeans);
	bool IsEdgeSlot(int SlotIdx, bool bIgnoreLeans);
	bool FindSlots(const struct FVector& CheckLocation, float MaxDistance, int* LeftSlotIdx, int* RightSlotIdx);
	bool IsStationarySlot(int SlotIdx);
	bool IsValidClaimBetween(class APawn* ChkClaim, int StartSlotIdx, int EndSlotIdx, bool bSkipTeamCheck, bool bSkipOverlapCheck);
	bool IsValidClaim(class APawn* ChkClaim, int SlotIdx, bool bSkipTeamCheck, bool bSkipOverlapCheck);
	bool UnClaim(class APawn* OldClaim, int SlotIdx, bool bUnclaimAll);
	bool Claim(class APawn* NewClaim, int SlotIdx);
	void SetInvalidUntil(int SlotIdx, float TimeToBecomeValid);
	bool IsExposedTo(int SlotIdx, const struct FCoverInfo& ChkSlot, float* out_ExposedScale);
	struct FVector GetSlotViewPoint(int SlotIdx, TEnumAsByte<ECoverType> Type, TEnumAsByte<ECoverAction> Action);
	struct FRotator GetSlotRotation(int SlotIdx, bool bForceUseOffset);
	struct FVector GetSlotLocation(int SlotIdx, bool bForceUseOffset);
	void STATIC_UnPackFireLinkInteractionInfo(unsigned char PackedByte, TEnumAsByte<ECoverType>* SrcType, TEnumAsByte<ECoverAction>* SrcAction, TEnumAsByte<ECoverType>* DestType, TEnumAsByte<ECoverAction>* DestAction);
	unsigned char STATIC_PackFireLinkInteractionInfo(TEnumAsByte<ECoverType> SrcType, TEnumAsByte<ECoverAction> SrcAction, TEnumAsByte<ECoverType> DestType, TEnumAsByte<ECoverAction> DestAction);
	bool GetFireLinkTargetCoverInfo(int SlotIdx, int FireLinkIdx, TEnumAsByte<EFireLinkID> ArrayID, struct FCoverInfo* out_Info);
};


// Class Engine.DoorMarker
// 0x0010 (0x02BC - 0x02AC)
class ADoorMarker : public ANavigationPoint
{
public:
	class AInterpActor*                                MyDoor;                                                   // 0x02AC(0x0004) (Edit)
	TEnumAsByte<EDoorType>                             DoorType;                                                 // 0x02B0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02B1(0x0003) MISSED OFFSET
	class AActor*                                      DoorTrigger;                                              // 0x02B4(0x0004) (Edit)
	unsigned long                                      bWaitUntilCompletelyOpened : 1;                           // 0x02B8(0x0004) (Edit)
	unsigned long                                      bInitiallyClosed : 1;                                     // 0x02B8(0x0004) (Edit)
	unsigned long                                      bBlockedWhenClosed : 1;                                   // 0x02B8(0x0004) (Edit)
	unsigned long                                      bDoorOpen : 1;                                            // 0x02B8(0x0004)
	unsigned long                                      bTempDisabledCollision : 1;                               // 0x02B8(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DoorMarker");
		return ptr;
	}


	bool SuggestMovePreparation(class APawn* Other);
	bool ProceedWithMove(class APawn* Other);
	class AActor* SpecialHandling(class APawn* Other);
	void MoverClosed();
	void MoverOpened();
	void PostBeginPlay();
};


// Class Engine.DynamicAnchor
// 0x0004 (0x02B0 - 0x02AC)
class ADynamicAnchor : public ANavigationPoint
{
public:
	class AController*                                 CurrentUser;                                              // 0x02AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicAnchor");
		return ptr;
	}

};


// Class Engine.Ladder
// 0x0008 (0x02B4 - 0x02AC)
class ALadder : public ANavigationPoint
{
public:
	class ALadderVolume*                               MyLadder;                                                 // 0x02AC(0x0004)
	class ALadder*                                     LadderList;                                               // 0x02B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Ladder");
		return ptr;
	}


	bool SuggestMovePreparation(class APawn* Other);
};


// Class Engine.AutoLadder
// 0x0000 (0x02B4 - 0x02B4)
class AAutoLadder : public ALadder
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AutoLadder");
		return ptr;
	}

};


// Class Engine.LiftCenter
// 0x0020 (0x02CC - 0x02AC)
class ALiftCenter : public ANavigationPoint
{
public:
	class AInterpActor*                                MyLift;                                                   // 0x02AC(0x0004)
	float                                              MaxDist2D;                                                // 0x02B0(0x0004)
	struct FVector                                     LiftOffset;                                               // 0x02B4(0x000C)
	unsigned long                                      bJumpLift : 1;                                            // 0x02C0(0x0004)
	float                                              CollisionHeight;                                          // 0x02C4(0x0004)
	class ATrigger*                                    LiftTrigger;                                              // 0x02C8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LiftCenter");
		return ptr;
	}


	bool ProceedWithMove(class APawn* Other);
	bool SuggestMovePreparation(class APawn* Other);
	class AActor* SpecialHandling(class APawn* Other);
	void PostBeginPlay();
};


// Class Engine.LiftExit
// 0x0008 (0x02B4 - 0x02AC)
class ALiftExit : public ANavigationPoint
{
public:
	class ALiftCenter*                                 MyLiftCenter;                                             // 0x02AC(0x0004) (Edit)
	unsigned long                                      bExitOnly : 1;                                            // 0x02B0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LiftExit");
		return ptr;
	}


	bool SuggestMovePreparation(class APawn* Other);
	void WaitForLift(class APawn* Other);
	bool CanBeReachedFromLiftBy(class APawn* Other);
};


// Class Engine.PathNode
// 0x0000 (0x02AC - 0x02AC)
class APathNode : public ANavigationPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathNode");
		return ptr;
	}


	struct FString GetDebugAbbrev();
};


// Class Engine.VolumePathNode
// 0x0008 (0x02B4 - 0x02AC)
class AVolumePathNode : public APathNode
{
public:
	float                                              StartingRadius;                                           // 0x02AC(0x0004) (Edit)
	float                                              StartingHeight;                                           // 0x02B0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VolumePathNode");
		return ptr;
	}

};


// Class Engine.PickupFactory
// 0x001C (0x02C8 - 0x02AC)
class APickupFactory : public ANavigationPoint
{
public:
	unsigned long                                      bOnlyReplicateHidden : 1;                                 // 0x02AC(0x0004)
	unsigned long                                      bPickupHidden : 1;                                        // 0x02AC(0x0004) (Net)
	unsigned long                                      bPredictRespawns : 1;                                     // 0x02AC(0x0004)
	unsigned long                                      bIsSuperItem : 1;                                         // 0x02AC(0x0004)
	unsigned long                                      bRespawnPaused : 1;                                       // 0x02AC(0x0004)
	class UClass*                                      InventoryType;                                            // 0x02B0(0x0004) (Net)
	float                                              RespawnEffectTime;                                        // 0x02B4(0x0004)
	float                                              MaxDesireability;                                         // 0x02B8(0x0004)
	class UPrimitiveComponent*                         PickupMesh;                                               // 0x02BC(0x0004) (ExportObject, Component, EditInline)
	class APickupFactory*                              ReplacementFactory;                                       // 0x02C0(0x0004)
	class APickupFactory*                              OriginalFactory;                                          // 0x02C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PickupFactory");
		return ptr;
	}


	bool DelayRespawn();
	void Destroyed();
	void SetPickupVisible();
	void SetPickupHidden();
	void RespawnEffect();
	float GetRespawnTime();
	void RecheckValidTouch();
	void PickedUpBy(class APawn* P);
	void GiveTo(class APawn* P);
	bool ReadyToPickup(float MaxWait);
	void SpawnCopyFor(class APawn* Recipient);
	float DetourWeight(class APawn* Other, float PathWeight);
	void StartSleeping();
	void SetRespawn();
	bool CheckForErrors();
	void Reset();
	void SetPickupMesh();
	void ShutDown();
	void SetInitialState();
	void InitializePickup();
	void PreBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class Engine.PlayerStart
// 0x0010 (0x02BC - 0x02AC)
class APlayerStart : public ANavigationPoint
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x02AC(0x0004) (Edit)
	unsigned long                                      bPrimaryStart : 1;                                        // 0x02AC(0x0004) (Edit)
	unsigned long                                      bEnabledForCurrentGameMode : 1;                           // 0x02AC(0x0004)
	unsigned long                                      bBestStart : 1;                                           // 0x02AC(0x0004)
	unsigned char                                      TeamIndex;                                                // 0x02B0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02B1(0x0003) MISSED OFFSET
	int                                                Score;                                                    // 0x02B4(0x0004)
	int                                                SelectionIndex;                                           // 0x02B8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerStart");
		return ptr;
	}


	void PostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir);
	void OnToggle(class USeqAct_Toggle* Action);
};


// Class Engine.PortalMarker
// 0x0004 (0x02B0 - 0x02AC)
class APortalMarker : public ANavigationPoint
{
public:
	class APortalTeleporter*                           MyPortal;                                                 // 0x02AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PortalMarker");
		return ptr;
	}


	bool CanTeleport(class AActor* A);
};


// Class Engine.AISwitchablePylon
// 0x0004 (0x0378 - 0x0374)
class AAISwitchablePylon : public APylon
{
public:
	unsigned long                                      bOpen : 1;                                                // 0x0374(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AISwitchablePylon");
		return ptr;
	}


	bool IsEnabled();
	void SetEnabled(bool bEnabled);
	void PostBeginPlay();
};


// Class Engine.DynamicPylon
// 0x0004 (0x0378 - 0x0374)
class ADynamicPylon : public APylon
{
public:
	unsigned long                                      bMoving : 1;                                              // 0x0374(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicPylon");
		return ptr;
	}


	void StoppedMoving();
	void StartedMoving();
	void FlushDynamicEdges();
	void RebuildDynamicEdges();
	void PostBeginPlay();
};


// Class Engine.Teleporter
// 0x0028 (0x02D4 - 0x02AC)
class ATeleporter : public ANavigationPoint
{
public:
	struct FString                                     URL;                                                      // 0x02AC(0x000C) (Edit, Net, NeedCtorLink)
	struct FName                                       ProductRequired;                                          // 0x02B8(0x0008) (Edit)
	unsigned long                                      bChangesVelocity : 1;                                     // 0x02C0(0x0004) (Edit, Net)
	unsigned long                                      bChangesYaw : 1;                                          // 0x02C0(0x0004) (Edit, Net)
	unsigned long                                      bReversesX : 1;                                           // 0x02C0(0x0004) (Edit, Net)
	unsigned long                                      bReversesY : 1;                                           // 0x02C0(0x0004) (Edit, Net)
	unsigned long                                      bReversesZ : 1;                                           // 0x02C0(0x0004) (Edit, Net)
	unsigned long                                      bEnabled : 1;                                             // 0x02C0(0x0004) (Edit, Net)
	unsigned long                                      bCanTeleportVehicles : 1;                                 // 0x02C0(0x0004) (Edit)
	struct FVector                                     TargetVelocity;                                           // 0x02C4(0x000C) (Edit, Net)
	float                                              LastFired;                                                // 0x02D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Teleporter");
		return ptr;
	}


	class AActor* SpecialHandling(class APawn* Other);
	void PostTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool Accept(class AActor* Incoming, class AActor* Source);
	void PostBeginPlay();
	bool CanTeleport(class AActor* A);
};


// Class Engine.Note
// 0x000C (0x01E0 - 0x01D4)
class ANote : public AActor
{
public:
	struct FString                                     Text;                                                     // 0x01D4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Note");
		return ptr;
	}

};


// Class Engine.Projectile
// 0x003C (0x0210 - 0x01D4)
class AProjectile : public AActor
{
public:
	float                                              Speed;                                                    // 0x01D4(0x0004) (Edit)
	float                                              MaxSpeed;                                                 // 0x01D8(0x0004) (Edit)
	unsigned long                                      bSwitchToZeroCollision : 1;                               // 0x01DC(0x0004)
	unsigned long                                      bBlockedByInstigator : 1;                                 // 0x01DC(0x0004)
	unsigned long                                      bBegunPlay : 1;                                           // 0x01DC(0x0004)
	unsigned long                                      bRotationFollowsVelocity : 1;                             // 0x01DC(0x0004)
	unsigned long                                      bIgnoreFoliageTouch : 1;                                  // 0x01DC(0x0004)
	class AActor*                                      ZeroCollider;                                             // 0x01E0(0x0004)
	class UPrimitiveComponent*                         ZeroColliderComponent;                                    // 0x01E4(0x0004) (ExportObject, Component, EditInline)
	float                                              Damage;                                                   // 0x01E8(0x0004) (Edit)
	float                                              DamageRadius;                                             // 0x01EC(0x0004) (Edit)
	float                                              MomentumTransfer;                                         // 0x01F0(0x0004) (Edit)
	class UClass*                                      MyDamageType;                                             // 0x01F4(0x0004)
	class USoundCue*                                   SpawnSound;                                               // 0x01F8(0x0004) (Edit)
	class USoundCue*                                   ImpactSound;                                              // 0x01FC(0x0004) (Edit)
	class AController*                                 InstigatorController;                                     // 0x0200(0x0004)
	class AActor*                                      ImpactedActor;                                            // 0x0204(0x0004)
	float                                              NetCullDistanceSquared;                                   // 0x0208(0x0004)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x020C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Projectile");
		return ptr;
	}


	void ApplyFluidSurfaceImpact(class AFluidSurfaceActor* Fluid, const struct FVector& HitLocation);
	float STATIC_GetRange();
	float STATIC_StaticGetTimeToLocation(const struct FVector& TargetLoc, const struct FVector& StartLoc, class AController* RequestedBy);
	float GetTimeToLocation(const struct FVector& TargetLoc);
	void FellOutOfWorld(class UClass* dmgType);
	bool IsStationary();
	void RandSpin(float spinRate);
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void EncroachedBy(class AActor* Other);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UPrimitiveComponent* WallComp);
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool HurtRadius(float DamageAmount, float InDamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, class AActor* IgnoredActor, class AController* InstigatedByController, bool bDoFullDamage);
	bool ProjectileHurtRadius(const struct FVector& HurtOrigin, const struct FVector& HitNormal);
	void Reset();
	bool CanSplash();
	unsigned char GetTeamNum();
	void Init(const struct FVector& Direction);
	void PostBeginPlay();
	void PreBeginPlay();
	bool EncroachingOn(class AActor* Other);
};


// Class Engine.RigidBodyBase
// 0x0000 (0x01D4 - 0x01D4)
class ARigidBodyBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RigidBodyBase");
		return ptr;
	}

};


// Class Engine.SceneCaptureActor
// 0x0004 (0x01D8 - 0x01D4)
class ASceneCaptureActor : public AActor
{
public:
	class USceneCaptureComponent*                      SceneCapture;                                             // 0x01D4(0x0004) (Edit, Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureActor");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class Engine.SceneCapture2DActor
// 0x0004 (0x01DC - 0x01D8)
class ASceneCapture2DActor : public ASceneCaptureActor
{
public:
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x01D8(0x0004) (Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapture2DActor");
		return ptr;
	}

};


// Class Engine.SceneCaptureCubeMapActor
// 0x0008 (0x01E0 - 0x01D8)
class ASceneCaptureCubeMapActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                               // 0x01D8(0x0004) (Const, ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   CubeMaterialInst;                                         // 0x01DC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureCubeMapActor");
		return ptr;
	}

};


// Class Engine.SceneCaptureReflectActor
// 0x0008 (0x01E0 - 0x01D8)
class ASceneCaptureReflectActor : public ASceneCaptureActor
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                               // 0x01D8(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   ReflectMaterialInst;                                      // 0x01DC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureReflectActor");
		return ptr;
	}

};


// Class Engine.SceneCapturePortalActor
// 0x0000 (0x01E0 - 0x01E0)
class ASceneCapturePortalActor : public ASceneCaptureReflectActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapturePortalActor");
		return ptr;
	}

};


// Class Engine.PortalTeleporter
// 0x0014 (0x01F4 - 0x01E0)
class APortalTeleporter : public ASceneCapturePortalActor
{
public:
	class APortalTeleporter*                           SisterPortal;                                             // 0x01E0(0x0004) (Edit)
	int                                                TextureResolutionX;                                       // 0x01E4(0x0004) (Edit)
	int                                                TextureResolutionY;                                       // 0x01E8(0x0004) (Edit)
	class APortalMarker*                               MyMarker;                                                 // 0x01EC(0x0004)
	unsigned long                                      bMovablePortal : 1;                                       // 0x01F0(0x0004) (Edit)
	unsigned long                                      bAlwaysTeleportNonPawns : 1;                              // 0x01F0(0x0004)
	unsigned long                                      bCanTeleportVehicles : 1;                                 // 0x01F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PortalTeleporter");
		return ptr;
	}


	bool StopsProjectile(class AProjectile* P);
	class UTextureRenderTarget2D* CreatePortalTexture();
	struct FVector TransformHitLocation(const struct FVector& HitLocation);
	struct FVector TransformVectorDir(const struct FVector& V);
	bool TransformActor(class AActor* A);
};


// Class Engine.StaticMeshActorBase
// 0x0000 (0x01D4 - 0x01D4)
class AStaticMeshActorBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshActorBase");
		return ptr;
	}

};


// Class Engine.StaticMeshActor
// 0x0009 (0x01DD - 0x01D4)
class AStaticMeshActor : public AStaticMeshActorBase
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bDisableAutoBaseOnProcBuilding : 1;                       // 0x01D8(0x0004) (Edit)
	unsigned long                                      bProxy : 1;                                               // 0x01D8(0x0004)
	unsigned long                                      bHiddenByProxy : 1;                                       // 0x01D8(0x0004)
	unsigned long                                      OldCastShadow : 1;                                        // 0x01D8(0x0004)
	unsigned long                                      OldAcceptsLights : 1;                                     // 0x01D8(0x0004)
	TEnumAsByte<ECollisionType>                        OldCollisionType;                                         // 0x01DC(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshActor");
		return ptr;
	}


	void PreBeginPlay();
};


// Class Engine.StaticMeshCollectionActor
// 0x0010 (0x01E4 - 0x01D4)
class AStaticMeshCollectionActor : public AStaticMeshActorBase
{
public:
	TArray<class UStaticMeshComponent*>                StaticMeshComponents;                                     // 0x01D4(0x000C) (Const, ExportObject, Component, NeedCtorLink, EditInline)
	int                                                MaxStaticMeshComponents;                                  // 0x01E0(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshCollectionActor");
		return ptr;
	}

};


// Class Engine.StaticMeshActorBasedOnExtremeContent
// 0x001C (0x01F0 - 0x01D4)
class AStaticMeshActorBasedOnExtremeContent : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	TArray<struct FSMMaterialSetterDatum>              ExtremeContent;                                           // 0x01D8(0x000C) (Edit, NeedCtorLink)
	TArray<struct FSMMaterialSetterDatum>              NonExtremeContent;                                        // 0x01E4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshActorBasedOnExtremeContent");
		return ptr;
	}


	void SetMaterialBasedOnExtremeContent();
	void PostBeginPlay();
};


// Class Engine.Trigger
// 0x000C (0x01E0 - 0x01D4)
class ATrigger : public AActor
{
public:
	class UCylinderComponent*                          CylinderComponent;                                        // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bRecentlyTriggered : 1;                                   // 0x01D8(0x0004)
	float                                              AITriggerDelay;                                           // 0x01DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Trigger");
		return ptr;
	}


	void ApplyCheckpointRecord(struct ATrigger_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct ATrigger_FCheckpointRecord* Record);
	bool ShouldSaveForCheckpoint();
	bool StopsProjectile(class AProjectile* P);
	void UnTrigger();
	void NotifyTriggered();
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PostBeginPlay();
};


// Class Engine.Trigger_PawnsOnly
// 0x0000 (0x01E0 - 0x01E0)
class ATrigger_PawnsOnly : public ATrigger
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Trigger_PawnsOnly");
		return ptr;
	}

};


// Class Engine.EngineTypes
// 0x0000 (0x003C - 0x003C)
class UEngineTypes : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EngineTypes");
		return ptr;
	}

};


// Class Engine.AudioComponent
// 0x01D3 (0x0228 - 0x0055)
class UAudioComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	class USoundCue*                                   SoundCue;                                                 // 0x0058(0x0004) (Edit)
	class USoundNode*                                  CueFirstNode;                                             // 0x005C(0x0004) (Const, Native)
	TArray<struct FAudioComponentParam>                InstanceParameters;                                       // 0x0060(0x000C) (Edit, NeedCtorLink, EditInline)
	unsigned long                                      bUseOwnerLocation : 1;                                    // 0x006C(0x0004)
	unsigned long                                      bAutoPlay : 1;                                            // 0x006C(0x0004)
	unsigned long                                      bAutoDestroy : 1;                                         // 0x006C(0x0004)
	unsigned long                                      bStopWhenOwnerDestroyed : 1;                              // 0x006C(0x0004)
	unsigned long                                      bShouldRemainActiveIfDropped : 1;                         // 0x006C(0x0004)
	unsigned long                                      bWasOccluded : 1;                                         // 0x006C(0x0004)
	unsigned long                                      bSuppressSubtitles : 1;                                   // 0x006C(0x0004) (Transient)
	unsigned long                                      bWasPlaying : 1;                                          // 0x006C(0x0004) (Transient)
	unsigned long                                      bAllowSpatialization : 1;                                 // 0x006C(0x0004)
	unsigned long                                      bFinished : 1;                                            // 0x006C(0x0004) (Transient)
	unsigned long                                      bApplyRadioFilter : 1;                                    // 0x006C(0x0004) (Transient)
	unsigned long                                      bRadioFilterSelected : 1;                                 // 0x006C(0x0004) (Transient)
	unsigned long                                      bPreviewComponent : 1;                                    // 0x006C(0x0004) (Transient)
	unsigned long                                      bIgnoreForFlushing : 1;                                   // 0x006C(0x0004) (Transient)
	float                                              StereoBleed;                                              // 0x0070(0x0004) (Transient)
	float                                              LFEBleed;                                                 // 0x0074(0x0004) (Transient)
	unsigned long                                      bEQFilterApplied : 1;                                     // 0x0078(0x0004) (Transient)
	unsigned long                                      bAlwaysPlay : 1;                                          // 0x0078(0x0004) (Transient)
	unsigned long                                      bIsUISound : 1;                                           // 0x0078(0x0004) (Transient)
	unsigned long                                      bIsMusic : 1;                                             // 0x0078(0x0004) (Transient)
	unsigned long                                      bReverb : 1;                                              // 0x0078(0x0004) (Transient)
	unsigned long                                      bCenterChannelOnly : 1;                                   // 0x0078(0x0004) (Transient)
	TArray<struct FPointer>                            WaveInstances;                                            // 0x007C(0x000C) (Const, Native, DuplicateTransient)
	TArray<unsigned char>                              SoundNodeData;                                            // 0x0088(0x000C) (Const, Native, DuplicateTransient)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x0094(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioComponent.SoundNodeOffsetMap
	struct FMultiMap_Mirror                            SoundNodeResetWaveMap;                                    // 0x00D0(0x003C) (Const, Native, DuplicateTransient)
	struct FPointer                                    Listener;                                                 // 0x010C(0x0004) (Const, Native, DuplicateTransient)
	float                                              PlaybackTime;                                             // 0x0110(0x0004) (Const, Native, DuplicateTransient)
	class APortalVolume*                               PortalVolume;                                             // 0x0114(0x0004) (Const, Native, DuplicateTransient)
	struct FVector                                     Location;                                                 // 0x0118(0x000C) (Native, DuplicateTransient)
	struct FVector                                     ComponentLocation;                                        // 0x0124(0x000C) (Const, Native, DuplicateTransient)
	class AActor*                                      LastOwner;                                                // 0x0130(0x0004) (Const, Transient)
	float                                              SubtitlePriority;                                         // 0x0134(0x0004) (Native)
	float                                              FadeInStartTime;                                          // 0x0138(0x0004)
	float                                              FadeInStopTime;                                           // 0x013C(0x0004)
	float                                              FadeInTargetVolume;                                       // 0x0140(0x0004)
	float                                              FadeOutStartTime;                                         // 0x0144(0x0004)
	float                                              FadeOutStopTime;                                          // 0x0148(0x0004)
	float                                              FadeOutTargetVolume;                                      // 0x014C(0x0004)
	float                                              AdjustVolumeStartTime;                                    // 0x0150(0x0004)
	float                                              AdjustVolumeStopTime;                                     // 0x0154(0x0004)
	float                                              AdjustVolumeTargetVolume;                                 // 0x0158(0x0004)
	float                                              CurrAdjustVolumeTargetVolume;                             // 0x015C(0x0004)
	class USoundNode*                                  CurrentNotifyBufferFinishedHook;                          // 0x0160(0x0004) (Const, Native)
	struct FVector                                     CurrentLocation;                                          // 0x0164(0x000C) (Const, Native)
	struct FVector                                     CurrentVelocity;                                          // 0x0170(0x000C) (Const, Native)
	float                                              CurrentVolume;                                            // 0x017C(0x0004) (Const, Native)
	float                                              CurrentPitch;                                             // 0x0180(0x0004) (Const, Native)
	float                                              CurrentHighFrequencyGain;                                 // 0x0184(0x0004) (Const, Native)
	int                                                CurrentUseSpatialization;                                 // 0x0188(0x0004) (Const, Native)
	int                                                CurrentNotifyOnLoop;                                      // 0x018C(0x0004) (Const, Native)
	float                                              OmniRadius;                                               // 0x0190(0x0004) (Const, Native)
	float                                              CurrentVolumeMultiplier;                                  // 0x0194(0x0004) (Const, Native)
	float                                              CurrentPitchMultiplier;                                   // 0x0198(0x0004) (Const, Native)
	float                                              CurrentHighFrequencyGainMultiplier;                       // 0x019C(0x0004) (Const, Native)
	float                                              CurrentVoiceCenterChannelVolume;                          // 0x01A0(0x0004) (Const, Native)
	float                                              CurrentRadioFilterVolume;                                 // 0x01A4(0x0004) (Const, Native)
	float                                              CurrentRadioFilterVolumeThreshold;                        // 0x01A8(0x0004) (Const, Native)
	struct FDouble                                     LastUpdateTime;                                           // 0x01AC(0x0008) (Const, Native)
	float                                              SourceInteriorVolume;                                     // 0x01B4(0x0004) (Const, Native)
	float                                              SourceInteriorLPF;                                        // 0x01B8(0x0004) (Const, Native)
	float                                              CurrentInteriorVolume;                                    // 0x01BC(0x0004) (Const, Native)
	float                                              CurrentInteriorLPF;                                       // 0x01C0(0x0004) (Const, Native)
	struct FVector                                     LastLocation;                                             // 0x01C4(0x000C) (Const, Transient)
	struct FInteriorSettings                           LastInteriorSettings;                                     // 0x01D0(0x0024) (Const, Native)
	int                                                LastReverbVolumeIndex;                                    // 0x01F4(0x0004) (Const, Native)
	float                                              VolumeMultiplier;                                         // 0x01F8(0x0004) (Edit)
	float                                              PitchMultiplier;                                          // 0x01FC(0x0004) (Edit)
	float                                              HighFrequencyGainMultiplier;                              // 0x0200(0x0004) (Edit)
	float                                              OcclusionCheckInterval;                                   // 0x0204(0x0004)
	float                                              LastOcclusionCheckTime;                                   // 0x0208(0x0004) (Transient)
	class UDrawSoundRadiusComponent*                   PreviewSoundRadius;                                       // 0x020C(0x0004) (Const, ExportObject, Component, EditInline)
	struct FScriptDelegate                             __OnAudioFinished__Delegate;                              // 0x0210(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnQueueSubtitles__Delegate;                             // 0x021C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AudioComponent");
		return ptr;
	}


	void OcclusionChanged(bool bNowOccluded);
	void OnQueueSubtitles(TArray<struct FSubtitleCue> Subtitles, float CueDuration);
	void OnAudioFinished(class UAudioComponent* AC);
	void ResetToDefaults();
	void SetWaveParameter(const struct FName& InName, class USoundNodeWave* InWave);
	void SetFloatParameter(const struct FName& InName, float InFloat);
	void AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel);
	void FadeOut(float FadeOutDuration, float FadeVolumeLevel);
	void FadeIn(float FadeInDuration, float FadeVolumeLevel);
	bool IsFadingOut();
	bool IsFadingIn();
	bool IsPlaying();
	void Stop();
	void Play();
};


// Class Engine.SplineAudioComponent
// 0x0014 (0x023C - 0x0228)
class USplineAudioComponent : public UAudioComponent
{
public:
	float                                              ListenerScopeRadius;                                      // 0x0228(0x0004) (Edit)
	int                                                ClosestPointOnSplineIndex;                                // 0x022C(0x0004)
	TArray<struct FInterpPointOnSpline>                Points;                                                   // 0x0230(0x000C) (AlwaysInit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineAudioComponent");
		return ptr;
	}

};


// Class Engine.MultiCueSplineAudioComponent
// 0x0010 (0x024C - 0x023C)
class UMultiCueSplineAudioComponent : public USplineAudioComponent
{
public:
	TArray<struct FMultiCueSplineSoundSlot>            SoundSlots;                                               // 0x023C(0x000C) (Edit, AlwaysInit, NeedCtorLink)
	int                                                CurrentSlotIndex;                                         // 0x0248(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MultiCueSplineAudioComponent");
		return ptr;
	}

};


// Class Engine.SimpleSplineAudioComponent
// 0x0030 (0x026C - 0x023C)
class USimpleSplineAudioComponent : public USplineAudioComponent
{
public:
	unsigned long                                      bAttenuateWithLPF : 1;                                    // 0x023C(0x0004) (Edit)
	float                                              LPFRadiusMin;                                             // 0x0240(0x0004) (Edit)
	float                                              LPFRadiusMax;                                             // 0x0244(0x0004) (Edit)
	float                                              dBAttenuationAtMax;                                       // 0x0248(0x0004) (Edit)
	float                                              FlattenAttenuationRadius;                                 // 0x024C(0x0004) (Edit)
	TEnumAsByte<ESoundDistanceModel>                   DistanceAlgorithm;                                        // 0x0250(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0251(0x0003) MISSED OFFSET
	float                                              RadiusMin;                                                // 0x0254(0x0004) (Edit)
	float                                              RadiusMax;                                                // 0x0258(0x0004) (Edit)
	TArray<struct FSplineSoundSlot>                    SoundSlots;                                               // 0x025C(0x000C) (Edit, AlwaysInit, NeedCtorLink)
	class USoundNode*                                  NotifyBufferFinishedHook;                                 // 0x0268(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SimpleSplineAudioComponent");
		return ptr;
	}

};


// Class Engine.SimpleSplineNonLoopAudioComponent
// 0x0028 (0x0294 - 0x026C)
class USimpleSplineNonLoopAudioComponent : public USimpleSplineAudioComponent
{
public:
	float                                              DelayMin;                                                 // 0x026C(0x0004) (Edit)
	float                                              DelayMax;                                                 // 0x0270(0x0004) (Edit)
	float                                              PitchMin;                                                 // 0x0274(0x0004) (Edit)
	float                                              PitchMax;                                                 // 0x0278(0x0004) (Edit)
	float                                              VolumeMin;                                                // 0x027C(0x0004) (Edit)
	float                                              VolumeMax;                                                // 0x0280(0x0004) (Edit)
	int                                                CurrentSlotIndex;                                         // 0x0284(0x0004)
	float                                              UsedVolumeModulation;                                     // 0x0288(0x0004)
	float                                              UsedPitchModulation;                                      // 0x028C(0x0004)
	float                                              NextSoundTime;                                            // 0x0290(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SimpleSplineNonLoopAudioComponent");
		return ptr;
	}

};


// Class Engine.HeightFogComponent
// 0x002B (0x0080 - 0x0055)
class UHeightFogComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	unsigned long                                      bEnabled : 1;                                             // 0x0058(0x0004) (Edit, Const)
	float                                              Height;                                                   // 0x005C(0x0004) (Const)
	float                                              Density;                                                  // 0x0060(0x0004) (Edit, Const)
	float                                              LightBrightness;                                          // 0x0064(0x0004) (Edit, Const)
	struct FColor                                      LightColor;                                               // 0x0068(0x0004) (Edit, Const)
	float                                              ExtinctionDistance;                                       // 0x006C(0x0004) (Edit, Const)
	float                                              StartDistance;                                            // 0x0070(0x0004) (Edit, Const)
	float                                              LowDensity;                                               // 0x0074(0x0004) (Edit, Const)
	float                                              LowLightBrightness;                                       // 0x0078(0x0004) (Edit, Const)
	float                                              LowStartDistance;                                         // 0x007C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HeightFogComponent");
		return ptr;
	}


	void SetEnabled(bool bSetEnabled);
};


// Class Engine.PrimitiveComponent
// 0x0183 (0x01D8 - 0x0055)
class UPrimitiveComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	int                                                Tag;                                                      // 0x0058(0x0004) (Const, Native, Transient)
	struct FBoxSphereBounds                            Bounds;                                                   // 0x005C(0x001C) (Const, Native, Transient)
	struct FPointer                                    SceneInfo;                                                // 0x0078(0x0004) (Const, Native, Transient)
	int                                                DetachFence;                                              // 0x007C(0x0004) (Const, Native)
	float                                              LocalToWorldDeterminant;                                  // 0x0080(0x0004) (Const, Native, Transient)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0084(0x000C) MISSED OFFSET
	struct FMatrix                                     LocalToWorld;                                             // 0x0090(0x0040) (Const, Native, Transient)
	int                                                MotionBlurInfoIndex;                                      // 0x00D0(0x0004) (Const, Native, Transient)
	TArray<struct FPointer>                            DecalList;                                                // 0x00D4(0x000C) (Const, Native, NoImport)
	TArray<class UDecalComponent*>                     DecalsToReattach;                                         // 0x00E0(0x000C) (Const, ExportObject, Transient, Component, NeedCtorLink, EditInline)
	class UPrimitiveComponent*                         ShadowParent;                                             // 0x00EC(0x0004) (Const, ExportObject, Component, EditInline)
	class UPrimitiveComponent*                         ReplacementPrimitive;                                     // 0x00F0(0x0004) (Edit, ExportObject, Component, EditInline)
	class UFogVolumeDensityComponent*                  FogVolumeComponent;                                       // 0x00F4(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	class ULightComponent*                             OverrideLightComponent;                                   // 0x00F8(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x00FC(0x0004) (Const, ExportObject, Component, EditInline)
	class ULightEnvironmentComponent*                  PreviousLightEnvironment;                                 // 0x0100(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	float                                              MinDrawDistance;                                          // 0x0104(0x0004) (Edit)
	float                                              MassiveLODDistance;                                       // 0x0108(0x0004) (Edit)
	float                                              MaxDrawDistance;                                          // 0x010C(0x0004) (Edit, Const, NoExport)
	float                                              CachedMaxDrawDistance;                                    // 0x0110(0x0004) (Edit, EditConst)
	float                                              MotionBlurInstanceScale;                                  // 0x0114(0x0004) (Edit)
	float                                              CullDistance;                                             // 0x0118(0x0004) (Const, NoExport, Deprecated)
	float                                              CachedCullDistance;                                       // 0x011C(0x0004) (EditConst, Deprecated)
	TEnumAsByte<ESceneDepthPriorityGroup>              DepthPriorityGroup;                                       // 0x0120(0x0001) (Edit, Const)
	TEnumAsByte<ESceneDepthPriorityGroup>              ViewOwnerDepthPriorityGroup;                              // 0x0121(0x0001) (Const)
	TEnumAsByte<EDetailMode>                           DetailMode;                                               // 0x0122(0x0001) (Edit, Const)
	TEnumAsByte<ERBCollisionChannel>                   RBChannel;                                                // 0x0123(0x0001) (Edit, Const)
	unsigned char                                      RBDominanceGroup;                                         // 0x0124(0x0001) (Edit)
	unsigned char                                      PreviewEnvironmentShadowing;                              // 0x0125(0x0001)
	unsigned char                                      UnknownData02[0x2];                                       // 0x0126(0x0002) MISSED OFFSET
	unsigned long                                      bUseViewOwnerDepthPriorityGroup : 1;                      // 0x0128(0x0004) (Const)
	unsigned long                                      bAllowCullDistanceVolume : 1;                             // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      HiddenGame : 1;                                           // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      HiddenEditor : 1;                                         // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bOwnerNoSee : 1;                                          // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bOnlyOwnerSee : 1;                                        // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bIgnoreOwnerHidden : 1;                                   // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bUseAsOccluder : 1;                                       // 0x0128(0x0004)
	unsigned long                                      bAllowApproximateOcclusion : 1;                           // 0x0128(0x0004) (Edit)
	unsigned long                                      bFirstFrameOcclusion : 1;                                 // 0x0128(0x0004)
	unsigned long                                      bIgnoreNearPlaneIntersection : 1;                         // 0x0128(0x0004)
	unsigned long                                      bSelectable : 1;                                          // 0x0128(0x0004)
	unsigned long                                      bForceMipStreaming : 1;                                   // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bAcceptsDecals : 1;                                       // 0x0128(0x0004) (Const, Deprecated)
	unsigned long                                      bAcceptsDecalsDuringGameplay : 1;                         // 0x0128(0x0004) (Const, Deprecated)
	unsigned long                                      bAcceptsStaticDecals : 1;                                 // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bAcceptsDynamicDecals : 1;                                // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bIsRefreshingDecals : 1;                                  // 0x0128(0x0004) (Const, Native, Transient)
	unsigned long                                      bAllowDecalAutomaticReAttach : 1;                         // 0x0128(0x0004) (Transient)
	unsigned long                                      bUsePerInstanceHitProxies : 1;                            // 0x0128(0x0004)
	unsigned long                                      CastShadow : 1;                                           // 0x0128(0x0004) (Edit)
	unsigned long                                      bForceDirectLightMap : 1;                                 // 0x0128(0x0004) (Const)
	unsigned long                                      bCastDynamicShadow : 1;                                   // 0x0128(0x0004) (Edit)
	unsigned long                                      bCastStaticShadow : 1;                                    // 0x0128(0x0004) (Edit)
	unsigned long                                      bSelfShadowOnly : 1;                                      // 0x0128(0x0004) (Edit)
	unsigned long                                      bNoModSelfShadow : 1;                                     // 0x0128(0x0004) (Edit)
	unsigned long                                      bAcceptsDynamicDominantLightShadows : 1;                  // 0x0128(0x0004) (Edit)
	unsigned long                                      bCastHiddenShadow : 1;                                    // 0x0128(0x0004) (Edit)
	unsigned long                                      bCastShadowAsTwoSided : 1;                                // 0x0128(0x0004) (Edit)
	unsigned long                                      bAcceptsLights : 1;                                       // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bAcceptsDynamicLights : 1;                                // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bUseOnePassLightingOnTranslucency : 1;                    // 0x0128(0x0004) (Edit, Const)
	unsigned long                                      bUsePrecomputedShadows : 1;                               // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      bHasExplicitShadowParent : 1;                             // 0x012C(0x0004) (Const, Transient)
	unsigned long                                      bAllowAmbientOcclusion : 1;                               // 0x012C(0x0004) (Deprecated)
	unsigned long                                      CollideActors : 1;                                        // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      AlwaysCheckCollision : 1;                                 // 0x012C(0x0004) (Const)
	unsigned long                                      BlockActors : 1;                                          // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      BlockZeroExtent : 1;                                      // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      BlockNonZeroExtent : 1;                                   // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      CanBlockCamera : 1;                                       // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      BlockRigidBody : 1;                                       // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      bBlockFootPlacement : 1;                                  // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      bBlockWeapons : 1;                                        // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      bBlockOnlyPawns : 1;                                      // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      bDisableAllRigidBody : 1;                                 // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      bSkipRBGeomCreation : 1;                                  // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      bNotifyRigidBodyCollision : 1;                            // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      bFluidDrain : 1;                                          // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      bFluidTwoWay : 1;                                         // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      bIgnoreRadialImpulse : 1;                                 // 0x012C(0x0004) (Edit)
	unsigned long                                      bIgnoreRadialForce : 1;                                   // 0x012C(0x0004) (Edit)
	unsigned long                                      bIgnoreForceField : 1;                                    // 0x012C(0x0004) (Edit)
	unsigned long                                      bUseCompartment : 1;                                      // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      bUseApexScene : 1;                                        // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      AlwaysLoadOnClient : 1;                                   // 0x012C(0x0004) (Const)
	unsigned long                                      AlwaysLoadOnServer : 1;                                   // 0x012C(0x0004) (Const)
	unsigned long                                      bIgnoreHiddenActorsMembership : 1;                        // 0x012C(0x0004) (Edit)
	unsigned long                                      AbsoluteTranslation : 1;                                  // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      AbsoluteRotation : 1;                                     // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      AbsoluteScale : 1;                                        // 0x012C(0x0004) (Edit, Const)
	unsigned long                                      bAllowShadowFade : 1;                                     // 0x012C(0x0004)
	unsigned long                                      bSupportedOnMobile : 1;                                   // 0x012C(0x0004)
	unsigned long                                      bWasSNFiltered : 1;                                       // 0x012C(0x0004) (Const, Native, Transient)
	TArray<int>                                        OctreeNodes;                                              // 0x0130(0x000C) (Const, Native, Transient)
	int                                                TranslucencySortPriority;                                 // 0x013C(0x0004) (Edit)
	int                                                VisibilityId;                                             // 0x0140(0x0004) (DuplicateTransient)
	struct FLightingChannelContainer                   LightingChannels;                                         // 0x0144(0x0004) (Edit, Const)
	struct FRBCollisionChannelContainer                RBCollideWithChannels;                                    // 0x0148(0x0004) (Edit, Const)
	class UPhysicalMaterial*                           PhysMaterialOverride;                                     // 0x014C(0x0004) (Edit, Const)
	class URB_BodyInstance*                            BodyInstance;                                             // 0x0150(0x0004) (Const, Native, DuplicateTransient)
	unsigned char                                      UnknownData03[0xC];                                       // 0x0154(0x000C) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                                      // 0x0160(0x0040) (Const, Native, Transient)
	struct FVector                                     Translation;                                              // 0x01A0(0x000C) (Edit, Const)
	struct FRotator                                    Rotation;                                                 // 0x01AC(0x000C) (Edit, Const)
	float                                              Scale;                                                    // 0x01B8(0x0004) (Edit, Const)
	struct FVector                                     Scale3D;                                                  // 0x01BC(0x000C) (Edit, Const)
	float                                              BoundsScale;                                              // 0x01C8(0x0004) (Edit, Const)
	float                                              LastSubmitTime;                                           // 0x01CC(0x0004) (Const, Transient)
	float                                              LastRenderTime;                                           // 0x01D0(0x0004) (Transient)
	float                                              ScriptRigidBodyCollisionThreshold;                        // 0x01D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrimitiveComponent");
		return ptr;
	}


	TEnumAsByte<EGJKResult> ClosestPointOnComponentToComponent(class UPrimitiveComponent** OtherComponent, struct FVector* PointOnComponentA, struct FVector* PointOnComponentB);
	TEnumAsByte<EGJKResult> ClosestPointOnComponentToPoint(struct FVector* POI, struct FVector* Extent, struct FVector* OutPointA, struct FVector* OutPointB);
	struct FRotator GetRotation();
	struct FVector GetPosition();
	void SetAbsolute(bool NewAbsoluteTranslation, bool NewAbsoluteRotation, bool NewAbsoluteScale);
	void SetScale3D(const struct FVector& NewScale3D);
	void SetScale(float NewScale);
	void SetRotation(const struct FRotator& NewRotation);
	void SetTranslation(const struct FVector& NewTranslation);
	void SetActorCollision(bool NewCollideActors, bool NewBlockActors, bool NewAlwaysCheckCollision);
	void SetTraceBlocking(bool NewBlockZeroExtent, bool NewBlockNonZeroExtent);
	void SetViewOwnerDepthPriorityGroup(bool bNewUseViewOwnerDepthPriorityGroup, TEnumAsByte<ESceneDepthPriorityGroup> NewViewOwnerDepthPriorityGroup);
	void SetDepthPriorityGroup(TEnumAsByte<ESceneDepthPriorityGroup> NewDepthPriorityGroup);
	void SetLightingChannels(const struct FLightingChannelContainer& NewLightingChannels);
	void SetCullDistance(float NewCullDistance);
	void SetLightEnvironment(class ULightEnvironmentComponent* NewLightEnvironment);
	void SetShadowParent(class UPrimitiveComponent* NewShadowParent);
	void SetIgnoreOwnerHidden(bool bNewIgnoreOwnerHidden);
	void SetOnlyOwnerSee(bool bNewOnlyOwnerSee);
	void SetOwnerNoSee(bool bNewOwnerNoSee);
	void SetHidden(bool NewHidden);
	bool ShouldComponentAddToScene();
	void SetRBDominanceGroup(unsigned char InDomGroup);
	class URB_BodyInstance* GetRootBodyInstance();
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void InitRBPhys();
	void SetNotifyRigidBodyCollision(bool bNewNotifyRigidBodyCollision);
	void SetRBChannel(TEnumAsByte<ERBCollisionChannel> Channel);
	void SetRBCollisionChannels(const struct FRBCollisionChannelContainer& Channels);
	void SetRBCollidesWithChannel(TEnumAsByte<ERBCollisionChannel> Channel, bool bNewCollides);
	void SetBlockRigidBody(bool bNewBlockRigidBody);
	bool RigidBodyIsAwake(const struct FName& BoneName);
	void PutRigidBodyToSleep(const struct FName& BoneName);
	void WakeRigidBody(const struct FName& BoneName);
	void SetRBRotation(const struct FRotator& NewRot, const struct FName& BoneName);
	void SetRBPosition(const struct FVector& NewPos, const struct FName& BoneName);
	void RetardRBLinearVelocity(const struct FVector& RetardDir, float VelScale);
	void SetRBAngularVelocity(const struct FVector& NewAngVel, bool bAddToCurrent);
	void SetRBLinearVelocity(const struct FVector& NewVel, bool bAddToCurrent);
	void AddTorque(const struct FVector& Torque, const struct FName& BoneName);
	void AddRadialForce(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff);
	void AddForce(const struct FVector& Force, const struct FVector& Position, const struct FName& BoneName);
	void AddRadialImpulse(const struct FVector& Origin, float Radius, float Strength, TEnumAsByte<ERadialImpulseFalloff> Falloff, bool bVelChange);
	void AddImpulse(const struct FVector& Impulse, const struct FVector& Position, const struct FName& BoneName, bool bVelChange);
};


// Class Engine.ApexRenderVolumeComponent
// 0x0008 (0x01E0 - 0x01D8)
class UApexRenderVolumeComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    ApexRenderVolume;                                         // 0x01D8(0x0004) (Native)
	struct FPointer                                    ViewRelevance;                                            // 0x01DC(0x0004) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexRenderVolumeComponent");
		return ptr;
	}

};


// Class Engine.ArrowComponent
// 0x0014 (0x01EC - 0x01D8)
class UArrowComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ArrowColor;                                               // 0x01D8(0x0004) (Edit)
	float                                              ArrowSize;                                                // 0x01DC(0x0004) (Edit)
	unsigned long                                      bTreatAsASprite : 1;                                      // 0x01E0(0x0004) (Edit)
	struct FName                                       SpriteCategoryName;                                       // 0x01E4(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ArrowComponent");
		return ptr;
	}

};


// Class Engine.BrushComponent
// 0x0054 (0x022C - 0x01D8)
class UBrushComponent : public UPrimitiveComponent
{
public:
	class UModel*                                      Brush;                                                    // 0x01D8(0x0004) (Const)
	struct FKAggregateGeom                             BrushAggGeom;                                             // 0x01DC(0x0038) (NeedCtorLink)
	struct FPointer                                    BrushPhysDesc;                                            // 0x0214(0x0004) (Const, Native, Transient, NoImport)
	struct FKCachedConvexData_Mirror                   CachedPhysBrushData;                                      // 0x0218(0x000C) (Const, Native, Transient, NoImport)
	int                                                CachedPhysBrushDataVersion;                               // 0x0224(0x0004) (Const)
	unsigned long                                      bBlockComplexCollisionTrace : 1;                          // 0x0228(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BrushComponent");
		return ptr;
	}

};


// Class Engine.CameraConeComponent
// 0x0000 (0x01D8 - 0x01D8)
class UCameraConeComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraConeComponent");
		return ptr;
	}

};


// Class Engine.CylinderComponent
// 0x0010 (0x01E8 - 0x01D8)
class UCylinderComponent : public UPrimitiveComponent
{
public:
	float                                              CollisionHeight;                                          // 0x01D8(0x0004) (Edit, Const, ExportObject)
	float                                              CollisionRadius;                                          // 0x01DC(0x0004) (Edit, Const, ExportObject)
	struct FColor                                      CylinderColor;                                            // 0x01E0(0x0004) (Edit, Const)
	unsigned long                                      bDrawBoundingBox : 1;                                     // 0x01E4(0x0004) (Const)
	unsigned long                                      bDrawNonColliding : 1;                                    // 0x01E4(0x0004) (Const)
	unsigned long                                      bAlwaysRenderIfSelected : 1;                              // 0x01E4(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CylinderComponent");
		return ptr;
	}


	void SetCylinderSize(float NewRadius, float NewHeight);
};


// Class Engine.DrawBoxComponent
// 0x0018 (0x01F0 - 0x01D8)
class UDrawBoxComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      BoxColor;                                                 // 0x01D8(0x0004) (Edit)
	class UMaterial*                                   BoxMaterial;                                              // 0x01DC(0x0004) (Edit)
	struct FVector                                     BoxExtent;                                                // 0x01E0(0x000C) (Edit)
	unsigned long                                      bDrawWireBox : 1;                                         // 0x01EC(0x0004) (Edit)
	unsigned long                                      bDrawLitBox : 1;                                          // 0x01EC(0x0004) (Edit)
	unsigned long                                      bDrawOnlyIfSelected : 1;                                  // 0x01EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawBoxComponent");
		return ptr;
	}

};


// Class Engine.DrawCapsuleComponent
// 0x0014 (0x01EC - 0x01D8)
class UDrawCapsuleComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CapsuleColor;                                             // 0x01D8(0x0004) (Edit)
	class UMaterial*                                   CapsuleMaterial;                                          // 0x01DC(0x0004) (Edit)
	float                                              CapsuleHeight;                                            // 0x01E0(0x0004) (Edit)
	float                                              CapsuleRadius;                                            // 0x01E4(0x0004) (Edit)
	unsigned long                                      bDrawWireCapsule : 1;                                     // 0x01E8(0x0004) (Edit)
	unsigned long                                      bDrawLitCapsule : 1;                                      // 0x01E8(0x0004) (Edit)
	unsigned long                                      bDrawOnlyIfSelected : 1;                                  // 0x01E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawCapsuleComponent");
		return ptr;
	}

};


// Class Engine.DrawConeComponent
// 0x0010 (0x01E8 - 0x01D8)
class UDrawConeComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      ConeColor;                                                // 0x01D8(0x0004) (Edit)
	float                                              ConeRadius;                                               // 0x01DC(0x0004) (Edit)
	float                                              ConeAngle;                                                // 0x01E0(0x0004) (Edit)
	int                                                ConeSides;                                                // 0x01E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawConeComponent");
		return ptr;
	}

};


// Class Engine.DrawCylinderComponent
// 0x0020 (0x01F8 - 0x01D8)
class UDrawCylinderComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      CylinderColor;                                            // 0x01D8(0x0004) (Edit)
	class UMaterial*                                   CylinderMaterial;                                         // 0x01DC(0x0004) (Edit)
	float                                              CylinderRadius;                                           // 0x01E0(0x0004) (Edit)
	float                                              CylinderTopRadius;                                        // 0x01E4(0x0004) (Edit)
	float                                              CylinderHeight;                                           // 0x01E8(0x0004) (Edit)
	float                                              CylinderHeightOffset;                                     // 0x01EC(0x0004) (Edit)
	int                                                CylinderSides;                                            // 0x01F0(0x0004) (Edit)
	unsigned long                                      bDrawWireCylinder : 1;                                    // 0x01F4(0x0004) (Edit)
	unsigned long                                      bDrawLitCylinder : 1;                                     // 0x01F4(0x0004) (Edit)
	unsigned long                                      bDrawOnlyIfSelected : 1;                                  // 0x01F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawCylinderComponent");
		return ptr;
	}

};


// Class Engine.DrawFrustumComponent
// 0x0018 (0x01F0 - 0x01D8)
class UDrawFrustumComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      FrustumColor;                                             // 0x01D8(0x0004) (Edit)
	float                                              FrustumAngle;                                             // 0x01DC(0x0004) (Edit)
	float                                              FrustumAspectRatio;                                       // 0x01E0(0x0004) (Edit)
	float                                              FrustumStartDist;                                         // 0x01E4(0x0004) (Edit)
	float                                              FrustumEndDist;                                           // 0x01E8(0x0004) (Edit)
	class UTexture*                                    Texture;                                                  // 0x01EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawFrustumComponent");
		return ptr;
	}

};


// Class Engine.DrawQuadComponent
// 0x000C (0x01E4 - 0x01D8)
class UDrawQuadComponent : public UPrimitiveComponent
{
public:
	class UTexture*                                    Texture;                                                  // 0x01D8(0x0004) (Edit)
	float                                              Width;                                                    // 0x01DC(0x0004) (Edit)
	float                                              Height;                                                   // 0x01E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawQuadComponent");
		return ptr;
	}

};


// Class Engine.DrawSphereComponent
// 0x0014 (0x01EC - 0x01D8)
class UDrawSphereComponent : public UPrimitiveComponent
{
public:
	struct FColor                                      SphereColor;                                              // 0x01D8(0x0004) (Edit)
	class UMaterial*                                   SphereMaterial;                                           // 0x01DC(0x0004) (Edit)
	float                                              SphereRadius;                                             // 0x01E0(0x0004) (Edit)
	int                                                SphereSides;                                              // 0x01E4(0x0004) (Edit)
	unsigned long                                      bDrawWireSphere : 1;                                      // 0x01E8(0x0004) (Edit)
	unsigned long                                      bDrawLitSphere : 1;                                       // 0x01E8(0x0004) (Edit)
	unsigned long                                      bDrawOnlyIfSelected : 1;                                  // 0x01E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawSphereComponent");
		return ptr;
	}

};


// Class Engine.DrawPylonRadiusComponent
// 0x0000 (0x01EC - 0x01EC)
class UDrawPylonRadiusComponent : public UDrawSphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawPylonRadiusComponent");
		return ptr;
	}

};


// Class Engine.DrawSoundRadiusComponent
// 0x0000 (0x01EC - 0x01EC)
class UDrawSoundRadiusComponent : public UDrawSphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawSoundRadiusComponent");
		return ptr;
	}

};


// Class Engine.LevelGridVolumeRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class ULevelGridVolumeRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelGridVolumeRenderingComponent");
		return ptr;
	}

};


// Class Engine.LineBatchComponent
// 0x0024 (0x01FC - 0x01D8)
class ULineBatchComponent : public UPrimitiveComponent
{
public:
	struct FPointer                                    FPrimitiveDrawInterfaceVfTable;                           // 0x01D8(0x0004) (Const, Native, NoExport)
	struct FPointer                                    FPrimitiveDrawInterfaceView;                              // 0x01DC(0x0004) (Const, Native, NoExport)
	TArray<struct FPointer>                            BatchedLines;                                             // 0x01E0(0x000C) (Const, Native, Transient)
	TArray<struct FPointer>                            BatchedPoints;                                            // 0x01EC(0x000C) (Const, Native, Transient)
	float                                              DefaultLifeTime;                                          // 0x01F8(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LineBatchComponent");
		return ptr;
	}

};


// Class Engine.ModelComponent
// 0x0024 (0x01FC - 0x01D8)
class UModelComponent : public UPrimitiveComponent
{
public:
	class UObject*                                     Model;                                                    // 0x01D8(0x0004) (Const, Native, Transient, NoExport)
	int                                                ZoneIndex;                                                // 0x01DC(0x0004) (Const, Native, Transient, NoExport)
	int                                                ComponentIndex;                                           // 0x01E0(0x0004) (Const, Native, Transient, NoExport)
	TArray<struct FPointer>                            Nodes;                                                    // 0x01E4(0x000C) (Const, Native, Transient, NoExport)
	TArray<struct FPointer>                            Elements;                                                 // 0x01F0(0x000C) (Const, Native, Transient, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ModelComponent");
		return ptr;
	}

};


// Class Engine.ProximityDetectorComponent
// 0x0048 (0x0220 - 0x01D8)
class UProximityDetectorComponent : public UPrimitiveComponent
{
public:
	TArray<struct FMultiTouchInfo>                     MultiTouchData;                                           // 0x01D8(0x000C) (Const, Transient, NeedCtorLink)
	float                                              SimpleRadius;                                             // 0x01E4(0x0004) (Const)
	TArray<class UClass*>                              ClassProximityTypes;                                      // 0x01E8(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bContinuousDetection : 1;                                 // 0x01F4(0x0004) (Const)
	unsigned long                                      bSuppressDetection : 1;                                   // 0x01F4(0x0004) (Const)
	unsigned long                                      bShouldDraw : 1;                                          // 0x01F4(0x0004)
	unsigned long                                      bMultiTouchEnabled : 1;                                   // 0x01F4(0x0004) (Const, Transient)
	class URB_BodySetup*                               BodySetup;                                                // 0x01F8(0x0004) (Const, Transient)
	TArray<struct FDeferredTouchInfo>                  TouchList;                                                // 0x01FC(0x000C) (Const, Transient, NeedCtorLink)
	struct FScriptDelegate                             __OnMultiTouch__Delegate;                                 // 0x0208(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnMultiUnTouch__Delegate;                               // 0x0214(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProximityDetectorComponent");
		return ptr;
	}


	void SetSuppressed(bool bSuppressed);
	int GetTouchCount();
	float GetTouchRadius(int Index);
	struct FVector GetTouchOrigin(int Index);
	void STATIC_ForceGlobalUntouch(class AActor* RequestingActor);
	void ForceUntouchActor(class AActor* Other);
	void ClearTouchInfo();
	void RemoveTouchInfo(int Index);
	bool HasTouchInfo(int Index);
	int AddTouchInfo(float Radius, const struct FVector& LocationOffset, const struct FRotator& RotationOffset, int RequestedIndex);
	void OnMultiUnTouch(int Index, class AActor* Other);
	void OnMultiTouch(int Index, class AActor* Other);
};


// Class Engine.SpriteComponent
// 0x0024 (0x01FC - 0x01D8)
class USpriteComponent : public UPrimitiveComponent
{
public:
	class UTexture2D*                                  Sprite;                                                   // 0x01D8(0x0004) (Edit)
	unsigned long                                      bIsScreenSizeScaled : 1;                                  // 0x01DC(0x0004) (Edit)
	float                                              ScreenSize;                                               // 0x01E0(0x0004) (Edit)
	float                                              U;                                                        // 0x01E4(0x0004) (Edit)
	float                                              UL;                                                       // 0x01E8(0x0004) (Edit)
	float                                              V;                                                        // 0x01EC(0x0004) (Edit)
	float                                              VL;                                                       // 0x01F0(0x0004) (Edit)
	struct FName                                       SpriteCategoryName;                                       // 0x01F4(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpriteComponent");
		return ptr;
	}


	void SetSpriteAndUV(class UTexture2D* NewSprite, int NewU, int NewUL, int NewV, int NewVL);
	void SetUV(int NewU, int NewUL, int NewV, int NewVL);
	void SetSprite(class UTexture2D* NewSprite);
};


// Class Engine.SOHubComponentBase
// 0x0000 (0x01FC - 0x01FC)
class USOHubComponentBase : public USpriteComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SOHubComponentBase");
		return ptr;
	}

};


// Class Engine.RadialBlurComponent
// 0x006B (0x00C0 - 0x0055)
class URadialBlurComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	class UMaterialInterface*                          Material;                                                 // 0x0058(0x0004) (Edit, Const)
	TEnumAsByte<ESceneDepthPriorityGroup>              DepthPriorityGroup;                                       // 0x005C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData01[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	float                                              BlurScale;                                                // 0x0060(0x0004) (Edit, Const)
	float                                              BlurFalloffExponent;                                      // 0x0064(0x0004) (Edit, Const)
	float                                              BlurOpacity;                                              // 0x0068(0x0004) (Edit, Const)
	float                                              MaxCullDistance;                                          // 0x006C(0x0004) (Edit, Const)
	float                                              DistanceFalloffExponent;                                  // 0x0070(0x0004) (Edit, Const)
	unsigned long                                      bRenderAsVelocity : 1;                                    // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bEnabled : 1;                                             // 0x0074(0x0004) (Edit, Const)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0078(0x0008) MISSED OFFSET
	struct FMatrix                                     LocalToWorld;                                             // 0x0080(0x0040) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RadialBlurComponent");
		return ptr;
	}


	void OnUpdatePropertyBlurOpacity();
	void OnUpdatePropertyBlurFalloffExponent();
	void OnUpdatePropertyBlurScale();
	void SetEnabled(bool bInEnabled);
	void SetBlurOpacity(float InBlurOpacity);
	void SetBlurFalloffExponent(float InBlurFalloffExponent);
	void SetBlurScale(float InBlurScale);
	void SetMaterial(class UMaterialInterface* InMaterial);
};


// Class Engine.SceneCaptureComponent
// 0x003B (0x0090 - 0x0055)
class USceneCaptureComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	unsigned long                                      bEnabled : 1;                                             // 0x0058(0x0004) (Edit)
	unsigned long                                      bEnablePostProcess : 1;                                   // 0x0058(0x0004) (Edit)
	unsigned long                                      bEnableFog : 1;                                           // 0x0058(0x0004) (Edit)
	unsigned long                                      bUseMainScenePostProcessSettings : 1;                     // 0x0058(0x0004) (Edit)
	unsigned long                                      bSkipUpdateIfTextureUsersOccluded : 1;                    // 0x0058(0x0004) (Edit)
	unsigned long                                      bSkipUpdateIfOwnerOccluded : 1;                           // 0x0058(0x0004) (Edit)
	unsigned long                                      bSkipRenderingDepthPrepass : 1;                           // 0x0058(0x0004) (Edit)
	struct FColor                                      ClearColor;                                               // 0x005C(0x0004) (Edit)
	TEnumAsByte<ESceneCaptureViewMode>                 ViewMode;                                                 // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	int                                                SceneLOD;                                                 // 0x0064(0x0004) (Edit)
	float                                              FrameRate;                                                // 0x0068(0x0004) (Edit, Const)
	class UPostProcessChain*                           PostProcess;                                              // 0x006C(0x0004) (Edit)
	float                                              MaxUpdateDist;                                            // 0x0070(0x0004) (Edit)
	float                                              MaxViewDistanceOverride;                                  // 0x0074(0x0004) (Edit)
	float                                              MaxStreamingUpdateDist;                                   // 0x0078(0x0004) (Edit)
	struct FPointer                                    CaptureInfo;                                              // 0x007C(0x0004) (Const, Native, Transient)
	struct FPointer                                    ViewState;                                                // 0x0080(0x0004) (Const, Native, Transient)
	TArray<struct FPointer>                            PostProcessProxies;                                       // 0x0084(0x000C) (Const, Native, Transient, DuplicateTransient, NoImport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureComponent");
		return ptr;
	}


	void SetEnabled(bool bEnable);
	void SetFrameRate(float NewFrameRate);
};


// Class Engine.SceneCapture2DComponent
// 0x00A0 (0x0130 - 0x0090)
class USceneCapture2DComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0090(0x0004) (Edit, Const)
	float                                              FieldOfView;                                              // 0x0094(0x0004) (Edit, Const)
	float                                              NearPlane;                                                // 0x0098(0x0004) (Edit, Const)
	float                                              FarPlane;                                                 // 0x009C(0x0004) (Edit, Const)
	unsigned long                                      bUpdateMatrices : 1;                                      // 0x00A0(0x0004)
	unsigned char                                      UnknownData00[0xC];                                       // 0x00A4(0x000C) MISSED OFFSET
	struct FMatrix                                     ViewMatrix;                                               // 0x00B0(0x0040) (Const, Transient)
	struct FMatrix                                     ProjMatrix;                                               // 0x00F0(0x0040) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapture2DComponent");
		return ptr;
	}


	void SetView(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewFOV, float NewNearPlane, float NewFarPlane);
};


// Class Engine.SceneCapture2DHitMaskComponent
// 0x0024 (0x00B4 - 0x0090)
class USceneCapture2DHitMaskComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0090(0x0004) (Const, Transient)
	class USkeletalMeshComponent*                      SkeletalMeshComp;                                         // 0x0094(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	int                                                MaterialIndex;                                            // 0x0098(0x0004)
	int                                                ForceLOD;                                                 // 0x009C(0x0004)
	int                                                HitMaskCullDistance;                                      // 0x00A0(0x0004)
	float                                              FadingStartTimeSinceHit;                                  // 0x00A4(0x0004)
	float                                              FadingPercentage;                                         // 0x00A8(0x0004)
	float                                              FadingDurationTime;                                       // 0x00AC(0x0004)
	float                                              FadingIntervalTime;                                       // 0x00B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapture2DHitMaskComponent");
		return ptr;
	}


	void SetFadingStartTimeSinceHit(float InFadingStartTimeSinceHit);
	void SetCaptureParameters(const struct FVector& InMaskPosition, float InMaskRadius, const struct FVector& InStartupPosition, bool bOnlyWhenFacing);
	void SetCaptureTargetTexture(class UTextureRenderTarget2D* InTextureTarget);
};


// Class Engine.SceneCaptureCubeMapComponent
// 0x0018 (0x00A8 - 0x0090)
class USceneCaptureCubeMapComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTargetCube*                    TextureTarget;                                            // 0x0090(0x0004) (Edit)
	float                                              NearPlane;                                                // 0x0094(0x0004) (Edit)
	float                                              FarPlane;                                                 // 0x0098(0x0004) (Edit)
	struct FVector                                     WorldLocation;                                            // 0x009C(0x000C) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureCubeMapComponent");
		return ptr;
	}

};


// Class Engine.SceneCapturePortalComponent
// 0x000C (0x009C - 0x0090)
class USceneCapturePortalComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0090(0x0004) (Edit, Const)
	float                                              ScaleFOV;                                                 // 0x0094(0x0004) (Edit, Const)
	class AActor*                                      ViewDestination;                                          // 0x0098(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCapturePortalComponent");
		return ptr;
	}


	void SetCaptureParameters(class UTextureRenderTarget2D* NewTextureTarget, float NewScaleFOV, class AActor* NewViewDest);
};


// Class Engine.SceneCaptureReflectComponent
// 0x0008 (0x0098 - 0x0090)
class USceneCaptureReflectComponent : public USceneCaptureComponent
{
public:
	class UTextureRenderTarget2D*                      TextureTarget;                                            // 0x0090(0x0004) (Edit)
	float                                              ScaleFOV;                                                 // 0x0094(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneCaptureReflectComponent");
		return ptr;
	}

};


// Class Engine.WindDirectionalSourceComponent
// 0x0017 (0x006C - 0x0055)
class UWindDirectionalSourceComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	struct FPointer                                    SceneProxy;                                               // 0x0058(0x0004) (Const, Native, Transient, NoImport)
	float                                              Strength;                                                 // 0x005C(0x0004) (Edit)
	float                                              Phase;                                                    // 0x0060(0x0004) (Deprecated)
	float                                              Frequency;                                                // 0x0064(0x0004) (Deprecated)
	float                                              Speed;                                                    // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WindDirectionalSourceComponent");
		return ptr;
	}

};


// Class Engine.WindPointSourceComponent
// 0x0008 (0x0074 - 0x006C)
class UWindPointSourceComponent : public UWindDirectionalSourceComponent
{
public:
	class UDrawSphereComponent*                        PreviewRadiusComponent;                                   // 0x006C(0x0004) (Const, ExportObject, Component, EditInline)
	float                                              Radius;                                                   // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WindPointSourceComponent");
		return ptr;
	}

};


// Class Engine.ActorFactory
// 0x002C (0x0068 - 0x003C)
class UActorFactory : public UObject
{
public:
	class UClass*                                      GameplayActorClass;                                       // 0x003C(0x0004)
	struct FString                                     MenuName;                                                 // 0x0040(0x000C) (NeedCtorLink)
	int                                                MenuPriority;                                             // 0x004C(0x0004) (Config)
	int                                                AlternateMenuPriority;                                    // 0x0050(0x0004) (Deprecated)
	struct FString                                     NewActorClassName;                                        // 0x0054(0x000C) (Config, NeedCtorLink)
	class UClass*                                      NewActorClass;                                            // 0x0060(0x0004)
	unsigned long                                      bPlaceable : 1;                                           // 0x0064(0x0004)
	unsigned long                                      bShowInEditorQuickMenu : 1;                               // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactory");
		return ptr;
	}


	void PostCreateActor(class AActor* NewActor, class USeqAct_ActorFactory* ActorFactoryData);
};


// Class Engine.ActorFactoryActor
// 0x0004 (0x006C - 0x0068)
class UActorFactoryActor : public UActorFactory
{
public:
	class UClass*                                      ActorClass;                                               // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryActor");
		return ptr;
	}

};


// Class Engine.ActorFactoryAI
// 0x0028 (0x0090 - 0x0068)
class UActorFactoryAI : public UActorFactory
{
public:
	class UClass*                                      ControllerClass;                                          // 0x0068(0x0004) (Edit)
	class UClass*                                      PawnClass;                                                // 0x006C(0x0004) (Edit)
	struct FString                                     PawnName;                                                 // 0x0070(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bGiveDefaultInventory : 1;                                // 0x007C(0x0004) (Edit)
	TArray<class UClass*>                              InventoryList;                                            // 0x0080(0x000C) (Edit, NeedCtorLink)
	int                                                TeamIndex;                                                // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAI");
		return ptr;
	}

};


// Class Engine.ActorFactoryAmbientSound
// 0x0004 (0x006C - 0x0068)
class UActorFactoryAmbientSound : public UActorFactory
{
public:
	class USoundCue*                                   AmbientSoundCue;                                          // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAmbientSound");
		return ptr;
	}

};


// Class Engine.ActorFactoryAmbientSoundMovable
// 0x0000 (0x006C - 0x006C)
class UActorFactoryAmbientSoundMovable : public UActorFactoryAmbientSound
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundMovable");
		return ptr;
	}

};


// Class Engine.ActorFactoryAmbientSoundSimple
// 0x0004 (0x006C - 0x0068)
class UActorFactoryAmbientSoundSimple : public UActorFactory
{
public:
	class USoundNodeWave*                              SoundNodeWave;                                            // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundSimple");
		return ptr;
	}

};


// Class Engine.ActorFactoryAmbientSoundNonLoop
// 0x0000 (0x006C - 0x006C)
class UActorFactoryAmbientSoundNonLoop : public UActorFactoryAmbientSoundSimple
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundNonLoop");
		return ptr;
	}

};


// Class Engine.ActorFactoryAmbientSoundSimpleToggleable
// 0x0000 (0x006C - 0x006C)
class UActorFactoryAmbientSoundSimpleToggleable : public UActorFactoryAmbientSoundSimple
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundSimpleToggleable");
		return ptr;
	}

};


// Class Engine.ActorFactoryAmbientSoundNonLoopingToggleable
// 0x0000 (0x006C - 0x006C)
class UActorFactoryAmbientSoundNonLoopingToggleable : public UActorFactoryAmbientSoundSimpleToggleable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryAmbientSoundNonLoopingToggleable");
		return ptr;
	}

};


// Class Engine.ActorFactoryApexDestructible
// 0x0010 (0x0078 - 0x0068)
class UActorFactoryApexDestructible : public UActorFactory
{
public:
	unsigned long                                      bStartAwake : 1;                                          // 0x0068(0x0004) (Edit)
	TEnumAsByte<ERBCollisionChannel>                   RBChannel;                                                // 0x006C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x0070(0x0004) (Edit, Const)
	class UApexDestructibleAsset*                      DestructibleAsset;                                        // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryApexDestructible");
		return ptr;
	}

};


// Class Engine.ActorFactoryArchetype
// 0x0004 (0x006C - 0x0068)
class UActorFactoryArchetype : public UActorFactory
{
public:
	class AActor*                                      ArchetypeActor;                                           // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryArchetype");
		return ptr;
	}

};


// Class Engine.ActorFactoryCoverLink
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryCoverLink : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryCoverLink");
		return ptr;
	}

};


// Class Engine.ActorFactoryDominantDirectionalLight
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryDominantDirectionalLight : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryDominantDirectionalLight");
		return ptr;
	}

};


// Class Engine.ActorFactoryDominantDirectionalLightMovable
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryDominantDirectionalLightMovable : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryDominantDirectionalLightMovable");
		return ptr;
	}

};


// Class Engine.ActorFactoryDynamicSM
// 0x0015 (0x007D - 0x0068)
class UActorFactoryDynamicSM : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                               // 0x0068(0x0004) (Edit)
	struct FVector                                     DrawScale3D;                                              // 0x006C(0x000C) (Edit)
	unsigned long                                      bNoEncroachCheck : 1;                                     // 0x0078(0x0004) (Edit)
	unsigned long                                      bNotifyRigidBodyCollision : 1;                            // 0x0078(0x0004) (Edit)
	unsigned long                                      bBlockRigidBody : 1;                                      // 0x0078(0x0004) (Edit)
	unsigned long                                      bUseCompartment : 1;                                      // 0x0078(0x0004) (Edit)
	unsigned long                                      bCastDynamicShadow : 1;                                   // 0x0078(0x0004) (Edit)
	TEnumAsByte<ECollisionType>                        CollisionType;                                            // 0x007C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryDynamicSM");
		return ptr;
	}

};


// Class Engine.ActorFactoryMover
// 0x0003 (0x0080 - 0x007D)
class UActorFactoryMover : public UActorFactoryDynamicSM
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryMover");
		return ptr;
	}

};


// Class Engine.ActorFactoryRigidBody
// 0x0027 (0x00A4 - 0x007D)
class UActorFactoryRigidBody : public UActorFactoryDynamicSM
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	unsigned long                                      bStartAwake : 1;                                          // 0x0080(0x0004) (Edit)
	unsigned long                                      bDamageAppliesImpulse : 1;                                // 0x0080(0x0004) (Edit)
	unsigned long                                      bLocalSpaceInitialVelocity : 1;                           // 0x0080(0x0004) (Edit)
	unsigned long                                      bEnableStayUprightSpring : 1;                             // 0x0080(0x0004) (Edit)
	struct FVector                                     InitialVelocity;                                          // 0x0084(0x000C) (Edit)
	class UDistributionVector*                         AdditionalVelocity;                                       // 0x0090(0x0004) (Edit, ExportObject, Component, EditInline)
	class UDistributionVector*                         InitialAngularVelocity;                                   // 0x0094(0x0004) (Edit, ExportObject, Component, EditInline)
	TEnumAsByte<ERBCollisionChannel>                   RBChannel;                                                // 0x0098(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	float                                              StayUprightTorqueFactor;                                  // 0x009C(0x0004) (Edit)
	float                                              StayUprightMaxTorque;                                     // 0x00A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryRigidBody");
		return ptr;
	}

};


// Class Engine.ActorFactoryEmitter
// 0x0004 (0x006C - 0x0068)
class UActorFactoryEmitter : public UActorFactory
{
public:
	class UParticleSystem*                             ParticleSystem;                                           // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryEmitter");
		return ptr;
	}

};


// Class Engine.ActorFactoryFracturedStaticMesh
// 0x0010 (0x0078 - 0x0068)
class UActorFactoryFracturedStaticMesh : public UActorFactory
{
public:
	class UFracturedStaticMesh*                        FracturedStaticMesh;                                      // 0x0068(0x0004) (Edit)
	struct FVector                                     DrawScale3D;                                              // 0x006C(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryFracturedStaticMesh");
		return ptr;
	}

};


// Class Engine.ActorFactoryLensFlare
// 0x0004 (0x006C - 0x0068)
class UActorFactoryLensFlare : public UActorFactory
{
public:
	class ULensFlare*                                  LensFlareObject;                                          // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryLensFlare");
		return ptr;
	}

};


// Class Engine.ActorFactoryLight
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryLight : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryLight");
		return ptr;
	}

};


// Class Engine.ActorFactoryPathNode
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryPathNode : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryPathNode");
		return ptr;
	}

};


// Class Engine.ActorFactoryPhysicsAsset
// 0x0024 (0x008C - 0x0068)
class UActorFactoryPhysicsAsset : public UActorFactory
{
public:
	class UPhysicsAsset*                               PhysicsAsset;                                             // 0x0068(0x0004) (Edit)
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x006C(0x0004) (Edit)
	unsigned long                                      bStartAwake : 1;                                          // 0x0070(0x0004) (Edit)
	unsigned long                                      bDamageAppliesImpulse : 1;                                // 0x0070(0x0004) (Edit)
	unsigned long                                      bNotifyRigidBodyCollision : 1;                            // 0x0070(0x0004) (Edit)
	unsigned long                                      bUseCompartment : 1;                                      // 0x0070(0x0004) (Edit)
	unsigned long                                      bCastDynamicShadow : 1;                                   // 0x0070(0x0004) (Edit)
	struct FVector                                     InitialVelocity;                                          // 0x0074(0x000C) (Edit)
	struct FVector                                     DrawScale3D;                                              // 0x0080(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryPhysicsAsset");
		return ptr;
	}

};


// Class Engine.ActorFactoryPlayerStart
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryPlayerStart : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryPlayerStart");
		return ptr;
	}

};


// Class Engine.ActorFactoryPylon
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryPylon : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryPylon");
		return ptr;
	}

};


// Class Engine.ActorFactorySkeletalMesh
// 0x0010 (0x0078 - 0x0068)
class UActorFactorySkeletalMesh : public UActorFactory
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0068(0x0004) (Edit)
	class UAnimSet*                                    AnimSet;                                                  // 0x006C(0x0004) (Edit)
	struct FName                                       AnimSequenceName;                                         // 0x0070(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactorySkeletalMesh");
		return ptr;
	}

};


// Class Engine.ActorFactoryStaticMesh
// 0x0010 (0x0078 - 0x0068)
class UActorFactoryStaticMesh : public UActorFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                               // 0x0068(0x0004) (Edit)
	struct FVector                                     DrawScale3D;                                              // 0x006C(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryStaticMesh");
		return ptr;
	}

};


// Class Engine.ActorFactoryTrigger
// 0x0000 (0x0068 - 0x0068)
class UActorFactoryTrigger : public UActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryTrigger");
		return ptr;
	}

};


// Class Engine.ActorFactoryVehicle
// 0x0004 (0x006C - 0x0068)
class UActorFactoryVehicle : public UActorFactory
{
public:
	class UClass*                                      VehicleClass;                                             // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryVehicle");
		return ptr;
	}

};


// Class Engine.AISubsystem
// 0x0004 (0x0044 - 0x0040)
class UAISubsystem : public USubsystem
{
public:
	unsigned long                                      bImplementsNavMeshGeneration : 1;                         // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AISubsystem");
		return ptr;
	}


	void STATIC_ToggleNavByCover(class ACoverLink* Referencer, int SlotIdx, bool bEnable);
	void STATIC_ToggleNavByComponent(class UComponent* Referencer, bool bEnable);
	void STATIC_ToggleNavByActor(class AActor* Referencer, bool bEnable);
};


// Class Engine.BookMark
// 0x0024 (0x0060 - 0x003C)
class UBookMark : public UObject
{
public:
	struct FVector                                     Location;                                                 // 0x003C(0x000C) (Edit)
	struct FRotator                                    Rotation;                                                 // 0x0048(0x000C) (Edit)
	TArray<struct FString>                             HiddenLevels;                                             // 0x0054(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BookMark");
		return ptr;
	}

};


// Class Engine.BookMark2D
// 0x000C (0x0048 - 0x003C)
class UBookMark2D : public UObject
{
public:
	float                                              Zoom2D;                                                   // 0x003C(0x0004) (Edit)
	struct FIntPoint                                   Location;                                                 // 0x0040(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BookMark2D");
		return ptr;
	}

};


// Class Engine.KismetBookMark
// 0x000C (0x0054 - 0x0048)
class UKismetBookMark : public UBookMark2D
{
public:
	struct FString                                     BookMarkSequencePathName;                                 // 0x0048(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KismetBookMark");
		return ptr;
	}

};


// Class Engine.Channel
// 0x0034 (0x0070 - 0x003C)
class UChannel : public UObject
{
public:
	unsigned char                                      UnknownData00[0x34];                                      // 0x003C(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Channel");
		return ptr;
	}

};


// Class Engine.ActorChannel
// 0x005C (0x00CC - 0x0070)
class UActorChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x5C];                                      // 0x0070(0x005C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorChannel");
		return ptr;
	}

};


// Class Engine.ControlChannel
// 0x0010 (0x0080 - 0x0070)
class UControlChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0070(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ControlChannel");
		return ptr;
	}

};


// Class Engine.FileChannel
// 0x021C (0x028C - 0x0070)
class UFileChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0x21C];                                     // 0x0070(0x021C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FileChannel");
		return ptr;
	}

};


// Class Engine.VoiceChannel
// 0x000C (0x007C - 0x0070)
class UVoiceChannel : public UChannel
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x0070(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VoiceChannel");
		return ptr;
	}

};


// Class Engine.Controller
// 0x0184 (0x0358 - 0x01D4)
class AController : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavigationHandle;                      // 0x01D4(0x0004) (Const, Native, NoExport)
	class APawn*                                       Pawn;                                                     // 0x01D8(0x0004) (Net, EditInline)
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                                    // 0x01DC(0x0004) (Net, EditInline)
	int                                                PlayerNum;                                                // 0x01E0(0x0004) (Const)
	class AController*                                 NextController;                                           // 0x01E4(0x0004) (Const)
	unsigned long                                      bIsPlayer : 1;                                            // 0x01E8(0x0004)
	unsigned long                                      bGodMode : 1;                                             // 0x01E8(0x0004)
	unsigned long                                      bSoaking : 1;                                             // 0x01E8(0x0004)
	unsigned long                                      bSlowerZAcquire : 1;                                      // 0x01E8(0x0004)
	unsigned long                                      bNotifyPostLanded : 1;                                    // 0x01E8(0x0004)
	unsigned long                                      bNotifyApex : 1;                                          // 0x01E8(0x0004)
	unsigned long                                      bOverrideSearchStart : 1;                                 // 0x01E8(0x0004)
	unsigned long                                      bAdvancedTactics : 1;                                     // 0x01E8(0x0004)
	unsigned long                                      bCanDoSpecial : 1;                                        // 0x01E8(0x0004)
	unsigned long                                      bAdjusting : 1;                                           // 0x01E8(0x0004)
	unsigned long                                      bPreparingMove : 1;                                       // 0x01E8(0x0004)
	unsigned long                                      bForceStrafe : 1;                                         // 0x01E8(0x0004)
	unsigned long                                      bLOSflag : 1;                                             // 0x01E8(0x0004) (Const)
	unsigned long                                      bSkipExtraLOSChecks : 1;                                  // 0x01E8(0x0004)
	unsigned long                                      bNotifyFallingHitWall : 1;                                // 0x01E8(0x0004)
	unsigned long                                      bEarlyOutOfSighTestsForSameType : 1;                      // 0x01E8(0x0004)
	unsigned long                                      bPreciseDestination : 1;                                  // 0x01E8(0x0004)
	unsigned long                                      bSeeFriendly : 1;                                         // 0x01E8(0x0004)
	unsigned long                                      bUsingPathLanes : 1;                                      // 0x01E8(0x0004)
	unsigned char                                      bFire;                                                    // 0x01EC(0x0001) (Input)
	unsigned char                                      bAltFire;                                                 // 0x01ED(0x0001) (Input)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01EE(0x0002) MISSED OFFSET
	float                                              MinHitWall;                                               // 0x01F0(0x0004)
	class UClass*                                      NavigationHandleClass;                                    // 0x01F4(0x0004)
	class UNavigationHandle*                           NavigationHandle;                                         // 0x01F8(0x0004) (EditInline)
	struct FVector                                     OverrideSearchStart;                                      // 0x01FC(0x000C)
	float                                              MoveTimer;                                                // 0x0208(0x0004)
	class AActor*                                      MoveTarget;                                               // 0x020C(0x0004)
	struct FBasedPosition                              DestinationPosition;                                      // 0x0210(0x0034)
	struct FBasedPosition                              FocalPosition;                                            // 0x0244(0x0034)
	class AActor*                                      Focus;                                                    // 0x0278(0x0004)
	class AActor*                                      GoalList[0x4];                                            // 0x027C(0x0004)
	struct FBasedPosition                              AdjustPosition;                                           // 0x028C(0x0034)
	class ANavigationPoint*                            StartSpot;                                                // 0x02C0(0x0004)
	TArray<class ANavigationPoint*>                    RouteCache;                                               // 0x02C4(0x000C) (NeedCtorLink)
	class UReachSpec*                                  CurrentPath;                                              // 0x02D0(0x0004)
	class UReachSpec*                                  NextRoutePath;                                            // 0x02D4(0x0004)
	struct FVector                                     CurrentPathDir;                                           // 0x02D8(0x000C)
	class AActor*                                      RouteGoal;                                                // 0x02E4(0x0004)
	float                                              RouteDist;                                                // 0x02E8(0x0004)
	float                                              LastRouteFind;                                            // 0x02EC(0x0004)
	class AInterpActor*                                PendingMover;                                             // 0x02F0(0x0004)
	class AActor*                                      FailedMoveTarget;                                         // 0x02F4(0x0004)
	int                                                MoveFailureCount;                                         // 0x02F8(0x0004)
	float                                              GroundPitchTime;                                          // 0x02FC(0x0004)
	class APawn*                                       ShotTarget;                                               // 0x0300(0x0004)
	class AActor*                                      LastFailedReach;                                          // 0x0304(0x0004) (Const)
	float                                              FailedReachTime;                                          // 0x0308(0x0004) (Const)
	struct FVector                                     FailedReachLocation;                                      // 0x030C(0x000C) (Const)
	float                                              SightCounter;                                             // 0x0318(0x0004)
	float                                              SightCounterInterval;                                     // 0x031C(0x0004)
	float                                              InUseNodeCostMultiplier;                                  // 0x0320(0x0004)
	int                                                HighJumpNodeCostModifier;                                 // 0x0324(0x0004)
	float                                              MaxMoveTowardPawnTargetTime;                              // 0x0328(0x0004)
	class APawn*                                       Enemy;                                                    // 0x032C(0x0004)
	TArray<struct FVisiblePortalInfo>                  VisiblePortals;                                           // 0x0330(0x000C) (NeedCtorLink)
	float                                              LaneOffset;                                               // 0x033C(0x0004)
	struct FRotator                                    OldBasedRotation;                                         // 0x0340(0x000C) (Const)
	struct FVector                                     NavMeshPath_SearchExtent_Modifier;                        // 0x034C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Controller");
		return ptr;
	}


	bool GeneratePathToLocation(const struct FVector& Goal, float WithinDistance, bool bAllowPartialPath);
	bool GeneratePathToActor(class AActor* Goal, float WithinDistance, bool bAllowPartialPath);
	void InterpolationFinished(class USeqAct_Interp* InterpAction);
	void InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst);
	void InitNavigationHandle();
	void ReadyForLift();
	void SendMessage(class APlayerReplicationInfo* Recipient, const struct FName& MessageType, float Wait, class UClass* DamageType);
	void CurrentLevelUnloaded();
	bool IsInCombat(bool bForceCheck);
	bool IsSpectating();
	void OnToggleHidden(class USeqAct_ToggleHidden* Action);
	void NotifyAddInventory(class AInventory* NewItem);
	void OnModifyHealth(class USeqAct_ModifyHealth* Action);
	bool NotifyCoverClaimViolation(class AController* NewClaim, class ACoverLink* Link, int SlotIdx);
	void NotifyCoverAdjusted();
	void NotifyCoverDisabled(class ACoverLink* Link, int SlotIdx, bool bAdjacentIdx);
	void OnSetVelocity(class USeqAct_SetVelocity* Action);
	void OnSetPhysics(class USeqAct_SetPhysics* Action);
	void OnToggleGodMode(class USeqAct_ToggleGodMode* inAction);
	void OnAttachToActor(class USeqAct_AttachToActor* Action);
	void OnTeleport(class USeqAct_Teleport* Action);
	bool IsDead();
	struct FString GetHumanReadableName();
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void StopLatentExecution();
	bool InLatentExecution(int LatentActionNumber);
	void ReachedPreciseDestination();
	void NotifyMissedJump();
	void NotifyJumpApex();
	bool NotifyBump(class AActor* Other, const struct FVector& HitNormal);
	void NotifyFallingHitWall(const struct FVector& HitNormal, class AActor* Wall);
	bool NotifyHitWall(const struct FVector& HitNormal, class AActor* Wall);
	bool NotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor);
	bool NotifyHeadVolumeChange(class APhysicsVolume* NewVolume);
	void NotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume);
	bool LandingShake();
	bool IsAimingAt(class AActor* ATarget, float Epsilon);
	void GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	void GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	bool HandlePathObstruction(class AActor* BlockedBy);
	void UnderLift(class ALiftCenter* Lift);
	bool MoverFinished();
	void WaitForMover(class AInterpActor* M);
	bool AllowDetourTo(class ANavigationPoint* N);
	void MayFall(bool bFloor, const struct FVector& FloorNormal);
	void EndClimbLadder();
	void LongFall();
	void WaitForLanding(float waitDuration);
	bool PickWallAdjust(const struct FVector& HitNormal);
	void MoveUnreachable(const struct FVector& AttemptedDest, class AActor* AttemptedTarget);
	bool ActorReachable(class AActor* anActor);
	bool PointReachable(const struct FVector& aPoint);
	class AActor* FindPathToIntercept(class APawn* P, class AActor* InRouteGoal, bool bWeightDetours, int MaxPathLength, bool bReturnPartial);
	class ANavigationPoint* FindRandomDest();
	class AActor* FindPathTowardNearest(class UClass* GoalClass, bool bWeightDetours, int MaxPathLength, bool bReturnPartial);
	class AActor* FindPathToward(class AActor* anActor, bool bWeightDetours, int MaxPathLength, bool bReturnPartial);
	class AActor* FindPathTo(const struct FVector& aPoint, int MaxPathLength, bool bReturnPartial);
	void FinishRotation();
	void SetupSpecialPathAbilities();
	void MoveToward(class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, bool bUseStrafing, bool bShouldWalk);
	void MoveToDirectNonPathPos(const struct FVector& NewDestination, class AActor* ViewFocus, float DestinationOffset, bool bShouldWalk);
	void MoveTo(const struct FVector& NewDestination, class AActor* ViewFocus, float DestinationOffset, bool bShouldWalk);
	void EnemyNotVisible();
	void SeeMonster(class APawn* Seen);
	void SeePlayer(class APawn* Seen);
	void HearNoise(float Loudness, class AActor* NoiseMaker, const struct FName& NoiseType);
	class APawn* PickTarget(class UClass* TargetClass, const struct FVector& FireDir, const struct FVector& projStart, float MaxRange, float* bestAim, float* bestDist);
	bool CanSeeByPoints(const struct FVector& ViewLocation, const struct FVector& TestLocation, const struct FRotator& ViewRotation);
	bool CanSee(class APawn* Other);
	bool LineOfSightTo(class AActor* Other, const struct FVector& chkLocation, bool bTryAlternateTargetLoc);
	void NotifyChangedWeapon(class AWeapon* PrevWeapon, class AWeapon* NewWeapon);
	void ClientSwitchToBestWeapon(bool bForceNewWeapon);
	void SwitchToBestWeapon(bool bForceNewWeapon);
	void ReceiveProjectileWarning(class AProjectile* Proj);
	void ReceiveWarning(class APawn* shooter, float projSpeed, const struct FVector& FireDir);
	void InstantWarnTarget(class AActor* InTarget, class AWeapon* FiredWeapon, const struct FVector& FireDir);
	struct FRotator GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc);
	void HandlePickup(class AInventory* Inv);
	void RoundHasEnded(class AActor* EndRoundFocus);
	void StopFiring();
	bool FireWeaponAt(class AActor* inActor);
	float RatePickup(class AActor* PickupHolder, class UClass* inPickup);
	void WarnProjExplode(class AProjectile* Proj);
	void NotifyProjLanded(class AProjectile* Proj);
	void NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* damageTyp);
	void GameHasEnded(class AActor* EndGameFocus, bool bIsWinner);
	void SetCharacter(const struct FString& inCharacter);
	void ServerGivePawn();
	void ServerRestartPlayer();
	unsigned char GetTeamNum();
	void InitPlayerReplicationInfo();
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	void EnemyJustTeleported();
	bool BeyondFogDistance(const struct FVector& ViewPoint, const struct FVector& OtherPoint);
	void Restart(bool bVehicleTransition);
	void CleanupPRI();
	void Destroyed();
	void NotifyPostLanded();
	bool GamePlayEndedState();
	void PawnDied(class APawn* inPawn);
	void UnPossess();
	void Possess(class APawn* inPawn, bool bVehicleTransition);
	void OnPossess(class USeqAct_Possess* inAction);
	void ReplicatedEvent(const struct FName& VarName);
	void ClientSetRotation(const struct FRotator& NewRotation, bool bResetCamera);
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void Reset();
	void PostBeginPlay();
	void SetSkelControlScale(const struct FName& SkelControlName, float Scale);
	void SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight);
	void StopActorFaceFXAnim();
	bool PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay);
	void FinishAnimControl(class UInterpGroup* InInterpGroup);
	void SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void BeginAnimControl(class UInterpGroup* InInterpGroup);
	void NotifyPathChanged();
	struct FVector GetAdjustLocation();
	void SetAdjustLocation(const struct FVector& NewLoc, bool bAdjust, bool bOffsetFromBase);
	struct FVector GetDestinationPosition();
	void SetDestinationPosition(const struct FVector& Dest, bool bOffsetFromBase);
	struct FVector GetFocalPoint();
	void SetFocalPoint(const struct FVector& FP, bool bOffsetFromBase);
	void RouteCache_RemoveIndex(int InIndex, int Count);
	void RouteCache_RemoveItem(class ANavigationPoint* Nav);
	void RouteCache_InsertItem(class ANavigationPoint* Nav, int Idx);
	void RouteCache_AddItem(class ANavigationPoint* Nav);
	void RouteCache_Empty();
	bool IsLocalController();
	bool IsLocalPlayerController();
};


// Class Engine.Settings
// 0x0030 (0x006C - 0x003C)
class USettings : public UObject
{
public:
	TArray<struct FLocalizedStringSetting>             LocalizedSettings;                                        // 0x003C(0x000C) (NeedCtorLink)
	TArray<struct FSettingsProperty>                   Properties;                                               // 0x0048(0x000C) (NeedCtorLink)
	TArray<struct FLocalizedStringSettingMetaData>     LocalizedSettingsMappings;                                // 0x0054(0x000C) (NeedCtorLink)
	TArray<struct FSettingsPropertyPropertyMetaData>   PropertyMappings;                                         // 0x0060(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Settings");
		return ptr;
	}


	void UpdateFromURL(class AGameInfo* Game, struct FString* URL);
	void BuildURL(struct FString* URL);
	void AppendContextsToURL(struct FString* URL);
	void AppendPropertiesToURL(struct FString* URL);
	void AppendDataBindingsToURL(struct FString* URL);
	void GetQoSAdvertisedStringSettings(TArray<struct FLocalizedStringSetting>* QoSSettings);
	void GetQoSAdvertisedProperties(TArray<struct FSettingsProperty>* QoSProps);
	bool GetRangedPropertyValue(int PropertyId, float* OutValue);
	bool SetRangedPropertyValue(int PropertyId, float NewValue);
	bool GetPropertyRange(int PropertyId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt);
	bool GetPropertyMappingType(int PropertyId, TEnumAsByte<EPropertyValueMappingType>* OutType);
	bool HasStringSetting(int SettingId);
	bool HasProperty(int PropertyId);
	void UpdateProperties(bool bShouldAddIfMissing, TArray<struct FSettingsProperty>* Props);
	void UpdateStringSettings(bool bShouldAddIfMissing, TArray<struct FLocalizedStringSetting>* Settings);
	TEnumAsByte<ESettingsDataType> GetPropertyType(int PropertyId);
	bool GetPropertyValueId(int PropertyId, int* ValueId);
	bool SetPropertyValueId(int PropertyId, int ValueId);
	bool GetStringProperty(int PropertyId, struct FString* Value);
	void SetStringProperty(int PropertyId, const struct FString& Value);
	bool GetIntProperty(int PropertyId, int* Value);
	void SetIntProperty(int PropertyId, int Value);
	bool GetFloatProperty(int PropertyId, float* Value);
	void SetFloatProperty(int PropertyId, float Value);
	bool SetPropertyFromStringByName(const struct FName& PropertyName, struct FString* NewValue);
	struct FString GetPropertyAsStringByName(const struct FName& PropertyName);
	struct FString GetPropertyAsString(int PropertyId);
	struct FString GetPropertyColumnHeader(int PropertyId);
	struct FName GetPropertyName(int PropertyId);
	bool GetPropertyId(const struct FName& PropertyName, int* PropertyId);
	bool SetStringSettingValueFromStringByName(const struct FName& StringSettingName, struct FString* NewValue);
	struct FName GetStringSettingValueNameByName(const struct FName& StringSettingName);
	struct FName GetStringSettingValueName(int StringSettingId, int ValueIndex);
	bool IsWildcardStringSetting(int StringSettingId);
	struct FString GetStringSettingColumnHeader(int StringSettingId);
	struct FName GetStringSettingName(int StringSettingId);
	bool GetStringSettingId(const struct FName& StringSettingName, int* StringSettingId);
	bool GetStringSettingValueByName(const struct FName& StringSettingName, int* ValueIndex);
	void SetStringSettingValueByName(const struct FName& StringSettingName, int ValueIndex, bool bShouldAutoAdd);
	bool GetStringSettingValueNames(int StringSettingId, TArray<struct FIdToStringMapping>* Values);
	bool IncrementStringSettingValue(int StringSettingId, int Direction, bool bShouldWrap);
	bool GetStringSettingValue(int StringSettingId, int* ValueIndex);
	void SetStringSettingValue(int StringSettingId, int ValueIndex, bool bShouldAutoAdd);
	void STATIC_GetSettingsDataDateTime(struct FSettingsData* Data, int* OutInt1, int* OutInt2);
	void STATIC_GetSettingsDataBlob(struct FSettingsData* Data, TArray<unsigned char>* OutBlob);
	int STATIC_GetSettingsDataInt(struct FSettingsData* Data);
	float STATIC_GetSettingsDataFloat(struct FSettingsData* Data);
	void STATIC_EmptySettingsData(struct FSettingsData* Data);
	void STATIC_SetSettingsData(struct FSettingsData* Data, struct FSettingsData* Data2Copy);
	void STATIC_SetSettingsDataBlob(struct FSettingsData* Data, TArray<unsigned char>* InBlob);
	void STATIC_SetSettingsDataDateTime(int InInt1, int InInt2, struct FSettingsData* Data);
	void STATIC_SetSettingsDataInt(int InInt, struct FSettingsData* Data);
	void STATIC_SetSettingsDataFloat(float InFloat, struct FSettingsData* Data);
};


// Class Engine.OnlineGameSearch
// 0x0088 (0x00F4 - 0x006C)
class UOnlineGameSearch : public USettings
{
public:
	int                                                MaxSearchResults;                                         // 0x006C(0x0004)
	struct FLocalizedStringSetting                     Query;                                                    // 0x0070(0x000C)
	unsigned long                                      bIsLanQuery : 1;                                          // 0x007C(0x0004) (DataBinding)
	unsigned long                                      bUsesArbitration : 1;                                     // 0x007C(0x0004) (DataBinding)
	unsigned long                                      bIsSearchInProgress : 1;                                  // 0x007C(0x0004) (Const)
	class UClass*                                      GameSettingsClass;                                        // 0x0080(0x0004)
	TArray<struct FOnlineGameSearchResult>             Results;                                                  // 0x0084(0x000C) (Const, NeedCtorLink)
	struct FOverrideSkill                              ManualSkillOverride;                                      // 0x0090(0x0028) (NeedCtorLink)
	TArray<struct FNamedObjectProperty>                NamedProperties;                                          // 0x00B8(0x000C) (NeedCtorLink)
	struct FOnlineGameSearchQuery                      FilterQuery;                                              // 0x00C4(0x0018) (NeedCtorLink)
	struct FString                                     AdditionalSearchCriteria;                                 // 0x00DC(0x000C) (NeedCtorLink)
	int                                                PingBucketSize;                                           // 0x00E8(0x0004)
	int                                                NumPingProbes;                                            // 0x00EC(0x0004)
	int                                                MaxPingBytes;                                             // 0x00F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineGameSearch");
		return ptr;
	}


	bool FilterSearchResult(class UOnlineGameSettings* GameSettings);
	void SortSearchResults();
	void SetSkillOverride(int LeaderboardId, TArray<struct FUniqueNetId>* Players);
};


// Class Engine.Camera
// 0x02DC (0x04B0 - 0x01D4)
class ACamera : public AActor
{
public:
	class APlayerController*                           PCOwner;                                                  // 0x01D4(0x0004)
	struct FName                                       CameraStyle;                                              // 0x01D8(0x0008)
	float                                              DefaultFOV;                                               // 0x01E0(0x0004)
	unsigned long                                      bLockedFOV : 1;                                           // 0x01E4(0x0004)
	unsigned long                                      bConstrainAspectRatio : 1;                                // 0x01E4(0x0004)
	unsigned long                                      bEnableFading : 1;                                        // 0x01E4(0x0004)
	unsigned long                                      bFadeAudio : 1;                                           // 0x01E4(0x0004)
	unsigned long                                      bForceDisableTemporalAA : 1;                              // 0x01E4(0x0004) (Transient)
	unsigned long                                      bEnableColorScaling : 1;                                  // 0x01E4(0x0004)
	unsigned long                                      bEnableColorScaleInterp : 1;                              // 0x01E4(0x0004)
	unsigned long                                      bUseClientSideCameraUpdates : 1;                          // 0x01E4(0x0004)
	unsigned long                                      bDebugClientSideCamera : 1;                               // 0x01E4(0x0004)
	unsigned long                                      bShouldSendClientSideCameraUpdate : 1;                    // 0x01E4(0x0004)
	unsigned long                                      bWasPreAsyncUpdated : 1;                                  // 0x01E4(0x0004)
	float                                              LockedFOV;                                                // 0x01E8(0x0004)
	float                                              ConstrainedAspectRatio;                                   // 0x01EC(0x0004)
	float                                              DefaultAspectRatio;                                       // 0x01F0(0x0004)
	float                                              OffAxisYawAngle;                                          // 0x01F4(0x0004)
	float                                              OffAxisPitchAngle;                                        // 0x01F8(0x0004)
	struct FColor                                      FadeColor;                                                // 0x01FC(0x0004)
	float                                              FadeAmount;                                               // 0x0200(0x0004)
	float                                              CamOverridePostProcessAlpha;                              // 0x0204(0x0004)
	struct FPostProcessSettings                        CamPostProcessSettings;                                   // 0x0208(0x0150) (NeedCtorLink)
	struct FRenderingPerformanceOverrides              RenderingOverrides;                                       // 0x0358(0x0004)
	struct FVector                                     ColorScale;                                               // 0x035C(0x000C)
	struct FVector                                     DesiredColorScale;                                        // 0x0368(0x000C)
	struct FVector                                     OriginalColorScale;                                       // 0x0374(0x000C)
	float                                              ColorScaleInterpDuration;                                 // 0x0380(0x0004)
	float                                              ColorScaleInterpStartTime;                                // 0x0384(0x0004)
	struct FTCameraCache                               CameraCache;                                              // 0x0388(0x0020)
	struct FTCameraCache                               LastFrameCameraCache;                                     // 0x03A8(0x0020)
	struct FTViewTarget                                ViewTarget;                                               // 0x03C8(0x002C)
	struct FTViewTarget                                PendingViewTarget;                                        // 0x03F4(0x002C)
	float                                              BlendTimeToGo;                                            // 0x0420(0x0004)
	struct FViewTargetTransitionParams                 BlendParams;                                              // 0x0424(0x0010)
	TArray<class UCameraModifier*>                     ModifierList;                                             // 0x0434(0x000C) (NeedCtorLink)
	float                                              FreeCamDistance;                                          // 0x0440(0x0004)
	struct FVector                                     FreeCamOffset;                                            // 0x0444(0x000C)
	struct FVector2D                                   FadeAlpha;                                                // 0x0450(0x0008)
	float                                              FadeTime;                                                 // 0x0458(0x0004)
	float                                              FadeTimeRemaining;                                        // 0x045C(0x0004)
	TArray<class AEmitterCameraLensEffectBase*>        CameraLensEffects;                                        // 0x0460(0x000C) (Transient, NeedCtorLink)
	class UCameraModifier_CameraShake*                 CameraShakeCamMod;                                        // 0x046C(0x0004) (Edit, Transient, EditInline)
	class UClass*                                      CameraShakeCamModClass;                                   // 0x0470(0x0004) (Edit)
	class UCameraAnimInst*                             AnimInstPool[0x8];                                        // 0x0474(0x0004)
	TArray<class UCameraAnimInst*>                     ActiveAnims;                                              // 0x0494(0x000C) (NeedCtorLink)
	TArray<class UCameraAnimInst*>                     FreeAnims;                                                // 0x04A0(0x000C) (NeedCtorLink)
	class ADynamicCameraActor*                         AnimCameraActor;                                          // 0x04AC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Camera");
		return ptr;
	}


	bool IsAnimActive();
	void StopCameraAnim(class UCameraAnimInst* AnimInst, bool bImmediate);
	void StopAllCameraAnimsByType(class UCameraAnim* Anim, bool bImmediate);
	void StopAllCameraAnims(bool bImmediate);
	class UCameraAnimInst* PlayCameraAnim(class UCameraAnim* Anim, float Rate, float Scale, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, float Duration, bool bSingleInstance);
	void ClearAllCameraShakes();
	void STATIC_PlayWorldCameraShake(class UCameraShake* Shake, class AActor* ShakeInstigator, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff, bool bTryForceFeedback, bool bOrientShakeTowardsEpicenter);
	float STATIC_CalcRadialShakeScale(class ACamera* Cam, const struct FVector& Epicenter, float InnerRadius, float OuterRadius, float Falloff);
	void StopCameraShake(class UCameraShake* Shake);
	void PlayCameraShake(class UCameraShake* Shake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void ClearCameraLensEffects();
	void RemoveCameraLensEffect(class AEmitterCameraLensEffectBase* Emitter);
	void AddCameraLensEffect(class UClass* LensEffectEmitterClass);
	class AEmitterCameraLensEffectBase* FindCameraLensEffect(class UClass* LensEffectEmitterClass);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void ProcessViewRotation(float DeltaTime, struct FRotator* OutViewRotation, struct FRotator* OutDeltaRot);
	void SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams);
	void UpdateViewTarget(float DeltaTime, struct FTViewTarget* OutVT);
	void CheckViewTarget(struct FTViewTarget* VT);
	void FillCameraCache(struct FTPOV* NewPOV);
	struct FTPOV BlendViewTargets(float Alpha, struct FTViewTarget* A, struct FTViewTarget* B);
	void ApplyAudioFade();
	void PostCameraCacheUpdate(struct FTViewTarget* OutVT);
	void DoUpdateCamera(float DeltaTime);
	void UpdateCamera(float DeltaTime);
	void SetDesiredColorScale(const struct FVector& NewColorScale, float InterpTime);
	struct FRotator GetCameraRotation();
	void GetCameraViewPoint(struct FVector* OutCamLoc, struct FRotator* OutCamRot);
	void UpdatePlayerFOV(float PCOwnerFOV);
	void SetFOV(float NewFOV);
	float GetFOVAngle();
	void InitializeFor(class APlayerController* PC);
	void ApplyCameraModifiers(float DeltaTime, struct FTPOV* OutPOV);
	void Destroyed();
	void PostBeginPlay();
	class UCameraModifier* CreateCameraModifier(class UClass* ModifierClass);
};


// Class Engine.PlayerController
// 0x02B0 (0x0608 - 0x0358)
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                                   // 0x0358(0x0004) (Const)
	class ACamera*                                     PlayerCamera;                                             // 0x035C(0x0004) (Edit, EditInline)
	class UClass*                                      CameraClass;                                              // 0x0360(0x0004) (Const)
	unsigned long                                      bFrozen : 1;                                              // 0x0364(0x0004)
	unsigned long                                      bPressedJump : 1;                                         // 0x0364(0x0004)
	unsigned long                                      bDoubleJump : 1;                                          // 0x0364(0x0004)
	unsigned long                                      bUpdatePosition : 1;                                      // 0x0364(0x0004)
	unsigned long                                      bUpdating : 1;                                            // 0x0364(0x0004)
	unsigned long                                      bNeverSwitchOnPickup : 1;                                 // 0x0364(0x0004) (Config, GlobalConfig)
	unsigned long                                      bCheatFlying : 1;                                         // 0x0364(0x0004)
	unsigned long                                      bCameraPositionLocked : 1;                                // 0x0364(0x0004)
	unsigned long                                      bShortConnectTimeOut : 1;                                 // 0x0364(0x0004)
	unsigned long                                      bPendingDestroy : 1;                                      // 0x0364(0x0004) (Const)
	unsigned long                                      bWasSpeedHack : 1;                                        // 0x0364(0x0004)
	unsigned long                                      bWasSaturated : 1;                                        // 0x0364(0x0004) (Const)
	unsigned long                                      bAimingHelp : 1;                                          // 0x0364(0x0004) (Config, GlobalConfig)
	unsigned long                                      bCameraCut : 1;                                           // 0x0364(0x0004) (Transient)
	unsigned long                                      bClientSimulatingViewTarget : 1;                          // 0x0364(0x0004)
	unsigned long                                      bHasVoiceHandshakeCompleted : 1;                          // 0x0364(0x0004)
	unsigned long                                      bCinematicMode : 1;                                       // 0x0364(0x0004)
	unsigned long                                      bInteractiveMode : 1;                                     // 0x0364(0x0004)
	unsigned long                                      bCinemaDisableInputMove : 1;                              // 0x0364(0x0004)
	unsigned long                                      bCinemaDisableInputLook : 1;                              // 0x0364(0x0004)
	unsigned long                                      bIgnoreNetworkMessages : 1;                               // 0x0364(0x0004)
	unsigned long                                      bShowKismetDrawText : 1;                                  // 0x0364(0x0004) (Config)
	unsigned long                                      bReplicateAllPawns : 1;                                   // 0x0364(0x0004)
	unsigned long                                      bIsUsingStreamingVolumes : 1;                             // 0x0364(0x0004)
	unsigned long                                      bIsExternalUIOpen : 1;                                    // 0x0364(0x0004)
	unsigned long                                      bIsControllerConnected : 1;                               // 0x0364(0x0004)
	unsigned long                                      bCheckSoundOcclusion : 1;                                 // 0x0364(0x0004)
	unsigned long                                      bDebugCameraAnims : 1;                                    // 0x0364(0x0004)
	unsigned long                                      bBlockCameraAnimsFromOverridingPostProcess : 1;           // 0x0364(0x0004)
	unsigned long                                      bLogHearSoundOverflow : 1;                                // 0x0364(0x0004) (Config, GlobalConfig)
	unsigned long                                      bCheckRelevancyThroughPortals : 1;                        // 0x0364(0x0004) (Config, GlobalConfig)
	unsigned long                                      bPredatorDetailLighting : 1;                              // 0x0364(0x0004)
	unsigned long                                      bDebugClientAdjustPosition : 1;                           // 0x0368(0x0004) (Edit)
	float                                              MaxResponseTime;                                          // 0x036C(0x0004)
	float                                              WaitDelay;                                                // 0x0370(0x0004)
	class APawn*                                       AcknowledgedPawn;                                         // 0x0374(0x0004)
	TEnumAsByte<EDoubleClickDir>                       DoubleClickDir;                                           // 0x0378(0x0001)
	unsigned char                                      bIgnoreMoveInput;                                         // 0x0379(0x0001)
	unsigned char                                      bIgnoreLookInput;                                         // 0x037A(0x0001)
	unsigned char                                      bRun;                                                     // 0x037B(0x0001) (Input)
	unsigned char                                      bDuck;                                                    // 0x037C(0x0001) (Input)
	unsigned char                                      NetPlayerIndex;                                           // 0x037D(0x0001) (Const, DuplicateTransient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x037E(0x0002) MISSED OFFSET
	class AActor*                                      ViewTarget;                                               // 0x0380(0x0004) (Const)
	class APlayerReplicationInfo*                      RealViewTarget;                                           // 0x0384(0x0004)
	class UInterpTrackInstDirector*                    ControllingDirTrackInst;                                  // 0x0388(0x0004) (Transient)
	float                                              FOVAngle;                                                 // 0x038C(0x0004)
	float                                              DesiredFOV;                                               // 0x0390(0x0004)
	float                                              DefaultFOV;                                               // 0x0394(0x0004)
	float                                              LODDistanceFactor;                                        // 0x0398(0x0004) (Const)
	struct FRotator                                    TargetViewRotation;                                       // 0x039C(0x000C) (Net)
	float                                              TargetEyeHeight;                                          // 0x03A8(0x0004) (Net)
	struct FRotator                                    BlendedTargetViewRotation;                                // 0x03AC(0x000C)
	class AHUD*                                        myHUD;                                                    // 0x03B8(0x0004)
	class AHUD*                                        mySecondaryHUD;                                           // 0x03BC(0x0004)
	class UClass*                                      SavedMoveClass;                                           // 0x03C0(0x0004)
	class USavedMove*                                  SavedMoves;                                               // 0x03C4(0x0004)
	class USavedMove*                                  FreeMoves;                                                // 0x03C8(0x0004)
	class USavedMove*                                  PendingMove;                                              // 0x03CC(0x0004)
	struct FVector                                     LastAckedAccel;                                           // 0x03D0(0x000C)
	float                                              CurrentTimeStamp;                                         // 0x03DC(0x0004)
	float                                              LastUpdateTime;                                           // 0x03E0(0x0004)
	float                                              ServerTimeStamp;                                          // 0x03E4(0x0004)
	float                                              TimeMargin;                                               // 0x03E8(0x0004)
	float                                              ClientUpdateTime;                                         // 0x03EC(0x0004)
	float                                              MaxTimeMargin;                                            // 0x03F0(0x0004)
	float                                              LastActiveTime;                                           // 0x03F4(0x0004)
	float                                              ServerLastAdvancedTimestamp;                              // 0x03F8(0x0004)
	float                                              ServerTimeAdvanced;                                       // 0x03FC(0x0004)
	float                                              ClientTimeAdvanced;                                       // 0x0400(0x0004)
	float                                              TotalServerTimeAdvanced;                                  // 0x0404(0x0004)
	float                                              TotalClientTimeAdvanced;                                  // 0x0408(0x0004)
	int                                                HawkenNumSpeedHacks;                                      // 0x040C(0x0004)
	int                                                ClientCap;                                                // 0x0410(0x0004)
	float                                              DynamicPingThreshold;                                     // 0x0414(0x0004) (Deprecated)
	float                                              LastPingUpdate;                                           // 0x0418(0x0004)
	float                                              LastSpeedHackLog;                                         // 0x041C(0x0004)
	struct FClientAdjustment                           PendingAdjustment;                                        // 0x0420(0x0034)
	int                                                GroundPitch;                                              // 0x0454(0x0004)
	class UCheatManager*                               CheatManager;                                             // 0x0458(0x0004) (Transient)
	class UClass*                                      CheatClass;                                               // 0x045C(0x0004)
	class UPlayerInput*                                PlayerInput;                                              // 0x0460(0x0004) (Edit, Transient, EditInline)
	class UClass*                                      InputClass;                                               // 0x0464(0x0004)
	struct FVector                                     FailedPathStart;                                          // 0x0468(0x000C) (Const)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x0474(0x0004) (ExportObject, Component, EditInline)
	struct FString                                     ForceFeedbackManagerClassName;                            // 0x0478(0x000C) (Config, NeedCtorLink)
	class UForceFeedbackManager*                       ForceFeedbackManager;                                     // 0x0484(0x0004) (Transient)
	TArray<class UInteraction*>                        Interactions;                                             // 0x0488(0x000C) (Transient, NeedCtorLink)
	TArray<struct FUniqueNetId>                        VoiceMuteList;                                            // 0x0494(0x000C) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        GameplayVoiceMuteList;                                    // 0x04A0(0x000C) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        VoicePacketFilter;                                        // 0x04AC(0x000C) (NeedCtorLink)
	TArray<struct FConnectedPeerInfo>                  ConnectedPeers;                                           // 0x04B8(0x000C) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        BestNextHostPeers;                                        // 0x04C4(0x000C) (NeedCtorLink)
	class UOnlineGameSearch*                           MigratedSearchToJoin;                                     // 0x04D0(0x0004)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x04D4(0x0004)
	TScriptInterface<class UOnlineVoiceInterface>      VoiceInterface;                                           // 0x04D8(0x0008)
	class UUIDataStore_OnlinePlayerData*               OnlinePlayerData;                                         // 0x04E0(0x0004)
	float                                              InteractDistance;                                         // 0x04E4(0x0004) (Config)
	struct FName                                       DelayedJoinSessionName;                                   // 0x04E8(0x0008)
	TArray<struct FInputMatchRequest>                  InputRequests;                                            // 0x04F0(0x000C) (NeedCtorLink)
	float                                              LastBroadcastTime;                                        // 0x04FC(0x0004)
	struct FString                                     LastBroadcastString[0x4];                                 // 0x0500(0x000C) (NeedCtorLink)
	TArray<struct FName>                               PendingMapChangeLevelNames;                               // 0x0530(0x000C) (NeedCtorLink)
	class ACoverReplicator*                            MyCoverReplicator;                                        // 0x053C(0x0004)
	TArray<struct FDebugTextInfo>                      DebugTextList;                                            // 0x0540(0x000C) (NeedCtorLink)
	float                                              SpectatorCameraSpeed;                                     // 0x054C(0x0004)
	class UNetConnection*                              PendingSwapConnection;                                    // 0x0550(0x0004) (Const, DuplicateTransient)
	float                                              MinRespawnDelay;                                          // 0x0554(0x0004)
	int                                                MaxConcurrentHearSounds;                                  // 0x0558(0x0004) (Config, GlobalConfig)
	TArray<class UAudioComponent*>                     HearSoundActiveComponents;                                // 0x055C(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UAudioComponent*>                     HearSoundPoolComponents;                                  // 0x0568(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class AActor*>                              HiddenActors;                                             // 0x0574(0x000C) (NeedCtorLink)
	struct FLinearColor                                PredatorVisionColor;                                      // 0x0580(0x0010)
	float                                              LastSpectatorStateSynchTime;                              // 0x0590(0x0004)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0594(0x000C) MISSED OFFSET
	struct FQuat                                       CurHmdOrientation;                                        // 0x05A0(0x0010)
	struct FQuat                                       BaseHmdOrientation;                                       // 0x05B0(0x0010)
	struct FRotator                                    BaseHmdRotation;                                          // 0x05C0(0x000C)
	struct FRotator                                    HmdRotDelta;                                              // 0x05CC(0x000C)
	struct FRotator                                    MouseAim;                                                 // 0x05D8(0x000C)
	struct FScriptDelegate                             __OnMissingPeersUnregistered__Delegate;                   // 0x05E4(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __CanUnpause__Delegate;                                   // 0x05F0(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __InputMatchDelegate__Delegate;                           // 0x05FC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerController");
		return ptr;
	}


	void ReplicateKismetSetLocation(class AActor* TargetActor, const struct FVector& Loc, const struct FRotator& Rot);
	void SetMatineeConstantCameraAnim(bool bOn, unsigned char Type, float Rate);
	bool NotifyDisconnect(const struct FString& Command);
	void ReceivedGameClass(class UClass* GameClass);
	void LogOutBugItAIGoToLogFile(const struct FString& InScreenShotDesc, const struct FString& InGoString, const struct FString& InLocString);
	void LogOutBugItGoToLogFile(const struct FString& InScreenShotDesc, const struct FString& InGoString, const struct FString& InLocString);
	void DisableDebugAI();
	void OnEngineInitialTick();
	void BugItStringCreator(struct FVector* ViewLocation, struct FRotator* ViewRotation, struct FString* GoString, struct FString* LocString);
	void BugItAI(const struct FString& ScreenShotDescription);
	void LogLoc();
	void BugIt(const struct FString& ScreenShotDescription);
	void BugItWorker(const struct FVector& TheLocation, const struct FRotator& TheRotation);
	void BugItGoString(const struct FString& TheLocation, const struct FString& TheRotation);
	void BugItGo(float X, float Y, float Z, int Pitch, int Yaw, int Roll);
	bool HasPeerConnection(struct FUniqueNetId* PeerNetId);
	void OnSetSoundMode(class USeqAct_SetSoundMode* Action);
	void ClientSpawnCameraLensEffect(class UClass* LensEffectEmitterClass);
	void DebugCameraAnims();
	void ClientStopCameraAnim(class UCameraAnim* AnimToStop, bool bImmediate);
	void ClientPlayCameraAnim(class UCameraAnim* AnimToPlay, float Scale, float Rate, float BlendInTime, float BlendOutTime, bool bLoop, bool bRandomStartTime, TEnumAsByte<ECameraAnimPlaySpace> Space, const struct FRotator& CustomPlaySpace);
	void OnCameraShake(class USeqAct_CameraShake* inAction);
	void ClientStopCameraShake(class UCameraShake* Shake);
	void ClientPlayCameraShake(class UCameraShake* Shake, float Scale, bool bTryForceFeedback, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void DoForceFeedbackForScreenShake(class UCameraShake* ShakeData, float ShakeScale);
	void InputMatchDelegate();
	void Sentinel_PostAcquireTravelTheWorldPoints();
	void Sentinel_PreAcquireTravelTheWorldPoints();
	void Sentinel_SetupForGamebasedTravelTheWorld();
	void OnFlyThroughHasEnded(class USeqAct_FlyThroughHasEnded* inAction);
	bool GetAchievementProgression(int AchievementId, float* CurrentValue, float* MaxValue);
	struct FString STATIC_GetPartyGameTypeName();
	struct FString STATIC_GetPartyMapName();
	bool IsPartyLeader();
	void ClientAddTextureStreamingLoc(const struct FVector& InLoc, float Duration, bool bOverrideLocation);
	void ClientPrestreamTextures(class AActor* ForcedActor, float ForceDuration, bool bEnableStreaming, int CinematicTextureGroups);
	void ClientSetForceMipLevelsToBeResident(class UMaterialInterface* Material, float ForceDuration, int CinematicTextureGroups);
	void ClientControlMovieTexture(class UTextureMovie* MovieTexture, TEnumAsByte<EMovieControlType> Mode);
	int GetSplitscreenPlayerCount();
	class APlayerReplicationInfo* GetSplitscreenPlayerByIndex(int PlayerIndex);
	bool IsSplitscreenPlayer(int* out_SplitscreenPlayerIndex);
	bool IsPrimaryPlayer();
	void ServerNotifyPartyHostLeaving(const struct FUniqueNetId& PartyHostPlayerId);
	void ClientNotifyPartyHostLeaving(const struct FUniqueNetId& PartyHostPlayerId);
	void ClientReturnToParty(const struct FUniqueNetId& RequestingPlayerId);
	void OnJoinTravelToSessionComplete(const struct FName& SessionName, bool bWasSuccessful);
	void PreJoinUpdateGameSettings(const struct FName& SessionName, class UOnlineGameSettings* GameSettings);
	void ClientTravelToSession(const struct FName& SessionName, class UClass* SearchClass, unsigned char PlatformSpecificInfo);
	void PathClear();
	void PathChild(int Cnt);
	void PathStep(int Cnt);
	void SoakPause(class APawn* P);
	void IncrementNumberOfMatchesPlayed();
	bool CanViewUserCreatedContent();
	void ClientEndOnlineGame();
	void ClientStartOnlineGame();
	void ServerRegisterClientStatGuid(const struct FString& StatGuid);
	void OnRegisterHostStatGuidComplete(bool bWasSuccessful);
	void ClientRegisterHostStatGuid(const struct FString& StatGuid);
	void RemoveAllDebugStrings();
	void RemoveDebugText(class AActor* SrcActor);
	void AddDebugText(const struct FString& DebugText, class AActor* SrcActor, float Duration, const struct FVector& offset, const struct FVector& DesiredOffset, const struct FColor& TextColor, bool bSkipOverwriteCheck, bool bAbsoluteLocation, bool bKeepAttachedToActor, class UFont* InFont);
	void DrawDebugTextList(class UCanvas* Canvas, float RenderDelta);
	void OnDestroy(class USeqAct_Destroy* Action);
	void ClientStartNetworkedVoice();
	void ClientStopNetworkedVoice();
	void ClientSetHostUniqueId(const struct FUniqueNetId& InHostId);
	void ClientWriteLeaderboardStats(class UClass* OnlineStatsWriteClass, bool bIsIncomplete);
	void ClientWriteOnlinePlayerScores(int LeaderboardId);
	void ClientArbitratedMatchEnded();
	void NotifyNotEnoughSpaceInInvite();
	void NotifyNotAllPlayersCanJoinInvite();
	void NotifyInviteFailed();
	void OnInviteJoinComplete(const struct FName& SessionName, bool bWasSuccessful);
	struct FString ModifyClientURL(const struct FString& URL);
	void OnDestroyForInviteComplete(const struct FName& SessionName, bool bWasSuccessful);
	void OnEndForInviteComplete(const struct FName& SessionName, bool bWasSuccessful);
	void ClearInviteDelegates();
	bool CanAllPlayersPlayOnline();
	bool InviteHasEnoughSpace(class UOnlineGameSettings* InviteSettings);
	void OnGameInviteAccepted(struct FOnlineGameSearchResult* InviteResult);
	void ServerRegisteredForArbitration(bool bWasSuccessful);
	void OnArbitrationRegisterComplete(const struct FName& SessionName, bool bWasSuccessful);
	void ClientRegisterForArbitration();
	void ClientWasKicked(const struct FString& KickReason, const struct FString& KickTitle);
	bool IsShowingSubtitles();
	void SetShowSubtitles(bool bValue);
	void NotifyDirectorControl(bool bNowControlling, class USeqAct_Interp* CurrentMatinee);
	void ServerUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ServerMutePlayer(const struct FUniqueNetId& PlayerNetId);
	void GameplayUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void GameplayMutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ClientUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ClientMutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ClientVoiceHandshakeComplete();
	class APlayerController* STATIC_GetPlayerControllerFromNetId(const struct FUniqueNetId& PlayerNetId);
	void ClientSetOnlineStatus();
	void SeamlessTravelFrom(class APlayerController* OldPC);
	void SeamlessTravelTo(class APlayerController* NewPC);
	void GetSeamlessTravelActorList(bool bToEntry, TArray<class AActor*>* ActorList);
	bool IsPlayerMuted(struct FUniqueNetId* Sender);
	class UUIInteraction* GetUIController();
	void SaveActorConfig(const struct FName& actorName);
	void SaveClassConfig(const struct FString& ClassName);
	void ClientWaitForLevelsVisible(class USeqAct_WaitForLevelsVisible* inAction);
	void ClientSetBlockOnAsyncLoading();
	void ClientFlushLevelStreaming();
	void ClientCancelPendingMapChange();
	void ClientCommitMapChange();
	void DelayedPrepareMapChange();
	void ClientPrepareMapChange(const struct FName& LevelName, bool bFirst, bool bLast);
	void ServerUpdateLevelVisibility(const struct FName& PackageName, bool bIsVisible);
	void ClientUpdateLevelStreamingStatus(const struct FName& PackageName, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad);
	void LevelStreamingStatusChanged(class ULevelStreaming* LevelObject, bool bNewShouldBeLoaded, bool bNewShouldBeVisible, bool bNewShouldBlockOnLoad);
	void ClientForceGarbageCollection();
	void OnConsoleCommand(class USeqAct_ConsoleCommand* inAction);
	void ResetPlayerMovementInput();
	bool IsLookInputIgnored();
	void IgnoreLookInput(bool bNewLookInput);
	bool IsMoveInputIgnored();
	void IgnoreMoveInput(bool bNewMoveInput);
	void ClientSetCinematicMode(bool bInCinematicMode, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsHUD);
	void SetCinematicMode(bool bInCinematicMode, bool bHidePlayer, bool bAffectsHUD, bool bAffectsMovement, bool bAffectsTurning, bool bAffectsButtons);
	void OnToggleCinematicMode(class USeqAct_ToggleCinematicMode* Action);
	bool IsForceFeedbackAllowed();
	void ClientStopForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform);
	void ClientPlayForceFeedbackWaveform(class UForceFeedbackWaveform* FFWaveform, class AActor* FFWaveformInstigator);
	void PlayRumble(class UAnimNotify_Rumble* TheAnimNotify);
	void OnForceFeedback(class USeqAct_ForceFeedback* Action);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	void ShowGameState();
	void ShowPlayerState();
	void ServerRemoteEvent(const struct FName& EventName);
	void RE(const struct FName& EventName);
	void RemoteEvent(const struct FName& EventName);
	void ListCE();
	void ListConsoleEvents();
	void CE(const struct FName& EventName);
	void CauseEvent(const struct FName& EventName);
	void ServerCauseEvent(const struct FName& EventName);
	void OnToggleHUD(class USeqAct_ToggleHUD* inAction);
	void OnSetCameraTarget(class USeqAct_SetCameraTarget* inAction);
	void ClientClearKismetText(const struct FVector2D& MessageOffset);
	void ClientDrawKismetText(const struct FKismetDrawTextInfo& DrawTextInfo, float DisplayTime);
	void OnDrawText(class USeqAct_DrawText* inAction);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void ClientIgnoreLookInput(bool bIgnore);
	void ClientIgnoreMoveInput(bool bIgnore);
	void OnToggleInput(class USeqAct_ToggleInput* inAction);
	void AdjustHUDRenderSize(int FullScreenSizeX, int FullScreenSizeY, int* X, int* Y, int* SizeX, int* SizeY);
	void DrawHUD(class AHUD* H);
	bool CanRestartPlayer();
	void ServerViewSelf(const struct FViewTargetTransitionParams& TransitionParams);
	void ViewAPlayer(int Dir);
	class APlayerReplicationInfo* GetNextViewablePlayer(int Dir);
	void ServerViewPrevPlayer();
	void ServerViewNextPlayer();
	void ServerSetSpectatorLocation(const struct FVector& NewLoc);
	bool IsSpectating();
	void AdjustPlayerWalkingMoveAccel(struct FVector* newAccel);
	void CheckJumpOrDuck();
	struct FRotator LimitViewRotation(const struct FRotator& ViewRotation, float ViewPitchMin, float ViewPitchMax);
	void ProcessViewRotation(float DeltaTime, const struct FRotator& DeltaRot, struct FRotator* out_ViewRotation);
	void UpdateRotation(float DeltaTime);
	void ViewShake(float DeltaTime);
	void GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	void ValidatePlayerCamera();
	void SpawnPlayerCamera();
	void ServerVerifyViewTarget();
	class AActor* GetViewTarget();
	void ClientSetViewTarget(class AActor* A, const struct FViewTargetTransitionParams& TransitionParams);
	void SetViewTargetWithBlend(class AActor* NewViewTarget, float BlendTime, TEnumAsByte<EViewTargetBlendFunction> BlendFunc, float BlendExp, bool bLockOutgoing);
	void SetViewTarget(class AActor* NewViewTarget, const struct FViewTargetTransitionParams& TransitionParams);
	bool IsLocalController();
	bool IsLocalPlayerController();
	float GetFOVAngle();
	void AdjustFOV(float DeltaTime);
	bool NotifyLanded(const struct FVector& HitNormal, class AActor* FloorActor);
	float AimHelpDot(bool bInstantHit);
	struct FRotator GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc);
	void CameraLookAtFinished(class USeqAct_CameraLookAt* Action);
	bool AimingHelp(bool bInstantHit);
	void PlayerMove(float DeltaTime);
	void PlayerTick(float DeltaTime);
	void NotifyChangedWeapon(class AWeapon* PreviousWeapon, class AWeapon* NewWeapon);
	void ClientGameEnded(class AActor* EndGameFocus, bool bIsWinner);
	bool IsMatchOver();
	void GameHasEnded(class AActor* EndGameFocus, bool bIsWinner);
	void ClientRestart(class APawn* NewPawn);
	void EnterStartState();
	void ForceSingleNetUpdateFor(class AActor* Target);
	bool HasClientLoadedCurrentWorld();
	void NotifyLoadedWorld(const struct FName& WorldPackageName, bool bFinalDest);
	void ServerNotifyLoadedWorld(const struct FName& WorldPackageName);
	void Restart(bool bVehicleTransition);
	void ClientSetProgressMessage(TEnumAsByte<EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title, bool bIgnoreFutureNetworkMessages, TEnumAsByte<EProgressMessageSubType> MessageSubType);
	bool OverrideAudioListener(struct FVector* OverrideListenerLocation, float* OverrideAttenuationMultiplier);
	void SwitchLevel(const struct FString& URL);
	void ServerChangeTeam(int N);
	void ChangeTeam(const struct FString& TeamName);
	void SwitchTeam();
	void ServerChangeName(const struct FString& S);
	void SetName(const struct FString& S);
	void ServerSuicide();
	void Suicide();
	bool TriggerInteracted();
	bool FindVehicleToDrive();
	bool PerformedUseAction();
	void ServerUse();
	void Use();
	void GetTriggerUseList(float interactDistanceToCheck, float crosshairDist, float minDot, bool bUsuableOnly, TArray<class ATrigger*>* out_useList);
	void StopAltFire(unsigned char FireModeNum);
	void StartAltFire(unsigned char FireModeNum);
	void StopFire(unsigned char FireModeNum);
	void StartFire(unsigned char FireModeNum);
	void NextWeapon();
	void PrevWeapon();
	void ServerThrowWeapon();
	void ThrowWeapon();
	void UTrace();
	void ServerUTrace();
	void ConditionalPause(bool bDesiredPauseState);
	void ServerPause();
	void Pause();
	bool IsPaused();
	bool SetPause(bool bPause, const struct FScriptDelegate& CanUnpauseDelegate);
	bool CanUnpause();
	void ClientPauseRumble(bool bShouldPauseRumble);
	void PauseRumbleForAllPlayers(bool bShouldPauseRumble);
	void LocalTravel(const struct FString& URL);
	void RestartLevel();
	void ServerSpeech(const struct FName& Type, int Index, const struct FString& Callsign);
	void Speech(const struct FName& Type, int Index, const struct FString& Callsign);
	void ServerRestartGame();
	void HandleWalking();
	void ServerUpdateCamera(const struct FVector& CamLoc, int CamPitchAndYaw);
	void CallServerMove(class USavedMove* NewMove, const struct FVector& ClientLoc, unsigned char ClientRoll, int View, class USavedMove* OldMove);
	void ReplicateMove(float DeltaTime, const struct FVector& newAccel, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot);
	int CompressAccel(int C);
	class USavedMove* GetFreeMove();
	void ClientUpdatePosition();
	void ClearAckedMoves();
	void ServerUpdatePing(int NewPing);
	void UpdateStateFromAdjustment(const struct FName& NewState);
	void LongClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ);
	bool MoveMatches(class USavedMove* CurMove);
	bool SkipPositionUpdateForRM();
	void UpdatePing(float TimeStamp);
	void ClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase);
	void ClientAckGoodMove(float TimeStamp);
	void ClientCapBandwidth(int Cap);
	void ShortClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase);
	void VeryShortClientAdjustPosition(float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase);
	void MoveAutonomous(float DeltaTime, unsigned char CompressedFlags, const struct FVector& newAccel, const struct FRotator& DeltaRot);
	void ProcessMove(float DeltaTime, const struct FVector& newAccel, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot);
	void ProcessDrive(float InForward, float InStrafe, float InUp, bool InJump);
	void ServerDrive(float InForward, float InStrafe, float aUp, bool InJump, int View);
	void SendClientAdjustment();
	void ServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char MoveFlags, unsigned char ClientRoll, int View);
	void ServerMoveHandleClientError(float TimeStamp, const struct FVector& Accel, const struct FVector& ClientLoc);
	float GetServerMoveDeltaTime(float TimeStamp);
	void OnSpeedHackDetection(float ClientDeltaTime);
	void OldServerMove(float OldTimeStamp, unsigned char OldAccelX, unsigned char OldAccelY, unsigned char OldAccelZ, unsigned char OldMoveFlags);
	void DualServerMove(float TimeStamp0, const struct FVector& InAccel0, unsigned char PendingFlags, int View0, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, unsigned char NewFlags, unsigned char ClientRoll, int View);
	void ForceDeathUpdate();
	bool UsingFirstPersonCamera();
	void ClientSetCameraFade(bool bEnableFading, const struct FColor& FadeColor, const struct FVector2D& FadeAlpha, float FadeTime, bool bFadeAudio);
	void ResetCameraMode();
	void SetCameraMode(const struct FName& NewCamMode);
	void ClientSetCameraMode(const struct FName& NewCamMode);
	void ServerCamera(const struct FName& NewMode);
	void Camera(const struct FName& NewMode);
	void PreClientTravel(const struct FString& PendingURL, TEnumAsByte<ETravelType> TravelType, bool bIsSeamlessTravel);
	void ServerTeamSay(const struct FString& msg);
	void TeamSay(const struct FString& msg);
	void ClientAdminMessage(const struct FString& msg);
	void ServerSay(const struct FString& msg);
	void Say(const struct FString& msg);
	bool AllowTextMessage(const struct FString& msg);
	void ServerMutate(const struct FString& MutateString);
	void Mutate(const struct FString& MutateString);
	void ResetAim();
	void SetEyeHeight(float H);
	void FOV(float F);
	void ResetFOV();
	void SetFOV(float NewFOV);
	void FixFOV();
	void Destroyed();
	void CleanupPawn();
	void ClearOnlineDelegates();
	void OnPartyMembersInfoChanged(const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, int CustomData1, int CustomData2, int CustomData3, int CustomData4);
	void OnPartyMemberListChanged(bool bJoinedOrLeft, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID);
	void RegisterOnlineDelegates();
	void PlayBeepSound();
	void TeamMessage(class APlayerReplicationInfo* PRI, const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void SpeakTTS(const struct FString& S, class APlayerReplicationInfo* PRI);
	void TeamTalk();
	void Talk();
	class USoundCue* CreateTTSSoundCue(const struct FString& StrToSpeak, class APlayerReplicationInfo* PRI);
	bool AllowTTSMessageFrom(class APlayerReplicationInfo* PRI);
	bool CanCommunicate();
	void ClientMessage(const struct FString& S, const struct FName& Type, float MsgLifeTime);
	void ClientPlayActorFaceFXAnim(class AActor* SourceActor, class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay);
	void Kismet_ClientStopSound(class USoundCue* ASound, class AActor* SourceActor, float FadeOutTime);
	void Kismet_ClientPlaySound(class USoundCue* ASound, class AActor* SourceActor, float VolumeMultiplier, float PitchMultiplier, float FadeInTime, bool bSuppressSubtitles, bool bSuppressSpatialization);
	bool IsClosestLocalPlayerToActor(class AActor* TheActor);
	void ClientHearSound(class USoundCue* ASound, class AActor* SourceActor, const struct FVector& SourceLocation, bool bStopWhenOwnerDestroyed, bool bIsOccluded);
	class UAudioComponent* GetPooledAudioComponent(class USoundCue* ASound, class AActor* SourceActor, bool bStopWhenOwnerDestroyed, bool bUseLocation, const struct FVector& SourceLocation);
	void HearSoundFinished(class UAudioComponent* AC);
	void ClientPlaySound(class USoundCue* ASound);
	void ReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void CleanupPRI();
	void HandlePickup(class AInventory* Inv);
	void ClientSetSecondaryHUD(class UClass* newHUDType);
	void ClientSetHUD(class UClass* newHUDType);
	void PawnDied(class APawn* P);
	void UnPossess();
	void ServerAcknowledgePossession(class APawn* P);
	void AcknowledgePossession(class APawn* P);
	void Possess(class APawn* aPawn, bool bVehicleTransition);
	void GivePawn(class APawn* NewPawn);
	void AskForPawn();
	void ClientGotoState(const struct FName& NewState, const struct FName& NewLabel);
	void SetTiltActive(bool bActive);
	bool IsMouseAvailable();
	bool IsKeyboardAvailable();
	void SetUseTiltForwardAndBack(bool bActive);
	void SetOnlyUseControllerTiltInput(bool bActive);
	void SetControllerTiltActive(bool bActive);
	bool IsControllerTiltActive();
	void SetRumbleScale(float ScaleBy);
	void ReloadProfileSettings();
	void UnregisterStandardPlayerDataStores();
	void UnregisterPlayerDataStores();
	void RegisterStandardPlayerDataStores();
	void RegisterCustomPlayerDataStores();
	void RegisterPlayerDataStores();
	void ClientInitializeDataStores();
	void InitInputSystem();
	class UOnlineSubsystem* GetOnlineSubsystem();
	void PostControllerIdChange();
	void PreControllerIdChange();
	void CleanOutSavedMoves();
	void ClientReset();
	void Reset();
	void SpawnDefaultHUD();
	void EnableCheats();
	void AddCheats(bool bForce);
	void KickWarning();
	void ServerGivePawn();
	void ServerShortTimeout();
	void OnHawkenSpeedHackDetection();
	void ResetTimeMargin();
	void PreRender(class UCanvas* Canvas);
	void OnJoinMigratedGame(const struct FName& SessionName, bool bWasSuccessful);
	void PeerDesignatedAsClient(const struct FName& SessionName);
	void OnUnregisterPlayerCompleteForJoinMigrate(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful);
	void PeerReceivedMigratedSession(const struct FUniqueNetId& FromPeerNetId, const struct FName& SessionName, class UClass* SearchClass, unsigned char PlatformSpecificInfo);
	void TellPeerToTravelToSession(const struct FUniqueNetId& ToPeerNetId, const struct FName& SessionName, class UClass* SearchClass, unsigned char PlatformSpecificInfo, int PlatformSpecificInfoSize);
	void TellPeerToTravel(const struct FUniqueNetId& ToPeerNetId);
	void PeerTravelAsHost(float TravelCountdownTimer, const struct FString& URL);
	struct FString GetNewPeerHostURL();
	void PeerDesignatedAsHost(const struct FName& SessionName);
	class UClass* GetCurrentSearchClass();
	void OnHostMigratedOnlineGame(const struct FName& SessionName, bool bWasSuccessful);
	void OnUnregisterPlayerCompleteForHostMigrate(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful);
	bool RemoveMissingPeersFromSession(const struct FName& SessionName, const struct FScriptDelegate& UnregisterDelegate);
	class APlayerReplicationInfo* GetPRIFromPlayerName(const struct FString& PlayerName);
	class APlayerReplicationInfo* GetPRIFromNetId(const struct FUniqueNetId& PlayerID);
	void OnMissingPeersUnregistered(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful);
	void GetRegisteredPlayersInSession(const struct FName& SessionName, TArray<struct FUniqueNetId>* OutRegisteredPlayers);
	void NotifyHostMigrationStarted();
	bool MigrateNewHost();
	bool IsBestHostPeer(const struct FUniqueNetId& PeerNetId);
	void NotifyPeerDisconnectHost(const struct FUniqueNetId& PeerNetId);
	void ClientUpdateBestNextHosts(const struct FUniqueNetId& SortedNextHosts, unsigned char NumEntries);
	void ServerRemovePeer(const struct FUniqueNetId& PeerNetId);
	void ServerAddPeer(const struct FUniqueNetId& PeerNetId, TEnumAsByte<ENATType> NatType);
	void RemovePeer(const struct FUniqueNetId& PeerNetId);
	void AddPeer(const struct FUniqueNetId& PeerNetId, TEnumAsByte<ENATType> NatType);
	int FindConnectedPeerIndex(const struct FUniqueNetId& PeerNetId);
	void ReceivedPlayer();
	void PostBeginPlay();
	class ACoverReplicator* SpawnCoverReplicator();
	bool CanUnpauseControllerConnected();
	void OnControllerChanged(int ControllerId, bool bIsConnected);
	bool CanUnpauseExternalUI();
	void OnExternalUIChanged(bool bIsOpening);
	void ForceClearUnpauseDelegates();
	void DisableActorHeadTracking(class AActor* TargetActor);
	void EnableActorHeadTracking(class AActor* TargetActor, const struct FName& TrackControllerName, class UClass* ActorClassesToLookAt, bool bLookAtPawns, float MinLookAtTime, float MaxLookAtTime, float MaxInterestTime, float LookAtActorRadius, const struct FName& TargetBoneNames);
	void FellOutOfWorld(class UClass* dmgType);
	void CleanUpAudioComponents();
	int FindStairRotation(float DeltaTime);
	bool CheckSpeedHack(float DeltaTime);
	void ServerProcessConvolve(const struct FString& C, int H);
	void ClientConvolve(const struct FString& C, int H);
	void SetAudioGroupVolume(const struct FName& GroupName, float Volume);
	void SetAllowMatureLanguage(bool bAllowMatureLanguge);
	struct FString PasteFromClipboard();
	void CopyToClipboard(const struct FString& Text);
	struct FString GetDefaultURL(const struct FString& Option);
	void STATIC_UpdateURL(const struct FString& NewOption, const struct FString& NewValue, bool bSave1Default);
	void ClientTravel(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bSeamless, const struct FGuid& MapPackageGuid);
	struct FString ConsoleCommand(const struct FString& Command, bool bWriteToLog);
	struct FString GetServerNetworkAddress();
	struct FString GetPlayerNetworkAddress();
	void SetNetSpeed(int NewSpeed);
};


// Class Engine.PlatformInterfaceBase
// 0x0018 (0x0054 - 0x003C)
class UPlatformInterfaceBase : public UObject
{
public:
	TArray<struct FDelegateArray>                      AllDelegates;                                             // 0x003C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __PlatformInterfaceDelegate__Delegate;                    // 0x0048(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlatformInterfaceBase");
		return ptr;
	}


	void ClearDelegate(int DelegateType, const struct FScriptDelegate& InDelegate);
	void AddDelegate(int DelegateType, const struct FScriptDelegate& InDelegate);
	class UInAppMessageBase* STATIC_GetInAppMessageInterface();
	class UAppNotificationsBase* STATIC_GetAppNotificationsInterface();
	class UTwitterIntegrationBase* STATIC_GetTwitterIntegration();
	class UAnalyticEventsBase* STATIC_GetAnalyticEventsInterface();
	class UMicroTransactionBase* STATIC_GetMicroTransactionInterface();
	class UInGameAdManager* STATIC_GetInGameAdManager();
	class UFacebookIntegration* STATIC_GetFacebookIntegration();
	class UCloudStorageBase* STATIC_GetLocalStorageInterface();
	class UCloudStorageBase* STATIC_GetCloudStorageInterface();
	void CallDelegates(int DelegateType, struct FPlatformInterfaceDelegateResult* DelegateResult);
	void PlatformInterfaceDelegate(struct FPlatformInterfaceDelegateResult* Result);
};


// Class Engine.AppNotificationsBase
// 0x003C (0x0090 - 0x0054)
class UAppNotificationsBase : public UPlatformInterfaceBase
{
public:
	struct FLaunchNotificationInfo                     AppLaunchNotification;                                    // 0x0054(0x0024) (Const, NeedCtorLink)
	struct FScriptDelegate                             __OnReceivedLocalNotification__Delegate;                  // 0x0078(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReceivedRemoteNotification__Delegate;                 // 0x0084(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AppNotificationsBase");
		return ptr;
	}


	void DebugLogNotification(struct FNotificationInfo* Notification);
	void OnReceivedRemoteNotification(bool bWasAppActive, struct FNotificationInfo* Notification);
	void OnReceivedLocalNotification(bool bWasAppActive, struct FNotificationInfo* Notification);
	void CancelAllScheduledLocalNotifications();
	void ScheduleLocalNotification(int StartOffsetSeconds, struct FNotificationInfo* Notification);
	bool WasLaunchedViaNotification();
	void Init();
};


// Class Engine.CheatManager
// 0x0018 (0x0054 - 0x003C)
class UCheatManager : public UObject
{
public:
	struct FString                                     ViewingFrom;                                              // 0x003C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     OwnCamera;                                                // 0x0048(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CheatManager");
		return ptr;
	}


	void AnalyticsEndSession();
	void AnalyticsStartSession();
	void GetAnalyticsUserId();
	void SetAnalyticsUserId(const struct FString& UserId);
	void SendAnalyticsCachedEvents();
	void SendAnalyticsCurrencyGivenEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount);
	void SendAnalyticsCurrencyPurchaseEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount, const struct FString& RealCurrencyType, float RealMoneyCost, const struct FString& PaymentProvider);
	void SendAnalyticsItemPurchaseEvent(const struct FString& ItemId, const struct FString& Currency, int PerItemCost, int ItemQuantity);
	void SendAnalyticsUserAttributeEvent(const struct FString& AttributeName, const struct FString& AttributeValue);
	void SendAnalyticsEvent(const struct FString& EventName, const struct FString& AttributeName, const struct FString& AttributeValue);
	void OnRequestComplete(class UHttpRequestInterface* OriginalRequest, class UHttpResponseInterface* Response, bool bDidSucceed);
	void TestHttp(const struct FString& Verb, const struct FString& Payload, const struct FString& URL, bool bSendParallelRequest);
	void OnDeleteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename);
	void DebugDeleteUserFile(const struct FString& UserId, const struct FString& Filename);
	void OnReadUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename);
	void DebugReadUserFile(const struct FString& UserId, const struct FString& Filename);
	void OnWriteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename);
	void DebugWriteUserFile(const struct FString& UserId, const struct FString& Filename);
	void OnEnumerateUserFilesComplete(bool bWasSuccessful, const struct FString& UserId);
	void DebugQueryUserFiles(const struct FString& UserId);
	void OnReceivedLocalNotificationDebug(bool bWasAppActive, struct FNotificationInfo* Notification);
	void DebugNotification(const struct FString& MessageBody, int SecondsFromNow);
	void DrawLocationXYZ(float X, float Y, float Z);
	void DrawLocation(const struct FVector& Loc);
	void DumpCoverStats();
	void DebugEmsDownload();
	void DebugDeleteTitleFiles();
	void OnSaveComplete(bool bWasSuccessful, const struct FString& Filename);
	void DebugSaveTitleFile(const struct FString& Filename);
	void OnLoadComplete(bool bWasSuccessful, const struct FString& Filename);
	void OnDownloadComplete(bool bWasSuccessful, const struct FString& Filename);
	void DebugDownloadTitleFile(const struct FString& Filename, bool bFromCache);
	void DebugIniLocPatcher();
	void ToggleAILogging();
	void VerifyNavMeshCoverRefs();
	void PrintNavMeshObstacles();
	void PrintAllPathObjectEdges();
	void NavMeshVerification(float interval);
	void DrawUnsupportingEdges(const struct FString& PawnClassName);
	void VerifyNavMeshObjects();
	void LogParticleActivateSystemCalls(bool bShouldLog);
	void LogPlaySoundCalls(bool bShouldLog);
	void InitCheatManager();
	void VerbosePathDebug();
	void TestPylonConnectivity();
	void TestNavMeshPath(bool bDrawPath);
	void SetOnlineDebugLevel(int DebugLevel);
	void TestLevel();
	void StreamLevelOut(const struct FName& PackageName);
	void OnlyLoadLevel(const struct FName& PackageName);
	void StreamLevelIn(const struct FName& PackageName);
	void SetLevelStreamingStatus(const struct FName& PackageName, bool bShouldBeLoaded, bool bShouldBeVisible);
	void AllWeapons();
	void Loaded();
	void ViewClass(class UClass* aClass);
	void ViewBot();
	void ViewActor(const struct FName& actorName);
	void ViewPlayer(const struct FString& S);
	void ViewSelf(bool bQuiet);
	void RememberSpot();
	void FractureAllMeshesToMaximizeMemoryUsage();
	void FractureAllMeshes();
	void DestroyFractures(float Radius);
	void SuspendAI();
	void PlayersOnly();
	class AWeapon* GiveWeapon(const struct FString& WeaponClassStr);
	void Summon(const struct FString& ClassName);
	void Avatar(const struct FName& ClassName);
	void KillPawns();
	void KillAllPawns(class UClass* aClass);
	void KillAll(class UClass* aClass);
	void SetJumpSpeed(float F);
	void SetAllSpeed(float F);
	void SetSpeed(float F);
	void SetGravity(float F);
	void SetJumpZ(float F);
	void Slomo(float T);
	void God();
	void AllAmmo();
	void Ghost();
	void Walk();
	void Fly();
	void Amphibious();
	void EndPath();
	void ChangeSize(float F);
	void Teleport();
	void KillViewedActor();
	void WriteToLog(const struct FString& Param);
	void FreezeFrame(float Delay);
	void ListDynamicActors();
	void DebugPause();
	void EditAIByTrace();
	void DebugAI(const struct FName& Category);
	void FXStop(class UClass* aClass);
	void FXPlay(class UClass* aClass, const struct FString& FXAnimPath);
};


// Class Engine.Client
// 0x0014 (0x0050 - 0x003C)
class UClient : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	float                                              MinDesiredFrameRate;                                      // 0x0040(0x0004) (Config)
	float                                              DisplayGamma;                                             // 0x0044(0x0004) (Config)
	float                                              InitialButtonRepeatDelay;                                 // 0x0048(0x0004) (Config)
	float                                              ButtonRepeatDelay;                                        // 0x004C(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Client");
		return ptr;
	}

};


// Class Engine.ClipPadEntry
// 0x0018 (0x0054 - 0x003C)
class UClipPadEntry : public UObject
{
public:
	struct FString                                     Title;                                                    // 0x003C(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Text;                                                     // 0x0048(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ClipPadEntry");
		return ptr;
	}

};


// Class Engine.CloudSaveSystem
// 0x005C (0x0098 - 0x003C)
class UCloudSaveSystem : public UObject
{
public:
	TScriptInterface<class UCloudSaveSystemKVSInterface> KeyValueStore;                                            // 0x003C(0x0008) (Transient)
	TScriptInterface<class UCloudSaveSystemDataBlobStoreInterface> DataBlobStore;                                            // 0x0044(0x0008) (Transient)
	TArray<struct FGetSaveDataCallbackStruct>          OnGetSaveDataCallbacks;                                   // 0x004C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FSetSaveDataCallbackStruct>          OnSetSaveDataCallbacks;                                   // 0x0058(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             DeleteSaveDataCallback;                                   // 0x0064(0x000C) (Transient, NeedCtorLink)
	int                                                ActiveSlotForDelete;                                      // 0x0070(0x0004) (Transient)
	TArray<struct FSaveSlotOperation>                  ActiveSaveSlotOperations;                                 // 0x0074(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __OnGetSaveDataCallback__Delegate;                        // 0x0080(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SaveSystemCallback__Delegate;                           // 0x008C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CloudSaveSystem");
		return ptr;
	}


	bool GetKeyValue(int SaveSlot, const struct FString& KeyName, TEnumAsByte<EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value);
	bool GetDataStoreIDAndBlobNameForSaveSlot(int SaveSlot, struct FString* DataStoreID, struct FString* DataBlobName);
	bool SetKeyValue(int SaveSlot, const struct FString& KeyName, struct FPlatformInterfaceData* Value);
	bool InternalSetSaveSlotKeyValues(int SaveSlot, const struct FString& DataStoreID, const struct FString& SaveDataBlobName);
	bool SetSaveSlotKeyValues(const struct FString& DataStoreID, const struct FString& SaveDataBlobName, int* SaveSlot);
	void OnDeleteSaveDataComplete(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error);
	bool DeleteSaveData(int SaveSlot, const struct FScriptDelegate& InDeleteSaveDataCallback);
	void OnSetSaveDataComplete(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error);
	void SetSaveData(int SaveSlot, const struct FScriptDelegate& InSetSaveDataCallback, TArray<unsigned char>* SaveDataBlob);
	void OnGetSaveDataComplete(bool bWasSuccessful, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error, TArray<unsigned char>* DataBlob);
	void GetSaveData(int SaveSlot, const struct FScriptDelegate& OnGetSaveDataCallback);
	void Init(const TScriptInterface<class UCloudSaveSystemKVSInterface>& InKeyValueStore, const TScriptInterface<class UCloudSaveSystemDataBlobStoreInterface>& InDataBlobStore, int VersionNumber);
	class UObject* DeserializeObject(class UClass* ObjectClass, TEnumAsByte<ESaveDataVersionSupport> VersionSupport, int DataVersion, TArray<unsigned char>* Data);
	void SerializeObject(class UObject* ObjectToSerialize, int DataVersion, TArray<unsigned char>* Data);
	bool AreAnySlotOperationsActive();
	bool IsDeleteOperationActive();
	bool IsOperationActiveForSlot(int SlotIndex);
	bool WriteNumSaveSlots(int NumSaveSlots);
	int DoesSaveSlotKeyValueDataAlreadyExist(const struct FString& DataStoreID, const struct FString& DataBlobName);
	bool GetNumberOfSaveSlots(int* NumSaveSlots);
	void SaveSystemCallback(bool bWasSuccessful, int SaveSlot, const struct FString& Error);
	void OnGetSaveDataCallback(bool bWasSuccessful, int SaveSlot, const struct FString& Error, TArray<unsigned char>* DataBlob);
};


// Class Engine.CodecMovie
// 0x0004 (0x0040 - 0x003C)
class UCodecMovie : public UObject
{
public:
	float                                              PlaybackDuration;                                         // 0x003C(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CodecMovie");
		return ptr;
	}

};


// Class Engine.CodecMovieBink
// 0x0024 (0x0064 - 0x0040)
class UCodecMovieBink : public UCodecMovie
{
public:
	unsigned char                                      UnknownData00[0x24];                                      // 0x0040(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CodecMovieBink");
		return ptr;
	}

};


// Class Engine.CodecMovieFallback
// 0x0004 (0x0044 - 0x0040)
class UCodecMovieFallback : public UCodecMovie
{
public:
	float                                              CurrentTime;                                              // 0x0040(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CodecMovieFallback");
		return ptr;
	}

};


// Class Engine.CurveEdPresetCurve
// 0x0018 (0x0054 - 0x003C)
class UCurveEdPresetCurve : public UObject
{
public:
	struct FString                                     CurveName;                                                // 0x003C(0x000C) (Edit, Const, Localized, NeedCtorLink)
	TArray<struct FPresetGeneratedPoint>               Points;                                                   // 0x0048(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CurveEdPresetCurve");
		return ptr;
	}

};


// Class Engine.CustomPropertyItemHandler
// 0x0000 (0x003C - 0x003C)
class UCustomPropertyItemHandler : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CustomPropertyItemHandler");
		return ptr;
	}

};


// Class Engine.DamageType
// 0x0028 (0x0064 - 0x003C)
class UDamageType : public UObject
{
public:
	unsigned long                                      bArmorStops : 1;                                          // 0x003C(0x0004) (Edit)
	unsigned long                                      bCausedByWorld : 1;                                       // 0x003C(0x0004)
	unsigned long                                      bExtraMomentumZ : 1;                                      // 0x003C(0x0004)
	unsigned long                                      bCausesFracture : 1;                                      // 0x003C(0x0004) (Edit)
	unsigned long                                      bRadialDamageVelChange : 1;                               // 0x003C(0x0004) (Edit)
	float                                              KDamageImpulse;                                           // 0x0040(0x0004) (Edit)
	float                                              KDeathVel;                                                // 0x0044(0x0004) (Edit)
	float                                              KDeathUpKick;                                             // 0x0048(0x0004) (Edit)
	float                                              RadialDamageImpulse;                                      // 0x004C(0x0004) (Edit)
	float                                              VehicleDamageScaling;                                     // 0x0050(0x0004)
	float                                              VehicleMomentumScaling;                                   // 0x0054(0x0004)
	class UForceFeedbackWaveform*                      DamagedFFWaveform;                                        // 0x0058(0x0004)
	class UForceFeedbackWaveform*                      KilledFFWaveform;                                         // 0x005C(0x0004)
	float                                              FracturedMeshDamage;                                      // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DamageType");
		return ptr;
	}


	float STATIC_VehicleDamageScalingFor(class AVehicle* V);
};


// Class Engine.KillZDamageType
// 0x0000 (0x0064 - 0x0064)
class UKillZDamageType : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KillZDamageType");
		return ptr;
	}

};


// Class Engine.DistributionFloatConstant
// 0x0004 (0x0054 - 0x0050)
class UDistributionFloatConstant : public UDistributionFloat
{
public:
	float                                              Constant;                                                 // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatConstant");
		return ptr;
	}

};


// Class Engine.DistributionFloatParameterBase
// 0x0019 (0x006D - 0x0054)
class UDistributionFloatParameterBase : public UDistributionFloatConstant
{
public:
	struct FName                                       ParameterName;                                            // 0x0054(0x0008) (Edit)
	float                                              MinInput;                                                 // 0x005C(0x0004) (Edit)
	float                                              MaxInput;                                                 // 0x0060(0x0004) (Edit)
	float                                              MinOutput;                                                // 0x0064(0x0004) (Edit)
	float                                              MaxOutput;                                                // 0x0068(0x0004) (Edit)
	TEnumAsByte<EDistributionParamMode>                ParamMode;                                                // 0x006C(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatParameterBase");
		return ptr;
	}

};


// Class Engine.DistributionFloatConstantCurve
// 0x0010 (0x0060 - 0x0050)
class UDistributionFloatConstantCurve : public UDistributionFloat
{
public:
	struct FInterpCurveFloat                           ConstantCurve;                                            // 0x0050(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatConstantCurve");
		return ptr;
	}

};


// Class Engine.DistributionFloatUniform
// 0x0008 (0x0058 - 0x0050)
class UDistributionFloatUniform : public UDistributionFloat
{
public:
	float                                              Min;                                                      // 0x0050(0x0004) (Edit)
	float                                              Max;                                                      // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatUniform");
		return ptr;
	}

};


// Class Engine.DistributionFloatUniformCurve
// 0x0010 (0x0060 - 0x0050)
class UDistributionFloatUniformCurve : public UDistributionFloat
{
public:
	struct FInterpCurveVector2D                        ConstantCurve;                                            // 0x0050(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatUniformCurve");
		return ptr;
	}

};


// Class Engine.DistributionFloatUniformRange
// 0x0014 (0x0064 - 0x0050)
class UDistributionFloatUniformRange : public UDistributionFloat
{
public:
	float                                              MaxHigh;                                                  // 0x0050(0x0004) (Edit)
	float                                              MaxLow;                                                   // 0x0054(0x0004) (Edit)
	float                                              MinHigh;                                                  // 0x0058(0x0004) (Edit)
	float                                              MinLow;                                                   // 0x005C(0x0004) (Edit)
	unsigned long                                      bMirrorMaxMin : 1;                                        // 0x0060(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatUniformRange");
		return ptr;
	}

};


// Class Engine.DistributionVectorConstant
// 0x0011 (0x0061 - 0x0050)
class UDistributionVectorConstant : public UDistributionVector
{
public:
	struct FVector                                     Constant;                                                 // 0x0050(0x000C) (Edit)
	unsigned long                                      bLockAxes : 1;                                            // 0x005C(0x0004)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0060(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorConstant");
		return ptr;
	}

};


// Class Engine.DistributionVectorParameterBase
// 0x003E (0x009F - 0x0061)
class UDistributionVectorParameterBase : public UDistributionVectorConstant
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	struct FName                                       ParameterName;                                            // 0x0064(0x0008) (Edit)
	struct FVector                                     MinInput;                                                 // 0x006C(0x000C) (Edit)
	struct FVector                                     MaxInput;                                                 // 0x0078(0x000C) (Edit)
	struct FVector                                     MinOutput;                                                // 0x0084(0x000C) (Edit)
	struct FVector                                     MaxOutput;                                                // 0x0090(0x000C) (Edit)
	TEnumAsByte<EDistributionParamMode>                ParamModes[0x3];                                          // 0x009C(0x0001) (Edit, ExportObject, Component)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorParameterBase");
		return ptr;
	}

};


// Class Engine.DistributionVectorConstantCurve
// 0x0015 (0x0065 - 0x0050)
class UDistributionVectorConstantCurve : public UDistributionVector
{
public:
	struct FInterpCurveVector                          ConstantCurve;                                            // 0x0050(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bLockAxes : 1;                                            // 0x0060(0x0004)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x0064(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorConstantCurve");
		return ptr;
	}

};


// Class Engine.DistributionVectorUniform
// 0x0020 (0x0070 - 0x0050)
class UDistributionVectorUniform : public UDistributionVector
{
public:
	struct FVector                                     Max;                                                      // 0x0050(0x000C) (Edit)
	struct FVector                                     Min;                                                      // 0x005C(0x000C) (Edit)
	unsigned long                                      bLockAxes : 1;                                            // 0x0068(0x0004)
	unsigned long                                      bUseExtremes : 1;                                         // 0x0068(0x0004) (Edit)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes;                                               // 0x006C(0x0001) (Edit)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x006D(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorUniform");
		return ptr;
	}

};


// Class Engine.DistributionVectorUniformCurve
// 0x0019 (0x0069 - 0x0050)
class UDistributionVectorUniformCurve : public UDistributionVector
{
public:
	struct FInterpCurveTwoVectors                      ConstantCurve;                                            // 0x0050(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bLockAxes1 : 1;                                           // 0x0060(0x0004)
	unsigned long                                      bLockAxes2 : 1;                                           // 0x0060(0x0004)
	unsigned long                                      bUseExtremes : 1;                                         // 0x0060(0x0004) (Edit)
	TEnumAsByte<EDistributionVectorLockFlags>          LockedAxes[0x2];                                          // 0x0064(0x0001) (Edit)
	TEnumAsByte<EDistributionVectorMirrorFlags>        MirrorFlags[0x3];                                         // 0x0066(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorUniformCurve");
		return ptr;
	}

};


// Class Engine.DistributionVectorUniformRange
// 0x0030 (0x0080 - 0x0050)
class UDistributionVectorUniformRange : public UDistributionVector
{
public:
	struct FVector                                     MaxHigh;                                                  // 0x0050(0x000C) (Edit)
	struct FVector                                     MaxLow;                                                   // 0x005C(0x000C) (Edit)
	struct FVector                                     MinHigh;                                                  // 0x0068(0x000C) (Edit)
	struct FVector                                     MinLow;                                                   // 0x0074(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorUniformRange");
		return ptr;
	}

};


// Class Engine.Download
// 0x0A34 (0x0A70 - 0x003C)
class UDownload : public UObject
{
public:
	unsigned char                                      UnknownData00[0xA34];                                     // 0x003C(0x0A34) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Download");
		return ptr;
	}

};


// Class Engine.ChannelDownload
// 0x0004 (0x0A74 - 0x0A70)
class UChannelDownload : public UDownload
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0A70(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ChannelDownload");
		return ptr;
	}

};


// Class Engine.EdCoordSystem
// 0x0050 (0x008C - 0x003C)
class UEdCoordSystem : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FMatrix                                     M;                                                        // 0x0040(0x0040) (Edit)
	struct FString                                     Desc;                                                     // 0x0080(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EdCoordSystem");
		return ptr;
	}

};


// Class Engine.EditorLinkSelectionInterface
// 0x0000 (0x003C - 0x003C)
class UEditorLinkSelectionInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EditorLinkSelectionInterface");
		return ptr;
	}

};


// Class Engine.FaceFXAnimSet
// 0x0030 (0x006C - 0x003C)
class UFaceFXAnimSet : public UObject
{
public:
	class UFaceFXAsset*                                DefaultFaceFXAsset;                                       // 0x003C(0x0004) (Edit, Const)
	struct FPointer                                    InternalFaceFXAnimSet;                                    // 0x0040(0x0004) (Const, Native)
	TArray<unsigned char>                              RawFaceFXAnimSetBytes;                                    // 0x0044(0x000C) (Const, Native)
	TArray<unsigned char>                              RawFaceFXMiniSessionBytes;                                // 0x0050(0x000C) (Const, Native)
	TArray<class USoundCue*>                           ReferencedSoundCues;                                      // 0x005C(0x000C) (NeedCtorLink)
	int                                                NumLoadErrors;                                            // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FaceFXAnimSet");
		return ptr;
	}

};


// Class Engine.FaceFXAsset
// 0x0048 (0x0084 - 0x003C)
class UFaceFXAsset : public UObject
{
public:
	class USkeletalMesh*                               DefaultSkelMesh;                                          // 0x003C(0x0004) (Const)
	struct FPointer                                    FaceFXActor;                                              // 0x0040(0x0004) (Const, Native)
	TArray<unsigned char>                              RawFaceFXActorBytes;                                      // 0x0044(0x000C) (Const, Native)
	TArray<unsigned char>                              RawFaceFXSessionBytes;                                    // 0x0050(0x000C) (Const, Native)
	TArray<class UMorphTargetSet*>                     PreviewMorphSets;                                         // 0x005C(0x000C) (Edit, NeedCtorLink)
	TArray<class UFaceFXAnimSet*>                      MountedFaceFXAnimSets;                                    // 0x0068(0x000C) (Transient, NeedCtorLink)
	TArray<class USoundCue*>                           ReferencedSoundCues;                                      // 0x0074(0x000C) (NeedCtorLink)
	int                                                NumLoadErrors;                                            // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FaceFXAsset");
		return ptr;
	}


	void UnmountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet);
	void MountFaceFXAnimSet(class UFaceFXAnimSet* AnimSet);
};


// Class Engine.FontImportOptions
// 0x0094 (0x00D0 - 0x003C)
class UFontImportOptions : public UObject
{
public:
	struct FFontImportOptionsData                      Data;                                                     // 0x003C(0x0094) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FontImportOptions");
		return ptr;
	}

};


// Class Engine.Font
// 0x0114 (0x0150 - 0x003C)
class UFont : public UObject
{
public:
	TArray<struct FFontCharacter>                      Characters;                                               // 0x003C(0x000C) (Edit, NeedCtorLink, EditInline)
	TArray<class UTexture2D*>                          Textures;                                                 // 0x0048(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0054(0x003C) UNKNOWN PROPERTY: MapProperty Engine.Font.CharRemap
	int                                                IsRemapped;                                               // 0x0090(0x0004)
	float                                              EmScale;                                                  // 0x0094(0x0004) (Edit)
	float                                              Ascent;                                                   // 0x0098(0x0004) (Edit)
	float                                              Descent;                                                  // 0x009C(0x0004) (Edit)
	float                                              Leading;                                                  // 0x00A0(0x0004) (Edit)
	int                                                Kerning;                                                  // 0x00A4(0x0004) (Edit)
	struct FFontImportOptionsData                      ImportOptions;                                            // 0x00A8(0x0094) (Edit, NeedCtorLink)
	int                                                NumCharacters;                                            // 0x013C(0x0004) (Transient)
	TArray<int>                                        MaxCharHeight;                                            // 0x0140(0x000C) (Transient, NeedCtorLink)
	float                                              ScalingFactor;                                            // 0x014C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Font");
		return ptr;
	}


	void GetStringHeightAndWidth(struct FString* InString, int* Height, int* Width);
	float GetMaxCharHeight();
	float GetAuthoredViewportHeight(float ViewportHeight);
	float GetScalingFactor(float HeightTest);
	int GetResolutionPageIndex(float HeightTest);
};


// Class Engine.MultiFont
// 0x000C (0x015C - 0x0150)
class UMultiFont : public UFont
{
public:
	TArray<float>                                      ResolutionTestTable;                                      // 0x0150(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MultiFont");
		return ptr;
	}


	int GetResolutionTestTableIndex(float HeightTest);
};


// Class Engine.ForceFeedbackManager
// 0x0018 (0x0054 - 0x003C)
class UForceFeedbackManager : public UObject
{
public:
	unsigned long                                      bAllowsForceFeedback : 1;                                 // 0x003C(0x0004)
	unsigned long                                      bIsPaused : 1;                                            // 0x003C(0x0004)
	class UForceFeedbackWaveform*                      FFWaveform;                                               // 0x0040(0x0004)
	int                                                CurrentSample;                                            // 0x0044(0x0004)
	float                                              ElapsedTime;                                              // 0x0048(0x0004)
	float                                              ScaleAllWaveformsBy;                                      // 0x004C(0x0004)
	class AActor*                                      WaveformInstigator;                                       // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFeedbackManager");
		return ptr;
	}


	void PauseWaveform(bool bPause);
	void StopForceFeedbackWaveform(class UForceFeedbackWaveform* WaveForm);
	void PlayForceFeedbackWaveform(class UForceFeedbackWaveform* WaveForm, class AActor* WaveInstigator);
};


// Class Engine.ForceFeedbackWaveform
// 0x0018 (0x0054 - 0x003C)
class UForceFeedbackWaveform : public UObject
{
public:
	unsigned long                                      bIsLooping : 1;                                           // 0x003C(0x0004) (Edit)
	TArray<struct FWaveformSample>                     Samples;                                                  // 0x0040(0x000C) (Edit, NeedCtorLink)
	float                                              WaveformFalloffStartDistance;                             // 0x004C(0x0004) (Edit)
	float                                              MaxWaveformDistance;                                      // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFeedbackWaveform");
		return ptr;
	}

};


// Class Engine.GameplayEvents
// 0x012C (0x0168 - 0x003C)
class UGameplayEvents : public UObject
{
public:
	struct FPointer                                    Archive;                                                  // 0x003C(0x0004) (Const, Native)
	struct FString                                     StatsFileName;                                            // 0x0040(0x000C) (Const, NeedCtorLink)
	struct FGameplayEventsHeader                       Header;                                                   // 0x004C(0x002C) (NeedCtorLink)
	struct FGameSessionInformation                     CurrentSessionInfo;                                       // 0x0078(0x0078) (NeedCtorLink)
	TArray<struct FPlayerInformation>                  PlayerList;                                               // 0x00F0(0x000C) (Const, NeedCtorLink)
	TArray<struct FTeamInformation>                    TeamList;                                                 // 0x00FC(0x000C) (Const, NeedCtorLink)
	TArray<struct FGameplayEventMetaData>              SupportedEvents;                                          // 0x0108(0x000C) (NeedCtorLink)
	TArray<struct FWeaponClassEventData>               WeaponClassArray;                                         // 0x0114(0x000C) (NeedCtorLink)
	TArray<struct FDamageClassEventData>               DamageClassArray;                                         // 0x0120(0x000C) (NeedCtorLink)
	TArray<struct FProjectileClassEventData>           ProjectileClassArray;                                     // 0x012C(0x000C) (NeedCtorLink)
	TArray<struct FItemClassEventData>                 ItemClassArray;                                           // 0x0138(0x000C) (NeedCtorLink)
	TArray<struct FPawnClassEventData>                 PawnClassArray;                                           // 0x0144(0x000C) (NeedCtorLink)
	TArray<struct FString>                             ActorArray;                                               // 0x0150(0x000C) (NeedCtorLink)
	TArray<struct FString>                             SoundCueArray;                                            // 0x015C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameplayEvents");
		return ptr;
	}


	struct FString GetFilename();
	void CloseStatsFile();
	bool OpenStatsFile(const struct FString& Filename);
};


// Class Engine.GameplayEventsReader
// 0x000C (0x0174 - 0x0168)
class UGameplayEventsReader : public UGameplayEvents
{
public:
	TArray<class UGameplayEventsHandler*>              RegisteredHandlers;                                       // 0x0168(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameplayEventsReader");
		return ptr;
	}


	float GetSessionDuration();
	float GetSessionEnd();
	float GetSessionStart();
	struct FString GetSessionTimestamp();
	int GetPlatform();
	int GetTitleID();
	struct FString GetSessionID();
	void ProcessStreamEnd();
	void ProcessStream();
	void ProcessStreamStart();
	void UnregisterHandler(class UGameplayEventsHandler* ExistingHandler);
	void RegisterHandler(class UGameplayEventsHandler* NewHandler);
	bool SerializeHeader();
	void CloseStatsFile();
	bool OpenStatsFile(const struct FString& Filename);
};


// Class Engine.GameplayEventsWriterBase
// 0x0004 (0x016C - 0x0168)
class UGameplayEventsWriterBase : public UGameplayEvents
{
public:
	class AGameInfo*                                   Game;                                                     // 0x0168(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameplayEventsWriterBase");
		return ptr;
	}


	int RecordCoverLinkFireLinks(class ACoverLink* Link, class AController* Player);
	void RecordAIPathFail(class AController* AI, const struct FString& Reason, const struct FVector& Dest);
	void LogSystemPollEvents();
	void LogProjectileIntEvent(int EventID, class AController* Player, class AProjectile* Proj, int Value, bool bUseProjectileLocation);
	void LogDamageEvent(int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount);
	void LogWeaponIntEvent(int EventID, class AController* Player, class UClass* WeaponClass, int Value);
	void LogPlayerStartRatingEvent(int EventID, class AController* Player, int TeamID, class APlayerStart* PS, float Rating);
	void LogPlayerPlayerEvent(int EventID, class AController* Player, class AController* Target);
	void LogPlayerKillDeath(int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead);
	void LogAllPlayerPositionsEvent(int EventID);
	void LogPlayerLoginChange(int EventID, class AController* Player, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, bool bSplitScreen);
	void LogPlayerSpawnEvent(int EventID, class AController* Player, class UClass* PawnClass, int TeamID);
	void LogPlayerStringEvent(int EventID, class AController* Player, const struct FString& EventString);
	void LogPlayerFloatEvent(int EventID, class AController* Player, float Value);
	void LogPlayerIntEvent(int EventID, class AController* Player, int Value);
	void LogTeamStringEvent(int EventID, class ATeamInfo* Team, const struct FString& Value);
	void LogTeamFloatEvent(int EventID, class ATeamInfo* Team, float Value);
	void LogTeamIntEvent(int EventID, class ATeamInfo* Team, int Value);
	void LogGamePositionEvent(int EventID, float Value, struct FVector* Position);
	void LogGameFloatEvent(int EventID, float Value);
	void LogGameStringEvent(int EventID, const struct FString& Value);
	void LogGameIntEvent(int EventID, int Value);
	void EndLogging();
	void ResetLogging(float HeartbeatDelta);
	void StartLogging(float HeartbeatDelta);
	int GetPlaylistId();
	int GetGameTypeId();
	void Poll();
	void StopPolling();
	void StartPolling(float HearbeatDelta);
	bool IsSessionInProgress();
};


// Class Engine.GameplayEventsUploadAnalytics
// 0x0000 (0x016C - 0x016C)
class UGameplayEventsUploadAnalytics : public UGameplayEventsWriterBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameplayEventsUploadAnalytics");
		return ptr;
	}


	int RecordCoverLinkFireLinks(class ACoverLink* Link, class AController* Player);
	void RecordAIPathFail(class AController* AI, const struct FString& Reason, const struct FVector& Dest);
	class UGenericParamListStatEntry* GetGenericParamListEntry();
	void LogProjectileIntEvent(int EventID, class AController* Player, class AProjectile* Proj, int Value, bool bUseProjectileLocation);
	void LogDamageEvent(int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount);
	void LogWeaponIntEvent(int EventID, class AController* Player, class UClass* WeaponClass, int Value);
	void LogPlayerPlayerEvent(int EventID, class AController* Player, class AController* Target);
	void LogPlayerKillDeath(int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead);
	void LogAllPlayerPositionsEvent(int EventID);
	void LogPlayerLoginChange(int EventID, class AController* Player, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, bool bSplitScreen);
	void LogPlayerSpawnEvent(int EventID, class AController* Player, class UClass* PawnClass, int TeamID);
	void LogPlayerStringEvent(int EventID, class AController* Player, const struct FString& EventString);
	void LogPlayerFloatEvent(int EventID, class AController* Player, float Value);
	void LogPlayerIntEvent(int EventID, class AController* Player, int Value);
	void LogTeamStringEvent(int EventID, class ATeamInfo* Team, const struct FString& Value);
	void LogTeamFloatEvent(int EventID, class ATeamInfo* Team, float Value);
	void LogTeamIntEvent(int EventID, class ATeamInfo* Team, int Value);
	void LogGamePositionEvent(int EventID, float Value, struct FVector* Position);
	void LogGameFloatEvent(int EventID, float Value);
	void LogGameStringEvent(int EventID, const struct FString& Value);
	void LogGameIntEvent(int EventID, int Value);
	void EndLogging();
	void ResetLogging(float HeartbeatDelta);
	void StartLogging(float HeartbeatDelta);
};


// Class Engine.GameplayEventsWriter
// 0x0000 (0x016C - 0x016C)
class UGameplayEventsWriter : public UGameplayEventsWriterBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameplayEventsWriter");
		return ptr;
	}


	int RecordCoverLinkFireLinks(class ACoverLink* Link, class AController* Player);
	void RecordAIPathFail(class AController* AI, const struct FString& Reason, const struct FVector& Dest);
	class UGenericParamListStatEntry* GetGenericParamListEntry();
	void LogSystemPollEvents();
	void LogProjectileIntEvent(int EventID, class AController* Player, class AProjectile* Proj, int Value, bool bUseProjectileLocation);
	void LogDamageEvent(int EventID, class AController* Player, class UClass* dmgType, class AController* Target, int Amount);
	void LogWeaponIntEvent(int EventID, class AController* Player, class UClass* WeaponClass, int Value);
	void LogPlayerPlayerEvent(int EventID, class AController* Player, class AController* Target);
	void LogPlayerKillDeath(int EventID, int KillType, class AController* Killer, class UClass* dmgType, class AController* Dead);
	void LogPlayerStartRatingEvent(int EventID, class AController* Player, int TeamID, class APlayerStart* PS, float Rating);
	void LogAllPlayerPositionsEvent(int EventID);
	void LogPlayerLoginChange(int EventID, class AController* Player, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, bool bSplitScreen);
	void LogPlayerSpawnEvent(int EventID, class AController* Player, class UClass* PawnClass, int TeamID);
	void LogPlayerStringEvent(int EventID, class AController* Player, const struct FString& EventString);
	void LogPlayerFloatEvent(int EventID, class AController* Player, float Value);
	void LogPlayerIntEvent(int EventID, class AController* Player, int Value);
	void LogTeamStringEvent(int EventID, class ATeamInfo* Team, const struct FString& Value);
	void LogTeamFloatEvent(int EventID, class ATeamInfo* Team, float Value);
	void LogTeamIntEvent(int EventID, class ATeamInfo* Team, int Value);
	void LogGamePositionEvent(int EventID, float Value, struct FVector* Position);
	void LogGameFloatEvent(int EventID, float Value);
	void LogGameStringEvent(int EventID, const struct FString& Value);
	void LogGameIntEvent(int EventID, int Value);
	void EndLogging();
	void ResetLogging(float HeartbeatDelta);
	void StartLogging(float HeartbeatDelta);
	bool SerializeFooter();
	bool SerializeHeader();
	void CloseStatsFile();
	bool OpenStatsFile(const struct FString& Filename);
	int ResolvePlayerIndex(class AController* Player);
};


// Class Engine.GameplayEventsHandler
// 0x001C (0x0058 - 0x003C)
class UGameplayEventsHandler : public UObject
{
public:
	TArray<int>                                        EventIDFilter;                                            // 0x003C(0x000C) (Config, NeedCtorLink)
	TArray<struct FGameStatGroup>                      GroupFilter;                                              // 0x0048(0x000C) (Config, NeedCtorLink)
	class UGameplayEventsReader*                       Reader;                                                   // 0x0054(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameplayEventsHandler");
		return ptr;
	}


	void RemoveFilter(int EventID);
	void AddFilter(int EventID);
	void ResolveGroupFilters();
	void PostProcessStream();
	void PreProcessStream();
	void SetReader(class UGameplayEventsReader* NewReader);
};


// Class Engine.GenericParamListStatEntry
// 0x0008 (0x0044 - 0x003C)
class UGenericParamListStatEntry : public UObject
{
public:
	struct FPointer                                    StatEvent;                                                // 0x003C(0x0004) (Native, Transient)
	class UGameplayEventsWriter*                       Writer;                                                   // 0x0040(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GenericParamListStatEntry");
		return ptr;
	}


	void CommitToDisk();
	bool GetString(const struct FName& ParamName, struct FString* out_string);
	bool GetVector(const struct FName& ParamName, struct FVector* out_vector);
	bool GetInt(const struct FName& ParamName, int* out_int);
	bool GetFloat(const struct FName& ParamName, float* out_Float);
	void AddString(const struct FName& ParamName, const struct FString& Value);
	void AddVector(const struct FName& ParamName, const struct FVector& Value);
	void AddInt(const struct FName& ParamName, int Value);
	void AddFloat(const struct FName& ParamName, float Value);
};


// Class Engine.GuidCache
// 0x0048 (0x0084 - 0x003C)
class UGuidCache : public UObject
{
public:
	unsigned char                                      UnknownData00[0x48];                                      // 0x003C(0x0048) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GuidCache");
		return ptr;
	}

};


// Class Engine.HttpBaseInterface
// 0x0000 (0x003C - 0x003C)
class UHttpBaseInterface : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HttpBaseInterface");
		return ptr;
	}


	void GetContent(TArray<unsigned char>* Content);
	struct FString GetURL();
	int GetContentLength();
	struct FString GetContentType();
	struct FString GetURLParameter(const struct FString& ParameterName);
	TArray<struct FString> GetHeaders();
	struct FString GetHeader(const struct FString& HeaderName);
};


// Class Engine.HttpRequestInterface
// 0x000C (0x0048 - 0x003C)
class UHttpRequestInterface : public UHttpBaseInterface
{
public:
	struct FScriptDelegate                             __OnProcessRequestComplete__Delegate;                     // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HttpRequestInterface");
		return ptr;
	}


	class UHttpRequestInterface* SetProcessRequestCompleteDelegate(const struct FScriptDelegate& ProcessRequestCompleteDelegate);
	void OnProcessRequestComplete(class UHttpRequestInterface* OriginalRequest, class UHttpResponseInterface* InHttpResponse, bool bDidSucceed);
	bool ProcessRequest();
	class UHttpRequestInterface* SetHeader(const struct FString& HeaderName, const struct FString& HeaderValue);
	class UHttpRequestInterface* SetContentAsString(const struct FString& ContentString);
	class UHttpRequestInterface* SetContent(TArray<unsigned char>* ContentPayload);
	class UHttpRequestInterface* SetURL(const struct FString& URL);
	class UHttpRequestInterface* SetVerb(const struct FString& Verb);
	struct FString GetVerb();
};


// Class Engine.HttpResponseInterface
// 0x0000 (0x003C - 0x003C)
class UHttpResponseInterface : public UHttpBaseInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HttpResponseInterface");
		return ptr;
	}


	struct FString GetContentAsString();
	int GetResponseCode();
};


// Class Engine.IniLocPatcher
// 0x0048 (0x0084 - 0x003C)
class UIniLocPatcher : public UObject
{
public:
	TArray<struct FIniLocFileEntry>                    Files;                                                    // 0x003C(0x000C) (Config, NeedCtorLink)
	unsigned long                                      bRequestEmsFileList : 1;                                  // 0x0048(0x0004) (Config)
	int                                                MaxCachedFileAge;                                         // 0x004C(0x0004) (Config)
	TScriptInterface<class UOnlineTitleFileInterface>  TitleFileInterface;                                       // 0x0050(0x0008) (Transient)
	TScriptInterface<class UOnlineTitleFileCacheInterface> TitleFileCacheInterface;                                  // 0x0058(0x0008) (Transient)
	TArray<struct FScriptDelegate>                     ReadTitleFileCompleteDelegates;                           // 0x0060(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReadTitleFileComplete__Delegate;                      // 0x006C(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnAllTitleFilesCompleted__Delegate;                     // 0x0078(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.IniLocPatcher");
		return ptr;
	}


	struct FString UpdateLocFileName(const struct FString& Filename);
	void ClearCachedFiles();
	void ClearReadFileDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate);
	void AddReadFileDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate);
	void AddFileToDownload(const struct FString& Filename);
	void ProcessIniLocFile(const struct FString& Filename, bool bIsUnicode, TArray<unsigned char>* FileData);
	void CheckForAllFilesComplete();
	void TriggerDownloadCompleteDelegates(bool bSuccess, const struct FString& Filename);
	void OnFileCacheSaveComplete(bool bWasSuccessful, const struct FString& Filename);
	void OnFileCacheLoadComplete(bool bWasSuccessful, const struct FString& Filename);
	void OnDownloadFileComplete(bool bWasSuccessful, const struct FString& Filename);
	void StartLoadingFiles();
	void OnRequestTitleFileListComplete(bool bWasSuccessful, const struct FString& ResultStr);
	void DownloadFiles();
	void Init();
	void OnAllTitleFilesCompleted();
	void OnReadTitleFileComplete(bool bWasSuccessful, const struct FString& Filename);
};


// Class Engine.Interface_NavigationHandle
// 0x0000 (0x003C - 0x003C)
class UInterface_NavigationHandle : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_NavigationHandle");
		return ptr;
	}


	void NotifyPathChanged();
};


// Class Engine.Interface_Speaker
// 0x0000 (0x003C - 0x003C)
class UInterface_Speaker : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_Speaker");
		return ptr;
	}


	void Speak(class USoundCue* Cue);
};


// Class Engine.InterpCurveEdSetup
// 0x0010 (0x004C - 0x003C)
class UInterpCurveEdSetup : public UObject
{
public:
	TArray<struct FCurveEdTab>                         Tabs;                                                     // 0x003C(0x000C) (NeedCtorLink)
	int                                                ActiveTab;                                                // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpCurveEdSetup");
		return ptr;
	}

};


// Class Engine.InterpTrack
// 0x0044 (0x0080 - 0x003C)
class UInterpTrack : public UObject
{
public:
	struct FPointer                                    VfTable_FCurveEdInterface;                                // 0x003C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_FInterpEdInputInterface;                          // 0x0040(0x0004) (Const, Native, NoExport)
	TArray<class UInterpTrack*>                        SubTracks;                                                // 0x0044(0x000C) (NeedCtorLink)
	TArray<struct FSubTrackGroup>                      SubTrackGroups;                                           // 0x0050(0x000C) (NeedCtorLink)
	TArray<struct FSupportedSubTrackInfo>              SupportedSubTracks;                                       // 0x005C(0x000C) (Transient, NeedCtorLink)
	class UClass*                                      TrackInstClass;                                           // 0x0068(0x0004)
	TEnumAsByte<ETrackActiveCondition>                 ActiveCondition;                                          // 0x006C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET
	struct FString                                     TrackTitle;                                               // 0x0070(0x000C) (NeedCtorLink)
	unsigned long                                      bOnePerGroup : 1;                                         // 0x007C(0x0004)
	unsigned long                                      bDirGroupOnly : 1;                                        // 0x007C(0x0004)
	unsigned long                                      bDisableTrack : 1;                                        // 0x007C(0x0004)
	unsigned long                                      bIsAnimControlTrack : 1;                                  // 0x007C(0x0004)
	unsigned long                                      bSubTrackOnly : 1;                                        // 0x007C(0x0004)
	unsigned long                                      bVisible : 1;                                             // 0x007C(0x0004) (Transient)
	unsigned long                                      bIsSelected : 1;                                          // 0x007C(0x0004) (Transient)
	unsigned long                                      bIsRecording : 1;                                         // 0x007C(0x0004) (Transient)
	unsigned long                                      bIsCollapsed : 1;                                         // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrack");
		return ptr;
	}

};


// Class Engine.JsonObject
// 0x0090 (0x00CC - 0x003C)
class UJsonObject : public UObject
{
public:
	struct FMap_Mirror                                 ValueMap;                                                 // 0x003C(0x003C) (Native)
	struct FMap_Mirror                                 ObjectMap;                                                // 0x0078(0x003C) (Native)
	TArray<struct FString>                             ValueArray;                                               // 0x00B4(0x000C) (Native)
	TArray<class UJsonObject*>                         ObjectArray;                                              // 0x00C0(0x000C) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.JsonObject");
		return ptr;
	}


	class UJsonObject* STATIC_DecodeJson(const struct FString& Str);
	struct FString STATIC_EncodeJson(class UJsonObject* Root);
	void SetBoolValue(const struct FString& Key, bool Value);
	void SetFloatValue(const struct FString& Key, float Value);
	void SetIntValue(const struct FString& Key, int Value);
	void SetStringValue(const struct FString& Key, const struct FString& Value);
	void SetObject(const struct FString& Key, class UJsonObject* Object);
	bool GetBoolValue(const struct FString& Key);
	float GetFloatValue(const struct FString& Key);
	int GetIntValue(const struct FString& Key);
	bool HasKey(const struct FString& Key);
	struct FString GetStringValue(const struct FString& Key);
	class UJsonObject* GetObject(const struct FString& Key);
};


// Class Engine.LevelBase
// 0x0054 (0x0090 - 0x003C)
class ULevelBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x54];                                      // 0x003C(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelBase");
		return ptr;
	}

};


// Class Engine.Level
// 0x0330 (0x03C0 - 0x0090)
class ULevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[0xD8];                                      // 0x0090(0x00D8) MISSED OFFSET
	float                                              LightmapTotalSize;                                        // 0x0168(0x0004) (Const, EditConst)
	float                                              ShadowmapTotalSize;                                       // 0x016C(0x0004) (Const, EditConst)
	unsigned char                                      UnknownData01[0x250];                                     // 0x0170(0x0250) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Level");
		return ptr;
	}

};


// Class Engine.PendingLevel
// 0x0038 (0x00C8 - 0x0090)
class UPendingLevel : public ULevelBase
{
public:
	unsigned char                                      UnknownData00[0x38];                                      // 0x0090(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PendingLevel");
		return ptr;
	}

};


// Class Engine.DemoPlayPendingLevel
// 0x0000 (0x00C8 - 0x00C8)
class UDemoPlayPendingLevel : public UPendingLevel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoPlayPendingLevel");
		return ptr;
	}

};


// Class Engine.NetPendingLevel
// 0x0000 (0x00C8 - 0x00C8)
class UNetPendingLevel : public UPendingLevel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetPendingLevel");
		return ptr;
	}

};


// Class Engine.LevelStreaming
// 0x00A8 (0x00E4 - 0x003C)
class ULevelStreaming : public UObject
{
public:
	struct FName                                       PackageName;                                              // 0x003C(0x0008) (Edit, Const, EditConst)
	class ULevel*                                      LoadedLevel;                                              // 0x0044(0x0004) (Const, Transient)
	struct FVector                                     offset;                                                   // 0x0048(0x000C) (Edit, Const)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0054(0x000C) MISSED OFFSET
	struct FMatrix                                     LevelTransform;                                           // 0x0060(0x0040) (Edit, Const)
	struct FVector                                     OldOffset;                                                // 0x00A0(0x000C) (Const)
	unsigned long                                      bIsVisible : 1;                                           // 0x00AC(0x0004) (Const, Transient)
	unsigned long                                      bHasLoadRequestPending : 1;                               // 0x00AC(0x0004) (Const, Transient)
	unsigned long                                      bHasUnloadRequestPending : 1;                             // 0x00AC(0x0004) (Const, Transient)
	unsigned long                                      bShouldBeVisibleInEditor : 1;                             // 0x00AC(0x0004) (Edit, Const)
	unsigned long                                      bBoundingBoxVisible : 1;                                  // 0x00AC(0x0004) (Const)
	unsigned long                                      bLocked : 1;                                              // 0x00AC(0x0004) (Edit, Const)
	unsigned long                                      bIsFullyStatic : 1;                                       // 0x00AC(0x0004) (Edit, Const)
	unsigned long                                      bShouldBeLoaded : 1;                                      // 0x00AC(0x0004) (Const, Transient)
	unsigned long                                      bShouldBeVisible : 1;                                     // 0x00AC(0x0004) (Const, Transient)
	unsigned long                                      bShouldBlockOnLoad : 1;                                   // 0x00AC(0x0004) (Transient)
	unsigned long                                      bDrawOnLevelStatusMap : 1;                                // 0x00AC(0x0004) (Edit)
	unsigned long                                      bIsRequestingUnloadAndRemoval : 1;                        // 0x00AC(0x0004) (Const, Transient)
	struct FColor                                      DrawColor;                                                // 0x00B0(0x0004) (Edit, Const)
	TArray<class ALevelStreamingVolume*>               EditorStreamingVolumes;                                   // 0x00B4(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	float                                              MinTimeBetweenVolumeUnloadRequests;                       // 0x00C0(0x0004) (Edit)
	float                                              LastVolumeUnloadRequestTime;                              // 0x00C4(0x0004) (Const, Transient)
	TArray<struct FString>                             Keywords;                                                 // 0x00C8(0x000C) (NeedCtorLink)
	class ALevelGridVolume*                            EditorGridVolume;                                         // 0x00D4(0x0004) (Edit, Const, EditConst)
	int                                                GridPosition[0x3];                                        // 0x00D8(0x0004) (Edit, Const, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreaming");
		return ptr;
	}

};


// Class Engine.LevelStreamingAlwaysLoaded
// 0x0004 (0x00E8 - 0x00E4)
class ULevelStreamingAlwaysLoaded : public ULevelStreaming
{
public:
	unsigned long                                      bIsProceduralBuildingLODLevel : 1;                        // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingAlwaysLoaded");
		return ptr;
	}

};


// Class Engine.LevelStreamingDistance
// 0x0010 (0x00F4 - 0x00E4)
class ULevelStreamingDistance : public ULevelStreaming
{
public:
	struct FVector                                     Origin;                                                   // 0x00E4(0x000C) (Edit)
	float                                              MaxDistance;                                              // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingDistance");
		return ptr;
	}

};


// Class Engine.LevelStreamingKismet
// 0x0000 (0x00E4 - 0x00E4)
class ULevelStreamingKismet : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingKismet");
		return ptr;
	}

};


// Class Engine.LevelStreamingPersistent
// 0x0000 (0x00E4 - 0x00E4)
class ULevelStreamingPersistent : public ULevelStreaming
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelStreamingPersistent");
		return ptr;
	}

};


// Class Engine.LightmappedSurfaceCollection
// 0x0010 (0x004C - 0x003C)
class ULightmappedSurfaceCollection : public UObject
{
public:
	class UModel*                                      SourceModel;                                              // 0x003C(0x0004) (Edit)
	TArray<int>                                        Surfaces;                                                 // 0x0040(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmappedSurfaceCollection");
		return ptr;
	}

};


// Class Engine.LightmassLevelSettings
// 0x0030 (0x006C - 0x003C)
class ULightmassLevelSettings : public UObject
{
public:
	int                                                NumIndirectLightingBounces;                               // 0x003C(0x0004) (Edit)
	struct FColor                                      EnvironmentColor;                                         // 0x0040(0x0004) (Edit)
	float                                              EnvironmentIntensity;                                     // 0x0044(0x0004) (Edit)
	float                                              EmissiveBoost;                                            // 0x0048(0x0004) (Edit)
	float                                              DiffuseBoost;                                             // 0x004C(0x0004) (Edit)
	float                                              SpecularBoost;                                            // 0x0050(0x0004)
	unsigned long                                      bUseAmbientOcclusion : 1;                                 // 0x0054(0x0004) (Edit)
	unsigned long                                      bVisualizeAmbientOcclusion : 1;                           // 0x0054(0x0004) (Edit)
	float                                              DirectIlluminationOcclusionFraction;                      // 0x0058(0x0004) (Edit)
	float                                              IndirectIlluminationOcclusionFraction;                    // 0x005C(0x0004) (Edit)
	float                                              OcclusionExponent;                                        // 0x0060(0x0004) (Edit)
	float                                              FullyOccludedSamplesFraction;                             // 0x0064(0x0004) (Edit)
	float                                              MaxOcclusionDistance;                                     // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassLevelSettings");
		return ptr;
	}

};


// Class Engine.LightmassPrimitiveSettingsObject
// 0x001C (0x0058 - 0x003C)
class ULightmassPrimitiveSettingsObject : public UObject
{
public:
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x003C(0x001C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightmassPrimitiveSettingsObject");
		return ptr;
	}

};


// Class Engine.MapInfo
// 0x0000 (0x003C - 0x003C)
class UMapInfo : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MapInfo");
		return ptr;
	}

};


// Class Engine.Model
// 0x09D4 (0x0A10 - 0x003C)
class UModel : public UObject
{
public:
	unsigned char                                      UnknownData00[0x9D4];                                     // 0x003C(0x09D4) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Model");
		return ptr;
	}

};


// Class Engine.NavigationMeshBase
// 0x0274 (0x02B0 - 0x003C)
class UNavigationMeshBase : public UObject
{
public:
	unsigned char                                      UnknownData00[0x274];                                     // 0x003C(0x0274) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationMeshBase");
		return ptr;
	}

};


// Class Engine.NetDriver
// 0x0154 (0x0194 - 0x0040)
class UNetDriver : public USubsystem
{
public:
	unsigned char                                      UnknownData00[0x20];                                      // 0x0040(0x0020) MISSED OFFSET
	float                                              ConnectionTimeout;                                        // 0x0060(0x0004) (Config)
	float                                              InitialConnectTimeout;                                    // 0x0064(0x0004) (Config)
	float                                              KeepAliveTime;                                            // 0x0068(0x0004) (Config)
	float                                              RelevantTimeout;                                          // 0x006C(0x0004) (Config)
	float                                              SpawnPrioritySeconds;                                     // 0x0070(0x0004) (Config)
	float                                              ServerTravelPause;                                        // 0x0074(0x0004) (Config)
	int                                                MaxClientRate;                                            // 0x0078(0x0004) (Config)
	int                                                MaxInternetClientRate;                                    // 0x007C(0x0004) (Config)
	int                                                NetServerMaxTickRate;                                     // 0x0080(0x0004) (Config)
	unsigned long                                      bClampListenServerTickRate : 1;                           // 0x0084(0x0004) (Config)
	unsigned long                                      UnknownData01 : 31;                                       // 0x0084(0x0001)
	unsigned long                                      AllowDownloads : 1;                                       // 0x0088(0x0004) (Config)
	unsigned long                                      UnknownData02 : 31;                                       // 0x0088(0x0001)
	unsigned long                                      AllowPeerConnections : 1;                                 // 0x008C(0x0004) (Config)
	unsigned long                                      UnknownData03 : 31;                                       // 0x008C(0x0001)
	unsigned long                                      AllowPeerVoice : 1;                                       // 0x0090(0x0004) (Config)
	unsigned char                                      UnknownData04[0x18];                                      // 0x0094(0x0018) MISSED OFFSET
	int                                                MaxDownloadSize;                                          // 0x00AC(0x0004) (Config)
	TArray<struct FString>                             DownloadManagers;                                         // 0x00B0(0x000C) (Config, NeedCtorLink)
	unsigned char                                      UnknownData05[0x90];                                      // 0x00BC(0x0090) MISSED OFFSET
	struct FString                                     NetConnectionClassName;                                   // 0x014C(0x000C) (Config, NeedCtorLink)
	unsigned char                                      UnknownData06[0x3C];                                      // 0x0158(0x003C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetDriver");
		return ptr;
	}

};


// Class Engine.DemoRecDriver
// 0x00E4 (0x0278 - 0x0194)
class UDemoRecDriver : public UNetDriver
{
public:
	unsigned char                                      UnknownData00[0x28];                                      // 0x0194(0x0028) MISSED OFFSET
	struct FString                                     DemoSpectatorClass;                                       // 0x01BC(0x000C) (Config, NeedCtorLink)
	unsigned char                                      UnknownData01[0x9C];                                      // 0x01C8(0x009C) MISSED OFFSET
	int                                                MaxRewindPoints;                                          // 0x0264(0x0004) (Config)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0268(0x0004) MISSED OFFSET
	float                                              RewindPointInterval;                                      // 0x026C(0x0004) (Config)
	int                                                NumRecentRewindPoints;                                    // 0x0270(0x0004) (Config)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0274(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoRecDriver");
		return ptr;
	}

};


// Class Engine.ObjectReferencer
// 0x000C (0x0048 - 0x003C)
class UObjectReferencer : public UObject
{
public:
	TArray<class UObject*>                             ReferencedObjects;                                        // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ObjectReferencer");
		return ptr;
	}

};


// Class Engine.OnlineAuthInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineAuthInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineAuthInterface");
		return ptr;
	}


	bool GetServerAddr(int* OutServerIP, int* OutServerPort);
	bool GetServerUniqueId(struct FUniqueNetId* OutServerUID);
	bool FindLocalServerAuthSession(class UPlayer* ClientConnection, struct FLocalAuthSession* OutSessionInfo);
	bool FindServerAuthSession(class UPlayer* ServerConnection, struct FAuthSession* OutSessionInfo);
	bool FindLocalClientAuthSession(class UPlayer* ServerConnection, struct FLocalAuthSession* OutSessionInfo);
	bool FindClientAuthSession(class UPlayer* ClientConnection, struct FAuthSession* OutSessionInfo);
	void AllLocalServerAuthSessions(struct FLocalAuthSession* OutSessionInfo);
	void AllServerAuthSessions(struct FAuthSession* OutSessionInfo);
	void AllLocalClientAuthSessions(struct FLocalAuthSession* OutSessionInfo);
	void AllClientAuthSessions(struct FAuthSession* OutSessionInfo);
	void EndAllRemoteServerAuthSessions();
	void EndAllLocalServerAuthSessions();
	void EndRemoteServerAuthSession(const struct FUniqueNetId& ServerUID, int ServerIP);
	void EndLocalServerAuthSession(const struct FUniqueNetId& ClientUID, int ClientIP);
	bool VerifyServerAuthSession(const struct FUniqueNetId& ServerUID, int ServerIP, int AuthTicketUID);
	bool CreateServerAuthSession(const struct FUniqueNetId& ClientUID, int ClientIP, int ClientPort, int* OutAuthTicketUID);
	void EndAllRemoteClientAuthSessions();
	void EndAllLocalClientAuthSessions();
	void EndRemoteClientAuthSession(const struct FUniqueNetId& ClientUID, int ClientIP);
	void EndLocalClientAuthSession(const struct FUniqueNetId& ServerUID, int ServerIP, int ServerPort);
	bool VerifyClientAuthSession(const struct FUniqueNetId& ClientUID, int ClientIP, int ClientPort, int AuthTicketUID);
	bool CreateClientAuthSession(const struct FUniqueNetId& ServerUID, int ServerIP, int ServerPort, bool bSecure, int* OutAuthTicketUID);
	bool SendServerAuthRetryRequest();
	bool SendClientAuthEndSessionRequest(class UPlayer* ClientConnection);
	bool SendServerAuthResponse(class UPlayer* ClientConnection, int AuthTicketUID);
	bool SendClientAuthResponse(int AuthTicketUID);
	bool SendServerAuthRequest(const struct FUniqueNetId& ServerUID);
	bool SendClientAuthRequest(class UPlayer* ClientConnection, const struct FUniqueNetId& ClientUID);
	void ClearServerConnectionCloseDelegate(const struct FScriptDelegate& ServerConnectionCloseDelegate);
	void AddServerConnectionCloseDelegate(const struct FScriptDelegate& ServerConnectionCloseDelegate);
	void OnServerConnectionClose(class UPlayer* ServerConnection);
	void ClearClientConnectionCloseDelegate(const struct FScriptDelegate& ClientConnectionCloseDelegate);
	void AddClientConnectionCloseDelegate(const struct FScriptDelegate& ClientConnectionCloseDelegate);
	void OnClientConnectionClose(class UPlayer* ClientConnection);
	void ClearServerAuthRetryRequestDelegate(const struct FScriptDelegate& ServerAuthRetryRequestDelegate);
	void AddServerAuthRetryRequestDelegate(const struct FScriptDelegate& ServerAuthRetryRequestDelegate);
	void OnServerAuthRetryRequest(class UPlayer* ClientConnection);
	void ClearClientAuthEndSessionRequestDelegate(const struct FScriptDelegate& ClientAuthEndSessionRequestDelegate);
	void AddClientAuthEndSessionRequestDelegate(const struct FScriptDelegate& ClientAuthEndSessionRequestDelegate);
	void OnClientAuthEndSessionRequest(class UPlayer* ServerConnection);
	void ClearServerAuthCompleteDelegate(const struct FScriptDelegate& ServerAuthCompleteDelegate);
	void AddServerAuthCompleteDelegate(const struct FScriptDelegate& ServerAuthCompleteDelegate);
	void OnServerAuthComplete(bool bSuccess, const struct FUniqueNetId& ServerUID, class UPlayer* ServerConnection, const struct FString& ExtraInfo);
	void ClearClientAuthCompleteDelegate(const struct FScriptDelegate& ClientAuthCompleteDelegate);
	void AddClientAuthCompleteDelegate(const struct FScriptDelegate& ClientAuthCompleteDelegate);
	void OnClientAuthComplete(bool bSuccess, const struct FUniqueNetId& ClientUID, class UPlayer* ClientConnection, const struct FString& ExtraInfo);
	void ClearServerAuthResponseDelegate(const struct FScriptDelegate& ServerAuthResponseDelegate);
	void AddServerAuthResponseDelegate(const struct FScriptDelegate& ServerAuthResponseDelegate);
	void OnServerAuthResponse(const struct FUniqueNetId& ServerUID, int ServerIP, int AuthTicketUID);
	void ClearClientAuthResponseDelegate(const struct FScriptDelegate& ClientAuthResponseDelegate);
	void AddClientAuthResponseDelegate(const struct FScriptDelegate& ClientAuthResponseDelegate);
	void OnClientAuthResponse(const struct FUniqueNetId& ClientUID, int ClientIP, int AuthTicketUID);
	void ClearServerAuthRequestDelegate(const struct FScriptDelegate& ServerAuthRequestDelegate);
	void AddServerAuthRequestDelegate(const struct FScriptDelegate& ServerAuthRequestDelegate);
	void OnServerAuthRequest(class UPlayer* ClientConnection, const struct FUniqueNetId& ClientUID, int ClientIP, int ClientPort);
	void ClearClientAuthRequestDelegate(const struct FScriptDelegate& ClientAuthRequestDelegate);
	void AddClientAuthRequestDelegate(const struct FScriptDelegate& ClientAuthRequestDelegate);
	void OnClientAuthRequest(const struct FUniqueNetId& ServerUID, int ServerIP, int ServerPort, bool bSecure);
	void ClearAuthReadyDelegate(const struct FScriptDelegate& AuthReadyDelegate);
	void AddAuthReadyDelegate(const struct FScriptDelegate& AuthReadyDelegate);
	void OnAuthReady();
	bool IsReady();
};


// Class Engine.OnlineClanInfo
// 0x0070 (0x00AC - 0x003C)
class UOnlineClanInfo : public UObject
{
public:
	struct FUniqueNetId                                ClanId;                                                   // 0x003C(0x0010)
	struct FName                                       ClanName;                                                 // 0x004C(0x0008)
	struct FName                                       ClanTag;                                                  // 0x0054(0x0008)
	int                                                Emblem;                                                   // 0x005C(0x0004)
	int                                                Flag;                                                     // 0x0060(0x0004)
	struct FString                                     Motto;                                                    // 0x0064(0x000C) (NeedCtorLink)
	struct FString                                     Description;                                              // 0x0070(0x000C) (NeedCtorLink)
	struct FUniqueNetId                                FounderId;                                                // 0x007C(0x0010)
	struct FUniqueNetId                                LeaderId;                                                 // 0x008C(0x0010)
	struct FString                                     DateCreated;                                              // 0x009C(0x000C) (NeedCtorLink)
	unsigned long                                      bHasInvitedYou : 1;                                       // 0x00A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineClanInfo");
		return ptr;
	}

};


// Class Engine.OnlineClanMessage
// 0x007C (0x00B8 - 0x003C)
class UOnlineClanMessage : public UObject
{
public:
	struct FUniqueNetId                                ClanId;                                                   // 0x003C(0x0010)
	struct FOnlineFriend                               Sender;                                                   // 0x004C(0x0050) (NeedCtorLink)
	struct FString                                     Message;                                                  // 0x009C(0x000C) (NeedCtorLink)
	struct FString                                     TimeStamp;                                                // 0x00A8(0x000C) (NeedCtorLink)
	unsigned long                                      bRead : 1;                                                // 0x00B4(0x0004)
	unsigned long                                      bIsInvite : 1;                                            // 0x00B4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineClanMessage");
		return ptr;
	}

};


// Class Engine.OnlineMatchmakingStats
// 0x0000 (0x003C - 0x003C)
class UOnlineMatchmakingStats : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineMatchmakingStats");
		return ptr;
	}


	void StopTimer(struct FMMStats_Timer* Timer);
	void StartTimer(struct FMMStats_Timer* Timer);
};


// Class Engine.OnlinePlayerStorage
// 0x002C (0x0068 - 0x003C)
class UOnlinePlayerStorage : public UObject
{
public:
	int                                                VersionNumber;                                            // 0x003C(0x0004) (Const)
	int                                                VersionSettingsId;                                        // 0x0040(0x0004) (Const)
	int                                                SaveCountSettingId;                                       // 0x0044(0x0004) (Const)
	TArray<struct FOnlineProfileSetting>               ProfileSettings;                                          // 0x0048(0x000C) (NeedCtorLink)
	TArray<struct FSettingsPropertyPropertyMetaData>   ProfileMappings;                                          // 0x0054(0x000C) (NeedCtorLink)
	TEnumAsByte<EOnlinePlayerStorageAsyncState>        AsyncState;                                               // 0x0060(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	int                                                DeviceID;                                                 // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePlayerStorage");
		return ptr;
	}


	void SetDefaultVersionNumber();
	int GetVersionNumber();
	void AppendVersionToSettings();
	void SetToDefaults();
	void AddSettingFloat(int SettingId);
	void AddSettingInt(int SettingId);
	bool GetRangedProfileSettingValue(int ProfileId, float* OutValue);
	bool SetRangedProfileSettingValue(int ProfileId, float NewValue);
	bool GetProfileSettingRange(int ProfileId, float* OutMinValue, float* OutMaxValue, float* RangeIncrement, unsigned char* bFormatAsInt);
	bool STATIC_GetProfileSettingMappingIds(int ProfileId, TArray<int>* Ids);
	bool GetProfileSettingMappingType(int ProfileId, TEnumAsByte<EPropertyValueMappingType>* OutType);
	bool SetProfileSettingValueFloat(int ProfileSettingId, float Value);
	bool SetProfileSettingValueInt(int ProfileSettingId, int Value);
	bool SetProfileSettingValueId(int ProfileSettingId, int Value);
	bool GetProfileSettingValueFloat(int ProfileSettingId, float* Value);
	bool GetProfileSettingValueInt(int ProfileSettingId, int* Value);
	bool GetProfileSettingValueFromListIndex(int ProfileSettingId, int ListIndex, int* Value);
	bool GetProfileSettingValueId(int ProfileSettingId, int* ValueId, int* ListIndex);
	bool SetProfileSettingValue(int ProfileSettingId, struct FString* NewValue);
	bool SetProfileSettingValueByName(const struct FName& ProfileSettingName, struct FString* NewValue);
	bool GetProfileSettingValueByName(const struct FName& ProfileSettingName, struct FString* Value);
	bool GetProfileSettingValues(int ProfileSettingId, TArray<struct FName>* Values);
	struct FName GetProfileSettingValueName(int ProfileSettingId);
	bool GetProfileSettingValue(int ProfileSettingId, int ValueMapID, struct FString* Value);
	bool IsProfileSettingIdMapped(int ProfileSettingId);
	int STATIC_FindDefaultProfileMappingIndexByName(const struct FName& ProfileSettingName);
	int FindProfileMappingIndexByName(const struct FName& ProfileSettingName);
	int FindProfileMappingIndex(int ProfileSettingId);
	int FindProfileSettingIndex(int ProfileSettingId);
	struct FString GetProfileSettingColumnHeader(int ProfileSettingId);
	struct FName GetProfileSettingName(int ProfileSettingId);
	bool GetProfileSettingId(const struct FName& ProfileSettingName, int* ProfileSettingId);
};


// Class Engine.OnlineProfileSettings
// 0x0024 (0x008C - 0x0068)
class UOnlineProfileSettings : public UOnlinePlayerStorage
{
public:
	TArray<int>                                        ProfileSettingIds;                                        // 0x0068(0x000C) (NeedCtorLink)
	TArray<struct FOnlineProfileSetting>               DefaultSettings;                                          // 0x0074(0x000C) (NeedCtorLink)
	TArray<struct FIdToStringMapping>                  OwnerMappings;                                            // 0x0080(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineProfileSettings");
		return ptr;
	}


	void ModifyAvailableProfileSettings();
	void AppendVersionToReadIds();
	void SetToDefaults();
	bool GetProfileSettingDefaultFloat(int ProfileSettingId, float* DefaultFloat);
	bool GetProfileSettingDefaultInt(int ProfileSettingId, int* DefaultInt);
	bool GetProfileSettingDefaultId(int ProfileSettingId, int* DefaultId, int* ListIndex);
};


// Class Engine.OnlineRecentPlayersList
// 0x005C (0x0098 - 0x003C)
class UOnlineRecentPlayersList : public UObject
{
public:
	TArray<struct FUniqueNetId>                        RecentPlayers;                                            // 0x003C(0x000C) (NeedCtorLink)
	TArray<struct FOnlineFriend>                       RecentPlayersEx;                                          // 0x0048(0x000C) (NeedCtorLink)
	TArray<struct FRecentParty>                        RecentParties;                                            // 0x0054(0x000C) (NeedCtorLink)
	struct FRecentParty                                LastParty;                                                // 0x0060(0x001C) (NeedCtorLink)
	int                                                MaxRecentPlayers;                                         // 0x007C(0x0004) (Config)
	int                                                MaxRecentParties;                                         // 0x0080(0x0004) (Config)
	int                                                RecentPlayersAddIndex;                                    // 0x0084(0x0004)
	int                                                RecentPartiesAddIndex;                                    // 0x0088(0x0004)
	TArray<struct FCurrentPlayerMet>                   CurrentPlayers;                                           // 0x008C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineRecentPlayersList");
		return ptr;
	}


	int GetCurrentPlayersListCount();
	void SetCurrentPlayersList(TArray<struct FCurrentPlayerMet> Players);
	bool ShowCurrentPlayersList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description);
	bool ShowLastPartyPlayerList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description);
	bool ShowRecentPartiesPlayerList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description);
	bool ShowRecentPlayerList(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description);
	void SetLastParty(const struct FUniqueNetId& PartyLeader, TArray<struct FUniqueNetId>* PartyMembers);
	int GetTeamForCurrentPlayer(const struct FUniqueNetId& Player);
	int GetSkillForCurrentPlayer(const struct FUniqueNetId& Player);
	void GetPlayersFromCurrentPlayers(TArray<struct FUniqueNetId>* Players);
	void GetPlayersFromRecentParties(TArray<struct FUniqueNetId>* Players);
	void ClearRecentParties();
	void AddPartyToRecentParties(const struct FUniqueNetId& PartyLeader, TArray<struct FUniqueNetId>* PartyMembers);
	void ClearRecentPlayers();
	void AddPlayerToRecentPlayers(const struct FUniqueNetId& NewPlayer);
};


// Class Engine.OnlineStats
// 0x000C (0x0048 - 0x003C)
class UOnlineStats : public UObject
{
public:
	TArray<struct FStringIdToStringMapping>            ViewIdMappings;                                           // 0x003C(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineStats");
		return ptr;
	}


	struct FName GetViewName(int ViewId);
	bool GetViewId(const struct FName& ViewName, int* ViewId);
};


// Class Engine.OnlineStatsRead
// 0x0040 (0x0088 - 0x0048)
class UOnlineStatsRead : public UOnlineStats
{
public:
	int                                                ViewId;                                                   // 0x0048(0x0004)
	int                                                SortColumnId;                                             // 0x004C(0x0004) (Const)
	TArray<int>                                        ColumnIds;                                                // 0x0050(0x000C) (Const, NeedCtorLink)
	int                                                TotalRowsInView;                                          // 0x005C(0x0004) (Const)
	TArray<struct FOnlineStatsRow>                     Rows;                                                     // 0x0060(0x000C) (NeedCtorLink)
	TArray<struct FColumnMetaData>                     ColumnMappings;                                           // 0x006C(0x000C) (Const, NeedCtorLink)
	struct FString                                     ViewName;                                                 // 0x0078(0x000C) (Const, NeedCtorLink)
	int                                                TitleId;                                                  // 0x0084(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineStatsRead");
		return ptr;
	}


	int GetRankForPlayer(const struct FUniqueNetId& PlayerID);
	void AddPlayer(const struct FString& PlayerName, const struct FUniqueNetId& PlayerID);
	bool IsStatZero(const struct FUniqueNetId& PlayerID, int StatColumnNo);
	bool GetStatValueForPlayerAsString(const struct FUniqueNetId& PlayerID, int StatColumnNo, struct FString* StatValue);
	bool SetFloatStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, float StatValue);
	bool GetFloatStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, float* StatValue);
	bool SetIntStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, int StatValue);
	bool GetIntStatValueForPlayer(const struct FUniqueNetId& PlayerID, int StatColumnNo, int* StatValue);
	void OnReadComplete();
};


// Class Engine.OnlineStatsWrite
// 0x0040 (0x0088 - 0x0048)
class UOnlineStatsWrite : public UOnlineStats
{
public:
	TArray<struct FStringIdToStringMapping>            StatMappings;                                             // 0x0048(0x000C) (Const, NeedCtorLink)
	TArray<struct FSettingsProperty>                   Properties;                                               // 0x0054(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        ViewIds;                                                  // 0x0060(0x000C) (NeedCtorLink)
	TArray<int>                                        ArbitratedViewIds;                                        // 0x006C(0x000C) (NeedCtorLink)
	int                                                RatingId;                                                 // 0x0078(0x0004) (Const)
	struct FScriptDelegate                             __OnStatsWriteComplete__Delegate;                         // 0x007C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineStatsWrite");
		return ptr;
	}


	void DecrementIntStat(int StatId, int DecBy);
	void DecrementFloatStat(int StatId, float DecBy);
	void IncrementIntStat(int StatId, int IncBy);
	void IncrementFloatStat(int StatId, float IncBy);
	void SetIntStat(int StatId, int Value);
	void SetFloatStat(int StatId, float Value);
	struct FName GetStatName(int StatId);
	bool GetStatId(const struct FName& StatName, int* StatId);
	void OnStatsWriteComplete();
};


// Class Engine.PackageMapLevel
// 0x0004 (0x00C4 - 0x00C0)
class UPackageMapLevel : public UPackageMap
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C0(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PackageMapLevel");
		return ptr;
	}

};


// Class Engine.PackageMapSeekFree
// 0x0000 (0x00C4 - 0x00C4)
class UPackageMapSeekFree : public UPackageMapLevel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PackageMapSeekFree");
		return ptr;
	}

};


// Class Engine.PatchScriptCommandlet
// 0x0004 (0x0080 - 0x007C)
class UPatchScriptCommandlet : public UCommandlet
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PatchScriptCommandlet");
		return ptr;
	}

};


// Class Engine.MicroTransactionBase
// 0x0024 (0x0078 - 0x0054)
class UMicroTransactionBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FPurchaseInfo>                       AvailableProducts;                                        // 0x0054(0x000C) (NeedCtorLink)
	struct FString                                     LastError;                                                // 0x0060(0x000C) (NeedCtorLink)
	struct FString                                     LastErrorSolution;                                        // 0x006C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MicroTransactionBase");
		return ptr;
	}


	int GetProductIndex(const struct FString& Identifier);
	bool BeginPurchase(int Index);
	bool IsAllowedToMakePurchases();
	bool QueryForAvailablePurchases();
	void Init();
};


// Class Engine.MicroTransactionProxy
// 0x0000 (0x0078 - 0x0078)
class UMicroTransactionProxy : public UMicroTransactionBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MicroTransactionProxy");
		return ptr;
	}

};


// Class Engine.Player
// 0x0024 (0x0060 - 0x003C)
class UPlayer : public UObject
{
public:
	struct FPointer                                    VfTable_FExec;                                            // 0x003C(0x0004) (Const, Native, NoExport)
	class APlayerController*                           Actor;                                                    // 0x0040(0x0004) (Const, Transient)
	int                                                CurrentNetSpeed;                                          // 0x0044(0x0004) (Const)
	int                                                ConfiguredInternetSpeed;                                  // 0x0048(0x0004) (Config, GlobalConfig)
	int                                                ConfiguredLanSpeed;                                       // 0x004C(0x0004) (Config, GlobalConfig)
	float                                              PP_DesaturationMultiplier;                                // 0x0050(0x0004) (Config)
	float                                              PP_HighlightsMultiplier;                                  // 0x0054(0x0004) (Config)
	float                                              PP_MidTonesMultiplier;                                    // 0x0058(0x0004) (Config)
	float                                              PP_ShadowsMultiplier;                                     // 0x005C(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Player");
		return ptr;
	}


	void SwitchController(class APlayerController* PC);
};


// Class Engine.LocalPlayer
// 0x034C (0x03AC - 0x0060)
class ULocalPlayer : public UPlayer
{
public:
	struct FPointer                                    VfTable_FObserverInterface;                               // 0x0060(0x0004) (Const, Native, NoExport)
	int                                                ControllerId;                                             // 0x0064(0x0004)
	class UGameViewportClient*                         ViewportClient;                                           // 0x0068(0x0004)
	struct FVector2D                                   Origin;                                                   // 0x006C(0x0008)
	struct FVector2D                                   Size;                                                     // 0x0074(0x0008)
	class UPostProcessChain*                           PlayerPostProcess;                                        // 0x007C(0x0004) (Const, Transient)
	TArray<class UPostProcessChain*>                   PlayerPostProcessChains;                                  // 0x0080(0x000C) (Const, Transient, NeedCtorLink)
	unsigned long                                      bForceDefaultPostProcessChain : 1;                        // 0x008C(0x0004) (Transient)
	unsigned long                                      bWantToResetToMapDefaultPP : 1;                           // 0x008C(0x0004)
	unsigned long                                      bSentSplitJoin : 1;                                       // 0x008C(0x0004) (Const, Transient, EditConst)
	unsigned long                                      bPendingServerAuth : 1;                                   // 0x008C(0x0004)
	struct FPointer                                    ViewState;                                                // 0x0090(0x0004) (Const, Native)
	struct FPointer                                    ViewState2;                                               // 0x0094(0x0004) (Const, Native)
	struct FSynchronizedActorVisibilityHistory         ActorVisibilityHistory;                                   // 0x0098(0x0008) (Const, Native, Transient)
	struct FVector                                     LastViewLocation;                                         // 0x00A0(0x000C) (Transient)
	struct FCurrentPostProcessVolumeInfo               CurrentPPInfo;                                            // 0x00AC(0x015C) (Const, Transient, NeedCtorLink, NoImport)
	struct FCurrentPostProcessVolumeInfo               LevelPPInfo;                                              // 0x0208(0x015C) (Const, Transient, NeedCtorLink, NoImport)
	TArray<struct FPostProcessSettingsOverride>        ActivePPOverrides;                                        // 0x0364(0x000C) (Transient, NeedCtorLink)
	TEnumAsByte<EAspectRatioAxisConstraint>            AspectRatioAxisConstraint;                                // 0x0370(0x0001) (Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0371(0x0003) MISSED OFFSET
	struct FString                                     LastMap;                                                  // 0x0374(0x000C) (NeedCtorLink)
	class UTranslationContext*                         TagContext;                                               // 0x0380(0x0004)
	TScriptInterface<class UOnlineAuthInterface>       CachedAuthInt;                                            // 0x0384(0x0008)
	float                                              ServerAuthTimestamp;                                      // 0x038C(0x0004)
	int                                                ServerAuthTimeout;                                        // 0x0390(0x0004)
	int                                                ServerAuthRetryCount;                                     // 0x0394(0x0004)
	int                                                MaxServerAuthRetryCount;                                  // 0x0398(0x0004)
	struct FUniqueNetId                                ServerAuthUID;                                            // 0x039C(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LocalPlayer");
		return ptr;
	}


	bool IsFirstPersonView();
	void Cleanup(bool bExit);
	void Exit();
	void NotifyServerConnectionClose();
	void ViewportClosed();
	void STATIC_StaticOnServerConnectionClose(class UPlayer* ServerConnection);
	void OnServerConnectionClose(class UPlayer* ServerConnection);
	void ServerAuthFailure();
	void ServerAuthTimedOut();
	void OnServerAuthComplete(bool bSuccess, const struct FUniqueNetId& ServerUID, class UPlayer* ServerConnection, const struct FString& ExtraInfo);
	void ProcessServerAuthResponse(const struct FUniqueNetId& ServerUID, int ServerIP, int AuthTicketUID);
	void ProcessClientAuthEndSessionRequest(class UPlayer* ServerConnection);
	void ProcessClientAuthRequest(const struct FUniqueNetId& ServerUID, int ServerIP, int ServerPort, bool bSecure);
	void NotifyServerConnectionOpen();
	struct FString GetNickname();
	struct FUniqueNetId GetUniqueNetId();
	struct FVector2D FastProject(const struct FVector& WorldLoc);
	void FastDeProject(const struct FVector2D& RelativeScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection);
	struct FVector2D Project(const struct FVector& WorldLoc);
	void DeProject(const struct FVector2D& RelativeScreenPos, struct FVector* WorldOrigin, struct FVector* WorldDirection);
	void TouchPlayerPostProcessChain();
	class UPostProcessChain* GetPostProcessChain(int InIndex);
	bool RemoveAllPostProcessingChains();
	bool RemovePostProcessingChain(int InIndex);
	bool InsertPostProcessingChain(class UPostProcessChain* InChain, int InIndex, bool bInClone);
	class UTranslationContext* GetTranslationContext();
	void SetControllerId(int NewControllerId);
	void ClearPostProcessSettingsOverride(float BlendOutTime);
	void OverridePostProcessSettingsCurve(const struct FPostProcessSettings& OverrideSettings, struct FInterpCurveFloat* Curve);
	void OverridePostProcessSettings(const struct FPostProcessSettings& OverrideSettings, float BlendInTime);
	bool GetActorVisibility(class AActor* TestActor);
	void SendSplitJoin();
	bool SpawnPlayActor(const struct FString& URL, struct FString* OutError);
};


// Class Engine.NetConnection
// 0x8FB0 (0x9010 - 0x0060)
class UNetConnection : public UPlayer
{
public:
	unsigned char                                      UnknownData00[0x8F70];                                    // 0x0060(0x8F70) MISSED OFFSET
	TArray<class UChildConnection*>                    Children;                                                 // 0x8FD0(0x000C) (Transient, DuplicateTransient, NeedCtorLink)
	unsigned char                                      UnknownData01[0x34];                                      // 0x8FDC(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetConnection");
		return ptr;
	}

};


// Class Engine.ChildConnection
// 0x0004 (0x9014 - 0x9010)
class UChildConnection : public UNetConnection
{
public:
	class UNetConnection*                              Parent;                                                   // 0x9010(0x0004) (Const, Transient, DuplicateTransient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ChildConnection");
		return ptr;
	}

};


// Class Engine.DemoRecConnection
// 0x0000 (0x9010 - 0x9010)
class UDemoRecConnection : public UNetConnection
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoRecConnection");
		return ptr;
	}

};


// Class Engine.Polys
// 0x0010 (0x004C - 0x003C)
class UPolys : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x003C(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Polys");
		return ptr;
	}

};


// Class Engine.PostProcessChain
// 0x000C (0x0048 - 0x003C)
class UPostProcessChain : public UObject
{
public:
	TArray<class UPostProcessEffect*>                  Effects;                                                  // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PostProcessChain");
		return ptr;
	}


	class UPostProcessEffect* FindPostProcessEffect(const struct FName& EffectName);
};


// Class Engine.PostProcessEffect
// 0x0025 (0x0061 - 0x003C)
class UPostProcessEffect : public UObject
{
public:
	unsigned long                                      bShowInEditor : 1;                                        // 0x003C(0x0004) (Edit)
	unsigned long                                      bShowInGame : 1;                                          // 0x003C(0x0004) (Edit)
	unsigned long                                      bUseWorldSettings : 1;                                    // 0x003C(0x0004) (Edit)
	unsigned long                                      bAffectsLightingOnly : 1;                                 // 0x003C(0x0004)
	struct FName                                       EffectName;                                               // 0x0040(0x0008) (Edit)
	int                                                NodePosY;                                                 // 0x0048(0x0004)
	int                                                NodePosX;                                                 // 0x004C(0x0004)
	int                                                DrawWidth;                                                // 0x0050(0x0004)
	int                                                DrawHeight;                                               // 0x0054(0x0004)
	int                                                OutDrawY;                                                 // 0x0058(0x0004)
	int                                                InDrawY;                                                  // 0x005C(0x0004)
	TEnumAsByte<ESceneDepthPriorityGroup>              SceneDPG;                                                 // 0x0060(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PostProcessEffect");
		return ptr;
	}

};


// Class Engine.AmbientOcclusionEffect
// 0x005F (0x00C0 - 0x0061)
class UAmbientOcclusionEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	struct FLinearColor                                OcclusionColor;                                           // 0x0064(0x0010) (Edit)
	float                                              OcclusionPower;                                           // 0x0074(0x0004) (Edit)
	float                                              OcclusionScale;                                           // 0x0078(0x0004) (Edit)
	float                                              OcclusionBias;                                            // 0x007C(0x0004) (Edit)
	float                                              MinOcclusion;                                             // 0x0080(0x0004) (Edit)
	unsigned long                                      SSAO2 : 1;                                                // 0x0084(0x0004) (Deprecated)
	unsigned long                                      bAngleBasedSSAO : 1;                                      // 0x0084(0x0004) (Edit)
	float                                              OcclusionRadius;                                          // 0x0088(0x0004) (Edit)
	float                                              OcclusionAttenuation;                                     // 0x008C(0x0004) (Deprecated)
	TEnumAsByte<EAmbientOcclusionQuality>              OcclusionQuality;                                         // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	float                                              OcclusionFadeoutMinDistance;                              // 0x0094(0x0004) (Edit)
	float                                              OcclusionFadeoutMaxDistance;                              // 0x0098(0x0004) (Edit)
	float                                              HaloDistanceThreshold;                                    // 0x009C(0x0004) (Edit)
	float                                              HaloDistanceScale;                                        // 0x00A0(0x0004) (Edit)
	float                                              HaloOcclusion;                                            // 0x00A4(0x0004) (Edit)
	float                                              EdgeDistanceThreshold;                                    // 0x00A8(0x0004) (Edit)
	float                                              EdgeDistanceScale;                                        // 0x00AC(0x0004) (Edit)
	float                                              FilterDistanceScale;                                      // 0x00B0(0x0004) (Edit)
	int                                                FilterSize;                                               // 0x00B4(0x0004) (Deprecated)
	float                                              HistoryConvergenceTime;                                   // 0x00B8(0x0004) (Edit)
	float                                              HistoryWeightConvergenceTime;                             // 0x00BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientOcclusionEffect");
		return ptr;
	}

};


// Class Engine.BlurEffect
// 0x0007 (0x0068 - 0x0061)
class UBlurEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	int                                                BlurKernelSize;                                           // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlurEffect");
		return ptr;
	}

};


// Class Engine.DOFEffect
// 0x002F (0x0090 - 0x0061)
class UDOFEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              FalloffExponent;                                          // 0x0064(0x0004) (Edit)
	float                                              BlurKernelSize;                                           // 0x0068(0x0004) (Edit)
	float                                              MaxNearBlurAmount;                                        // 0x006C(0x0004) (Edit)
	float                                              MinBlurAmount;                                            // 0x0070(0x0004) (Edit)
	float                                              MaxFarBlurAmount;                                         // 0x0074(0x0004) (Edit)
	TEnumAsByte<EFocusType>                            FocusType;                                                // 0x0078(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0079(0x0003) MISSED OFFSET
	float                                              FocusInnerRadius;                                         // 0x007C(0x0004) (Edit)
	float                                              FocusDistance;                                            // 0x0080(0x0004) (Edit)
	struct FVector                                     FocusPosition;                                            // 0x0084(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DOFEffect");
		return ptr;
	}

};


// Class Engine.DOFAndBloomEffect
// 0x0024 (0x00B4 - 0x0090)
class UDOFAndBloomEffect : public UDOFEffect
{
public:
	float                                              BloomScale;                                               // 0x0090(0x0004) (Edit)
	float                                              BloomThreshold;                                           // 0x0094(0x0004) (Edit)
	struct FColor                                      BloomTint;                                                // 0x0098(0x0004) (Edit)
	float                                              BloomScreenBlendThreshold;                                // 0x009C(0x0004) (Edit)
	float                                              SceneMultiplier;                                          // 0x00A0(0x0004) (Deprecated)
	float                                              BlurBloomKernelSize;                                      // 0x00A4(0x0004) (Edit)
	unsigned long                                      bEnableReferenceDOF : 1;                                  // 0x00A8(0x0004) (Deprecated)
	TEnumAsByte<EDOFType>                              DepthOfFieldType;                                         // 0x00AC(0x0001) (Edit)
	TEnumAsByte<EDOFQuality>                           DepthOfFieldQuality;                                      // 0x00AD(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00AE(0x0002) MISSED OFFSET
	class UTexture2D*                                  BokehTexture;                                             // 0x00B0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DOFAndBloomEffect");
		return ptr;
	}

};


// Class Engine.DOFBloomMotionBlurEffect
// 0x0014 (0x00C8 - 0x00B4)
class UDOFBloomMotionBlurEffect : public UDOFAndBloomEffect
{
public:
	float                                              MaxVelocity;                                              // 0x00B4(0x0004) (Edit)
	float                                              MotionBlurAmount;                                         // 0x00B8(0x0004) (Edit)
	unsigned long                                      FullMotionBlur : 1;                                       // 0x00BC(0x0004) (Edit)
	float                                              CameraRotationThreshold;                                  // 0x00C0(0x0004) (Edit)
	float                                              CameraTranslationThreshold;                               // 0x00C4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DOFBloomMotionBlurEffect");
		return ptr;
	}

};


// Class Engine.UberPostProcessEffect
// 0x008C (0x0154 - 0x00C8)
class UUberPostProcessEffect : public UDOFBloomMotionBlurEffect
{
public:
	struct FVector                                     SceneShadows;                                             // 0x00C8(0x000C) (Edit)
	struct FVector                                     SceneHighLights;                                          // 0x00D4(0x000C) (Edit)
	struct FVector                                     SceneMidTones;                                            // 0x00E0(0x000C) (Edit)
	float                                              SceneDesaturation;                                        // 0x00EC(0x0004) (Edit)
	struct FVector                                     SceneColorize;                                            // 0x00F0(0x000C) (Edit)
	TEnumAsByte<ETonemapperType>                       TonemapperType;                                           // 0x00FC(0x0001) (Edit)
	TEnumAsByte<EPostProcessAAType>                    PostProcessAAType;                                        // 0x00FD(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00FE(0x0002) MISSED OFFSET
	float                                              TonemapperRange;                                          // 0x0100(0x0004) (Edit)
	float                                              TonemapperToeFactor;                                      // 0x0104(0x0004) (Edit)
	float                                              TonemapperScale;                                          // 0x0108(0x0004) (Edit)
	float                                              MotionBlurSoftEdgeKernelSize;                             // 0x010C(0x0004) (Edit)
	unsigned long                                      bEnableImageGrain : 1;                                    // 0x0110(0x0004) (Edit)
	unsigned long                                      bScaleEffectsWithViewSize : 1;                            // 0x0110(0x0004) (Edit)
	unsigned long                                      bEnableHDRTonemapper : 1;                                 // 0x0110(0x0004) (Deprecated)
	float                                              SceneImageGrainScale;                                     // 0x0114(0x0004) (Edit)
	float                                              BloomWeightSmall;                                         // 0x0118(0x0004) (Edit)
	float                                              BloomWeightMedium;                                        // 0x011C(0x0004) (Edit)
	float                                              BloomWeightLarge;                                         // 0x0120(0x0004) (Edit)
	float                                              BloomSizeScaleSmall;                                      // 0x0124(0x0004) (Edit)
	float                                              BloomSizeScaleMedium;                                     // 0x0128(0x0004) (Edit)
	float                                              BloomSizeScaleLarge;                                      // 0x012C(0x0004) (Edit)
	float                                              EdgeDetectionThreshold;                                   // 0x0130(0x0004) (Edit)
	struct FLUTBlender                                 PreviousLUTBlender;                                       // 0x0134(0x001C) (Const, Native, Transient)
	float                                              SceneHDRTonemapperScale;                                  // 0x0150(0x0004) (Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UberPostProcessEffect");
		return ptr;
	}

};


// Class Engine.DwTriovizImplEffect
// 0x0003 (0x0064 - 0x0061)
class UDwTriovizImplEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DwTriovizImplEffect");
		return ptr;
	}

};


// Class Engine.MaterialEffect
// 0x0007 (0x0068 - 0x0061)
class UMaterialEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	class UMaterialInterface*                          Material;                                                 // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialEffect");
		return ptr;
	}

};


// Class Engine.MotionBlurEffect
// 0x0017 (0x0078 - 0x0061)
class UMotionBlurEffect : public UPostProcessEffect
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              MaxVelocity;                                              // 0x0064(0x0004) (Edit)
	float                                              MotionBlurAmount;                                         // 0x0068(0x0004) (Edit)
	unsigned long                                      FullMotionBlur : 1;                                       // 0x006C(0x0004) (Edit)
	float                                              CameraRotationThreshold;                                  // 0x0070(0x0004) (Edit)
	float                                              CameraTranslationThreshold;                               // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MotionBlurEffect");
		return ptr;
	}

};


// Class Engine.PrimitiveComponentFactory
// 0x0004 (0x0040 - 0x003C)
class UPrimitiveComponentFactory : public UObject
{
public:
	unsigned long                                      CollideActors : 1;                                        // 0x003C(0x0004) (Edit, Const)
	unsigned long                                      BlockActors : 1;                                          // 0x003C(0x0004) (Edit, Const)
	unsigned long                                      BlockZeroExtent : 1;                                      // 0x003C(0x0004) (Edit, Const)
	unsigned long                                      BlockNonZeroExtent : 1;                                   // 0x003C(0x0004) (Edit, Const)
	unsigned long                                      BlockRigidBody : 1;                                       // 0x003C(0x0004) (Edit, Const)
	unsigned long                                      HiddenGame : 1;                                           // 0x003C(0x0004) (Edit)
	unsigned long                                      HiddenEditor : 1;                                         // 0x003C(0x0004) (Edit)
	unsigned long                                      CastShadow : 1;                                           // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrimitiveComponentFactory");
		return ptr;
	}

};


// Class Engine.MeshComponentFactory
// 0x000C (0x004C - 0x0040)
class UMeshComponentFactory : public UPrimitiveComponentFactory
{
public:
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0040(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshComponentFactory");
		return ptr;
	}

};


// Class Engine.StaticMeshComponentFactory
// 0x0004 (0x0050 - 0x004C)
class UStaticMeshComponentFactory : public UMeshComponentFactory
{
public:
	class UStaticMesh*                                 StaticMesh;                                               // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshComponentFactory");
		return ptr;
	}

};


// Class Engine.R_TestHarness
// 0x000C (0x0048 - 0x003C)
class UR_TestHarness : public UObject
{
public:
	TArray<struct FTestCondition>                      Tests;                                                    // 0x003C(0x000C) (Config, GlobalConfig, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.R_TestHarness");
		return ptr;
	}


	void STATIC_DisableTest(const struct FName& TestName);
	void STATIC_EnableTest(const struct FName& TestName);
	bool STATIC_GetTest(const struct FName& TestName, struct FTestCondition* Test);
	bool STATIC_IsTestDefined(const struct FName& TestName);
	bool STATIC_IsTestActive(const struct FName& TestName);
};


// Class Engine.ReachSpec
// 0x0054 (0x0090 - 0x003C)
class UReachSpec : public UObject
{
public:
	struct FPointer                                    NavOctreeObject;                                          // 0x003C(0x0004) (Const, Native, Transient, EditConst)
	int                                                Distance;                                                 // 0x0040(0x0004)
	struct FVector                                     Direction;                                                // 0x0044(0x000C)
	class ANavigationPoint*                            Start;                                                    // 0x0050(0x0004) (Edit, Const, EditConst)
	struct FActorReference                             End;                                                      // 0x0054(0x0014) (Edit, Const, EditConst)
	int                                                CollisionRadius;                                          // 0x0068(0x0004) (Edit, Const, EditConst)
	int                                                CollisionHeight;                                          // 0x006C(0x0004) (Edit, Const, EditConst)
	int                                                reachFlags;                                               // 0x0070(0x0004)
	int                                                MaxLandingVelocity;                                       // 0x0074(0x0004)
	unsigned char                                      bPruned;                                                  // 0x0078(0x0001)
	unsigned char                                      PathColorIndex;                                           // 0x0079(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x007A(0x0002) MISSED OFFSET
	unsigned long                                      bAddToNavigationOctree : 1;                               // 0x007C(0x0004) (Const, EditConst)
	unsigned long                                      bCanCutCorners : 1;                                       // 0x007C(0x0004)
	unsigned long                                      bCheckForObstructions : 1;                                // 0x007C(0x0004)
	unsigned long                                      bSkipPrune : 1;                                           // 0x007C(0x0004) (Const)
	unsigned long                                      bDisabled : 1;                                            // 0x007C(0x0004) (Edit, EditConst)
	TArray<class UClass*>                              PruneSpecList;                                            // 0x0080(0x000C) (Const, NeedCtorLink)
	class AActor*                                      BlockedBy;                                                // 0x008C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReachSpec");
		return ptr;
	}


	bool IsBlockedFor(class APawn* P);
	struct FVector GetDirection();
	class ANavigationPoint* GetEnd();
	int CostFor(class APawn* P);
};


// Class Engine.AdvancedReachSpec
// 0x0000 (0x0090 - 0x0090)
class UAdvancedReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AdvancedReachSpec");
		return ptr;
	}

};


// Class Engine.CeilingReachSpec
// 0x0000 (0x0090 - 0x0090)
class UCeilingReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CeilingReachSpec");
		return ptr;
	}

};


// Class Engine.ForcedReachSpec
// 0x0000 (0x0090 - 0x0090)
class UForcedReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForcedReachSpec");
		return ptr;
	}

};


// Class Engine.CoverSlipReachSpec
// 0x0001 (0x0091 - 0x0090)
class UCoverSlipReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                            // 0x0090(0x0001) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverSlipReachSpec");
		return ptr;
	}

};


// Class Engine.FloorToCeilingReachSpec
// 0x0000 (0x0090 - 0x0090)
class UFloorToCeilingReachSpec : public UForcedReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FloorToCeilingReachSpec");
		return ptr;
	}

};


// Class Engine.MantleReachSpec
// 0x0004 (0x0094 - 0x0090)
class UMantleReachSpec : public UForcedReachSpec
{
public:
	unsigned long                                      bClimbUp : 1;                                             // 0x0090(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MantleReachSpec");
		return ptr;
	}

};


// Class Engine.SlotToSlotReachSpec
// 0x0001 (0x0091 - 0x0090)
class USlotToSlotReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                            // 0x0090(0x0001) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SlotToSlotReachSpec");
		return ptr;
	}

};


// Class Engine.SwatTurnReachSpec
// 0x0001 (0x0091 - 0x0090)
class USwatTurnReachSpec : public UForcedReachSpec
{
public:
	unsigned char                                      SpecDirection;                                            // 0x0090(0x0001) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SwatTurnReachSpec");
		return ptr;
	}

};


// Class Engine.WallTransReachSpec
// 0x0000 (0x0090 - 0x0090)
class UWallTransReachSpec : public UForcedReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WallTransReachSpec");
		return ptr;
	}

};


// Class Engine.LadderReachSpec
// 0x0000 (0x0090 - 0x0090)
class ULadderReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LadderReachSpec");
		return ptr;
	}

};


// Class Engine.ProscribedReachSpec
// 0x0000 (0x0090 - 0x0090)
class UProscribedReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProscribedReachSpec");
		return ptr;
	}

};


// Class Engine.TeleportReachSpec
// 0x0000 (0x0090 - 0x0090)
class UTeleportReachSpec : public UReachSpec
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TeleportReachSpec");
		return ptr;
	}

};


// Class Engine.SavedMove
// 0x00AC (0x00E8 - 0x003C)
class USavedMove : public UObject
{
public:
	class USavedMove*                                  NextMove;                                                 // 0x003C(0x0004)
	float                                              TimeStamp;                                                // 0x0040(0x0004)
	float                                              Delta;                                                    // 0x0044(0x0004)
	unsigned long                                      bRun : 1;                                                 // 0x0048(0x0004)
	unsigned long                                      bDuck : 1;                                                // 0x0048(0x0004)
	unsigned long                                      bPressedJump : 1;                                         // 0x0048(0x0004)
	unsigned long                                      bDoubleJump : 1;                                          // 0x0048(0x0004)
	unsigned long                                      bPreciseDestination : 1;                                  // 0x0048(0x0004)
	unsigned long                                      bForceRMVelocity : 1;                                     // 0x0048(0x0004)
	unsigned long                                      bForceMaxAccel : 1;                                       // 0x0048(0x0004)
	unsigned long                                      bRootMotionFromInterpCurve : 1;                           // 0x0048(0x0004)
	TEnumAsByte<EDoubleClickDir>                       DoubleClickMove;                                          // 0x004C(0x0001)
	TEnumAsByte<EPhysics>                              SavedPhysics;                                             // 0x004D(0x0001)
	TEnumAsByte<ERootMotionMode>                       RootMotionMode;                                           // 0x004E(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x004F(0x0001) MISSED OFFSET
	struct FVector                                     StartLocation;                                            // 0x0050(0x000C)
	struct FVector                                     StartRelativeLocation;                                    // 0x005C(0x000C)
	struct FVector                                     StartVelocity;                                            // 0x0068(0x000C)
	struct FVector                                     StartFloor;                                               // 0x0074(0x000C)
	struct FVector                                     SavedLocation;                                            // 0x0080(0x000C)
	struct FVector                                     SavedVelocity;                                            // 0x008C(0x000C)
	struct FVector                                     SavedRelativeLocation;                                    // 0x0098(0x000C)
	struct FVector                                     RMVelocity;                                               // 0x00A4(0x000C)
	struct FVector                                     Acceleration;                                             // 0x00B0(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x00BC(0x000C)
	class AActor*                                      StartBase;                                                // 0x00C8(0x0004)
	class AActor*                                      EndBase;                                                  // 0x00CC(0x0004)
	float                                              CustomTimeDilation;                                       // 0x00D0(0x0004)
	float                                              AccelDotThreshold;                                        // 0x00D4(0x0004)
	float                                              RootMotionInterpCurrentTime;                              // 0x00D8(0x0004)
	struct FVector                                     RootMotionInterpCurveLastValue;                           // 0x00DC(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SavedMove");
		return ptr;
	}


	struct FString GetDebugString();
	TEnumAsByte<EDoubleClickDir> STATIC_SetFlags(unsigned char Flags, class APlayerController* PC);
	unsigned char CompressedFlags();
	void ResetMoveFor(class APawn* P);
	void PrepMoveFor(class APawn* P);
	void SetMoveFor(class APlayerController* P, float DeltaTime, const struct FVector& newAccel, TEnumAsByte<EDoubleClickDir> InDoubleClick);
	bool CanCombineWith(class USavedMove* NewMove, class APawn* inPawn, float MaxDelta);
	void SetInitialPosition(class APawn* P);
	struct FVector GetStartLocation();
	bool IsImportantMove(const struct FVector& CompareAccel);
	void PostUpdate(class APlayerController* P);
	void Clear();
};


// Class Engine.SaveGameSummary
// 0x0014 (0x0050 - 0x003C)
class USaveGameSummary : public UObject
{
public:
	struct FName                                       BaseLevel;                                                // 0x003C(0x0008)
	struct FString                                     Description;                                              // 0x0044(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SaveGameSummary");
		return ptr;
	}

};


// Class Engine.ScriptViewportClient
// 0x0004 (0x0040 - 0x003C)
class UScriptViewportClient : public UObject
{
public:
	struct FPointer                                    VfTable_FViewportClient;                                  // 0x003C(0x0004) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ScriptViewportClient");
		return ptr;
	}

};


// Class Engine.GameViewportClient
// 0x00E8 (0x0128 - 0x0040)
class UGameViewportClient : public UScriptViewportClient
{
public:
	struct FPointer                                    VfTable_FExec;                                            // 0x0040(0x0004) (Const, Native, NoExport)
	struct FPointer                                    Viewport;                                                 // 0x0044(0x0004) (Const)
	struct FPointer                                    ViewportFrame;                                            // 0x0048(0x0004) (Const)
	TArray<class UInteraction*>                        GlobalInteractions;                                       // 0x004C(0x000C) (AlwaysInit, NeedCtorLink)
	class UClass*                                      UIControllerClass;                                        // 0x0058(0x0004)
	class UUIInteraction*                              UIController;                                             // 0x005C(0x0004)
	class UConsole*                                    ViewportConsole;                                          // 0x0060(0x0004)
	struct FExportShowFlags_Mirror                     ShowFlags;                                                // 0x0064(0x0010) (Const)
	struct FString                                     LoadingMessage;                                           // 0x0074(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SavingMessage;                                            // 0x0080(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ConnectingMessage;                                        // 0x008C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PausedMessage;                                            // 0x0098(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PrecachingMessage;                                        // 0x00A4(0x000C) (Const, Localized, NeedCtorLink)
	unsigned long                                      bShowTitleSafeZone : 1;                                   // 0x00B0(0x0004)
	unsigned long                                      bDisplayHardwareMouseCursor : 1;                          // 0x00B0(0x0004) (Transient)
	unsigned long                                      bOverrideDiffuseAndSpecular : 1;                          // 0x00B0(0x0004) (Transient)
	unsigned long                                      bIsPlayInEditorViewport : 1;                              // 0x00B0(0x0004) (Transient)
	unsigned long                                      bShowSystemMouseCursor : 1;                               // 0x00B0(0x0004) (Transient)
	unsigned long                                      bDisableWorldRendering : 1;                               // 0x00B0(0x0004)
	unsigned long                                      bCapturedWorldRendering : 1;                              // 0x00B0(0x0004)
	unsigned long                                      bDebugNoGFxUI : 1;                                        // 0x00B0(0x0004) (Config)
	struct FTitleSafeZoneArea                          TitleSafeZone;                                            // 0x00B4(0x0010)
	TArray<struct FSplitscreenData>                    SplitscreenInfo;                                          // 0x00C4(0x000C) (NeedCtorLink)
	TEnumAsByte<ESplitScreenType>                      DesiredSplitscreenType;                                   // 0x00D0(0x0001)
	TEnumAsByte<ESplitScreenType>                      ActiveSplitscreenType;                                    // 0x00D1(0x0001)
	TEnumAsByte<ESplitScreenType>                      Default2PSplitType;                                       // 0x00D2(0x0001) (Const)
	TEnumAsByte<ESplitScreenType>                      Default3PSplitType;                                       // 0x00D3(0x0001) (Const)
	struct FString                                     ProgressMessage[0x2];                                     // 0x00D4(0x000C) (NeedCtorLink)
	float                                              ProgressTimeOut;                                          // 0x00EC(0x0004)
	float                                              ProgressFadeTime;                                         // 0x00F0(0x0004)
	TArray<struct FDebugDisplayProperty>               DebugProperties;                                          // 0x00F4(0x000C) (NeedCtorLink)
	struct FPointer                                    ScaleformInteraction;                                     // 0x0100(0x0004) (Const, Native)
	struct FScriptDelegate                             __HandleInputKey__Delegate;                               // 0x0104(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleInputAxis__Delegate;                              // 0x0110(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __HandleInputChar__Delegate;                              // 0x011C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameViewportClient");
		return ptr;
	}


	void SetHardwareMouseCursorVisibility(bool bIsVisible);
	void DebugSetUISystemEnabled(bool bOldUISystemActive, bool bGFxUISystemActive);
	void BecomePrimaryPlayer(int PlayerIndex);
	void OnPrimaryPlayerSwitch(class ULocalPlayer* OldPrimaryPlayer, class ULocalPlayer* NewPrimaryPlayer);
	void FixupOwnerReferences(TArray<int> IDMappings);
	class ULocalPlayer* GetPlayerOwner(int PlayerIndex);
	void ClearProgressMessages();
	void SetProgressTime(float T);
	void NotifyConnectionError(TEnumAsByte<EProgressMessageType> MessageType, TEnumAsByte<EProgressMessageSubType> MessageSubType, const struct FString& Message, const struct FString& Title);
	void SetProgressMessage(TEnumAsByte<EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title, bool bIgnoreFutureNetworkMessages, TEnumAsByte<EProgressMessageSubType> MessageSubType);
	int RemoveLocalPlayer(class ULocalPlayer* ExistingPlayer);
	int AddLocalPlayer(class ULocalPlayer* NewPlayer);
	void NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void DrawTransitionMessage(class UCanvas* Canvas, const struct FString& Message);
	void DrawTransition(class UCanvas* Canvas);
	void DisplayProgressMessage(class UCanvas* Canvas);
	void PostRender(class UCanvas* Canvas);
	void DrawTitleSafeArea(class UCanvas* Canvas);
	void Tick(float DeltaTime);
	bool CalculateDeadZoneForAllSides(class ULocalPlayer* LPlayer, class UCanvas* Canvas, bool bUseMaxPercent, float* fTopSafeZone, float* fBottomSafeZone, float* fLeftSafeZone, float* fRightSafeZone);
	void CalculateSafeZoneValues(class UCanvas* Canvas, int LocalPlayerIndex, bool bUseMaxPercent, float* out_Horizontal, float* out_Vertical);
	void GetPixelSizeOfScreen(class UCanvas* Canvas, int LocalPlayerIndex, float* out_Width, float* out_Height);
	bool HasRightSafeZone(int LocalPlayerIndex);
	bool HasLeftSafeZone(int LocalPlayerIndex);
	bool HasBottomSafeZone(int LocalPlayerIndex);
	bool HasTopSafeZone(int LocalPlayerIndex);
	int ConvertLocalPlayerToGamePlayerIndex(class ULocalPlayer* LPlayer);
	void GetSubtitleRegion(struct FVector2D* MinPos, struct FVector2D* MaxPos);
	void LayoutPlayers();
	void UpdateActiveSplitscreenType();
	TEnumAsByte<ESplitScreenType> GetSplitscreenConfiguration();
	void SetSplitscreenConfiguration(TEnumAsByte<ESplitScreenType> SplitType);
	void GameSessionEnded();
	int InsertInteraction(class UInteraction* NewInteraction, int InIndex);
	bool CreateInitialPlayer(struct FString* OutError);
	bool Init(struct FString* OutError);
	class ULocalPlayer* FindPlayerByControllerId(int ControllerId);
	bool RemovePlayer(class ULocalPlayer* ExPlayer);
	class ULocalPlayer* CreatePlayer(int ControllerId, bool bSpawnActor, struct FString* OutError);
	void SetMouse(int X, int Y);
	void ForceUpdateMouseCursor(bool bSetCursor);
	void NotifySplitscreenLayoutChanged();
	void SetCustomInteractionObject(class UInteraction* InInteraction);
	class UClass* GetCustomInteractionClass(int InIndex);
	int GetNumCustomInteractions();
	bool ShouldForceFullscreenViewport();
	struct FVector2D GetMousePosition();
	bool IsFullScreenViewport();
	bool IsBorderlessViewport();
	void GetViewportSize(struct FVector2D* out_ViewportSize);
	struct FString ConsoleCommand(const struct FString& Command);
	bool HandleInputChar(int ControllerId, const struct FString& Unicode);
	bool HandleInputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad);
	bool HandleInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad);
};


// Class Engine.Selection
// 0x0024 (0x0060 - 0x003C)
class USelection : public UObject
{
public:
	unsigned char                                      UnknownData00[0x24];                                      // 0x003C(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Selection");
		return ptr;
	}

};


// Class Engine.ServerCommandlet
// 0x0000 (0x007C - 0x007C)
class UServerCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ServerCommandlet");
		return ptr;
	}

};


// Class Engine.OnlineGameSettings
// 0x00A4 (0x0110 - 0x006C)
class UOnlineGameSettings : public USettings
{
public:
	int                                                NumPublicConnections;                                     // 0x006C(0x0004) (DataBinding)
	int                                                NumPrivateConnections;                                    // 0x0070(0x0004) (DataBinding)
	int                                                NumOpenPublicConnections;                                 // 0x0074(0x0004) (DataBinding)
	int                                                NumOpenPrivateConnections;                                // 0x0078(0x0004) (DataBinding)
	struct FQWord                                      ServerNonce;                                              // 0x007C(0x0008) (Const)
	unsigned long                                      bShouldAdvertise : 1;                                     // 0x0084(0x0004) (DataBinding)
	unsigned long                                      bIsLanMatch : 1;                                          // 0x0084(0x0004) (DataBinding)
	unsigned long                                      bUsesStats : 1;                                           // 0x0084(0x0004) (DataBinding)
	unsigned long                                      bAllowJoinInProgress : 1;                                 // 0x0084(0x0004) (DataBinding)
	unsigned long                                      bAllowInvites : 1;                                        // 0x0084(0x0004) (DataBinding)
	unsigned long                                      bUsesPresence : 1;                                        // 0x0084(0x0004) (DataBinding)
	unsigned long                                      bAllowJoinViaPresence : 1;                                // 0x0084(0x0004) (DataBinding)
	unsigned long                                      bAllowJoinViaPresenceFriendsOnly : 1;                     // 0x0084(0x0004) (DataBinding)
	unsigned long                                      bUsesArbitration : 1;                                     // 0x0084(0x0004) (DataBinding)
	unsigned long                                      bAntiCheatProtected : 1;                                  // 0x0084(0x0004) (DataBinding)
	unsigned long                                      bWasFromInvite : 1;                                       // 0x0084(0x0004) (Const)
	unsigned long                                      bIsDedicated : 1;                                         // 0x0084(0x0004) (DataBinding)
	unsigned long                                      bHasSkillUpdateInProgress : 1;                            // 0x0084(0x0004) (Const)
	unsigned long                                      bShouldShrinkArbitratedSessions : 1;                      // 0x0084(0x0004) (Const)
	unsigned long                                      bIsMatchmakingVisible : 1;                                // 0x0084(0x0004) (DataBinding)
	unsigned long                                      bTournament : 1;                                          // 0x0084(0x0004)
	unsigned long                                      bIgnoreMMR : 1;                                           // 0x0084(0x0004)
	struct FString                                     OwningPlayerName;                                         // 0x0088(0x000C) (NeedCtorLink, DataBinding)
	struct FUniqueNetId                                OwningPlayerId;                                           // 0x0094(0x0010)
	int                                                PingInMs;                                                 // 0x00A4(0x0004) (DataBinding)
	float                                              MatchQuality;                                             // 0x00A8(0x0004) (DataBinding)
	TEnumAsByte<EOnlineGameState>                      GameState;                                                // 0x00AC(0x0001) (Const, DataBinding)
	TEnumAsByte<EOnlineMatchState>                     CurrentState;                                             // 0x00AD(0x0001) (DataBinding)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00AE(0x0002) MISSED OFFSET
	int                                                BuildUniqueId;                                            // 0x00B0(0x0004) (Const)
	struct FString                                     ServerName;                                               // 0x00B4(0x000C) (NeedCtorLink, DataBinding)
	struct FString                                     ServerListingGuid;                                        // 0x00C0(0x000C) (NeedCtorLink, DataBinding)
	struct FString                                     ServerEndPoint;                                           // 0x00CC(0x000C) (NeedCtorLink, DataBinding)
	int                                                ServerPort;                                               // 0x00D8(0x0004) (DataBinding)
	struct FString                                     VoiceChannelListing;                                      // 0x00DC(0x000C) (NeedCtorLink, DataBinding)
	int                                                AutoStartMinPlayers;                                      // 0x00E8(0x0004) (DataBinding)
	int                                                MatchCompletionPercent;                                   // 0x00EC(0x0004) (DataBinding)
	int                                                PlayersNeededToStart;                                     // 0x00F0(0x0004) (DataBinding)
	TArray<int>                                        TeamSizes;                                                // 0x00F4(0x000C) (NeedCtorLink, DataBinding)
	int                                                AveragePilotLevel;                                        // 0x0100(0x0004) (Const)
	struct FString                                     ServerPassword;                                           // 0x0104(0x000C) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineGameSettings");
		return ptr;
	}

};


// Class Engine.ShaderCache
// 0x004C (0x0088 - 0x003C)
class UShaderCache : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4C];                                      // 0x003C(0x004C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShaderCache");
		return ptr;
	}

};


// Class Engine.ShadowMap1D
// 0x0044 (0x0080 - 0x003C)
class UShadowMap1D : public UObject
{
public:
	unsigned char                                      UnknownData00[0x44];                                      // 0x003C(0x0044) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShadowMap1D");
		return ptr;
	}

};


// Class Engine.ShadowMap2D
// 0x0030 (0x006C - 0x003C)
class UShadowMap2D : public UObject
{
public:
	class UShadowMapTexture2D*                         Texture;                                                  // 0x003C(0x0004) (Const)
	struct FVector2D                                   CoordinateScale;                                          // 0x0040(0x0008) (Const)
	struct FVector2D                                   CoordinateBias;                                           // 0x0048(0x0008) (Const)
	struct FGuid                                       LightGuid;                                                // 0x0050(0x0010) (Const)
	unsigned long                                      bIsShadowFactorTexture : 1;                               // 0x0060(0x0004) (Const)
	class UInstancedStaticMeshComponent*               Component;                                                // 0x0064(0x0004) (ExportObject, Transient, Component, EditInline)
	int                                                InstanceIndex;                                            // 0x0068(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShadowMap2D");
		return ptr;
	}

};


// Class Engine.SmokeTestCommandlet
// 0x0000 (0x007C - 0x007C)
class USmokeTestCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SmokeTestCommandlet");
		return ptr;
	}

};


// Class Engine.SoundCue
// 0x0094 (0x00D0 - 0x003C)
class USoundCue : public UObject
{
public:
	struct FName                                       SoundClass;                                               // 0x003C(0x0008) (Edit)
	TEnumAsByte<ESoundClassName>                       SoundClassName;                                           // 0x0044(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	unsigned long                                      bDebug : 1;                                               // 0x0048(0x0004) (Edit)
	class USoundNode*                                  FirstNode;                                                // 0x004C(0x0004)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x0050(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SoundCue.EditorData
	float                                              MaxAudibleDistance;                                       // 0x008C(0x0004) (Transient)
	float                                              VolumeMultiplier;                                         // 0x0090(0x0004) (Edit)
	float                                              PitchMultiplier;                                          // 0x0094(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0098(0x0004)
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                         // 0x009C(0x0004) (Edit)
	struct FString                                     FaceFXGroupName;                                          // 0x00A0(0x000C) (Edit, NeedCtorLink)
	struct FString                                     FaceFXAnimName;                                           // 0x00AC(0x000C) (Edit, NeedCtorLink)
	int                                                MaxConcurrentPlayCount;                                   // 0x00B8(0x0004) (Edit)
	int                                                CurrentPlayCount;                                         // 0x00BC(0x0004) (Const, Transient, DuplicateTransient)
	float                                              MinTimeBetweenPlays;                                      // 0x00C0(0x0004) (Edit)
	float                                              LastPlayTime;                                             // 0x00C4(0x0004) (Const, Transient, DuplicateTransient)
	struct FName                                       SoundGroup;                                               // 0x00C8(0x0008) (Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundCue");
		return ptr;
	}


	float GetCueDuration();
};


// Class Engine.SpeechRecognition
// 0x0088 (0x00C4 - 0x003C)
class USpeechRecognition : public UObject
{
public:
	struct FString                                     Language;                                                 // 0x003C(0x000C) (Edit, NeedCtorLink)
	float                                              ConfidenceThreshhold;                                     // 0x0048(0x0004) (Edit)
	TArray<struct FRecogVocabulary>                    Vocabularies;                                             // 0x004C(0x000C) (Edit, NeedCtorLink)
	TArray<unsigned char>                              VoiceData;                                                // 0x0058(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              WorkingVoiceData;                                         // 0x0064(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              UserData;                                                 // 0x0070(0x000C) (NeedCtorLink)
	struct FRecogUserData                              InstanceData[0x4];                                        // 0x007C(0x0010) (NeedCtorLink)
	unsigned long                                      bDirty : 1;                                               // 0x00BC(0x0004) (Transient, DuplicateTransient)
	unsigned long                                      bInitialised : 1;                                         // 0x00BC(0x0004) (Transient, DuplicateTransient)
	struct FPointer                                    FnxVoiceData;                                             // 0x00C0(0x0004) (Const, Native, DuplicateTransient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeechRecognition");
		return ptr;
	}

};


// Class Engine.StaticMesh
// 0x0164 (0x01A0 - 0x003C)
class UStaticMesh : public UObject
{
public:
	unsigned char                                      UnknownData00[0xC];                                       // 0x003C(0x000C) MISSED OFFSET
	TArray<struct FStaticMeshLODInfo>                  LODInfo;                                                  // 0x0048(0x000C) (Edit, EditFixedSize, Native)
	float                                              LODDistanceRatio;                                         // 0x0054(0x0004) (Edit)
	float                                              LODMaxRange;                                              // 0x0058(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x10];                                      // 0x005C(0x0010) MISSED OFFSET
	int                                                LightMapResolution;                                       // 0x006C(0x0004) (Edit)
	int                                                LightMapCoordinateIndex;                                  // 0x0070(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x50];                                      // 0x0074(0x0050) MISSED OFFSET
	class URB_BodySetup*                               BodySetup;                                                // 0x00C4(0x0004) (Edit, EditInline)
	unsigned char                                      UnknownData03[0x34];                                      // 0x00C8(0x0034) MISSED OFFSET
	unsigned char                                      DefaultDetailMode;                                        // 0x00FC(0x0001) (Edit)
	unsigned char                                      UnknownData04[0x3];                                       // 0x00FD(0x0003) MISSED OFFSET
	unsigned long                                      UseSimpleLineCollision : 1;                               // 0x0100(0x0004) (Edit)
	unsigned long                                      UnknownData05 : 31;                                       // 0x0100(0x0001)
	unsigned long                                      UseSimpleBoxCollision : 1;                                // 0x0104(0x0004) (Edit)
	unsigned long                                      UnknownData06 : 31;                                       // 0x0104(0x0001)
	unsigned long                                      UseSimpleRigidBodyCollision : 1;                          // 0x0108(0x0004) (Edit)
	unsigned long                                      UnknownData07 : 31;                                       // 0x0108(0x0001)
	unsigned long                                      UseFullPrecisionUVs : 1;                                  // 0x010C(0x0004) (Edit)
	unsigned long                                      UnknownData08 : 31;                                       // 0x010C(0x0001)
	unsigned long                                      bUsedForInstancing : 1;                                   // 0x0110(0x0004) (Edit)
	int                                                ConsolePreallocateInstanceCount;                          // 0x0114(0x0004) (Edit)
	unsigned long                                      bUseMaximumStreamingTexelRatio : 1;                       // 0x0118(0x0004) (Edit)
	unsigned long                                      UnknownData09 : 31;                                       // 0x0118(0x0001)
	unsigned long                                      bPartitionForEdgeGeometry : 1;                            // 0x011C(0x0004) (Edit)
	unsigned long                                      UnknownData10 : 31;                                       // 0x011C(0x0001)
	unsigned long                                      bCanBecomeDynamic : 1;                                    // 0x0120(0x0004) (Edit)
	unsigned char                                      UnknownData11[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	unsigned long                                      bStripComplexCollisionForConsole : 1;                     // 0x0128(0x0004) (Edit)
	unsigned long                                      UnknownData12 : 31;                                       // 0x0128(0x0001)
	unsigned long                                      bPerLODStaticLightingForInstancing : 1;                   // 0x012C(0x0004) (Edit)
	float                                              StreamingDistanceMultiplier;                              // 0x0130(0x0004) (Edit)
	float                                              LightmapStreamingDistanceMultiplier;                      // 0x0134(0x0004) (Edit)
	unsigned char                                      UnknownData13[0x20];                                      // 0x0138(0x0020) MISSED OFFSET
	class UInstancedFoliageSettings*                   FoliageDefaultSettings;                                   // 0x0158(0x0004) (Edit, EditInline)
	struct FString                                     SourceFilePath;                                           // 0x015C(0x000C) (Edit, EditConst, NeedCtorLink)
	struct FString                                     SourceFileTimestamp;                                      // 0x0168(0x000C) (Edit, EditConst, NeedCtorLink)
	unsigned char                                      UnknownData14[0x2C];                                      // 0x0174(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMesh");
		return ptr;
	}

};


// Class Engine.Surface
// 0x0000 (0x003C - 0x003C)
class USurface : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Surface");
		return ptr;
	}


	float GetSurfaceHeight();
	float GetSurfaceWidth();
};


// Class Engine.MaterialInterface
// 0x01DC (0x0218 - 0x003C)
class UMaterialInterface : public USurface
{
public:
	struct FRenderCommandFence_Mirror                  ParentRefFence;                                           // 0x003C(0x0004) (Const, Native, Transient)
	struct FLightmassMaterialInterfaceSettings         LightmassSettings;                                        // 0x0040(0x001C) (Edit)
	struct FString                                     PreviewMesh;                                              // 0x005C(0x000C) (Edit, NeedCtorLink)
	struct FGuid                                       LightingGuid;                                             // 0x0068(0x0010) (Const)
	unsigned long                                      bHasQualitySwitch : 1;                                    // 0x0078(0x0004) (Const)
	unsigned long                                      bAutoFlattenMobile : 1;                                   // 0x0078(0x0004) (Edit)
	unsigned long                                      bAutoFlattenMobileNormalTexture : 1;                      // 0x0078(0x0004) (Edit)
	unsigned long                                      bMobileAllowFog : 1;                                      // 0x0078(0x0004) (Edit)
	unsigned long                                      bGenerateSubUV : 1;                                       // 0x0078(0x0004) (Edit)
	unsigned long                                      bUseMobileSpecular : 1;                                   // 0x0078(0x0004) (Edit)
	unsigned long                                      bUseMobileVertexSpecular : 1;                             // 0x0078(0x0004) (Deprecated)
	unsigned long                                      bUseMobilePixelSpecular : 1;                              // 0x0078(0x0004) (Edit)
	unsigned long                                      bUseMobileBumpOffset : 1;                                 // 0x0078(0x0004) (Edit)
	unsigned long                                      bLockColorBlending : 1;                                   // 0x0078(0x0004) (Edit)
	unsigned long                                      bUseMobileUniformColorMultiply : 1;                       // 0x0078(0x0004) (Edit)
	unsigned long                                      bUseMobileVertexColorMultiply : 1;                        // 0x0078(0x0004) (Edit)
	unsigned long                                      bUseMobileDetailNormal : 1;                               // 0x0078(0x0004) (Edit)
	unsigned long                                      bBaseTextureTransformed : 1;                              // 0x0078(0x0004) (Edit)
	unsigned long                                      bEmissiveTextureTransformed : 1;                          // 0x0078(0x0004) (Edit)
	unsigned long                                      bNormalTextureTransformed : 1;                            // 0x0078(0x0004) (Edit)
	unsigned long                                      bMaskTextureTransformed : 1;                              // 0x0078(0x0004) (Edit)
	unsigned long                                      bDetailTextureTransformed : 1;                            // 0x0078(0x0004) (Edit)
	unsigned long                                      bUseMobileWaveVertexMovement : 1;                         // 0x0078(0x0004) (Edit)
	unsigned long                                      bMobileEnableBounceLight : 1;                             // 0x0078(0x0004) (Edit)
	unsigned long                                      bUseMobileLandscapeMonochromeLayerBlending : 1;           // 0x0078(0x0004) (Edit)
	struct FColor                                      FlattenBackgroundColor;                                   // 0x007C(0x0004) (Edit)
	class UTexture*                                    MobileBaseTexture;                                        // 0x0080(0x0004) (Edit)
	class UTexture*                                    FlattenedTexture;                                         // 0x0084(0x0004) (DuplicateTransient, Deprecated)
	TEnumAsByte<EMobileTexCoordsSource>                MobileBaseTextureTexCoordsSource;                         // 0x0088(0x0001) (Edit)
	TEnumAsByte<EMobileAmbientOcclusionSource>         MobileAmbientOcclusionSource;                             // 0x0089(0x0001) (Edit)
	TEnumAsByte<EMobileSpecularMask>                   MobileSpecularMask;                                       // 0x008A(0x0001) (Edit)
	TEnumAsByte<EMobileEmissiveColorSource>            MobileEmissiveColorSource;                                // 0x008B(0x0001) (Edit)
	TEnumAsByte<EMobileValueSource>                    MobileEmissiveMaskSource;                                 // 0x008C(0x0001) (Edit)
	TEnumAsByte<EMobileValueSource>                    MobileEnvironmentMaskSource;                              // 0x008D(0x0001) (Edit)
	TEnumAsByte<EMobileEnvironmentBlendMode>           MobileEnvironmentBlendMode;                               // 0x008E(0x0001) (Edit)
	TEnumAsByte<EMobileValueSource>                    MobileRimLightingMaskSource;                              // 0x008F(0x0001) (Edit)
	TEnumAsByte<EMobileTexCoordsSource>                MobileMaskTextureTexCoordsSource;                         // 0x0090(0x0001) (Edit)
	TEnumAsByte<EMobileAlphaValueSource>               MobileAlphaValueSource;                                   // 0x0091(0x0001) (Edit)
	TEnumAsByte<EMobileTexCoordsSource>                MobileDetailTextureTexCoordsSource;                       // 0x0092(0x0001) (Edit)
	TEnumAsByte<EMobileTextureBlendFactorSource>       MobileTextureBlendFactorSource;                           // 0x0093(0x0001) (Edit)
	TEnumAsByte<EMobileColorMultiplySource>            MobileColorMultiplySource;                                // 0x0094(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	class UTexture*                                    MobileNormalTexture;                                      // 0x0098(0x0004) (Edit)
	float                                              SubUVFrameRate;                                           // 0x009C(0x0004) (Edit)
	int                                                SubUVFrameCountAlongAxes;                                 // 0x00A0(0x0004) (Edit)
	float                                              SubUVFrameSize;                                           // 0x00A4(0x0004) (Edit)
	struct FLinearColor                                MobileSpecularColor;                                      // 0x00A8(0x0010) (Edit)
	float                                              MobileSpecularPower;                                      // 0x00B8(0x0004) (Edit)
	class UTexture*                                    MobileEmissiveTexture;                                    // 0x00BC(0x0004) (Edit)
	struct FLinearColor                                MobileEmissiveColor;                                      // 0x00C0(0x0010) (Edit)
	class UTexture*                                    MobileEnvironmentTexture;                                 // 0x00D0(0x0004) (Edit)
	float                                              MobileEnvironmentAmount;                                  // 0x00D4(0x0004) (Edit)
	struct FLinearColor                                MobileEnvironmentColor;                                   // 0x00D8(0x0010) (Edit)
	float                                              MobileEnvironmentFresnelAmount;                           // 0x00E8(0x0004) (Edit)
	float                                              MobileEnvironmentFresnelExponent;                         // 0x00EC(0x0004) (Edit)
	float                                              MobileRimLightingStrength;                                // 0x00F0(0x0004) (Edit)
	float                                              MobileRimLightingExponent;                                // 0x00F4(0x0004) (Edit)
	struct FLinearColor                                MobileRimLightingColor;                                   // 0x00F8(0x0010) (Edit)
	float                                              MobileBumpOffsetReferencePlane;                           // 0x0108(0x0004) (Edit)
	float                                              MobileBumpOffsetHeightRatio;                              // 0x010C(0x0004) (Edit)
	class UTexture*                                    MobileMaskTexture;                                        // 0x0110(0x0004) (Edit)
	float                                              MobileOpacityMultiplier;                                  // 0x0114(0x0004) (Edit)
	class UTexture*                                    MobileDetailTexture;                                      // 0x0118(0x0004) (Edit)
	class UTexture*                                    MobileDetailTexture2;                                     // 0x011C(0x0004) (Edit)
	class UTexture*                                    MobileDetailTexture3;                                     // 0x0120(0x0004) (Edit)
	struct FLinearColor                                DefaultUniformColor;                                      // 0x0124(0x0010) (Deprecated)
	struct FLinearColor                                MobileDefaultUniformColor;                                // 0x0134(0x0010) (Edit)
	float                                              TransformCenterX;                                         // 0x0144(0x0004) (Deprecated)
	float                                              MobileTransformCenterX;                                   // 0x0148(0x0004) (Edit)
	float                                              TransformCenterY;                                         // 0x014C(0x0004) (Deprecated)
	float                                              MobileTransformCenterY;                                   // 0x0150(0x0004) (Edit)
	float                                              PannerSpeedX;                                             // 0x0154(0x0004) (Deprecated)
	float                                              MobilePannerSpeedX;                                       // 0x0158(0x0004) (Edit)
	float                                              PannerSpeedY;                                             // 0x015C(0x0004) (Deprecated)
	float                                              MobilePannerSpeedY;                                       // 0x0160(0x0004) (Edit)
	float                                              RotateSpeed;                                              // 0x0164(0x0004) (Deprecated)
	float                                              MobileRotateSpeed;                                        // 0x0168(0x0004) (Edit)
	float                                              FixedScaleX;                                              // 0x016C(0x0004) (Deprecated)
	float                                              MobileFixedScaleX;                                        // 0x0170(0x0004) (Edit)
	float                                              FixedScaleY;                                              // 0x0174(0x0004) (Deprecated)
	float                                              MobileFixedScaleY;                                        // 0x0178(0x0004) (Edit)
	float                                              SineScaleX;                                               // 0x017C(0x0004) (Deprecated)
	float                                              MobileSineScaleX;                                         // 0x0180(0x0004) (Edit)
	float                                              SineScaleY;                                               // 0x0184(0x0004) (Deprecated)
	float                                              MobileSineScaleY;                                         // 0x0188(0x0004) (Edit)
	float                                              SineScaleFrequencyMultipler;                              // 0x018C(0x0004) (Deprecated)
	float                                              MobileSineScaleFrequencyMultipler;                        // 0x0190(0x0004) (Edit)
	float                                              FixedOffsetX;                                             // 0x0194(0x0004) (Deprecated)
	float                                              MobileFixedOffsetX;                                       // 0x0198(0x0004) (Edit)
	float                                              FixedOffsetY;                                             // 0x019C(0x0004) (Deprecated)
	float                                              MobileFixedOffsetY;                                       // 0x01A0(0x0004) (Edit)
	float                                              MobileTangentVertexFrequencyMultiplier;                   // 0x01A4(0x0004) (Edit)
	float                                              MobileVerticalFrequencyMultiplier;                        // 0x01A8(0x0004) (Edit)
	float                                              MobileMaxVertexMovementAmplitude;                         // 0x01AC(0x0004) (Edit)
	float                                              MobileSwayFrequencyMultiplier;                            // 0x01B0(0x0004) (Edit)
	float                                              MobileSwayMaxAngle;                                       // 0x01B4(0x0004) (Edit)
	struct FVector                                     MobileDirectionalLightDirection;                          // 0x01B8(0x000C) (Edit)
	float                                              MobileDirectionalLightBrightness;                         // 0x01C4(0x0004) (Edit)
	struct FColor                                      MobileDirectionalLightColor;                              // 0x01C8(0x0004) (Edit)
	struct FVector                                     MobileBounceLightDirection;                               // 0x01CC(0x000C) (Edit)
	float                                              MobileBounceLightBrightness;                              // 0x01D8(0x0004) (Edit)
	struct FColor                                      MobileBounceLightColor;                                   // 0x01DC(0x0004) (Edit)
	float                                              MobileSkyLightBrightness;                                 // 0x01E0(0x0004) (Edit)
	struct FColor                                      MobileSkyLightColor;                                      // 0x01E4(0x0004) (Edit)
	struct FName                                       MobileLandscapeLayerNames[0x4];                           // 0x01E8(0x0008) (Edit)
	struct FColor                                      MobileLandscapeMonochomeLayerColors[0x4];                 // 0x0208(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInterface");
		return ptr;
	}


	void SetForceMipLevelsToBeResident(bool OverrideForceMiplevelsToBeResident, bool bForceMiplevelsToBeResidentValue, float ForceDuration, int CinematicTextureGroups);
	bool GetMobileVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue);
	bool GetMobileTextureParameterValue(const struct FName& ParameterName, class UTexture** OutValue);
	bool GetMobileScalarParameterValue(const struct FName& ParameterName, float* OutValue);
	bool GetGroupName(const struct FName& ParameterName, struct FName* GroupName);
	bool GetLinearColorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveLinearColor* OutValue);
	bool GetLinearColorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue);
	bool GetVectorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveVector* OutValue);
	bool GetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue);
	bool GetTextureParameterValue(const struct FName& ParameterName, class UTexture** OutValue);
	bool GetScalarCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveFloat* OutValue);
	bool GetScalarParameterValue(const struct FName& ParameterName, float* OutValue);
	bool GetFontParameterValue(const struct FName& ParameterName, class UFont** OutFontValue, int* OutFontPage);
	bool GetParameterDesc(const struct FName& ParameterName, struct FString* OutDesc);
	class UPhysicalMaterial* GetPhysicalMaterial();
	class UMaterial* GetMaterial();
};


// Class Engine.RB_BodySetup
// 0x0050 (0x00D0 - 0x0080)
class URB_BodySetup : public UKMeshProps
{
public:
	TEnumAsByte<ESleepFamily>                          SleepFamily;                                              // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	struct FName                                       BoneName;                                                 // 0x0084(0x0008) (Edit, EditConst)
	unsigned long                                      bFixed : 1;                                               // 0x008C(0x0004) (Edit)
	unsigned long                                      bNoCollision : 1;                                         // 0x008C(0x0004) (Edit)
	unsigned long                                      bEnableCollisionResponse : 1;                             // 0x008C(0x0004) (Edit)
	unsigned long                                      bBlockZeroExtent : 1;                                     // 0x008C(0x0004) (Edit)
	unsigned long                                      bBlockNonZeroExtent : 1;                                  // 0x008C(0x0004) (Edit)
	unsigned long                                      bEnableContinuousCollisionDetection : 1;                  // 0x008C(0x0004) (Edit)
	unsigned long                                      bAlwaysFullAnimWeight : 1;                                // 0x008C(0x0004) (Edit)
	unsigned long                                      bConsiderForBounds : 1;                                   // 0x008C(0x0004) (Edit)
	float                                              LocationDeltaLimit;                                       // 0x0090(0x0004) (Edit)
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0094(0x0004) (Edit)
	float                                              MassScale;                                                // 0x0098(0x0004) (Edit)
	TArray<struct FPointer>                            CollisionGeom;                                            // 0x009C(0x000C) (Const, Native)
	TArray<struct FVector>                             CollisionGeomScale3D;                                     // 0x00A8(0x000C) (Const, Native)
	TArray<struct FVector>                             PreCachedPhysScale;                                       // 0x00B4(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FKCachedConvexData>                  PreCachedPhysData;                                        // 0x00C0(0x000C) (Const, Native)
	int                                                PreCachedPhysDataVersion;                                 // 0x00CC(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_BodySetup");
		return ptr;
	}

};


// Class Engine.InstancedFoliageSettings
// 0x0068 (0x00A4 - 0x003C)
class UInstancedFoliageSettings : public UObject
{
public:
	float                                              Density;                                                  // 0x003C(0x0004) (Edit)
	float                                              Radius;                                                   // 0x0040(0x0004) (Edit)
	float                                              ScaleMinX;                                                // 0x0044(0x0004) (Edit)
	float                                              ScaleMinY;                                                // 0x0048(0x0004) (Edit)
	float                                              ScaleMinZ;                                                // 0x004C(0x0004) (Edit)
	float                                              ScaleMaxX;                                                // 0x0050(0x0004) (Edit)
	float                                              ScaleMaxY;                                                // 0x0054(0x0004) (Edit)
	float                                              ScaleMaxZ;                                                // 0x0058(0x0004) (Edit)
	unsigned long                                      LockScaleX : 1;                                           // 0x005C(0x0004) (Edit)
	unsigned long                                      LockScaleY : 1;                                           // 0x005C(0x0004) (Edit)
	unsigned long                                      LockScaleZ : 1;                                           // 0x005C(0x0004) (Edit)
	unsigned long                                      AlignToNormal : 1;                                        // 0x005C(0x0004) (Edit)
	unsigned long                                      RandomYaw : 1;                                            // 0x005C(0x0004) (Edit)
	unsigned long                                      UniformScale : 1;                                         // 0x005C(0x0004) (Edit)
	unsigned long                                      ReapplyDensity : 1;                                       // 0x005C(0x0004)
	unsigned long                                      ReapplyRadius : 1;                                        // 0x005C(0x0004)
	unsigned long                                      ReapplyAlignToNormal : 1;                                 // 0x005C(0x0004)
	unsigned long                                      ReapplyRandomYaw : 1;                                     // 0x005C(0x0004)
	unsigned long                                      ReapplyScaleX : 1;                                        // 0x005C(0x0004)
	unsigned long                                      ReapplyScaleY : 1;                                        // 0x005C(0x0004)
	unsigned long                                      ReapplyScaleZ : 1;                                        // 0x005C(0x0004)
	unsigned long                                      ReapplyRandomPitchAngle : 1;                              // 0x005C(0x0004)
	unsigned long                                      ReapplyGroundSlope : 1;                                   // 0x005C(0x0004)
	unsigned long                                      ReapplyHeight : 1;                                        // 0x005C(0x0004)
	unsigned long                                      ReapplyLandscapeLayer : 1;                                // 0x005C(0x0004)
	unsigned long                                      ReapplyZOffset : 1;                                       // 0x005C(0x0004)
	unsigned long                                      CastShadow : 1;                                           // 0x005C(0x0004) (Edit)
	unsigned long                                      bCastDynamicShadow : 1;                                   // 0x005C(0x0004) (Edit)
	unsigned long                                      bCastStaticShadow : 1;                                    // 0x005C(0x0004) (Edit)
	unsigned long                                      bSelfShadowOnly : 1;                                      // 0x005C(0x0004) (Edit)
	unsigned long                                      bNoModSelfShadow : 1;                                     // 0x005C(0x0004) (Edit)
	unsigned long                                      bAcceptsDynamicDominantLightShadows : 1;                  // 0x005C(0x0004) (Edit)
	unsigned long                                      bCastHiddenShadow : 1;                                    // 0x005C(0x0004) (Edit)
	unsigned long                                      bCastShadowAsTwoSided : 1;                                // 0x005C(0x0004) (Edit)
	unsigned long                                      bAcceptsLights : 1;                                       // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bAcceptsDynamicLights : 1;                                // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bUseOnePassLightingOnTranslucency : 1;                    // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bUsePrecomputedShadows : 1;                               // 0x005C(0x0004) (Edit, Const)
	unsigned long                                      bCollideActors : 1;                                       // 0x005C(0x0004) (Edit)
	unsigned long                                      bBlockActors : 1;                                         // 0x005C(0x0004) (Edit)
	unsigned long                                      bBlockNonZeroExtent : 1;                                  // 0x0060(0x0004) (Edit)
	unsigned long                                      bBlockZeroExtent : 1;                                     // 0x0060(0x0004) (Edit)
	unsigned long                                      IsSelected : 1;                                           // 0x0060(0x0004)
	unsigned long                                      ShowNothing : 1;                                          // 0x0060(0x0004)
	unsigned long                                      ShowPaintSettings : 1;                                    // 0x0060(0x0004)
	unsigned long                                      ShowInstanceSettings : 1;                                 // 0x0060(0x0004)
	float                                              AlignMaxAngle;                                            // 0x0064(0x0004) (Edit)
	float                                              RandomPitchAngle;                                         // 0x0068(0x0004) (Edit)
	float                                              GroundSlope;                                              // 0x006C(0x0004) (Edit)
	float                                              HeightMin;                                                // 0x0070(0x0004) (Edit)
	float                                              HeightMax;                                                // 0x0074(0x0004) (Edit)
	struct FName                                       LandscapeLayer;                                           // 0x0078(0x0008) (Edit)
	float                                              ZOffsetMin;                                               // 0x0080(0x0004) (Edit)
	float                                              ZOffsetMax;                                               // 0x0084(0x0004) (Edit)
	int                                                MaxInstancesPerCluster;                                   // 0x0088(0x0004) (Edit)
	float                                              MaxClusterRadius;                                         // 0x008C(0x0004) (Edit)
	float                                              ReapplyDensityAmount;                                     // 0x0090(0x0004)
	int                                                StartCullDistance;                                        // 0x0094(0x0004) (Edit)
	int                                                EndCullDistance;                                          // 0x0098(0x0004) (Edit)
	TEnumAsByte<EFoliageCullOption>                    CullOption;                                               // 0x009C(0x0001) (Edit)
	TEnumAsByte<EDetailMode>                           DetailMode;                                               // 0x009D(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x009E(0x0002) MISSED OFFSET
	int                                                DisplayOrder;                                             // 0x00A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InstancedFoliageSettings");
		return ptr;
	}

};


// Class Engine.FracturedStaticMesh
// 0x00D0 (0x0270 - 0x01A0)
class UFracturedStaticMesh : public UStaticMesh
{
public:
	class UStaticMesh*                                 SourceCoreMesh;                                           // 0x01A0(0x0004) (Edit, EditConst)
	float                                              CoreMeshScale;                                            // 0x01A4(0x0004) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x30];                                      // 0x01A8(0x0030) MISSED OFFSET
	unsigned long                                      bSliceUsingCoreCollision : 1;                             // 0x01D8(0x0004) (Edit)
	class UParticleSystem*                             FragmentDestroyEffect;                                    // 0x01DC(0x0004)
	TArray<class UParticleSystem*>                     FragmentDestroyEffects;                                   // 0x01E0(0x000C) (Edit, NeedCtorLink)
	float                                              FragmentDestroyEffectScale;                               // 0x01EC(0x0004) (Edit)
	float                                              FragmentHealthScale;                                      // 0x01F0(0x0004) (Edit)
	float                                              FragmentMinHealth;                                        // 0x01F4(0x0004) (Edit)
	float                                              FragmentMaxHealth;                                        // 0x01F8(0x0004) (Edit)
	unsigned long                                      bUniformFragmentHealth : 1;                               // 0x01FC(0x0004) (Edit)
	float                                              ChunkLinVel;                                              // 0x0200(0x0004) (Edit)
	float                                              ChunkAngVel;                                              // 0x0204(0x0004) (Edit)
	float                                              ChunkLinHorizontalScale;                                  // 0x0208(0x0004) (Edit)
	float                                              ExplosionVelScale;                                        // 0x020C(0x0004) (Edit)
	unsigned long                                      bCompositeChunksExplodeOnImpact : 1;                      // 0x0210(0x0004) (Edit)
	unsigned long                                      UnknownData01 : 31;                                       // 0x0210(0x0001)
	unsigned long                                      bFixIsolatedChunks : 1;                                   // 0x0214(0x0004) (Edit)
	unsigned long                                      UnknownData02 : 31;                                       // 0x0214(0x0001)
	unsigned long                                      bAlwaysBreakOffIsolatedIslands : 1;                       // 0x0218(0x0004) (Edit)
	unsigned long                                      UnknownData03 : 31;                                       // 0x0218(0x0001)
	unsigned long                                      bSpawnPhysicsChunks : 1;                                  // 0x021C(0x0004) (Edit)
	float                                              ChanceOfPhysicsChunk;                                     // 0x0220(0x0004) (Edit)
	float                                              ExplosionChanceOfPhysicsChunk;                            // 0x0224(0x0004) (Edit)
	float                                              NormalPhysicsChunkScaleMin;                               // 0x0228(0x0004) (Edit)
	float                                              NormalPhysicsChunkScaleMax;                               // 0x022C(0x0004) (Edit)
	float                                              ExplosionPhysicsChunkScaleMin;                            // 0x0230(0x0004) (Edit)
	float                                              ExplosionPhysicsChunkScaleMax;                            // 0x0234(0x0004) (Edit)
	float                                              MinConnectionSupportArea;                                 // 0x0238(0x0004) (Edit)
	class UMaterialInterface*                          DynamicOutsideMaterial;                                   // 0x023C(0x0004) (Edit)
	class UMaterialInterface*                          LoseChunkOutsideMaterial;                                 // 0x0240(0x0004) (Edit)
	int                                                OutsideMaterialIndex;                                     // 0x0244(0x0004) (Edit)
	unsigned char                                      UnknownData04[0x28];                                      // 0x0248(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedStaticMesh");
		return ptr;
	}

};


// Class Engine.ParticleSystem
// 0x0100 (0x013C - 0x003C)
class UParticleSystem : public UObject
{
public:
	TEnumAsByte<EParticleSystemUpdateMode>             SystemUpdateMode;                                         // 0x003C(0x0001) (Edit)
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x003D(0x0001) (Edit)
	TEnumAsByte<EParticleSystemOcclusionBoundsMethod>  OcclusionBoundsMethod;                                    // 0x003E(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x003F(0x0001) MISSED OFFSET
	float                                              UpdateTime_FPS;                                           // 0x0040(0x0004) (Edit)
	float                                              UpdateTime_Delta;                                         // 0x0044(0x0004)
	float                                              WarmupTime;                                               // 0x0048(0x0004) (Edit)
	float                                              WarmupTickRate;                                           // 0x004C(0x0004) (Edit)
	TArray<class UParticleEmitter*>                    Emitters;                                                 // 0x0050(0x000C) (ExportObject, NeedCtorLink, EditInline)
	class UParticleSystemComponent*                    PreviewComponent;                                         // 0x005C(0x0004) (ExportObject, Transient, Component, EditInline)
	struct FRotator                                    ThumbnailAngle;                                           // 0x0060(0x000C)
	float                                              ThumbnailDistance;                                        // 0x006C(0x0004)
	float                                              ThumbnailWarmup;                                          // 0x0070(0x0004) (Edit)
	unsigned long                                      bLit : 1;                                                 // 0x0074(0x0004) (Const, Deprecated)
	unsigned long                                      bOrientZAxisTowardCamera : 1;                             // 0x0074(0x0004) (Edit)
	unsigned long                                      bRegenerateLODDuplicate : 1;                              // 0x0074(0x0004)
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                         // 0x0074(0x0004) (Edit)
	unsigned long                                      bShouldResetPeakCounts : 1;                               // 0x0074(0x0004)
	unsigned long                                      bHasPhysics : 1;                                          // 0x0074(0x0004) (Transient)
	unsigned long                                      bHasApex : 1;                                             // 0x0074(0x0004) (Transient)
	unsigned long                                      bUseRealtimeThumbnail : 1;                                // 0x0074(0x0004) (Edit)
	unsigned long                                      ThumbnailImageOutOfDate : 1;                              // 0x0074(0x0004)
	unsigned long                                      bSkipSpawnCountCheck : 1;                                 // 0x0074(0x0004) (Edit)
	unsigned long                                      bUseDelayRange : 1;                                       // 0x0074(0x0004) (Edit)
	unsigned long                                      bLoadIfPhysXLevel0 : 1;                                   // 0x0074(0x0004) (Edit, Deprecated)
	unsigned long                                      bLoadIfPhysXLevel1 : 1;                                   // 0x0074(0x0004) (Edit, Deprecated)
	unsigned long                                      bLoadIfPhysXLevel2 : 1;                                   // 0x0074(0x0004) (Edit, Deprecated)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x0078(0x0004) (ExportObject)
	float                                              LODDistanceCheckTime;                                     // 0x007C(0x0004) (Edit)
	TArray<float>                                      LODDistances;                                             // 0x0080(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	int                                                EditorLODSetting;                                         // 0x008C(0x0004)
	TArray<struct FParticleSystemLOD>                  LODSettings;                                              // 0x0090(0x000C) (Edit, NeedCtorLink)
	struct FBox                                        FixedRelativeBoundingBox;                                 // 0x009C(0x001C) (Edit)
	float                                              SecondsBeforeInactive;                                    // 0x00B8(0x0004) (Edit)
	struct FString                                     FloorMesh;                                                // 0x00BC(0x000C) (NeedCtorLink)
	struct FVector                                     FloorPosition;                                            // 0x00C8(0x000C)
	struct FRotator                                    FloorRotation;                                            // 0x00D4(0x000C)
	float                                              FloorScale;                                               // 0x00E0(0x0004)
	struct FVector                                     FloorScale3D;                                             // 0x00E4(0x000C)
	struct FColor                                      BackgroundColor;                                          // 0x00F0(0x0004)
	class UTexture2D*                                  ThumbnailImage;                                           // 0x00F4(0x0004)
	float                                              Delay;                                                    // 0x00F8(0x0004) (Edit)
	float                                              DelayLow;                                                 // 0x00FC(0x0004) (Edit)
	struct FVector                                     MacroUVPosition;                                          // 0x0100(0x000C) (Edit)
	float                                              MacroUVRadius;                                            // 0x010C(0x0004) (Edit)
	struct FBox                                        CustomOcclusionBounds;                                    // 0x0110(0x001C) (Edit)
	TArray<struct FLODSoloTrack>                       SoloTracking;                                             // 0x012C(0x000C) (Transient, NeedCtorLink)
	class UParticleSystem*                             PhysxParticleSystemRef;                                   // 0x0138(0x0004) (Edit, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSystem");
		return ptr;
	}


	float GetMaxLifespan(float InComponentDelay);
	bool SetLODDistance(int LODLevelIndex, float InDistance);
	void SetCurrentLODMethod(TEnumAsByte<EParticleSystemLODMethod> InMethod);
	float GetLODDistance(int LODLevelIndex);
	int GetLODLevelCount();
	TEnumAsByte<EParticleSystemLODMethod> GetCurrentLODMethod();
};


// Class Engine.Stereo3D
// 0x0054 (0x0094 - 0x0040)
class UStereo3D : public USubsystem
{
public:
	unsigned long                                      bForceStereoOn : 1;                                       // 0x0040(0x0004) (Config, GlobalConfig)
	unsigned long                                      bStereoBuffer : 1;                                        // 0x0040(0x0004) (Const)
	unsigned long                                      bStereoActive : 1;                                        // 0x0040(0x0004) (Const)
	unsigned long                                      bOffAxisProjection : 1;                                   // 0x0040(0x0004) (Const)
	unsigned long                                      bOverrideFov : 1;                                         // 0x0040(0x0004) (Config, GlobalConfig)
	unsigned long                                      bVisibilityTestBothViews : 1;                             // 0x0040(0x0004) (Config, GlobalConfig)
	unsigned long                                      bOverrideRecenter : 1;                                    // 0x0040(0x0004) (Config, GlobalConfig)
	unsigned long                                      bOverride2D : 1;                                          // 0x0040(0x0004) (Config, GlobalConfig)
	int                                                CurDisplay;                                               // 0x0044(0x0004) (Const)
	float                                              EyeDistance;                                              // 0x0048(0x0004) (Config, GlobalConfig)
	float                                              EyeOffsets[0x2];                                          // 0x004C(0x0004) (Const)
	float                                              ProjCenterOffsets[0x2];                                   // 0x0054(0x0004) (Const)
	float                                              FrustumOffset;                                            // 0x005C(0x0004) (Config, GlobalConfig)
	float                                              FovX;                                                     // 0x0060(0x0004) (Config, GlobalConfig)
	float                                              FovY;                                                     // 0x0064(0x0004) (Config, GlobalConfig)
	float                                              Aspect;                                                   // 0x0068(0x0004) (Config, GlobalConfig)
	float                                              HudOffset;                                                // 0x006C(0x0004) (Config, GlobalConfig)
	float                                              CrosshairOffset;                                          // 0x0070(0x0004) (Config, GlobalConfig)
	float                                              CrosshairOffsetScale;                                     // 0x0074(0x0004) (Config, GlobalConfig)
	float                                              HudDepth;                                                 // 0x0078(0x0004) (Config, GlobalConfig)
	float                                              CanvasCenterOffset;                                       // 0x007C(0x0004) (Const)
	float                                              MovieDepth;                                               // 0x0080(0x0004) (Config, GlobalConfig)
	float                                              MovieWidth;                                               // 0x0084(0x0004) (Config, GlobalConfig)
	struct FString                                     MonitorName;                                              // 0x0088(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Stereo3D");
		return ptr;
	}


	void SetMovieSize(float Distance, float Width);
	float GetHudScale();
	bool STATIC_IsStereoActive();
	class UStereo3D* STATIC_GetStereoGlobals();
};


// Class Engine.Oculus
// 0x009C (0x0130 - 0x0094)
class UOculus : public UStereo3D
{
public:
	struct FPointer                                    VfTable_FCallbackEventDevice;                             // 0x0094(0x0004) (Const, Native, NoExport)
	class UOculusDebugHud*                             HUD;                                                      // 0x0098(0x0004)
	struct FPointer                                    ViewportClient;                                           // 0x009C(0x0004) (Const, Native, Transient)
	struct FPointer                                    Viewport;                                                 // 0x00A0(0x0004) (Const, Native, Transient)
	unsigned long                                      bIsInitialized : 1;                                       // 0x00A4(0x0004) (Const)
	unsigned long                                      bIsHMDConnected : 1;                                      // 0x00A4(0x0004) (Const)
	unsigned long                                      bUserDesiresHMD : 1;                                      // 0x00A4(0x0004) (Const)
	unsigned long                                      bAlwaysAllowHMD : 1;                                      // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bEnableDistortion : 1;                                    // 0x00A4(0x0004) (Const)
	unsigned long                                      bEnableChromaAbCorrection : 1;                            // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bMagEnabled : 1;                                          // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bTiltCorrectionEnabled : 1;                               // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bEnableDevSettings : 1;                                   // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bEnableHud : 1;                                           // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bDisableControllerPitch : 1;                              // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bDisableMomentum : 1;                                     // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bHideGun : 1;                                             // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bDisableDeathAnims : 1;                                   // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bDisableWalkBob : 1;                                      // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bUpdateOnRT : 1;                                          // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bUseDotCrosshair : 1;                                     // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bOverrideAddEyeHeight : 1;                                // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bOverrideDistortion : 1;                                  // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bUseGameFOV : 1;                                          // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bUseQuatRotation : 1;                                     // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      PvpMode : 1;                                              // 0x00A4(0x0004)
	unsigned long                                      bUpdateGame : 1;                                          // 0x00A4(0x0004)
	unsigned long                                      bCurrentUseDotCrosshair : 1;                              // 0x00A4(0x0004)
	unsigned long                                      bDebugDisableHmdRotation : 1;                             // 0x00A4(0x0004) (Config, GlobalConfig)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A8(0x0008) MISSED OFFSET
	struct FVector4                                    HmdDistortion;                                            // 0x00B0(0x0010) (Const)
	struct FVector4                                    ChromaAbCorrection;                                       // 0x00C0(0x0010) (Const)
	float                                              HmdDistortionScale;                                       // 0x00D0(0x0004) (Const)
	struct FVector2D                                   HmdDistortionOffset;                                      // 0x00D4(0x0008) (Const)
	struct FVector2D                                   HmdUIViewport[0x2];                                       // 0x00DC(0x0008) (Const)
	struct FPointer                                    InfoHudNotificator;                                       // 0x00EC(0x0004)
	TEnumAsByte<EMouseAimMode>                         MouseAimMode;                                             // 0x00F0(0x0001) (Config, GlobalConfig)
	unsigned char                                      CrosshairAlpha;                                           // 0x00F1(0x0001) (Config, GlobalConfig)
	unsigned char                                      UnknownData01[0x2];                                       // 0x00F2(0x0002) MISSED OFFSET
	float                                              MouseAimLimit;                                            // 0x00F4(0x0004) (Config, GlobalConfig)
	float                                              MouseAimPitchLimit;                                       // 0x00F8(0x0004) (Config, GlobalConfig)
	float                                              AccelGain;                                                // 0x00FC(0x0004) (Config, GlobalConfig)
	float                                              MotionPrediction;                                         // 0x0100(0x0004) (Config, GlobalConfig)
	struct FVector                                     EyePosInHead;                                             // 0x0104(0x000C) (Config, GlobalConfig)
	float                                              CrosshairMinDistance;                                     // 0x0110(0x0004) (Config, GlobalConfig)
	float                                              CrosshairSize;                                            // 0x0114(0x0004) (Config, GlobalConfig)
	float                                              AddEyeHeight;                                             // 0x0118(0x0004) (Config, GlobalConfig)
	struct FVector                                     UserDistortion;                                           // 0x011C(0x000C) (Config, GlobalConfig)
	float                                              UserDistortion4;                                          // 0x0128(0x0004) (Config, GlobalConfig)
	float                                              UserDistortionScale;                                      // 0x012C(0x0004) (Config, GlobalConfig)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Oculus");
		return ptr;
	}


	void OnOculusStateChange(bool bIsEnabledNow);
	bool STATIC_DisableDeathAnimations(class AController* C);
	float STATIC_GetScreenPercentage();
	struct FString STATIC_FormatFloat(float V, const struct FString& fmtString);
	void OnUpdateInfoHud();
	void ClearHmdInfoHud();
	void ToggleHmdInfoHud();
	void EnsureDebugHudCreated();
	void ActivateInfoHudUpdater(bool Activate);
	void PlayDamageEffect(class APlayerController* PC);
	bool IsTiltCorrectionEnabled();
	void SetTiltCorrectionEnabled(bool Enable);
	bool IsMagCalibrated();
	bool IsMagEnabled();
	void SetMagEnabled(bool Enable);
	struct FQuat GetBaseOrientation();
	struct FQuat GetAdjustedOrientation();
	struct FQuat GetCurrentOrientation();
	void ResetHmdYaw(class APlayerController* PC);
	void ApplyHmdRotation(class APlayerController* PC, struct FRotator* ViewRotation);
	void UpdatePlayerViewPoint(class APlayerController* PC, struct FVector* ViewLocation, struct FRotator* ViewRotation);
	void SetAddEyeHeight(float eh);
	void TogglePVP();
	void SetCrosshairAlpha(float A);
	void SetCrosshairMinDistance(float D);
	void DotCrosshairSize(float Size);
	void ToggleDotCrosshair();
	void SetMouseAimLimit(float FOV, float yfov);
	void SetAimMode(TEnumAsByte<EMouseAimMode> Mode);
	void OcMotionUpdate(bool rt, bool gu);
	void ToggleWalkBob();
	void ToggleDeathAnims();
	void TogglePitch();
	void ToggleMomentum();
	void ToggleGun();
	bool STATIC_IsMouseAimEnabled();
	bool STATIC_DisableMomentum(class AController* C);
	bool STATIC_IsPlayer(class AController* C);
	void STATIC_SetAlwaysAllowHMD(bool bShouldAllow, bool bSaveToIni);
	bool STATIC_IsHMDActivationRequired();
	bool STATIC_IsHMDActivationAllowed(bool bNeedsDefaultValue);
	bool STATIC_IsHMDDetected();
	class UOculus* STATIC_GetGlobals();
	void OnDeviceStatusChange(TEnumAsByte<EOculusDevice> Dev, TEnumAsByte<EOculusDevStatus> st);
};


// Class Engine.Texture
// 0x00B4 (0x00F0 - 0x003C)
class UTexture : public USurface
{
public:
	unsigned long                                      SRGB : 1;                                                 // 0x003C(0x0004) (Edit)
	unsigned long                                      RGBE : 1;                                                 // 0x003C(0x0004)
	unsigned long                                      bIsSourceArtUncompressed : 1;                             // 0x003C(0x0004)
	unsigned long                                      CompressionNoAlpha : 1;                                   // 0x003C(0x0004) (Edit)
	unsigned long                                      CompressionNone : 1;                                      // 0x003C(0x0004)
	unsigned long                                      CompressionNoMipmaps : 1;                                 // 0x003C(0x0004) (Deprecated)
	unsigned long                                      CompressionFullDynamicRange : 1;                          // 0x003C(0x0004) (Edit)
	unsigned long                                      DeferCompression : 1;                                     // 0x003C(0x0004) (Edit)
	unsigned long                                      NeverStream : 1;                                          // 0x003C(0x0004)
	unsigned long                                      bDitherMipMapAlpha : 1;                                   // 0x003C(0x0004) (Edit)
	unsigned long                                      bPreserveBorderR : 1;                                     // 0x003C(0x0004) (Edit)
	unsigned long                                      bPreserveBorderG : 1;                                     // 0x003C(0x0004) (Edit)
	unsigned long                                      bPreserveBorderB : 1;                                     // 0x003C(0x0004) (Edit)
	unsigned long                                      bPreserveBorderA : 1;                                     // 0x003C(0x0004) (Edit)
	unsigned long                                      bNoTiling : 1;                                            // 0x003C(0x0004) (Const)
	unsigned long                                      bForcePVRTC4 : 1;                                         // 0x003C(0x0004) (Edit)
	unsigned long                                      bAsyncResourceReleaseHasBeenStarted : 1;                  // 0x003C(0x0004) (Const, Transient)
	unsigned long                                      bUseCinematicMipLevels : 1;                               // 0x003C(0x0004) (Const, Transient)
	float                                              UnpackMin[0x4];                                           // 0x0040(0x0004) (Edit)
	float                                              UnpackMax[0x4];                                           // 0x0050(0x0004) (Edit)
	struct FUntypedBulkData_Mirror                     SourceArt;                                                // 0x0060(0x0034) (Const, Native)
	TEnumAsByte<ETextureCompressionSettings>           CompressionSettings;                                      // 0x0094(0x0001) (Edit)
	TEnumAsByte<ETextureFilter>                        Filter;                                                   // 0x0095(0x0001) (Edit)
	TEnumAsByte<ETextureGroup>                         LODGroup;                                                 // 0x0096(0x0001) (Edit)
	TEnumAsByte<ETextureGroup>                         CachedLODGroup;                                           // 0x0097(0x0001) (Transient)
	TEnumAsByte<ETextureMipGenSettings>                MipGenSettings;                                           // 0x0098(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	int                                                LODBias;                                                  // 0x009C(0x0004) (Edit)
	int                                                CachedCombinedLODBias;                                    // 0x00A0(0x0004) (Transient)
	int                                                NumCinematicMipLevels;                                    // 0x00A4(0x0004) (Edit)
	struct FString                                     SourceFilePath;                                           // 0x00A8(0x000C) (Edit, NeedCtorLink)
	struct FString                                     SourceFileTimestamp;                                      // 0x00B4(0x000C) (Edit, EditConst, NeedCtorLink)
	struct FPointer                                    Resource;                                                 // 0x00C0(0x0004) (Const, Native)
	struct FGuid                                       LightingGuid;                                             // 0x00C4(0x0010) (Const)
	float                                              AdjustBrightness;                                         // 0x00D4(0x0004) (Edit)
	float                                              AdjustBrightnessCurve;                                    // 0x00D8(0x0004) (Edit)
	float                                              AdjustVibrance;                                           // 0x00DC(0x0004) (Edit)
	float                                              AdjustSaturation;                                         // 0x00E0(0x0004) (Edit)
	float                                              AdjustRGBCurve;                                           // 0x00E4(0x0004) (Edit)
	float                                              AdjustHue;                                                // 0x00E8(0x0004) (Edit)
	int                                                InternalFormatLODBias;                                    // 0x00EC(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture");
		return ptr;
	}

};


// Class Engine.Texture2D
// 0x00D8 (0x01C8 - 0x00F0)
class UTexture2D : public UTexture
{
public:
	struct FIndirectArray_Mirror                       Mips;                                                     // 0x00F0(0x000C) (Const, Native)
	struct FIndirectArray_Mirror                       CachedPVRTCMips;                                          // 0x00FC(0x000C) (Const, Native)
	struct FIndirectArray_Mirror                       CachedATITCMips;                                          // 0x0108(0x000C) (Const, Native)
	struct FIndirectArray_Mirror                       CachedETCMips;                                            // 0x0114(0x000C) (Const, Native)
	int                                                CachedFlashMipsMaxResolution;                             // 0x0120(0x0004) (Const, Native)
	struct FUntypedBulkData_Mirror                     CachedFlashMips;                                          // 0x0124(0x0034) (Const, Native)
	int                                                SizeX;                                                    // 0x0158(0x0004) (Const)
	int                                                SizeY;                                                    // 0x015C(0x0004) (Const)
	int                                                OriginalSizeX;                                            // 0x0160(0x0004) (Const)
	int                                                OriginalSizeY;                                            // 0x0164(0x0004) (Const)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x0168(0x0001) (Const)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x0169(0x0001) (Edit)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x016A(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x016B(0x0001) MISSED OFFSET
	unsigned long                                      bIsEditorOnly : 1;                                        // 0x016C(0x0004) (Edit, Const)
	unsigned long                                      bIsStreamable : 1;                                        // 0x016C(0x0004) (Const, Transient)
	unsigned long                                      bHasCancelationPending : 1;                               // 0x016C(0x0004) (Const, Transient)
	unsigned long                                      bHasBeenLoadedFromPersistentArchive : 1;                  // 0x016C(0x0004) (Const, Transient)
	unsigned long                                      bForceMiplevelsToBeResident : 1;                          // 0x016C(0x0004) (Transient)
	unsigned long                                      bGlobalForceMipLevelsToBeResident : 1;                    // 0x016C(0x0004) (Edit, Const)
	unsigned long                                      bIsCompositingSource : 1;                                 // 0x016C(0x0004) (Edit, Const)
	unsigned long                                      bHasBeenPaintedInEditor : 1;                              // 0x016C(0x0004)
	float                                              ForceMipLevelsToBeResidentTimestamp;                      // 0x0170(0x0004) (Transient)
	struct FName                                       TextureFileCacheName;                                     // 0x0174(0x0008)
	struct FGuid                                       TextureFileCacheGuid;                                     // 0x017C(0x0010) (Const, Native)
	int                                                RequestedMips;                                            // 0x018C(0x0004) (Const, Transient)
	int                                                ResidentMips;                                             // 0x0190(0x0004) (Const, Transient)
	int                                                MipsToRemoveOnCompress;                                   // 0x0194(0x0004) (Edit)
	struct FThreadSafeCounter                          PendingMipChangeRequestStatus;                            // 0x0198(0x0004) (Const, Native, Transient)
	TArray<unsigned char>                              SystemMemoryData;                                         // 0x019C(0x000C) (NeedCtorLink)
	struct FTextureLinkedListMirror                    StreamableTexturesLink;                                   // 0x01A8(0x000C) (Const, Native, DuplicateTransient, NoImport)
	int                                                StreamingIndex;                                           // 0x01B4(0x0004) (Const, Transient, DuplicateTransient)
	int                                                MipTailBaseIdx;                                           // 0x01B8(0x0004) (Const)
	struct FPointer                                    ResourceMem;                                              // 0x01BC(0x0004) (Const, Native, Transient)
	int                                                FirstResourceMemMip;                                      // 0x01C0(0x0004) (Const)
	float                                              Timer;                                                    // 0x01C4(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture2D");
		return ptr;
	}


	class UTexture2D* STATIC_Create(int InSizeX, int InSizeY, TEnumAsByte<EPixelFormat> InFormat);
	void SetForceMipLevelsToBeResident(float Seconds, int CinematicTextureGroups);
};


// Class Engine.LightMapTexture2D
// 0x0004 (0x01CC - 0x01C8)
class ULightMapTexture2D : public UTexture2D
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x01C8(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightMapTexture2D");
		return ptr;
	}

};


// Class Engine.ShadowMapTexture2D
// 0x0004 (0x01CC - 0x01C8)
class UShadowMapTexture2D : public UTexture2D
{
public:
	int                                                ShadowmapFlags;                                           // 0x01C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShadowMapTexture2D");
		return ptr;
	}

};


// Class Engine.TranslationContext
// 0x000C (0x0048 - 0x003C)
class UTranslationContext : public UObject
{
public:
	TArray<class UTranslatorTag*>                      TranslatorTags;                                           // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TranslationContext");
		return ptr;
	}


	bool RegisterTranslatorTag(class UTranslatorTag* InTagHandler);
};


// Class Engine.TranslatorTag
// 0x0008 (0x0044 - 0x003C)
class UTranslatorTag : public UObject
{
public:
	struct FName                                       Tag;                                                      // 0x003C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TranslatorTag");
		return ptr;
	}


	struct FString Translate(const struct FString& InArgument);
};


// Class Engine.StringsTag
// 0x0000 (0x0044 - 0x0044)
class UStringsTag : public UTranslatorTag
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StringsTag");
		return ptr;
	}


	struct FString Translate(const struct FString& InArgument);
};


// Class Engine.UIRoot
// 0x000C (0x0048 - 0x003C)
class UUIRoot : public UObject
{
public:
	TArray<struct FString>                             BadCapsLocContexts;                                       // 0x003C(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIRoot");
		return ptr;
	}


	struct FString STATIC_SafeCaps(const struct FString& StringToCap);
	TScriptInterface<class UOnlinePlayerInterfaceEx> STATIC_GetOnlinePlayerInterfaceEx();
	TScriptInterface<class UOnlinePlayerInterface> STATIC_GetOnlinePlayerInterface();
	TScriptInterface<class UOnlineGameInterface> STATIC_GetOnlineGameInterface();
	class UUIDataStore* STATIC_StaticResolveDataStore(const struct FName& DataStoreTag, class ULocalPlayer* InPlayerOwner);
	class UGameUISceneClient* STATIC_GetSceneClient();
	class UUIInteraction* STATIC_GetCurrentUIController();
	TEnumAsByte<EInputPlatformType> STATIC_GetInputPlatformType(class ULocalPlayer* OwningPlayer);
};


// Class Engine.Interaction
// 0x0030 (0x0078 - 0x0048)
class UInteraction : public UUIRoot
{
public:
	struct FScriptDelegate                             __OnReceivedNativeInputKey__Delegate;                     // 0x0048(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReceivedNativeInputAxis__Delegate;                    // 0x0054(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnReceivedNativeInputChar__Delegate;                    // 0x0060(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnInitialize__Delegate;                                 // 0x006C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interaction");
		return ptr;
	}


	void NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void NotifyGameSessionEnded();
	void Initialized();
	void OnInitialize();
	void Init();
	void PostRender(class UCanvas* Canvas);
	void Tick(float DeltaTime);
	bool OnReceivedNativeInputChar(int ControllerId, const struct FString& Unicode);
	bool OnReceivedNativeInputAxis(int ControllerId, const struct FName& Key, float Delta, float DeltaTime, bool bGamepad);
	bool OnReceivedNativeInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad);
};


// Class Engine.UIInteraction
// 0x00F0 (0x0168 - 0x0078)
class UUIInteraction : public UInteraction
{
public:
	struct FPointer                                    VfTable_FExec;                                            // 0x0078(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_FGlobalDataStoreClientManager;                    // 0x007C(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_FCallbackEventDevice;                             // 0x0080(0x0004) (Const, Native, NoExport)
	class UUIManager*                                  UIManager;                                                // 0x0084(0x0004)
	class UClass*                                      UIManagerClass;                                           // 0x0088(0x0004)
	class UClass*                                      SceneClientClass;                                         // 0x008C(0x0004)
	class UGameUISceneClient*                          SceneClient;                                              // 0x0090(0x0004) (Const, Transient)
	TArray<struct FName>                               SupportedDoubleClickKeys;                                 // 0x0094(0x000C) (Transient, NeedCtorLink)
	class UDataStoreClient*                            DataStoreManager;                                         // 0x00A0(0x0004) (Const, Transient)
	unsigned long                                      bProcessInput : 1;                                        // 0x00A4(0x0004) (Const, Transient)
	float                                              UIJoystickDeadZone;                                       // 0x00A8(0x0004) (Const, Config)
	float                                              UIAxisMultiplier;                                         // 0x00AC(0x0004) (Const, Config)
	float                                              AxisRepeatDelay;                                          // 0x00B0(0x0004) (Const, Config)
	float                                              MouseButtonRepeatDelay;                                   // 0x00B4(0x0004) (Const, Config)
	float                                              DoubleClickTriggerSeconds;                                // 0x00B8(0x0004) (Const, Config)
	int                                                DoubleClickPixelTolerance;                                // 0x00BC(0x0004) (Const, Config)
	struct FUIKeyRepeatData                            MouseButtonRepeatInfo;                                    // 0x00C0(0x0010) (Const, Transient)
	TArray<struct FUIAxisEmulationDefinition>          ConfiguredAxisEmulationDefinitions;                       // 0x00D0(0x000C) (Const, Config, NeedCtorLink)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x00DC(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIInteraction.AxisEmulationDefinitions
	struct FUIAxisEmulationData                        AxisInputEmulation[0x4];                                  // 0x0118(0x0014) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIInteraction");
		return ptr;
	}


	void NotifyGameSessionEnded();
	TEnumAsByte<ENATType> STATIC_GetNATType();
	int STATIC_GetConnectedGamepadCount(TArray<unsigned long> ControllerConnectionStatusOverrides);
	bool STATIC_IsGamepadConnected(int ControllerId);
	int STATIC_GetNumGuestsLoggedIn();
	int STATIC_GetLoggedInPlayerCount(bool bRequireOnlineLogin);
	bool STATIC_IsLoggedIn(int ControllerId, bool bRequireOnlineLogin);
	bool STATIC_HasLinkConnection();
	TEnumAsByte<ELoginStatus> GetLowestLoginStatusOfControllers();
	TEnumAsByte<ELoginStatus> STATIC_GetLoginStatus(int ControllerId);
	void NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	class ULocalPlayer* STATIC_GetLocalPlayer(int PlayerIndex);
	class UDataStoreClient* STATIC_GetDataStoreClient();
	int STATIC_GetPlayerControllerId(int PlayerIndex);
	int STATIC_GetPlayerIndex(int ControllerId);
	int STATIC_GetPlayerCount();
};


// Class Engine.UIManager
// 0x000C (0x0048 - 0x003C)
class UUIManager : public UObject
{
public:
	struct FScriptDelegate                             __OnMessageDialogClose__Delegate;                         // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIManager");
		return ptr;
	}


	int ShowErrorDialog(const struct FString& ErrorCode, const struct FString& Title, const struct FString& Text, bool bShowErrorCode, int Priority, const struct FScriptDelegate& OnCloseCallback);
	int ShowMessageDialog(const struct FString& Title, const struct FString& Text, const struct FString& Buttons, int Priority, const struct FScriptDelegate& OnCloseCallback);
	void CloseMessageDialogs(int StartPriority, int MaxPriority);
	bool CloseMessageDialog(int DialogId);
	int GetNumMessageDialogsOpen(int StartPriority, int MaxPriority);
	void OnMessageDialogClose(int DialogId, int SelectionIdx);
	int FindLocalPlayerIndex(class UPlayer* P);
	void NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void PauseGame(bool bDesiredPauseState, int PlayerIndex);
	bool CanUnpauseInternalUI();
	class UUIManager* STATIC_GetUIManager();
};


// Class Engine.WaveFormBase
// 0x0004 (0x0040 - 0x003C)
class UWaveFormBase : public UObject
{
public:
	class UForceFeedbackWaveform*                      TheWaveForm;                                              // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WaveFormBase");
		return ptr;
	}

};


// Class Engine.World
// 0x02A4 (0x02E0 - 0x003C)
class UWorld : public UObject
{
public:
	unsigned char                                      UnknownData00[0x2A4];                                     // 0x003C(0x02A4) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.World");
		return ptr;
	}

};


// Class Engine.EnvironmentVolume
// 0x000C (0x020C - 0x0200)
class AEnvironmentVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;                   // 0x0200(0x0004) (Const, Native, NoExport)
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x0204(0x0004) (Const, Native, NoExport)
	unsigned long                                      bSplitNavMesh : 1;                                        // 0x0208(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EnvironmentVolume");
		return ptr;
	}


	void SetSplitNavMesh(bool bNewValue);
};


// Class Engine.TestSplittingVolume
// 0x0004 (0x0204 - 0x0200)
class ATestSplittingVolume : public AVolume
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x0200(0x0004) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TestSplittingVolume");
		return ptr;
	}

};


// Class Engine.AIController
// 0x0018 (0x0370 - 0x0358)
class AAIController : public AController
{
public:
	unsigned long                                      bAdjustFromWalls : 1;                                     // 0x0358(0x0004)
	unsigned long                                      bReverseScriptedRoute : 1;                                // 0x0358(0x0004)
	float                                              Skill;                                                    // 0x035C(0x0004)
	class AActor*                                      ScriptedMoveTarget;                                       // 0x0360(0x0004)
	class ARoute*                                      ScriptedRoute;                                            // 0x0364(0x0004)
	int                                                ScriptedRouteIndex;                                       // 0x0368(0x0004)
	class AActor*                                      ScriptedFocus;                                            // 0x036C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AIController");
		return ptr;
	}


	bool CanFireWeapon(class AWeapon* Wpn, unsigned char FireModeNum);
	void NotifyWeaponFinishedFiring(class AWeapon* W, unsigned char FireMode);
	void NotifyWeaponFired(class AWeapon* W, unsigned char FireMode);
	void OnAIMoveToActor(class USeqAct_AIMoveToActor* Action);
	void GetPlayerViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	void SetTeam(int inTeamIdx);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void Reset();
	void PreBeginPlay();
};


// Class Engine.CrowdAgentBase
// 0x0004 (0x01D8 - 0x01D4)
class ACrowdAgentBase : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavigationHandle;                      // 0x01D4(0x0004) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CrowdAgentBase");
		return ptr;
	}


	void NotifyPathChanged();
};


// Class Engine.CrowdPopulationManagerBase
// 0x0000 (0x01D4 - 0x01D4)
class ACrowdPopulationManagerBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CrowdPopulationManagerBase");
		return ptr;
	}

};


// Class Engine.PathTargetPoint
// 0x0000 (0x01D8 - 0x01D8)
class APathTargetPoint : public AKeypoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathTargetPoint");
		return ptr;
	}


	bool ShouldBeHiddenBySHOW_NavigationNodes();
};


// Class Engine.NavMeshObstacle
// 0x0008 (0x01DC - 0x01D4)
class ANavMeshObstacle : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;                   // 0x01D4(0x0004) (Const, Native, NoExport)
	unsigned long                                      bEnabled : 1;                                             // 0x01D8(0x0004) (Edit)
	unsigned long                                      bPreserveInternalGeo : 1;                                 // 0x01D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshObstacle");
		return ptr;
	}


	void ApplyCheckpointRecord(struct ANavMeshObstacle_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct ANavMeshObstacle_FCheckpointRecord* Record);
	void SetEnabled(bool bInEnabled);
	void OnToggle(class USeqAct_Toggle* Action);
	void PostBeginPlay();
	void UnRegisterObstacle();
	void RegisterObstacle();
	bool GetObstacleBoudingShape(TArray<struct FVector>* Shape);
};


// Class Engine.PylonSeed
// 0x0004 (0x01D8 - 0x01D4)
class APylonSeed : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObject;                     // 0x01D4(0x0004) (Const, Native, NoExport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PylonSeed");
		return ptr;
	}

};


// Class Engine.CoverGroupRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class UCoverGroupRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverGroupRenderingComponent");
		return ptr;
	}

};


// Class Engine.MeshComponent
// 0x000C (0x01E4 - 0x01D8)
class UMeshComponent : public UPrimitiveComponent
{
public:
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x01D8(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshComponent");
		return ptr;
	}


	class UMaterialInstanceTimeVarying* CreateAndSetMaterialInstanceTimeVarying(int ElementIndex);
	class UMaterialInstanceConstant* CreateAndSetMaterialInstanceConstant(int ElementIndex);
	void PrestreamTextures(float Seconds, bool bPrioritizeCharacterTextures, int CinematicTextureGroups);
	int GetNumElements();
	void SetMaterial(int ElementIndex, class UMaterialInterface* Material);
	class UMaterialInterface* GetMaterial(int ElementIndex);
};


// Class Engine.StaticMeshComponent
// 0x0070 (0x0254 - 0x01E4)
class UStaticMeshComponent : public UMeshComponent
{
public:
	int                                                ForcedLodModel;                                           // 0x01E4(0x0004) (Edit)
	int                                                PreviousLODLevel;                                         // 0x01E8(0x0004)
	class UStaticMesh*                                 StaticMesh;                                               // 0x01EC(0x0004) (Edit, Const)
	struct FColor                                      WireframeColor;                                           // 0x01F0(0x0004) (Edit)
	unsigned long                                      bIgnoreInstanceForTextureStreaming : 1;                   // 0x01F4(0x0004) (Edit)
	unsigned long                                      bOverrideLightMapResolution : 1;                          // 0x01F4(0x0004) (Const, Deprecated)
	unsigned long                                      bOverrideLightMapRes : 1;                                 // 0x01F4(0x0004) (Edit, Const)
	int                                                OverriddenLightMapResolution;                             // 0x01F8(0x0004) (Const, Deprecated)
	int                                                OverriddenLightMapRes;                                    // 0x01FC(0x0004) (Edit, Const)
	float                                              OverriddenLODMaxRange;                                    // 0x0200(0x0004) (Edit)
	float                                              StreamingDistanceMultiplier;                              // 0x0204(0x0004) (Edit)
	int                                                SubDivisionStepSize;                                      // 0x0208(0x0004) (Const)
	unsigned long                                      bUseSubDivisions : 1;                                     // 0x020C(0x0004) (Const)
	unsigned long                                      bForceStaticDecals : 1;                                   // 0x020C(0x0004) (Const, Transient)
	unsigned long                                      bCanHighlightSelectedSections : 1;                        // 0x020C(0x0004) (Transient)
	unsigned long                                      bUseSimpleLightmapModifications : 1;                      // 0x020C(0x0004) (Edit)
	class UTexture*                                    SimpleLightmapModificationTexture;                        // 0x0210(0x0004) (Edit)
	TEnumAsByte<ELightmapModificationFunction>         SimpleLightmapModificationFunction;                       // 0x0214(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0215(0x0003) MISSED OFFSET
	unsigned long                                      bNeverBecomeDynamic : 1;                                  // 0x0218(0x0004) (Edit)
	TArray<struct FGuid>                               IrrelevantLights;                                         // 0x021C(0x000C) (Const, NeedCtorLink)
	TArray<struct FStaticMeshComponentLODInfo>         LODData;                                                  // 0x0228(0x000C) (Const, Native, SerializeText, RepNotify, Interp, NonTransactional, EditorOnly, NotForConsole, RepRetry, PrivateWrite, ProtectedWrite, ArchetypeProperty, EditHide, EditTextBox, CrossLevelPassive, CrossLevelActive)
	int                                                VertexPositionVersionNumber;                              // 0x0234(0x0004) (Const)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x0238(0x001C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshComponent");
		return ptr;
	}


	bool CanBecomeDynamic();
	void SetForceStaticDecals(bool bInForceStaticDecals);
	void DisableRBCollisionWithSMC(class UPrimitiveComponent* OtherSMC, bool bDisabled);
	bool SetStaticMesh(class UStaticMesh* NewMesh, bool bForce);
};


// Class Engine.CoverMeshComponent
// 0x0028 (0x027C - 0x0254)
class UCoverMeshComponent : public UStaticMeshComponent
{
public:
	TArray<struct FCoverMeshes>                        Meshes;                                                   // 0x0254(0x000C) (NeedCtorLink)
	struct FVector                                     LocationOffset;                                           // 0x0260(0x000C)
	class UStaticMesh*                                 AutoAdjustOn;                                             // 0x026C(0x0004)
	class UStaticMesh*                                 AutoAdjustOff;                                            // 0x0270(0x0004)
	class UStaticMesh*                                 Disabled;                                                 // 0x0274(0x0004)
	unsigned long                                      bShowWhenNotSelected : 1;                                 // 0x0278(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverMeshComponent");
		return ptr;
	}

};


// Class Engine.NavMeshRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class UNavMeshRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshRenderingComponent");
		return ptr;
	}

};


// Class Engine.PathRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class UPathRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathRenderingComponent");
		return ptr;
	}

};


// Class Engine.RouteRenderingComponent
// 0x0000 (0x01D8 - 0x01D8)
class URouteRenderingComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RouteRenderingComponent");
		return ptr;
	}

};


// Class Engine.AICommandBase
// 0x0000 (0x003C - 0x003C)
class UAICommandBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AICommandBase");
		return ptr;
	}


	int STATIC_GetUtility(class AAIController* InAI);
};


// Class Engine.AutoNavMeshPathObstacleUnregister
// 0x0008 (0x0044 - 0x003C)
class UAutoNavMeshPathObstacleUnregister : public UObject
{
public:
	TScriptInterface<class UInterface_NavMeshPathObstacle> PathObstacleRef;                                          // 0x003C(0x0008) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AutoNavMeshPathObstacleUnregister");
		return ptr;
	}

};


// Class Engine.Interface_NavMeshPathObject
// 0x0000 (0x003C - 0x003C)
class UInterface_NavMeshPathObject : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_NavMeshPathObject");
		return ptr;
	}

};


// Class Engine.Interface_NavMeshPathSwitch
// 0x0000 (0x003C - 0x003C)
class UInterface_NavMeshPathSwitch : public UInterface_NavMeshPathObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_NavMeshPathSwitch");
		return ptr;
	}


	bool AIActivateSwitch(class AAIController* AI);
};


// Class Engine.Interface_NavMeshPathObstacle
// 0x0000 (0x003C - 0x003C)
class UInterface_NavMeshPathObstacle : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_NavMeshPathObstacle");
		return ptr;
	}

};


// Class Engine.Interface_PylonGeometryProvider
// 0x0000 (0x003C - 0x003C)
class UInterface_PylonGeometryProvider : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_PylonGeometryProvider");
		return ptr;
	}

};


// Class Engine.Interface_RVO
// 0x0000 (0x003C - 0x003C)
class UInterface_RVO : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interface_RVO");
		return ptr;
	}

};


// Class Engine.NavigationHandle
// 0x011C (0x0158 - 0x003C)
class UNavigationHandle : public UObject
{
public:
	class APylon*                                      AnchorPylon;                                              // 0x003C(0x0004)
	struct FPointer                                    AnchorPoly;                                               // 0x0040(0x0004) (Native)
	struct FPathStore                                  PathCache;                                                // 0x0044(0x000C)
	struct FPointer                                    BestUnfinishedPathPoint;                                  // 0x0050(0x0004) (Native, Transient)
	struct FPointer                                    CurrentEdge;                                              // 0x0054(0x0004) (Const, Native)
	struct FPointer                                    SubGoal_DestPoly;                                         // 0x0058(0x0004) (Const, Native)
	struct FBasedPosition                              FinalDestination;                                         // 0x005C(0x0034)
	unsigned long                                      bSkipRouteCacheUpdates : 1;                               // 0x0090(0x0004)
	unsigned long                                      bUseORforEvaluateGoal : 1;                                // 0x0090(0x0004)
	unsigned long                                      bDebugConstraintsAndGoalEvals : 1;                        // 0x0090(0x0004) (Edit)
	unsigned long                                      bUltraVerbosePathDebugging : 1;                           // 0x0090(0x0004) (Edit)
	unsigned long                                      bVisualPathDebugging : 1;                                 // 0x0090(0x0004) (Edit)
	unsigned long                                      bDebug_Breadcrumbs : 1;                                   // 0x0090(0x0004) (Edit)
	class UNavMeshPathConstraint*                      PathConstraintList;                                       // 0x0094(0x0004)
	class UNavMeshPathGoalEvaluator*                   PathGoalList;                                             // 0x0098(0x0004)
	struct FNavMeshPathParams                          CachedPathParams;                                         // 0x009C(0x0034)
	TEnumAsByte<EPathFindingError>                     LastPathError;                                            // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	float                                              LastPathFailTime;                                         // 0x00D4(0x0004) (Edit)
	struct FVector                                     Breadcrumbs[0xA];                                         // 0x00D8(0x000C)
	int                                                BreadCrumbMostRecentIdx;                                  // 0x0150(0x0004)
	float                                              BreadCrumbDistanceInterval;                               // 0x0154(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationHandle");
		return ptr;
	}


	void DrawBreadCrumbs(bool bPersistent);
	bool STATIC_StaticGetValidatedAnchorPosition(const struct FVector& StartCheckBaseLocation, const struct FVector& Extent, struct FVector* out_NewAnchorLoc);
	bool GetValidatedAnchorPosition(const struct FVector& OverrideStartLoc, struct FVector* out_NewAnchorLoc);
	bool STATIC_GetAllCoverSlotsInRadius(const struct FVector& FromLoc, float Radius, TArray<struct FCoverInfo>* out_CoverList);
	bool PopulatePathfindingParamCache();
	bool STATIC_ProjectPointToNavMesh(float WalkableFloorZ, float DesiredHeight, float MaxZRange, bool bDisplayDebug, struct FVector* Point, struct FVector* ResultPos);
	struct FVector STATIC_MoveToDesiredHeightAboveMesh(const struct FVector& Point, float Height);
	void CopyMovePointsFromPathCache(const struct FVector& FinalDest, TArray<struct FVector>* out_MovePoints);
	float CalculatePathDistance(const struct FVector& FinalDest);
	struct FVector GetFirstMoveLocation();
	bool IsAnchorInescapable();
	void LimitPathCacheDistance(float MaxDist);
	void STATIC_GetValidPositionsForBox(const struct FVector& pos, float Radius, const struct FVector& Extent, bool bMustBeReachableFromStartPos, int MaxPositions, float MinRadius, const struct FVector& ValidBoxAroundStartPos, TArray<struct FVector>* out_ValidPositions);
	void STATIC_GetAllPolyCentersWithinBounds(const struct FVector& pos, const struct FVector& Extent, TArray<struct FVector>* out_PolyCtrs);
	TEnumAsByte<ENavMeshEdgeType> GetCurrentEdgeType();
	void ClearCurrentEdge();
	struct FString GetCurrentEdgeDebugText();
	void PrintPathCacheDebugText();
	void DrawPathCache(const struct FVector& DrawOffset, bool bPersistent, const struct FColor& DrawColor);
	bool ActorReachable(class AActor* A);
	bool PointReachable(const struct FVector& Point, const struct FVector& OverrideStartPoint, bool bAllowHitsInEndCollisionBox);
	bool PointCheck(const struct FVector& Pt, const struct FVector& Extent);
	bool LineCheck(const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, struct FVector* out_HitLocation, struct FVector* out_HitNormal);
	bool STATIC_ObstaclePointCheck(const struct FVector& Pt, const struct FVector& Extent);
	bool STATIC_ObstacleLineCheck(const struct FVector& Start, const struct FVector& End, const struct FVector& Extent, struct FVector* out_HitLoc, struct FVector* out_HitNorm);
	bool SuggestMovePreparation(class AController* C, struct FVector* MovePt);
	bool FindPath(class AActor** out_DestActor, int* out_DestItem);
	bool ComputeValidFinalDestination(struct FVector* out_ComputedPosition);
	bool SetFinalDestination(const struct FVector& FinalDest);
	bool GetNextMoveLocation(float ArrivalDistance, struct FVector* out_MoveDest);
	class APylon* STATIC_GetPylonFromPos(const struct FVector& Position);
	bool FindPylon();
	struct FVector GetBestUnfinishedPathPoint();
	bool PathCache_RemoveIndex(int InIdx, int Count);
	struct FVector PathCache_GetGoalPoint();
	bool PathCache_Empty();
	int GetPathCacheLength();
	class UNavMeshPathGoalEvaluator* CreatePathGoalEvaluator(class UClass* GoalEvalClass);
	class UNavMeshPathConstraint* CreatePathConstraint(class UClass* ConstraintClass);
	bool DoesPylonAHaveAPathToPylonB(class APylon* A, class APylon* B);
	class APylon* BuildFromPylonAToPylonB(class APylon* A, class APylon* B);
	void AddGoalEvaluator(class UNavMeshPathGoalEvaluator* Evaluator);
	void AddPathConstraint(class UNavMeshPathConstraint* Constraint);
	void ClearConstraints();
	bool GetNextBreadCrumb(struct FVector* out_BreadCrumbLoc);
	void UpdateBreadCrumbs(const struct FVector& InLocation);
	void CopyPathStoreToPathCache(struct FPathStore* InStore);
};


// Class Engine.NavMeshGoal_Filter
// 0x000C (0x0048 - 0x003C)
class UNavMeshGoal_Filter : public UObject
{
public:
	unsigned long                                      bShowDebug : 1;                                           // 0x003C(0x0004)
	int                                                NumNodesThrownOut;                                        // 0x0040(0x0004) (Transient)
	int                                                NumNodesProcessed;                                        // 0x0044(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoal_Filter");
		return ptr;
	}


	struct FString GetDumpString();
};


// Class Engine.NavMeshGoalFilter_MinPathDistance
// 0x0004 (0x004C - 0x0048)
class UNavMeshGoalFilter_MinPathDistance : public UNavMeshGoal_Filter
{
public:
	int                                                MinDistancePathShouldBe;                                  // 0x0048(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoalFilter_MinPathDistance");
		return ptr;
	}


	bool STATIC_MustBeLongerPathThan(class UNavMeshGoal_GenericFilterContainer* FilterContainer, int InMinDistancePathShouldBe);
};


// Class Engine.NavMeshGoalFilter_NotNearOtherAI
// 0x0004 (0x004C - 0x0048)
class UNavMeshGoalFilter_NotNearOtherAI : public UNavMeshGoal_Filter
{
public:
	float                                              DistanceToCheck;                                          // 0x0048(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoalFilter_NotNearOtherAI");
		return ptr;
	}


	bool STATIC_NotNearOtherAI(class UNavMeshGoal_GenericFilterContainer* FilterContainer, float InDistanceToCheck);
};


// Class Engine.NavMeshGoalFilter_OutOfViewFrom
// 0x0010 (0x0058 - 0x0048)
class UNavMeshGoalFilter_OutOfViewFrom : public UNavMeshGoal_Filter
{
public:
	struct FPointer                                    GoalPoly;                                                 // 0x0048(0x0004) (Native, Transient)
	struct FVector                                     OutOfViewLocation;                                        // 0x004C(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoalFilter_OutOfViewFrom");
		return ptr;
	}


	bool STATIC_MustBeHiddenFromThisPoint(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InOutOfViewLocation);
};


// Class Engine.NavMeshGoalFilter_OutSideOfDotProductWedge
// 0x001C (0x0064 - 0x0048)
class UNavMeshGoalFilter_OutSideOfDotProductWedge : public UNavMeshGoal_Filter
{
public:
	struct FVector                                     Location;                                                 // 0x0048(0x000C) (Transient)
	struct FVector                                     Rotation;                                                 // 0x0054(0x000C) (Transient)
	float                                              Epsilon;                                                  // 0x0060(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoalFilter_OutSideOfDotProductWedge");
		return ptr;
	}


	bool STATIC_OutsideOfDotProductWedge(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InLocation, const struct FRotator& InRotation, float InEpsilon);
};


// Class Engine.NavMeshGoalFilter_PolyEncompassesAI
// 0x000C (0x0054 - 0x0048)
class UNavMeshGoalFilter_PolyEncompassesAI : public UNavMeshGoal_Filter
{
public:
	struct FVector                                     OverrideExtentToCheck;                                    // 0x0048(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoalFilter_PolyEncompassesAI");
		return ptr;
	}


	bool STATIC_MakeSureAIFits(class UNavMeshGoal_GenericFilterContainer* FilterContainer, const struct FVector& InOverrideExtentToCheck);
};


// Class Engine.NavMeshPathConstraint
// 0x0014 (0x0050 - 0x003C)
class UNavMeshPathConstraint : public UObject
{
public:
	class UNavMeshPathConstraint*                      NextConstraint;                                           // 0x003C(0x0004)
	int                                                NumNodesProcessed;                                        // 0x0040(0x0004)
	int                                                NumThrownOutNodes;                                        // 0x0044(0x0004)
	float                                              AddedDirectCost;                                          // 0x0048(0x0004)
	float                                              AddedHeuristicCost;                                       // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPathConstraint");
		return ptr;
	}


	struct FString GetDumpString();
	void Recycle();
};


// Class Engine.NavMeshPath_AlongLine
// 0x000C (0x005C - 0x0050)
class UNavMeshPath_AlongLine : public UNavMeshPathConstraint
{
public:
	struct FVector                                     Direction;                                                // 0x0050(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPath_AlongLine");
		return ptr;
	}


	void Recycle();
	bool STATIC_AlongLine(class UNavigationHandle* NavHandle, const struct FVector& Dir);
};


// Class Engine.NavMeshPath_EnforceTwoWayEdges
// 0x0000 (0x0050 - 0x0050)
class UNavMeshPath_EnforceTwoWayEdges : public UNavMeshPathConstraint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPath_EnforceTwoWayEdges");
		return ptr;
	}


	bool STATIC_EnforceTwoWayEdges(class UNavigationHandle* NavHandle);
};


// Class Engine.NavMeshPath_MinDistBetweenSpecsOfType
// 0x0018 (0x0068 - 0x0050)
class UNavMeshPath_MinDistBetweenSpecsOfType : public UNavMeshPathConstraint
{
public:
	float                                              MinDistBetweenEdgeTypes;                                  // 0x0050(0x0004)
	struct FVector                                     InitLocation;                                             // 0x0054(0x000C)
	TEnumAsByte<ENavMeshEdgeType>                      EdgeType;                                                 // 0x0060(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	float                                              Penalty;                                                  // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPath_MinDistBetweenSpecsOfType");
		return ptr;
	}


	void Recycle();
	bool STATIC_EnforceMinDist(class UNavigationHandle* NavHandle, float InMinDist, TEnumAsByte<ENavMeshEdgeType> InEdgeType, const struct FVector& LastLocation, float InPenalty);
};


// Class Engine.NavMeshPath_SameCoverLink
// 0x0004 (0x0054 - 0x0050)
class UNavMeshPath_SameCoverLink : public UNavMeshPathConstraint
{
public:
	class ACoverLink*                                  TestLink;                                                 // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPath_SameCoverLink");
		return ptr;
	}


	void Recycle();
	void STATIC_SameCoverLink(class UNavigationHandle* NavHandle, class ACoverLink* InLink);
};


// Class Engine.NavMeshPath_Toward
// 0x0018 (0x0068 - 0x0050)
class UNavMeshPath_Toward : public UNavMeshPathConstraint
{
public:
	unsigned long                                      bBiasAgainstHighLevelPath : 1;                            // 0x0050(0x0004)
	float                                              OutOfHighLevelPathBias;                                   // 0x0054(0x0004)
	class AActor*                                      GoalActor;                                                // 0x0058(0x0004)
	struct FVector                                     GoalPoint;                                                // 0x005C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPath_Toward");
		return ptr;
	}


	void Recycle();
	bool STATIC_TowardPoint(class UNavigationHandle* NavHandle, const struct FVector& Point);
	bool STATIC_TowardGoal(class UNavigationHandle* NavHandle, class AActor* Goal);
};


// Class Engine.NavMeshPath_WithinDistanceEnvelope
// 0x001C (0x006C - 0x0050)
class UNavMeshPath_WithinDistanceEnvelope : public UNavMeshPathConstraint
{
public:
	float                                              MaxDistance;                                              // 0x0050(0x0004) (Edit)
	float                                              MinDistance;                                              // 0x0054(0x0004) (Edit)
	unsigned long                                      bSoft : 1;                                                // 0x0058(0x0004) (Edit)
	unsigned long                                      bOnlyThrowOutNodesThatLeaveEnvelope : 1;                  // 0x0058(0x0004) (Edit)
	float                                              SoftStartPenalty;                                         // 0x005C(0x0004) (Edit)
	struct FVector                                     EnvelopeTestPoint;                                        // 0x0060(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPath_WithinDistanceEnvelope");
		return ptr;
	}


	void Recycle();
	bool STATIC_StayWithinEnvelopeToLoc(class UNavigationHandle* NavHandle, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, bool bInSoft, float InSoftStartPenalty, bool bOnlyTossOutSpecsThatLeave);
};


// Class Engine.NavMeshPath_WithinTraversalDist
// 0x000C (0x005C - 0x0050)
class UNavMeshPath_WithinTraversalDist : public UNavMeshPathConstraint
{
public:
	float                                              MaxTraversalDist;                                         // 0x0050(0x0004) (Edit)
	unsigned long                                      bSoft : 1;                                                // 0x0054(0x0004) (Edit)
	float                                              SoftStartPenalty;                                         // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPath_WithinTraversalDist");
		return ptr;
	}


	void Recycle();
	bool STATIC_DontExceedMaxDist(class UNavigationHandle* NavHandle, float InMaxTraversalDist, bool bInSoft);
};


// Class Engine.NavMeshPathGoalEvaluator
// 0x0018 (0x0054 - 0x003C)
class UNavMeshPathGoalEvaluator : public UObject
{
public:
	class UNavMeshPathGoalEvaluator*                   NextEvaluator;                                            // 0x003C(0x0004) (Transient)
	int                                                MaxPathVisits;                                            // 0x0040(0x0004)
	unsigned long                                      bAlwaysCallEvaluateGoal : 1;                              // 0x0044(0x0004)
	unsigned long                                      bDoPartialAStar : 1;                                      // 0x0044(0x0004)
	int                                                NumNodesThrownOut;                                        // 0x0048(0x0004) (Transient)
	int                                                NumNodesProcessed;                                        // 0x004C(0x0004) (Transient)
	int                                                MaxOpenListSize;                                          // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshPathGoalEvaluator");
		return ptr;
	}


	struct FString GetDumpString();
	void Recycle();
};


// Class Engine.NavMeshGoal_At
// 0x0020 (0x0074 - 0x0054)
class UNavMeshGoal_At : public UNavMeshPathGoalEvaluator
{
public:
	struct FVector                                     Goal;                                                     // 0x0054(0x000C)
	float                                              GoalDist;                                                 // 0x0060(0x0004)
	unsigned long                                      bKeepPartial : 1;                                         // 0x0064(0x0004)
	unsigned long                                      bWeightPartialByDist : 1;                                 // 0x0064(0x0004)
	unsigned long                                      bGoalInSamePolyAsAnchor : 1;                              // 0x0064(0x0004)
	float                                              PartialDistSq;                                            // 0x0068(0x0004)
	struct FPointer                                    GoalPoly;                                                 // 0x006C(0x0004) (Native)
	struct FPointer                                    PartialGoal;                                              // 0x0070(0x0004) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoal_At");
		return ptr;
	}


	void Recycle();
	bool STATIC_AtLocation(class UNavigationHandle* NavHandle, const struct FVector& GoalLocation, float Dist, bool bReturnPartial, bool bInWeightPartialByDist);
	bool STATIC_AtActor(class UNavigationHandle* NavHandle, class AActor* GoalActor, float Dist, bool bReturnPartial, bool bInWeightPartialByDist);
	void RecycleNative();
};


// Class Engine.NavMeshGoal_ClosestActorInList
// 0x004C (0x00A0 - 0x0054)
class UNavMeshGoal_ClosestActorInList : public UNavMeshPathGoalEvaluator
{
public:
	TArray<struct FBiasedGoalActor>                    GoalList;                                                 // 0x0054(0x000C) (NeedCtorLink)
	struct FMultiMap_Mirror                            PolyToGoalActorMap;                                       // 0x0060(0x003C) (Const, Native, Transient)
	struct FPointer                                    CachedAnchorPoly;                                         // 0x009C(0x0004) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoal_ClosestActorInList");
		return ptr;
	}


	void RecycleInternal();
	void Recycle();
	class UNavMeshGoal_ClosestActorInList* STATIC_ClosestActorInList(class UNavigationHandle* NavHandle, TArray<struct FBiasedGoalActor>* InGoalList);
};


// Class Engine.NavMeshGoal_GenericFilterContainer
// 0x0020 (0x0074 - 0x0054)
class UNavMeshGoal_GenericFilterContainer : public UNavMeshPathGoalEvaluator
{
public:
	TArray<class UNavMeshGoal_Filter*>                 GoalFilters;                                              // 0x0054(0x000C) (ExportObject, Transient, NeedCtorLink, EditInline)
	struct FPointer                                    SuccessfulGoal;                                           // 0x0060(0x0004) (Native, Transient)
	class UNavigationHandle*                           MyNavigationHandle;                                       // 0x0064(0x0004) (Transient)
	TArray<struct FVector>                             SeedLocations;                                            // 0x0068(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoal_GenericFilterContainer");
		return ptr;
	}


	void Recycle();
	struct FVector GetGoalPoint();
	class UNavMeshGoal_Filter* GetFilterOfType(class UClass* Filter_Class);
	class UNavMeshGoal_GenericFilterContainer* STATIC_CreateAndAddFilterToNavHandleFromSeedList(class UNavigationHandle* NavHandle, int InMaxPathVisits, TArray<struct FVector>* InSearchSeeds);
	class UNavMeshGoal_GenericFilterContainer* STATIC_CreateAndAddFilterToNavHandle(class UNavigationHandle* NavHandle, int InMaxPathVisits);
};


// Class Engine.NavMeshGoal_Null
// 0x0004 (0x0058 - 0x0054)
class UNavMeshGoal_Null : public UNavMeshPathGoalEvaluator
{
public:
	struct FPointer                                    PartialGoal;                                              // 0x0054(0x0004) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoal_Null");
		return ptr;
	}


	void Recycle();
	void RecycleNative();
	bool STATIC_GoUntilBust(class UNavigationHandle* NavHandle, int InMaxPathVisits);
};


// Class Engine.NavMeshGoal_PolyEncompassesAI
// 0x000C (0x0060 - 0x0054)
class UNavMeshGoal_PolyEncompassesAI : public UNavMeshPathGoalEvaluator
{
public:
	struct FVector                                     OverrideExtentToCheck;                                    // 0x0054(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoal_PolyEncompassesAI");
		return ptr;
	}


	void Recycle();
	bool STATIC_MakeSureAIFits(class UNavigationHandle* NavHandle, const struct FVector& InOverrideExtentToCheck);
};


// Class Engine.NavMeshGoal_Random
// 0x000C (0x0060 - 0x0054)
class UNavMeshGoal_Random : public UNavMeshPathGoalEvaluator
{
public:
	int                                                MinDist;                                                  // 0x0054(0x0004)
	float                                              BestRating;                                               // 0x0058(0x0004)
	struct FPointer                                    PartialGoal;                                              // 0x005C(0x0004) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoal_Random");
		return ptr;
	}


	void Recycle();
	void RecycleNative();
	bool STATIC_FindRandom(class UNavigationHandle* NavHandle, int InMinDist, int InMaxPathVisits);
};


// Class Engine.NavMeshGoal_WithinDistanceEnvelope
// 0x0018 (0x006C - 0x0054)
class UNavMeshGoal_WithinDistanceEnvelope : public UNavMeshPathGoalEvaluator
{
public:
	float                                              MaxDistance;                                              // 0x0054(0x0004) (Edit)
	float                                              MinDistance;                                              // 0x0058(0x0004) (Edit)
	float                                              MinTraversalDist;                                         // 0x005C(0x0004) (Edit)
	struct FVector                                     EnvelopeTestPoint;                                        // 0x0060(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshGoal_WithinDistanceEnvelope");
		return ptr;
	}


	void Recycle();
	bool STATIC_GoalWithinEnvelopeToLoc(class UNavigationHandle* NavHandle, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, float InMinTraversalDist);
};


// Class Engine.PathConstraint
// 0x0008 (0x0044 - 0x003C)
class UPathConstraint : public UObject
{
public:
	int                                                CacheIdx;                                                 // 0x003C(0x0004) (Const)
	class UPathConstraint*                             NextConstraint;                                           // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathConstraint");
		return ptr;
	}


	struct FString GetDumpString();
	void Recycle();
};


// Class Engine.Path_AlongLine
// 0x000C (0x0050 - 0x0044)
class UPath_AlongLine : public UPathConstraint
{
public:
	struct FVector                                     Direction;                                                // 0x0044(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_AlongLine");
		return ptr;
	}


	void Recycle();
	bool STATIC_AlongLine(class APawn* P, const struct FVector& Dir);
};


// Class Engine.Path_AvoidInEscapableNodes
// 0x0010 (0x0054 - 0x0044)
class UPath_AvoidInEscapableNodes : public UPathConstraint
{
public:
	int                                                Radius;                                                   // 0x0044(0x0004)
	int                                                Height;                                                   // 0x0048(0x0004)
	int                                                MaxFallSpeed;                                             // 0x004C(0x0004)
	int                                                MoveFlags;                                                // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_AvoidInEscapableNodes");
		return ptr;
	}


	void Recycle();
	bool STATIC_DontGetStuck(class APawn* P);
	void CachePawnReacFlags(class APawn* P);
};


// Class Engine.Path_MinDistBetweenSpecsOfType
// 0x0014 (0x0058 - 0x0044)
class UPath_MinDistBetweenSpecsOfType : public UPathConstraint
{
public:
	float                                              MinDistBetweenSpecTypes;                                  // 0x0044(0x0004)
	struct FVector                                     InitLocation;                                             // 0x0048(0x000C)
	class UClass*                                      ReachSpecClass;                                           // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_MinDistBetweenSpecsOfType");
		return ptr;
	}


	void Recycle();
	bool STATIC_EnforceMinDist(class APawn* P, float InMinDist, class UClass* InSpecClass, const struct FVector& LastLocation);
};


// Class Engine.Path_TowardGoal
// 0x0004 (0x0048 - 0x0044)
class UPath_TowardGoal : public UPathConstraint
{
public:
	class AActor*                                      GoalActor;                                                // 0x0044(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_TowardGoal");
		return ptr;
	}


	void Recycle();
	bool STATIC_TowardGoal(class APawn* P, class AActor* Goal);
};


// Class Engine.Path_TowardPoint
// 0x000C (0x0050 - 0x0044)
class UPath_TowardPoint : public UPathConstraint
{
public:
	struct FVector                                     GoalPoint;                                                // 0x0044(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_TowardPoint");
		return ptr;
	}


	void Recycle();
	bool STATIC_TowardPoint(class APawn* P, const struct FVector& Point);
};


// Class Engine.Path_WithinDistanceEnvelope
// 0x001C (0x0060 - 0x0044)
class UPath_WithinDistanceEnvelope : public UPathConstraint
{
public:
	float                                              MaxDistance;                                              // 0x0044(0x0004) (Edit)
	float                                              MinDistance;                                              // 0x0048(0x0004) (Edit)
	unsigned long                                      bSoft : 1;                                                // 0x004C(0x0004) (Edit)
	unsigned long                                      bOnlyThrowOutNodesThatLeaveEnvelope : 1;                  // 0x004C(0x0004) (Edit)
	float                                              SoftStartPenalty;                                         // 0x0050(0x0004) (Edit)
	struct FVector                                     EnvelopeTestPoint;                                        // 0x0054(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_WithinDistanceEnvelope");
		return ptr;
	}


	void Recycle();
	bool STATIC_StayWithinEnvelopeToLoc(class APawn* P, const struct FVector& InEnvelopeTestPoint, float InMaxDistance, float InMinDistance, bool bInSoft, float InSoftStartPenalty, bool bOnlyTossOutSpecsThatLeave);
};


// Class Engine.Path_WithinTraversalDist
// 0x000C (0x0050 - 0x0044)
class UPath_WithinTraversalDist : public UPathConstraint
{
public:
	float                                              MaxTraversalDist;                                         // 0x0044(0x0004) (Edit)
	unsigned long                                      bSoft : 1;                                                // 0x0048(0x0004) (Edit)
	float                                              SoftStartPenalty;                                         // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Path_WithinTraversalDist");
		return ptr;
	}


	void Recycle();
	bool STATIC_DontExceedMaxDist(class APawn* P, float InMaxTraversalDist, bool bInSoft);
};


// Class Engine.PathGoalEvaluator
// 0x0010 (0x004C - 0x003C)
class UPathGoalEvaluator : public UObject
{
public:
	class UPathGoalEvaluator*                          NextEvaluator;                                            // 0x003C(0x0004)
	class ANavigationPoint*                            GeneratedGoal;                                            // 0x0040(0x0004)
	int                                                MaxPathVisits;                                            // 0x0044(0x0004)
	int                                                CacheIdx;                                                 // 0x0048(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathGoalEvaluator");
		return ptr;
	}


	struct FString GetDumpString();
	void Recycle();
};


// Class Engine.Goal_AtActor
// 0x000C (0x0058 - 0x004C)
class UGoal_AtActor : public UPathGoalEvaluator
{
public:
	class AActor*                                      GoalActor;                                                // 0x004C(0x0004)
	float                                              GoalDist;                                                 // 0x0050(0x0004)
	unsigned long                                      bKeepPartial : 1;                                         // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Goal_AtActor");
		return ptr;
	}


	void Recycle();
	bool STATIC_AtActor(class APawn* P, class AActor* Goal, float Dist, bool bReturnPartial);
};


// Class Engine.Goal_Null
// 0x0000 (0x004C - 0x004C)
class UGoal_Null : public UPathGoalEvaluator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Goal_Null");
		return ptr;
	}


	void Recycle();
	bool STATIC_GoUntilBust(class APawn* P, int InMaxPathVisits);
};


// Class Engine.SkeletalMeshActor
// 0x0040 (0x0214 - 0x01D4)
class ASkeletalMeshActor : public AActor
{
public:
	unsigned long                                      bDamageAppliesImpulse : 1;                                // 0x01D4(0x0004) (Edit)
	unsigned long                                      bShouldDoAnimNotifies : 1;                                // 0x01D4(0x0004) (Edit)
	unsigned long                                      bForceSaveInCheckpoint : 1;                               // 0x01D4(0x0004) (Edit)
	unsigned long                                      bCollideActors_OldValue : 1;                              // 0x01D4(0x0004) (Deprecated)
	unsigned long                                      bShouldShadowParentAllAttachedActors : 1;                 // 0x01D4(0x0004) (Edit)
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x01D8(0x0004) (Edit, ExportObject, Component, EditInline)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x01DC(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UAudioComponent*                             FacialAudioComp;                                          // 0x01E0(0x0004) (ExportObject, Component, EditInline)
	class USkeletalMesh*                               ReplicatedMesh;                                           // 0x01E4(0x0004) (Net, Transient)
	class UMaterialInterface*                          ReplicatedMaterial0;                                      // 0x01E8(0x0004) (Net)
	class UMaterialInterface*                          ReplicatedMaterial1;                                      // 0x01EC(0x0004) (Net)
	TArray<struct FSkelMeshActorControlTarget>         ControlTargets;                                           // 0x01F0(0x000C) (Edit, NeedCtorLink)
	TArray<class UInterpGroup*>                        InterpGroupList;                                          // 0x01FC(0x000C) (Transient, NeedCtorLink)
	struct FName                                       SavedAnimSeqName;                                         // 0x0208(0x0008) (Transient)
	float                                              SavedCurrentTime;                                         // 0x0210(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActor");
		return ptr;
	}


	bool CreateForceField(class UAnimNotify_ForceField* AnimNotifyData);
	void SkelMeshActorOnParticleSystemFinished(class UParticleSystemComponent* PSC);
	bool PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData);
	void ApplyCheckpointRecord(struct ASkeletalMeshActor_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct ASkeletalMeshActor_FCheckpointRecord* Record);
	bool ShouldSaveForCheckpoint();
	void TakeDamage(float Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action);
	void OnSetSkelControlTarget(class USeqAct_SetSkelControlTarget* Action);
	void OnUpdatePhysBonesFromAnim(class USeqAct_UpdatePhysBonesFromAnim* Action);
	void OnSetMesh(class USeqAct_SetMesh* Action);
	bool IsActorPlayingFaceFXAnim();
	class UFaceFXAsset* GetActorFaceFXAsset();
	void OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction);
	class UAudioComponent* GetFaceFXAudioComponent();
	void StopActorFaceFXAnim();
	bool PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay);
	void MAT_FinishAnimControl(class UInterpGroup* InInterpGroup);
	void FinishAnimControl(class UInterpGroup* InInterpGroup);
	void SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void MAT_BeginAnimControl(class UInterpGroup* InInterpGroup);
	void BeginAnimControl(class UInterpGroup* InInterpGroup);
	void OnSetMaterial(class USeqAct_SetMaterial* Action);
	void OnToggle(class USeqAct_Toggle* Action);
	void ReplicatedEvent(const struct FName& VarName);
	void UpdateAnimSetList();
	void Destroyed();
	void PostBeginPlay();
};


// Class Engine.SkeletalMeshActorBasedOnExtremeContent
// 0x0018 (0x022C - 0x0214)
class ASkeletalMeshActorBasedOnExtremeContent : public ASkeletalMeshActor
{
public:
	TArray<struct FSkelMaterialSetterDatum>            ExtremeContent;                                           // 0x0214(0x000C) (Edit, NeedCtorLink)
	TArray<struct FSkelMaterialSetterDatum>            NonExtremeContent;                                        // 0x0220(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActorBasedOnExtremeContent");
		return ptr;
	}


	void SetMaterialBasedOnExtremeContent();
	void PostBeginPlay();
};


// Class Engine.SkeletalMeshActorSpawnable
// 0x0000 (0x0214 - 0x0214)
class ASkeletalMeshActorSpawnable : public ASkeletalMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActorSpawnable");
		return ptr;
	}

};


// Class Engine.SkeletalMeshCinematicActor
// 0x0000 (0x0214 - 0x0214)
class ASkeletalMeshCinematicActor : public ASkeletalMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshCinematicActor");
		return ptr;
	}

};


// Class Engine.SkeletalMeshActorMAT
// 0x000C (0x0220 - 0x0214)
class ASkeletalMeshActorMAT : public ASkeletalMeshCinematicActor
{
public:
	TArray<class UAnimNodeSlot*>                       SlotNodes;                                                // 0x0214(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActorMAT");
		return ptr;
	}


	void SetSkelControlScale(const struct FName& SkelControlName, float Scale);
	void SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight);
	void FinishAnimControl(class UInterpGroup* InInterpGroup);
	void MAT_SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void ClearAnimNodes();
	void CacheAnimNodes();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void Destroyed();
	void MAT_SetSkelControlStrength(const struct FName& SkelControlName, float ControlStrength);
	void MAT_SetSkelControlScale(const struct FName& SkelControlName, float Scale);
	void MAT_SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight);
	void MAT_SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos);
};


// Class Engine.HeadTrackingComponent
// 0x009F (0x00F4 - 0x0055)
class UHeadTrackingComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	TArray<struct FName>                               TrackControllerName;                                      // 0x0058(0x000C) (Edit, NeedCtorLink)
	float                                              LookAtActorRadius;                                        // 0x0064(0x0004) (Edit)
	unsigned long                                      bDisableBeyondLimit : 1;                                  // 0x0068(0x0004) (Edit)
	float                                              MaxLookAtTime;                                            // 0x006C(0x0004) (Edit)
	float                                              MinLookAtTime;                                            // 0x0070(0x0004) (Edit)
	float                                              MaxInterestTime;                                          // 0x0074(0x0004) (Edit)
	TArray<class UClass*>                              ActorClassesToLookAt;                                     // 0x0078(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               TargetBoneNames;                                          // 0x0084(0x000C) (Edit, NeedCtorLink)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x0090(0x003C) UNKNOWN PROPERTY: MapProperty Engine.HeadTrackingComponent.CurrentActorMap
	class USkeletalMeshComponent*                      SkeletalMeshComp;                                         // 0x00CC(0x0004) (ExportObject, Component, EditInline)
	TArray<class USkelControlLookAt*>                  TrackControls;                                            // 0x00D0(0x000C) (Transient, NeedCtorLink)
	struct FVector                                     RootMeshLocation;                                         // 0x00DC(0x000C) (Transient)
	struct FRotator                                    RootMeshRotation;                                         // 0x00E8(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HeadTrackingComponent");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm
// 0x0012 (0x004E - 0x003C)
class UAnimationCompressionAlgorithm : public UObject
{
public:
	struct FString                                     Description;                                              // 0x003C(0x000C) (NeedCtorLink)
	unsigned long                                      bNeedsSkeleton : 1;                                       // 0x0048(0x0004)
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x004C(0x0001)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x004D(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_Automatic
// 0x000A (0x0058 - 0x004E)
class UAnimationCompressionAlgorithm_Automatic : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	float                                              MaxEndEffectorError;                                      // 0x0050(0x0004) (Edit)
	unsigned long                                      bTryFixedBitwiseCompression : 1;                          // 0x0054(0x0004) (Edit)
	unsigned long                                      bTryPerTrackBitwiseCompression : 1;                       // 0x0054(0x0004) (Edit)
	unsigned long                                      bTryLinearKeyRemovalCompression : 1;                      // 0x0054(0x0004) (Edit)
	unsigned long                                      bTryIntervalKeyRemoval : 1;                               // 0x0054(0x0004) (Edit)
	unsigned long                                      bRunCurrentDefaultCompressor : 1;                         // 0x0054(0x0004) (Edit)
	unsigned long                                      bAutoReplaceIfExistingErrorTooGreat : 1;                  // 0x0054(0x0004) (Edit)
	unsigned long                                      bRaiseMaxErrorToExisting : 1;                             // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_Automatic");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly
// 0x0002 (0x0050 - 0x004E)
class UAnimationCompressionAlgorithm_BitwiseCompressOnly : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_BitwiseCompressOnly");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_LeastDestructive
// 0x0002 (0x0050 - 0x004E)
class UAnimationCompressionAlgorithm_LeastDestructive : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_LeastDestructive");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey
// 0x000A (0x0058 - 0x004E)
class UAnimationCompressionAlgorithm_RemoveEverySecondKey : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	int                                                MinKeys;                                                  // 0x0050(0x0004) (Edit)
	unsigned long                                      bStartAtSecondKey : 1;                                    // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RemoveEverySecondKey");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_RemoveLinearKeys
// 0x001E (0x006C - 0x004E)
class UAnimationCompressionAlgorithm_RemoveLinearKeys : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	float                                              MaxPosDiff;                                               // 0x0050(0x0004) (Edit)
	float                                              MaxAngleDiff;                                             // 0x0054(0x0004) (Edit)
	float                                              MaxEffectorDiff;                                          // 0x0058(0x0004) (Edit)
	float                                              MinEffectorDiff;                                          // 0x005C(0x0004) (Edit)
	float                                              EffectorDiffSocket;                                       // 0x0060(0x0004) (Edit)
	float                                              ParentKeyScale;                                           // 0x0064(0x0004) (Edit)
	unsigned long                                      bRetarget : 1;                                            // 0x0068(0x0004) (Edit)
	unsigned long                                      bActuallyFilterLinearKeys : 1;                            // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RemoveLinearKeys");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_PerTrackCompression
// 0x0050 (0x00BC - 0x006C)
class UAnimationCompressionAlgorithm_PerTrackCompression : public UAnimationCompressionAlgorithm_RemoveLinearKeys
{
public:
	float                                              MaxZeroingThreshold;                                      // 0x006C(0x0004) (Edit)
	float                                              MaxPosDiffBitwise;                                        // 0x0070(0x0004) (Edit)
	float                                              MaxAngleDiffBitwise;                                      // 0x0074(0x0004) (Edit)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedRotationFormats;                                   // 0x0078(0x000C) (Edit, NeedCtorLink)
	TArray<TEnumAsByte<EAnimationCompressionFormat>>   AllowedTranslationFormats;                                // 0x0084(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bResampleAnimation : 1;                                   // 0x0090(0x0004) (Edit)
	unsigned long                                      bUseAdaptiveError : 1;                                    // 0x0090(0x0004) (Edit)
	unsigned long                                      bUseOverrideForEndEffectors : 1;                          // 0x0090(0x0004) (Edit)
	unsigned long                                      bUseAdaptiveError2 : 1;                                   // 0x0090(0x0004) (Edit)
	float                                              ResampledFramerate;                                       // 0x0094(0x0004) (Edit)
	int                                                MinKeysForResampling;                                     // 0x0098(0x0004) (Edit)
	int                                                TrackHeightBias;                                          // 0x009C(0x0004) (Edit)
	float                                              ParentingDivisor;                                         // 0x00A0(0x0004) (Edit)
	float                                              ParentingDivisorExponent;                                 // 0x00A4(0x0004) (Edit)
	float                                              RotationErrorSourceRatio;                                 // 0x00A8(0x0004) (Edit)
	float                                              TranslationErrorSourceRatio;                              // 0x00AC(0x0004) (Edit)
	float                                              MaxErrorPerTrackRatio;                                    // 0x00B0(0x0004) (Edit)
	float                                              PerturbationProbeSize;                                    // 0x00B4(0x0004)
	struct FPointer                                    PerReductionCachedData;                                   // 0x00B8(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_PerTrackCompression");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys
// 0x000A (0x0058 - 0x004E)
class UAnimationCompressionAlgorithm_RemoveTrivialKeys : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET
	float                                              MaxPosDiff;                                               // 0x0050(0x0004) (Edit)
	float                                              MaxAngleDiff;                                             // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RemoveTrivialKeys");
		return ptr;
	}

};


// Class Engine.AnimationCompressionAlgorithm_RevertToRaw
// 0x0002 (0x0050 - 0x004E)
class UAnimationCompressionAlgorithm_RevertToRaw : public UAnimationCompressionAlgorithm
{
public:
	unsigned char                                      UnknownData00[0x2];                                       // 0x004E(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimationCompressionAlgorithm_RevertToRaw");
		return ptr;
	}

};


// Class Engine.AnimMetaData
// 0x0000 (0x003C - 0x003C)
class UAnimMetaData : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimMetaData");
		return ptr;
	}

};


// Class Engine.AnimMetaData_SkelControl
// 0x0018 (0x0054 - 0x003C)
class UAnimMetaData_SkelControl : public UAnimMetaData
{
public:
	TArray<struct FName>                               SkelControlNameList;                                      // 0x003C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bFullControlOverController : 1;                           // 0x0048(0x0004) (Edit)
	struct FName                                       SkelControlName;                                          // 0x004C(0x0008) (Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimMetaData_SkelControl");
		return ptr;
	}

};


// Class Engine.AnimSequence
// 0x00F0 (0x012C - 0x003C)
class UAnimSequence : public UObject
{
public:
	struct FName                                       SequenceName;                                             // 0x003C(0x0008)
	TArray<struct FAnimNotifyEvent>                    Notifies;                                                 // 0x0044(0x000C) (Edit, NeedCtorLink, EditInline)
	TArray<class UAnimMetaData*>                       MetaData;                                                 // 0x0050(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	TArray<struct FSkelControlModifier>                BoneControlModifiers;                                     // 0x005C(0x000C) (NeedCtorLink, EditInline, Deprecated)
	float                                              SequenceLength;                                           // 0x0068(0x0004)
	int                                                NumFrames;                                                // 0x006C(0x0004)
	float                                              RateScale;                                                // 0x0070(0x0004) (Edit)
	unsigned long                                      bNoLoopingInterpolation : 1;                              // 0x0074(0x0004) (Edit)
	unsigned long                                      bIsAdditive : 1;                                          // 0x0074(0x0004) (Const)
	unsigned long                                      bAdditiveBuiltLooping : 1;                                // 0x0074(0x0004)
	unsigned long                                      bDoNotOverrideCompression : 1;                            // 0x0074(0x0004) (Edit, Const)
	unsigned long                                      bHasBeenUsed : 1;                                         // 0x0074(0x0004) (Const, Transient)
	unsigned long                                      bWasCompressedWithoutTranslations : 1;                    // 0x0074(0x0004)
	TArray<struct FRawAnimSequenceTrack>               RawAnimData;                                              // 0x0078(0x000C) (Const, NeedCtorLink, Deprecated)
	TArray<struct FRawAnimSequenceTrack>               RawAnimationData;                                         // 0x0084(0x000C) (Const, Native)
	TArray<struct FTranslationTrack>                   TranslationData;                                          // 0x0090(0x000C) (Const, Transient, NeedCtorLink)
	TArray<struct FRotationTrack>                      RotationData;                                             // 0x009C(0x000C) (Const, Transient, NeedCtorLink)
	TArray<struct FCurveTrack>                         CurveData;                                                // 0x00A8(0x000C) (Const, NeedCtorLink)
	class UAnimationCompressionAlgorithm*              CompressionScheme;                                        // 0x00B4(0x0004) (Edit, EditConst, EditInline)
	TEnumAsByte<EAnimationCompressionFormat>           TranslationCompressionFormat;                             // 0x00B8(0x0001) (Const)
	TEnumAsByte<EAnimationCompressionFormat>           RotationCompressionFormat;                                // 0x00B9(0x0001) (Const)
	TEnumAsByte<EAnimationKeyFormat>                   KeyEncodingFormat;                                        // 0x00BA(0x0001) (Const)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00BB(0x0001) MISSED OFFSET
	TArray<int>                                        CompressedTrackOffsets;                                   // 0x00BC(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              CompressedByteStream;                                     // 0x00C8(0x000C) (Native)
	struct FPointer                                    TranslationCodec;                                         // 0x00D4(0x0004) (Native, Transient)
	struct FPointer                                    RotationCodec;                                            // 0x00D8(0x0004) (Native, Transient)
	TArray<struct FBoneAtom>                           AdditiveRefPose;                                          // 0x00DC(0x000C) (Const, NeedCtorLink, Deprecated)
	TArray<struct FRawAnimSequenceTrack>               AdditiveBasePose;                                         // 0x00E8(0x000C) (Const, NeedCtorLink)
	struct FName                                       AdditiveRefName;                                          // 0x00F4(0x0008) (Const)
	TArray<class UAnimSequence*>                       AdditiveBasePoseAnimSeq;                                  // 0x00FC(0x000C) (NeedCtorLink)
	TArray<class UAnimSequence*>                       AdditiveTargetPoseAnimSeq;                                // 0x0108(0x000C) (NeedCtorLink)
	TArray<class UAnimSequence*>                       RelatedAdditiveAnimSeqs;                                  // 0x0114(0x000C) (NeedCtorLink)
	int                                                EncodingPkgVersion;                                       // 0x0120(0x0004) (Const)
	int                                                CompressCommandletVersion;                                // 0x0124(0x0004) (Const)
	float                                              UseScore;                                                 // 0x0128(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimSequence");
		return ptr;
	}


	float GetNotifyTimeByClass(class UClass* NotifyClass, float PlayRate, float StartPosition, class UAnimNotify** out_Notify, float* out_Duration);
};


// Class Engine.AnimMetaData_SkelControlKeyFrame
// 0x000C (0x0060 - 0x0054)
class UAnimMetaData_SkelControlKeyFrame : public UAnimMetaData_SkelControl
{
public:
	TArray<struct FTimeModifier>                       KeyFrames;                                                // 0x0054(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimMetaData_SkelControlKeyFrame");
		return ptr;
	}

};


// Class Engine.AnimNotify
// 0x0004 (0x0040 - 0x003C)
class UAnimNotify : public UObject
{
public:
	struct FColor                                      NotifyColor;                                              // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify");
		return ptr;
	}


	bool FindNextNotifyOfClass(class UAnimNodeSequence* AnimSeqInstigator, class UClass* NotifyClass, struct FAnimNotifyEvent* OutEvent);
};


// Class Engine.AnimNotify_CameraEffect
// 0x0004 (0x0044 - 0x0040)
class UAnimNotify_CameraEffect : public UAnimNotify
{
public:
	class UClass*                                      CameraLensEffect;                                         // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_CameraEffect");
		return ptr;
	}

};


// Class Engine.AnimNotify_ClothingMaxDistanceScale
// 0x0010 (0x0050 - 0x0040)
class UAnimNotify_ClothingMaxDistanceScale : public UAnimNotify
{
public:
	float                                              StartScale;                                               // 0x0040(0x0004) (Edit)
	float                                              EndScale;                                                 // 0x0044(0x0004) (Edit)
	TEnumAsByte<EMaxDistanceScaleMode>                 ScaleMode;                                                // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	float                                              Duration;                                                 // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_ClothingMaxDistanceScale");
		return ptr;
	}

};


// Class Engine.AnimNotify_Footstep
// 0x0004 (0x0044 - 0x0040)
class UAnimNotify_Footstep : public UAnimNotify
{
public:
	int                                                FootDown;                                                 // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Footstep");
		return ptr;
	}

};


// Class Engine.AnimNotify_ForceField
// 0x0018 (0x0058 - 0x0040)
class UAnimNotify_ForceField : public UAnimNotify
{
public:
	class UNxForceFieldComponent*                      ForceFieldComponent;                                      // 0x0040(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      bAttach : 1;                                              // 0x0044(0x0004) (Edit)
	struct FName                                       SocketName;                                               // 0x0048(0x0008) (Edit)
	struct FName                                       BoneName;                                                 // 0x0050(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_ForceField");
		return ptr;
	}

};


// Class Engine.AnimNotify_Kismet
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_Kismet : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                               // 0x0040(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Kismet");
		return ptr;
	}

};


// Class Engine.AnimNotify_PlayParticleEffect
// 0x0024 (0x0064 - 0x0040)
class UAnimNotify_PlayParticleEffect : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0040(0x0004) (Edit)
	unsigned long                                      bIsExtremeContent : 1;                                    // 0x0044(0x0004) (Edit)
	unsigned long                                      bAttach : 1;                                              // 0x0044(0x0004) (Edit)
	unsigned long                                      bPreview : 1;                                             // 0x0044(0x0004) (Edit)
	unsigned long                                      bSkipIfOwnerIsHidden : 1;                                 // 0x0044(0x0004) (Edit)
	class UParticleSystem*                             PSNonExtremeContentTemplate;                              // 0x0048(0x0004) (Edit)
	struct FName                                       SocketName;                                               // 0x004C(0x0008) (Edit)
	struct FName                                       BoneName;                                                 // 0x0054(0x0008) (Edit)
	struct FName                                       BoneSocketModuleActorName;                                // 0x005C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_PlayParticleEffect");
		return ptr;
	}

};


// Class Engine.AnimNotify_Rumble
// 0x0010 (0x0050 - 0x0040)
class UAnimNotify_Rumble : public UAnimNotify
{
public:
	class UClass*                                      PredefinedWaveForm;                                       // 0x0040(0x0004) (Edit)
	class UForceFeedbackWaveform*                      WaveForm;                                                 // 0x0044(0x0004) (Edit, EditInline)
	unsigned long                                      bCheckForBasedPlayer : 1;                                 // 0x0048(0x0004) (Edit)
	float                                              EffectRadius;                                             // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Rumble");
		return ptr;
	}

};


// Class Engine.AnimNotify_Script
// 0x0018 (0x0058 - 0x0040)
class UAnimNotify_Script : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                               // 0x0040(0x0008) (Edit)
	struct FName                                       NotifyTickName;                                           // 0x0048(0x0008) (Edit)
	struct FName                                       NotifyEndName;                                            // 0x0050(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Script");
		return ptr;
	}

};


// Class Engine.AnimNotify_Scripted
// 0x0000 (0x0040 - 0x0040)
class UAnimNotify_Scripted : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Scripted");
		return ptr;
	}


	void NotifyEnd(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
	void Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};


// Class Engine.Pawn
// 0x0290 (0x0464 - 0x01D4)
class APawn : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_Speaker;                               // 0x01D4(0x0004) (Const, Native, NoExport)
	float                                              MaxStepHeight;                                            // 0x01D8(0x0004) (Const)
	float                                              MaxJumpHeight;                                            // 0x01DC(0x0004) (Const)
	float                                              WalkableFloorZ;                                           // 0x01E0(0x0004) (Const)
	float                                              LedgeCheckThreshold;                                      // 0x01E4(0x0004) (Const)
	struct FVector                                     PartialLedgeMoveDir;                                      // 0x01E8(0x000C) (Const)
	class AController*                                 Controller;                                               // 0x01F4(0x0004) (Net, EditInline)
	class APawn*                                       NextPawn;                                                 // 0x01F8(0x0004) (Const)
	float                                              NetRelevancyTime;                                         // 0x01FC(0x0004)
	class APlayerController*                           LastRealViewer;                                           // 0x0200(0x0004)
	class AActor*                                      LastViewer;                                               // 0x0204(0x0004)
	unsigned long                                      bScriptTickSpecial : 1;                                   // 0x0208(0x0004)
	unsigned long                                      bUpAndOut : 1;                                            // 0x0208(0x0004)
	unsigned long                                      bIsWalking : 1;                                           // 0x0208(0x0004) (Net)
	unsigned long                                      bWantsToCrouch : 1;                                       // 0x0208(0x0004)
	unsigned long                                      bIsCrouched : 1;                                          // 0x0208(0x0004) (Const, Net)
	unsigned long                                      bTryToUncrouch : 1;                                       // 0x0208(0x0004) (Const)
	unsigned long                                      bCanCrouch : 1;                                           // 0x0208(0x0004) (Edit)
	unsigned long                                      bCrawler : 1;                                             // 0x0208(0x0004)
	unsigned long                                      bReducedSpeed : 1;                                        // 0x0208(0x0004) (Const)
	unsigned long                                      bJumpCapable : 1;                                         // 0x0208(0x0004)
	unsigned long                                      bCanJump : 1;                                             // 0x0208(0x0004)
	unsigned long                                      bCanWalk : 1;                                             // 0x0208(0x0004)
	unsigned long                                      bCanSwim : 1;                                             // 0x0208(0x0004)
	unsigned long                                      bCanFly : 1;                                              // 0x0208(0x0004)
	unsigned long                                      bCanClimbLadders : 1;                                     // 0x0208(0x0004)
	unsigned long                                      bCanStrafe : 1;                                           // 0x0208(0x0004)
	unsigned long                                      bAvoidLedges : 1;                                         // 0x0208(0x0004)
	unsigned long                                      bStopAtLedges : 1;                                        // 0x0208(0x0004)
	unsigned long                                      bAllowLedgeOverhang : 1;                                  // 0x0208(0x0004)
	unsigned long                                      bPartiallyOverLedge : 1;                                  // 0x0208(0x0004) (Const)
	unsigned long                                      bSimulateGravity : 1;                                     // 0x0208(0x0004) (Const, Net)
	unsigned long                                      bIgnoreForces : 1;                                        // 0x0208(0x0004)
	unsigned long                                      bCanWalkOffLedges : 1;                                    // 0x0208(0x0004)
	unsigned long                                      bCanBeBaseForPawns : 1;                                   // 0x0208(0x0004)
	unsigned long                                      bSimGravityDisabled : 1;                                  // 0x0208(0x0004) (Const)
	unsigned long                                      bDirectHitWall : 1;                                       // 0x0208(0x0004)
	unsigned long                                      bPushesRigidBodies : 1;                                   // 0x0208(0x0004) (Const)
	unsigned long                                      bForceFloorCheck : 1;                                     // 0x0208(0x0004)
	unsigned long                                      bForceKeepAnchor : 1;                                     // 0x0208(0x0004)
	unsigned long                                      bCanMantle : 1;                                           // 0x0208(0x0004) (Config)
	unsigned long                                      bCanClimbUp : 1;                                          // 0x0208(0x0004) (Config)
	unsigned long                                      bCanClimbCeilings : 1;                                    // 0x0208(0x0004)
	unsigned long                                      bCanSwatTurn : 1;                                         // 0x020C(0x0004) (Net, Config)
	unsigned long                                      bCanLeap : 1;                                             // 0x020C(0x0004) (Config)
	unsigned long                                      bCanCoverSlip : 1;                                        // 0x020C(0x0004) (Config)
	unsigned long                                      bDisplayPathErrors : 1;                                   // 0x020C(0x0004) (Config, GlobalConfig)
	unsigned long                                      bCanPickupInventory : 1;                                  // 0x020C(0x0004)
	unsigned long                                      bAmbientCreature : 1;                                     // 0x020C(0x0004)
	unsigned long                                      bLOSHearing : 1;                                          // 0x020C(0x0004) (Edit)
	unsigned long                                      bMuffledHearing : 1;                                      // 0x020C(0x0004) (Edit)
	unsigned long                                      bDontPossess : 1;                                         // 0x020C(0x0004) (Edit)
	unsigned long                                      bRollToDesired : 1;                                       // 0x020C(0x0004)
	unsigned long                                      bStationary : 1;                                          // 0x020C(0x0004)
	unsigned long                                      bCachedRelevant : 1;                                      // 0x020C(0x0004)
	unsigned long                                      bNoWeaponFiring : 1;                                      // 0x020C(0x0004)
	unsigned long                                      bModifyReachSpecCost : 1;                                 // 0x020C(0x0004)
	unsigned long                                      bModifyNavPointDest : 1;                                  // 0x020C(0x0004)
	unsigned long                                      bPathfindsAsVehicle : 1;                                  // 0x020C(0x0004)
	unsigned long                                      bPrevBypassSimulatedClientPhysics : 1;                    // 0x020C(0x0004)
	unsigned long                                      bRunPhysicsWithNoController : 1;                          // 0x020C(0x0004)
	unsigned long                                      bForceMaxAccel : 1;                                       // 0x020C(0x0004)
	unsigned long                                      bLimitFallAccel : 1;                                      // 0x020C(0x0004)
	unsigned long                                      bReplicateHealthToAll : 1;                                // 0x020C(0x0004)
	unsigned long                                      bForceRMVelocity : 1;                                     // 0x020C(0x0004)
	unsigned long                                      bForceRegularVelocity : 1;                                // 0x020C(0x0004)
	unsigned long                                      bPlayedDeath : 1;                                         // 0x020C(0x0004)
	unsigned long                                      bDesiredRotationSet : 1;                                  // 0x020C(0x0004) (Const)
	unsigned long                                      bLockDesiredRotation : 1;                                 // 0x020C(0x0004) (Const)
	unsigned long                                      bUnlockWhenReached : 1;                                   // 0x020C(0x0004) (Const)
	unsigned long                                      bNeedsBaseTickedFirst : 1;                                // 0x020C(0x0004)
	unsigned long                                      bUsedByMatinee : 1;                                       // 0x020C(0x0004) (Net, Transient)
	unsigned long                                      bRootMotionFromInterpCurve : 1;                           // 0x020C(0x0004) (Net)
	unsigned long                                      bDebugShowCameraLocation : 1;                             // 0x020C(0x0004) (Edit)
	unsigned long                                      bDebugReachable : 1;                                      // 0x020C(0x0004) (Edit)
	unsigned long                                      bFastAttachedMove : 1;                                    // 0x0210(0x0004) (Edit, Net)
	TEnumAsByte<EPhysics>                              WalkingPhysics;                                           // 0x0214(0x0001) (Edit)
	TEnumAsByte<EPathSearchType>                       PathSearchType;                                           // 0x0215(0x0001)
	unsigned char                                      RemoteViewPitch;                                          // 0x0216(0x0001) (Const, Net)
	unsigned char                                      FlashCount;                                               // 0x0217(0x0001) (Net)
	unsigned char                                      FiringMode;                                               // 0x0218(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0219(0x0003) MISSED OFFSET
	float                                              UncrouchTime;                                             // 0x021C(0x0004) (Const)
	float                                              CrouchHeight;                                             // 0x0220(0x0004)
	float                                              CrouchRadius;                                             // 0x0224(0x0004)
	int                                                FullHeight;                                               // 0x0228(0x0004) (Const)
	float                                              NonPreferredVehiclePathMultiplier;                        // 0x022C(0x0004)
	class UPathConstraint*                             PathConstraintList;                                       // 0x0230(0x0004)
	class UPathGoalEvaluator*                          PathGoalList;                                             // 0x0234(0x0004)
	float                                              DesiredSpeed;                                             // 0x0238(0x0004)
	float                                              MaxDesiredSpeed;                                          // 0x023C(0x0004)
	float                                              HearingThreshold;                                         // 0x0240(0x0004) (Edit)
	float                                              Alertness;                                                // 0x0244(0x0004) (Edit)
	float                                              SightRadius;                                              // 0x0248(0x0004) (Edit)
	float                                              PeripheralVision;                                         // 0x024C(0x0004) (Edit)
	float                                              AvgPhysicsTime;                                           // 0x0250(0x0004) (Const)
	float                                              Mass;                                                     // 0x0254(0x0004)
	float                                              Buoyancy;                                                 // 0x0258(0x0004)
	float                                              MeleeRange;                                               // 0x025C(0x0004)
	class ANavigationPoint*                            Anchor;                                                   // 0x0260(0x0004) (Const)
	int                                                AnchorItem;                                               // 0x0264(0x0004) (Const)
	class ANavigationPoint*                            LastAnchor;                                               // 0x0268(0x0004) (Const)
	float                                              FindAnchorFailedTime;                                     // 0x026C(0x0004)
	float                                              LastValidAnchorTime;                                      // 0x0270(0x0004)
	float                                              DestinationOffset;                                        // 0x0274(0x0004)
	float                                              NextPathRadius;                                           // 0x0278(0x0004)
	struct FVector                                     SerpentineDir;                                            // 0x027C(0x000C)
	float                                              SerpentineDist;                                           // 0x0288(0x0004)
	float                                              SerpentineTime;                                           // 0x028C(0x0004)
	float                                              SpawnTime;                                                // 0x0290(0x0004)
	int                                                MaxPitchLimit;                                            // 0x0294(0x0004)
	float                                              GroundSpeed;                                              // 0x0298(0x0004) (Net)
	float                                              WaterSpeed;                                               // 0x029C(0x0004) (Net)
	float                                              AirSpeed;                                                 // 0x02A0(0x0004) (Net)
	float                                              LadderSpeed;                                              // 0x02A4(0x0004)
	float                                              AccelRate;                                                // 0x02A8(0x0004) (Net)
	float                                              JumpZ;                                                    // 0x02AC(0x0004) (Net)
	float                                              OutofWaterZ;                                              // 0x02B0(0x0004)
	float                                              MaxOutOfWaterStepHeight;                                  // 0x02B4(0x0004)
	float                                              AirControl;                                               // 0x02B8(0x0004) (Net)
	float                                              WalkingPct;                                               // 0x02BC(0x0004)
	float                                              MovementSpeedModifier;                                    // 0x02C0(0x0004)
	float                                              CrouchedPct;                                              // 0x02C4(0x0004)
	float                                              MaxFallSpeed;                                             // 0x02C8(0x0004)
	float                                              AIMaxFallSpeedFactor;                                     // 0x02CC(0x0004)
	float                                              BaseEyeHeight;                                            // 0x02D0(0x0004) (Edit)
	float                                              EyeHeight;                                                // 0x02D4(0x0004) (Edit)
	struct FVector                                     Floor;                                                    // 0x02D8(0x000C)
	float                                              SplashTime;                                               // 0x02E4(0x0004)
	class APhysicsVolume*                              HeadVolume;                                               // 0x02E8(0x0004) (Transient)
	float                                              Health;                                                   // 0x02EC(0x0004) (Edit, Net)
	float                                              HealthMax;                                                // 0x02F0(0x0004) (Edit, Net)
	float                                              BreathTime;                                               // 0x02F4(0x0004)
	float                                              UnderWaterTime;                                           // 0x02F8(0x0004)
	float                                              LastPainTime;                                             // 0x02FC(0x0004)
	float                                              KismetDeathDelayTime;                                     // 0x0300(0x0004)
	struct FVector                                     RMVelocity;                                               // 0x0304(0x000C)
	struct FVector                                     noise1spot;                                               // 0x0310(0x000C) (Const)
	float                                              noise1time;                                               // 0x031C(0x0004) (Const)
	class APawn*                                       noise1other;                                              // 0x0320(0x0004) (Const)
	float                                              noise1loudness;                                           // 0x0324(0x0004) (Const)
	struct FVector                                     noise2spot;                                               // 0x0328(0x000C) (Const)
	float                                              noise2time;                                               // 0x0334(0x0004) (Const)
	class APawn*                                       noise2other;                                              // 0x0338(0x0004) (Const)
	float                                              noise2loudness;                                           // 0x033C(0x0004) (Const)
	float                                              SoundDampening;                                           // 0x0340(0x0004)
	float                                              DamageScaling;                                            // 0x0344(0x0004)
	struct FString                                     MenuName;                                                 // 0x0348(0x000C) (Const, Localized, NeedCtorLink)
	class UClass*                                      ControllerClass;                                          // 0x0354(0x0004)
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                                    // 0x0358(0x0004) (Net, EditInline)
	class ALadderVolume*                               OnLadder;                                                 // 0x035C(0x0004)
	struct FName                                       LandMovementState;                                        // 0x0360(0x0008)
	struct FName                                       WaterMovementState;                                       // 0x0368(0x0008)
	class APlayerStart*                                LastStartSpot;                                            // 0x0370(0x0004)
	float                                              LastStartTime;                                            // 0x0374(0x0004)
	struct FVector                                     TakeHitLocation;                                          // 0x0378(0x000C) (Net)
	class UClass*                                      HitDamageType;                                            // 0x0384(0x0004) (Net)
	struct FVector                                     TearOffMomentum;                                          // 0x0388(0x000C) (Net)
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x0394(0x0004) (Edit, ExportObject, Component, EditInline)
	int                                                HeadBoneIndex;                                            // 0x0398(0x0004)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x039C(0x0004) (ExportObject, Component, EditInline)
	float                                              RBPushRadius;                                             // 0x03A0(0x0004) (Edit)
	float                                              RBPushStrength;                                           // 0x03A4(0x0004) (Edit)
	class AVehicle*                                    DrivenVehicle;                                            // 0x03A8(0x0004) (Net)
	float                                              AlwaysRelevantDistanceSquared;                            // 0x03AC(0x0004)
	float                                              VehicleCheckRadius;                                       // 0x03B0(0x0004) (Edit)
	class AController*                                 LastHitBy;                                                // 0x03B4(0x0004)
	float                                              ViewPitchMin;                                             // 0x03B8(0x0004) (Edit)
	float                                              ViewPitchMax;                                             // 0x03BC(0x0004) (Edit)
	int                                                AllowedYawError;                                          // 0x03C0(0x0004)
	struct FRotator                                    DesiredRotation;                                          // 0x03C4(0x000C) (Edit, Const)
	class UClass*                                      InventoryManagerClass;                                    // 0x03D0(0x0004)
	class AInventoryManager*                           InvManager;                                               // 0x03D4(0x0004) (Net)
	class AWeapon*                                     Weapon;                                                   // 0x03D8(0x0004)
	struct FVector                                     FlashLocation;                                            // 0x03DC(0x000C) (Net)
	struct FVector                                     LastFiringFlashLocation;                                  // 0x03E8(0x000C)
	int                                                ShotCount;                                                // 0x03F4(0x0004)
	class UPrimitiveComponent*                         PreRagdollCollisionComponent;                             // 0x03F8(0x0004) (ExportObject, Component, EditInline)
	class URB_BodyInstance*                            PhysicsPushBody;                                          // 0x03FC(0x0004)
	int                                                FailedLandingCount;                                       // 0x0400(0x0004)
	TArray<class UAnimNodeSlot*>                       SlotNodes;                                                // 0x0404(0x000C) (Transient, NeedCtorLink)
	TArray<class UInterpGroup*>                        InterpGroupList;                                          // 0x0410(0x000C) (Transient, NeedCtorLink)
	class UAudioComponent*                             FacialAudioComp;                                          // 0x041C(0x0004) (ExportObject, Transient, Component, EditInline)
	class UMaterialInstanceConstant*                   MIC_PawnMat;                                              // 0x0420(0x0004) (Transient)
	class UMaterialInstanceConstant*                   MIC_PawnHair;                                             // 0x0424(0x0004) (Transient)
	TArray<struct FScalarParameterInterpStruct>        ScalarParameterInterpArray;                               // 0x0428(0x000C) (Edit, NeedCtorLink)
	struct FRootMotionCurve                            RootMotionInterpCurve;                                    // 0x0434(0x001C) (NeedCtorLink)
	float                                              RootMotionInterpRate;                                     // 0x0450(0x0004) (Net)
	float                                              RootMotionInterpCurrentTime;                              // 0x0454(0x0004) (Net)
	struct FVector                                     RootMotionInterpCurveLastValue;                           // 0x0458(0x000C) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Pawn");
		return ptr;
	}


	void OnSetVelocity(class USeqAct_SetVelocity* Action);
	void Speak(class USoundCue* Cue);
	void SetScalarParameterInterp(struct FScalarParameterInterpStruct* ScalarParameterInterp);
	void SetRootMotionInterpCurrentTime(float inTime, float DeltaTime, bool bUpdateSkelPose);
	void SetCinematicMode(bool bInCinematicMode);
	void ZeroMovementVariables();
	void ClearPathStep();
	void DrawPathStep(class UCanvas* C);
	void IncrementPathChild(int Cnt, class UCanvas* C);
	void IncrementPathStep(int Cnt, class UCanvas* C);
	class UPathGoalEvaluator* CreatePathGoalEvaluator(class UClass* GoalEvalClass);
	class UPathConstraint* CreatePathConstraint(class UClass* ConstraintClass);
	void AddGoalEvaluator(class UPathGoalEvaluator* Evaluator);
	void AddPathConstraint(class UPathConstraint* Constraint);
	void ClearConstraints();
	void SoakPause();
	void BecomeViewTarget(class APlayerController* PC);
	void MessagePlayer(const struct FString& msg);
	bool HandleTeleport(TArray<class UObject*> DestList, bool bUpdateRotation, bool bCheckOverlap, float TeleportDistance, TArray<class AVolume*> TeleportVolumes, int PreferredDestIndex);
	void OnTeleport(class USeqAct_Teleport* Action);
	void OnSetMaterial(class USeqAct_SetMaterial* Action);
	float GetDamageScaling();
	void DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action);
	void SpawnedByKismet();
	bool IsStationary();
	struct FVector GetCollisionExtent();
	float GetCollisionHeight();
	float GetCollisionRadius();
	bool CheatFly();
	bool CheatGhost();
	bool CheatWalk();
	void PlayWeaponSwitch(class AWeapon* OldWeapon, class AWeapon* NewWeapon);
	void SetActiveWeapon(class AWeapon* NewWeapon);
	void TossInventory(class AInventory* Inv, const struct FVector& ForceVelocity);
	void ThrowActiveWeapon(bool bDestroyWeap);
	void DrawHUD(class AHUD* H);
	class AInventory* FindInventoryType(class UClass* DesiredClass, bool bAllowSubclass);
	class AInventory* CreateInventory(class UClass* NewInvClass, bool bDoNotActivate);
	void AddDefaultInventory();
	void StopDriving(class AVehicle* V);
	void StartDriving(class AVehicle* V);
	bool CanThrowWeapon();
	void Suicide();
	class AVehicle* GetVehicleBase();
	void PlayLanded(float ImpactVel);
	bool CannotJumpNow();
	void PlayFootStepSound(int FootDown);
	void TornOff();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void SetDyingPhysics();
	void TurnOff();
	void PlayHit(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FVector& Momentum, const struct FTraceHitInfo& HitInfo);
	void PlayDyingSound();
	bool DoJump(bool bUpdating);
	bool CheckWaterJump(struct FVector* WallNormal);
	void TakeDrowningDamage();
	void BreathTimer();
	bool TouchingWaterVolume();
	void HeadVolumeChange(class APhysicsVolume* newHeadVolume);
	void TickSpecial(float DeltaTime);
	void Landed(const struct FVector& HitNormal, class AActor* FloorActor);
	void Falling();
	void DelayTriggerDeath();
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void ThrowWeaponOnDeath();
	bool IsSameTeam(class APawn* Other);
	class ATeamInfo* GetTeam();
	unsigned char GetTeamNum();
	void TakeDamage(float Damage, class AController* InstigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	class AController* SetKillInstigator(class AController* InstigatedBy, class UClass* DamageType);
	void NotifyTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, class AActor* DamageCauser);
	bool TakeRadiusDamageOnBones(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, TArray<struct FName> Bones);
	void PruneDamagedBoneList(TArray<struct FName>* Bones);
	bool HealDamage(float Amount, class AController* Healer, class UClass* DamageType);
	void AdjustDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser, int* InDamage, struct FVector* Momentum);
	void SetMovementPhysics();
	void Gasp();
	void OnGiveInventory(class USeqAct_GiveInventory* inAction);
	void OnAssignController(class USeqAct_AssignController* inAction);
	void ReceivedNewEvent(class USequenceEvent* Evt);
	void SpawnDefaultController();
	void PostBeginPlay();
	void PreBeginPlay();
	void Destroyed();
	void DetachFromController(bool bDestroyController);
	void CrushedBy(class APawn* OtherPawn);
	bool CanBeBaseForPawn(class APawn* aPawn);
	void BaseChange();
	void StuckOnPawnFinished(class APawn* OtherPawn);
	void StuckOnPawn(class APawn* OtherPawn);
	void JumpOffPawn();
	void gibbedBy(class AActor* Other);
	void EncroachedBy(class AActor* Other);
	bool EncroachingOn(class AActor* Other);
	void FaceRotation(const struct FRotator& NewRotation, float DeltaTime);
	void UpdatePawnRotation(const struct FRotator& NewRotation);
	void ClientSetRotation(const struct FRotator& NewRotation);
	void ClientRestart();
	void Restart();
	void TakeFallingDamage();
	void KilledBy(class APawn* EventInstigator);
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void HandleMomentum(const struct FVector& Momentum, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void StartCrouch(float HeightAdjust);
	void EndCrouch(float HeightAdjust);
	void ShouldCrouch(bool bCrouch);
	void UnCrouch();
	void OutsideWorldBounds();
	void FellOutOfWorld(class UClass* dmgType);
	void ClientMessage(const struct FString& S, const struct FName& Type);
	void HandlePickup(class AInventory* Inv);
	bool LineOfSightTo(class AActor* Other);
	void SetMoveTarget(class AActor* NewTarget);
	bool InGodMode();
	void SetViewRotation(const struct FRotator& NewRotation);
	struct FRotator GetAdjustedAimFor(class AWeapon* W, const struct FVector& StartFireLoc);
	bool InFreeCam();
	struct FRotator GetBaseAimRotation();
	struct FVector GetWeaponStartTraceLocation(class AWeapon* CurrentWeapon);
	struct FVector GetEyePosition();
	struct FVector GetPawnViewLocation();
	struct FRotator GetViewRotation();
	void GetActorEyesViewPoint(struct FVector* out_Location, struct FRotator* out_Rotation);
	void ProcessViewRotation(float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	bool IsViewTargetForLocalPlayer(bool bPlayerCamerasOnly, class APlayerController** out_Watcher);
	bool IsFirstPerson();
	bool IsPlayerPawn();
	bool IsLocallyControlled();
	bool IsHumanControlled(class AController* PawnController);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void ClimbLadder(class ALadderVolume* L);
	void EndClimbLadder(class ALadderVolume* OldLadder);
	bool CanSplash();
	void SetWalking(bool bNewIsWalking);
	float RangedAttackTime();
	bool RecommendLongRangedAttack();
	bool CanGrabLadder();
	void DropToGround();
	struct FName GetDefaultCameraMode(class APlayerController* RequestedBy);
	void UnPossessed();
	void UpdateControllerOnPossess(bool bVehicleTransition);
	void PossessedBy(class AController* C, bool bVehicleTransition);
	void NotifyTeamChanged();
	void PlayTeleportEffect(bool bOut, bool bSound);
	struct FString GetHumanReadableName();
	bool NeedToTurn(const struct FVector& targ);
	bool IsFiring();
	bool HasRangedAttack();
	bool FireOnRelease();
	bool TooCloseToAttack(class AActor* Other);
	bool CanAttack(class AActor* Other);
	bool BotFire(bool bFinished);
	void WeaponStoppedFiring(class AWeapon* InWeapon, bool bViaReplication);
	void WeaponFired(class AWeapon* InWeapon, bool bViaReplication, const struct FVector& HitLocation);
	void FlashLocationUpdated(class AWeapon* InWeapon, const struct FVector& InFlashLocation, bool bViaReplication);
	void ClearFlashLocation(class AWeapon* InWeapon);
	void SetFlashLocation(class AWeapon* InWeapon, unsigned char InFiringMode, const struct FVector& NewLoc);
	void ClearFlashCount(class AWeapon* InWeapon);
	void FlashCountUpdated(class AWeapon* InWeapon, unsigned char InFlashCount, bool bViaReplication);
	void IncrementFlashCount(class AWeapon* InWeapon, unsigned char InFiringMode);
	void FiringModeUpdated(class AWeapon* InWeapon, unsigned char InFiringMode, bool bViaReplication);
	void SetFiringMode(class AWeapon* InWeapon, unsigned char InFiringMode);
	unsigned char GetWeaponFiringMode(class AWeapon* InWeapon);
	void StopFire(unsigned char FireModeNum);
	void StartFire(unsigned char FireModeNum);
	bool StopFiring();
	void Reset();
	void PlayerChangedTeam();
	void SetBaseEyeheight();
	bool SpecialMoveThruEdge(TEnumAsByte<ENavMeshEdgeType> EdgeType, int Dir, const struct FVector& MoveStart, const struct FVector& MoveDest, class AActor* RelActor, int RelItem, class UNavigationHandle* NavHandle);
	bool SpecialMoveTo(class ANavigationPoint* Start, class ANavigationPoint* End, class AActor* Next);
	bool TermRagdoll();
	bool InitRagdoll();
	void GetBoundingCylinder(float* CollisionRadius, float* CollisionHeight);
	bool ReachedDesiredRotation();
	void SetPushesRigidBodies(bool NewPush);
	void ForceCrouch();
	bool ReachedPoint(const struct FVector& Point, class AActor* NewAnchor);
	bool ReachedDestination(class AActor* Goal);
	class ANavigationPoint* GetBestAnchor(class AActor* TestActor, const struct FVector& TestLocation, bool bStartPoint, bool bOnlyCheckVisible, float* out_Dist);
	void SetAnchor(class ANavigationPoint* NewAnchor);
	void SetRemoteViewPitch(int NewRemoteViewPitch);
	bool IsInvisible();
	bool IsValidEnemyTargetFor(class APlayerReplicationInfo* PRI, bool bNoPRIisEnemy);
	float GetFallDuration();
	bool SuggestJumpVelocity(const struct FVector& Destination, const struct FVector& Start, bool bRequireFallLanding, struct FVector* JumpVelocity);
	bool ValidAnchor();
	struct FVector AdjustDestination(class AActor* GoalActor, const struct FVector& Dest);
	bool IsAliveAndWell();
	void ReplicatedEvent(const struct FName& VarName);
	void SetSkelControlScale(const struct FName& SkelControlName, float Scale);
	void SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight);
	class UFaceFXAsset* GetActorFaceFXAsset();
	void FaceFXAudioFinished(class UAudioComponent* AC);
	void OnPlayFaceFXAnim(class USeqAct_PlayFaceFXAnim* inAction);
	bool CanActorPlayFaceFXAnim();
	bool IsActorPlayingFaceFXAnim();
	class UAudioComponent* GetFaceFXAudioComponent();
	void StopActorFaceFXAnim();
	bool PlayActorFaceFXAnim(class UFaceFXAnimSet* AnimSet, const struct FString& GroupName, const struct FString& SeqName, class USoundCue* SoundCueToPlay);
	void MAT_FinishAIGroup();
	void MAT_BeginAIGroup(const struct FVector& StartLoc, const struct FRotator& StartRot);
	void FinishAIGroup();
	void BeginAIGroup();
	void InterpolationFinished(class USeqAct_Interp* InterpAction);
	void InterpolationStarted(class USeqAct_Interp* InterpAction, class UInterpGroupInst* GroupInst);
	void MAT_SetSkelControlStrength(const struct FName& SkelControlName, float ControlStrength);
	void MAT_SetSkelControlScale(const struct FName& SkelControlName, float Scale);
	void MAT_SetMorphWeight(const struct FName& MorphNodeName, float MorphWeight);
	void MAT_SetAnimWeights(TArray<struct FAnimSlotInfo> SlotInfos);
	void MAT_SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void SetAnimPosition(const struct FName& SlotName, int ChannelIndex, const struct FName& InAnimSeqName, float InPosition, bool bFireNotifies, bool bLooping, bool bEnableRootMotion);
	void MAT_FinishAnimControl(class UInterpGroup* InInterpGroup);
	void FinishAnimControl(class UInterpGroup* InInterpGroup);
	void MAT_BeginAnimControl(class UInterpGroup* InInterpGroup);
	void BeginAnimControl(class UInterpGroup* InInterpGroup);
	bool RestoreAnimSetsToDefault();
	void AnimSetListUpdated();
	void AddAnimSets(TArray<class UAnimSet*>* CustomAnimSets);
	void BuildScriptAnimSetList();
	void UpdateAnimSetList();
	void ClearAnimNodes();
	void CacheAnimNodes();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	bool IsDesiredRotationLocked();
	bool IsDesiredRotationInUse();
	void CheckDesiredRotation();
	void ResetDesiredRotation();
	void LockDesiredRotation(bool Lock, bool InUnlockWhenReached);
	bool SetDesiredRotation(const struct FRotator& TargetDesiredRotation, bool InLockDesiredRotation, bool InUnlockWhenReached, float InterpolationTime, bool bResetRotationRate);
	bool PickWallAdjust(const struct FVector& WallHitNormal, class AActor* HitActor);
};


// Class Engine.AnimNotify_PawnMaterialParam
// 0x000C (0x004C - 0x0040)
class UAnimNotify_PawnMaterialParam : public UAnimNotify_Scripted
{
public:
	TArray<struct FScalarParameterInterpStruct>        ScalarParameterInterpArray;                               // 0x0040(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_PawnMaterialParam");
		return ptr;
	}


	void Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};


// Class Engine.AnimNotify_ViewShake
// 0x0050 (0x0090 - 0x0040)
class UAnimNotify_ViewShake : public UAnimNotify_Scripted
{
public:
	float                                              Duration;                                                 // 0x0040(0x0004) (EditConst)
	struct FVector                                     RotAmplitude;                                             // 0x0044(0x000C) (EditConst)
	struct FVector                                     RotFrequency;                                             // 0x0050(0x000C) (EditConst)
	struct FVector                                     LocAmplitude;                                             // 0x005C(0x000C) (EditConst)
	struct FVector                                     LocFrequency;                                             // 0x0068(0x000C) (EditConst)
	float                                              FOVAmplitude;                                             // 0x0074(0x0004) (EditConst)
	float                                              FOVFrequency;                                             // 0x0078(0x0004) (EditConst)
	unsigned long                                      bDoControllerVibration : 1;                               // 0x007C(0x0004) (Edit)
	unsigned long                                      bUseBoneLocation : 1;                                     // 0x007C(0x0004) (Edit)
	float                                              ShakeRadius;                                              // 0x0080(0x0004) (Edit)
	struct FName                                       BoneName;                                                 // 0x0084(0x0008) (Edit)
	class UCameraShake*                                ShakeParams;                                              // 0x008C(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_ViewShake");
		return ptr;
	}


	void Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};


// Class Engine.AnimNotify_Sound
// 0x001C (0x005C - 0x0040)
class UAnimNotify_Sound : public UAnimNotify
{
public:
	class USoundCue*                                   SoundCue;                                                 // 0x0040(0x0004) (Edit)
	unsigned long                                      bFollowActor : 1;                                         // 0x0044(0x0004) (Edit)
	unsigned long                                      bIgnoreIfActorHidden : 1;                                 // 0x0044(0x0004) (Edit)
	struct FName                                       BoneName;                                                 // 0x0048(0x0008) (Edit)
	float                                              PercentToPlay;                                            // 0x0050(0x0004) (Edit)
	float                                              VolumeMultiplier;                                         // 0x0054(0x0004) (Edit)
	float                                              PitchMultiplier;                                          // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Sound");
		return ptr;
	}

};


// Class Engine.AnimNotify_Trails
// 0x0058 (0x0098 - 0x0040)
class UAnimNotify_Trails : public UAnimNotify
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0040(0x0004) (Edit)
	class USkeletalMesh*                               SampledSkeletalMesh;                                      // 0x0044(0x0004) (Edit, EditConst)
	unsigned long                                      bIsExtremeContent : 1;                                    // 0x0048(0x0004) (Edit)
	unsigned long                                      bPreview : 1;                                             // 0x0048(0x0004) (Edit)
	unsigned long                                      bPreviewForceExplicit : 1;                                // 0x0048(0x0004) (Edit)
	unsigned long                                      bSkipIfOwnerIsHidden : 1;                                 // 0x0048(0x0004) (Edit)
	unsigned long                                      bResampleRequired : 1;                                    // 0x0048(0x0004)
	struct FName                                       FirstEdgeSocketName;                                      // 0x004C(0x0008) (Edit)
	struct FName                                       ControlPointSocketName;                                   // 0x0054(0x0008) (Edit)
	struct FName                                       SecondEdgeSocketName;                                     // 0x005C(0x0008) (Edit)
	float                                              LastStartTime;                                            // 0x0064(0x0004)
	float                                              EndTime;                                                  // 0x0068(0x0004)
	float                                              SampleTimeStep;                                           // 0x006C(0x0004) (Deprecated)
	TArray<struct FTrailSamplePoint>                   TrailSampleData;                                          // 0x0070(0x000C) (NeedCtorLink, Deprecated)
	float                                              SamplesPerSecond;                                         // 0x007C(0x0004) (Edit)
	TArray<struct FTrailSample>                        TrailSampledData;                                         // 0x0080(0x000C) (NeedCtorLink)
	float                                              CurrentTime;                                              // 0x008C(0x0004) (Transient)
	float                                              TimeStep;                                                 // 0x0090(0x0004) (Transient)
	class UAnimNodeSequence*                           AnimNodeSeq;                                              // 0x0094(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Trails");
		return ptr;
	}


	int GetNumSteps(int InLastTrailIndex);
};


// Class Engine.AnimObject
// 0x0024 (0x0060 - 0x003C)
class UAnimObject : public UObject
{
public:
	int                                                DrawWidth;                                                // 0x003C(0x0004)
	int                                                DrawHeight;                                               // 0x0040(0x0004)
	int                                                NodePosX;                                                 // 0x0044(0x0004)
	int                                                NodePosY;                                                 // 0x0048(0x0004)
	int                                                OutDrawY;                                                 // 0x004C(0x0004)
	struct FString                                     CategoryDesc;                                             // 0x0050(0x000C) (NeedCtorLink)
	class USkeletalMeshComponent*                      SkelComponent;                                            // 0x005C(0x0004) (Const, ExportObject, Transient, Component, DuplicateTransient, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimObject");
		return ptr;
	}

};


// Class Engine.AnimNode
// 0x0080 (0x00E0 - 0x0060)
class UAnimNode : public UAnimObject
{
public:
	unsigned long                                      bRelevant : 1;                                            // 0x0060(0x0004) (Const, Transient)
	unsigned long                                      bJustBecameRelevant : 1;                                  // 0x0060(0x0004) (Const, Transient)
	unsigned long                                      bTickDuringPausedAnims : 1;                               // 0x0060(0x0004) (Edit)
	unsigned long                                      bEditorOnly : 1;                                          // 0x0060(0x0004) (Const)
	unsigned long                                      bDisableCaching : 1;                                      // 0x0060(0x0004) (Const, Transient)
	unsigned long                                      bCallScriptEventOnInit : 1;                               // 0x0060(0x0004) (Edit)
	unsigned long                                      bCallScriptEventOnBecomeRelevant : 1;                     // 0x0060(0x0004) (Edit)
	unsigned long                                      bCallScriptEventOnCeaseRelevant : 1;                      // 0x0060(0x0004) (Edit)
	int                                                NodeTickTag;                                              // 0x0064(0x0004) (Const, Transient)
	int                                                NodeInitTag;                                              // 0x0068(0x0004) (Const, Transient)
	int                                                NodeEndEventTick;                                         // 0x006C(0x0004) (Const, Transient)
	int                                                TickArrayIndex;                                           // 0x0070(0x0004) (Const)
	int                                                NodeCachedAtomsTag;                                       // 0x0074(0x0004) (Const, Transient)
	float                                              NodeTotalWeight;                                          // 0x0078(0x0004) (Const)
	TArray<class UAnimNodeBlendBase*>                  ParentNodes;                                              // 0x007C(0x000C) (DuplicateTransient, NeedCtorLink)
	struct FName                                       NodeName;                                                 // 0x0088(0x0008) (Edit)
	TArray<struct FBoneAtom>                           CachedBoneAtoms;                                          // 0x0090(0x000C) (Transient, NeedCtorLink)
	unsigned char                                      CachedNumDesiredBones;                                    // 0x009C(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	struct FBoneAtom                                   CachedRootMotionDelta;                                    // 0x00A0(0x0020) (Transient)
	int                                                bCachedHasRootMotion;                                     // 0x00C0(0x0004) (Transient)
	TArray<struct FCurveKey>                           CachedCurveKeys;                                          // 0x00C4(0x000C) (Transient, NeedCtorLink)
	int                                                SearchTag;                                                // 0x00D0(0x0004) (Transient)
	TArray<struct FCurveKey>                           LastUpdatedAnimMorphKeys;                                 // 0x00D4(0x000C) (Edit, Transient, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNode");
		return ptr;
	}


	void ReplayAnim();
	void StopAnim();
	void PlayAnim(bool bLoop, float Rate, float StartTime);
	class UAnimNode* FindAnimNode(const struct FName& InNodeName);
	void OnCeaseRelevant();
	void OnBecomeRelevant();
	void OnInit();
};


// Class Engine.AnimNodeBlendBase
// 0x0011 (0x00F1 - 0x00E0)
class UAnimNodeBlendBase : public UAnimNode
{
public:
	TArray<struct FAnimBlendChild>                     Children;                                                 // 0x00E0(0x000C) (ExportObject, EditFixedSize, NeedCtorLink, EditInline)
	unsigned long                                      bFixNumChildren : 1;                                      // 0x00EC(0x0004)
	TEnumAsByte<EAlphaBlendType>                       BlendType;                                                // 0x00F0(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendBase");
		return ptr;
	}


	void ReplayAnim();
	void StopAnim();
	void PlayAnim(bool bLoop, float Rate, float StartTime);
};


// Class Engine.AnimNode_MultiBlendPerBone
// 0x0014 (0x0105 - 0x00F1)
class UAnimNode_MultiBlendPerBone : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	class APawn*                                       PawnOwner;                                                // 0x00F4(0x0004) (Const, Transient)
	TArray<struct FPerBoneMaskInfo>                    MaskList;                                                 // 0x00F8(0x000C) (Edit, EditFixedSize, NeedCtorLink, EditInline)
	TEnumAsByte<EBlendType>                            RotationBlendType;                                        // 0x0104(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNode_MultiBlendPerBone");
		return ptr;
	}


	void SetMaskWeight(int MaskIndex, float DesiredWeight, float BlendTime);
};


// Class Engine.AnimNodeAimOffset
// 0x004B (0x013C - 0x00F1)
class UAnimNodeAimOffset : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	struct FVector2D                                   Aim;                                                      // 0x00F4(0x0008) (Edit)
	struct FVector2D                                   AngleOffset;                                              // 0x00FC(0x0008) (Edit)
	unsigned long                                      bForceAimDir : 1;                                         // 0x0104(0x0004) (Edit)
	unsigned long                                      bBakeFromAnimations : 1;                                  // 0x0104(0x0004) (Edit)
	unsigned long                                      bPassThroughWhenNotRendered : 1;                          // 0x0104(0x0004) (Edit)
	unsigned long                                      bSynchronizeNodesInEditor : 1;                            // 0x0104(0x0004) (Edit)
	int                                                PassThroughAtOrAboveLOD;                                  // 0x0108(0x0004) (Edit)
	TEnumAsByte<EAnimAimDir>                           ForcedAimDir;                                             // 0x010C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x010D(0x0003) MISSED OFFSET
	TArray<unsigned char>                              RequiredBones;                                            // 0x0110(0x000C) (Transient, NeedCtorLink)
	TArray<unsigned char>                              AimCpntIndexLUT;                                          // 0x011C(0x000C) (Transient, NeedCtorLink)
	class UAnimNodeAimOffset*                          TemplateNode;                                             // 0x0128(0x0004) (Transient)
	TArray<struct FAimOffsetProfile>                   Profiles;                                                 // 0x012C(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	int                                                CurrentProfileIndex;                                      // 0x0138(0x0004) (Edit, Const, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeAimOffset");
		return ptr;
	}


	void SetActiveProfileByIndex(int ProfileIndex);
	void SetActiveProfileByName(const struct FName& ProfileName);
};


// Class Engine.AnimNodeBlend
// 0x0013 (0x0104 - 0x00F1)
class UAnimNodeBlend : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	float                                              Child2Weight;                                             // 0x00F4(0x0004)
	float                                              Child2WeightTarget;                                       // 0x00F8(0x0004)
	float                                              BlendTimeToGo;                                            // 0x00FC(0x0004)
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                            // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlend");
		return ptr;
	}


	void SetBlendTarget(float BlendTarget, float BlendTime);
};


// Class Engine.AnimNodeAdditiveBlending
// 0x0004 (0x0108 - 0x0104)
class UAnimNodeAdditiveBlending : public UAnimNodeBlend
{
public:
	unsigned long                                      bPassThroughWhenNotRendered : 1;                          // 0x0104(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeAdditiveBlending");
		return ptr;
	}


	void SetBlendTarget(float BlendTarget, float BlendTime);
};


// Class Engine.AnimNodeBlendPerBone
// 0x0028 (0x012C - 0x0104)
class UAnimNodeBlendPerBone : public UAnimNodeBlend
{
public:
	unsigned long                                      bForceLocalSpaceBlend : 1;                                // 0x0104(0x0004) (Edit, Const)
	TArray<struct FName>                               BranchStartBoneName;                                      // 0x0108(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      Child2PerBoneWeight;                                      // 0x0114(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              LocalToCompReqBones;                                      // 0x0120(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendPerBone");
		return ptr;
	}


	void SetBlendTarget(float BlendTarget, float BlendTime);
};


// Class Engine.AnimNodeCrossfader
// 0x0010 (0x0114 - 0x0104)
class UAnimNodeCrossfader : public UAnimNodeBlend
{
public:
	struct FName                                       DefaultAnimSeqName;                                       // 0x0104(0x0008) (Edit)
	unsigned long                                      bDontBlendOutOneShot : 1;                                 // 0x010C(0x0004) (Const)
	float                                              PendingBlendOutTimeOneShot;                               // 0x0110(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeCrossfader");
		return ptr;
	}


	class UAnimNodeSequence* GetActiveChild();
	struct FName GetAnimName();
	void BlendToLoopingAnim(const struct FName& AnimSeqName, float BlendInTime, float Rate);
	void PlayOneShotAnim(const struct FName& AnimSeqName, float BlendInTime, float BlendOutTime, bool bDontBlendOut, float Rate);
};


// Class Engine.AnimNodePlayCustomAnim
// 0x0008 (0x010C - 0x0104)
class UAnimNodePlayCustomAnim : public UAnimNodeBlend
{
public:
	unsigned long                                      bIsPlayingCustomAnim : 1;                                 // 0x0104(0x0004)
	float                                              CustomPendingBlendOutTime;                                // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodePlayCustomAnim");
		return ptr;
	}


	void SetRootBoneAxisOption(TEnumAsByte<ERootBoneAxis> AxisX, TEnumAsByte<ERootBoneAxis> AxisY, TEnumAsByte<ERootBoneAxis> AxisZ);
	class UAnimNodeSequence* GetCustomAnimNodeSeq();
	void SetActorAnimEndNotification(bool bNewStatus);
	void SetCustomAnim(const struct FName& AnimName);
	void StopCustomAnim(float BlendOutTime);
	void PlayCustomAnimByDuration(const struct FName& AnimName, float Duration, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride);
	float PlayCustomAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride);
};


// Class Engine.AnimNodeBlendDirectional
// 0x002F (0x0120 - 0x00F1)
class UAnimNodeBlendDirectional : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	float                                              DirDegreesPerSecond;                                      // 0x00F4(0x0004) (Edit)
	float                                              DirAngle;                                                 // 0x00F8(0x0004)
	int                                                SingleAnimAtOrAboveLOD;                                   // 0x00FC(0x0004) (Edit)
	struct FRotator                                    RotationOffset;                                           // 0x0100(0x000C)
	unsigned long                                      bUseAcceleration : 1;                                     // 0x010C(0x0004) (Edit)
	unsigned long                                      bScaledBySpeed : 1;                                       // 0x010C(0x0004) (Edit)
	unsigned long                                      bKeepAngleAtZero : 1;                                     // 0x010C(0x0004) (Edit)
	float                                              SwitchDirBlendTime;                                       // 0x0110(0x0004) (Edit)
	struct FVector                                     LastVelocity;                                             // 0x0114(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendDirectional");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendList
// 0x0023 (0x0114 - 0x00F1)
class UAnimNodeBlendList : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	TArray<float>                                      TargetWeight;                                             // 0x00F4(0x000C) (NeedCtorLink)
	float                                              BlendTimeToGo;                                            // 0x0100(0x0004)
	int                                                ActiveChildIndex;                                         // 0x0104(0x0004)
	unsigned long                                      bPlayActiveChild : 1;                                     // 0x0108(0x0004) (Edit)
	unsigned long                                      bForceChildFullWeightWhenBecomingRelevant : 1;            // 0x0108(0x0004) (Edit)
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                            // 0x0108(0x0004) (Edit)
	float                                              SliderPosition;                                           // 0x010C(0x0004) (Const)
	int                                                EditorActiveChildIndex;                                   // 0x0110(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendList");
		return ptr;
	}


	void SetActiveChild(int ChildIndex, float BlendTime);
};


// Class Engine.AnimNodeBlendByBase
// 0x0018 (0x012C - 0x0114)
class UAnimNodeBlendByBase : public UAnimNodeBlendList
{
public:
	TEnumAsByte<EBaseBlendType>                        Type;                                                     // 0x0114(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0115(0x0003) MISSED OFFSET
	struct FName                                       ActorTag;                                                 // 0x0118(0x0008) (Edit)
	class UClass*                                      ActorClass;                                               // 0x0120(0x0004) (Edit)
	float                                              BlendTime;                                                // 0x0124(0x0004) (Edit)
	class AActor*                                      CachedBase;                                               // 0x0128(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendByBase");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendByPhysics
// 0x0000 (0x0114 - 0x0114)
class UAnimNodeBlendByPhysics : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendByPhysics");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendByPosture
// 0x0000 (0x0114 - 0x0114)
class UAnimNodeBlendByPosture : public UAnimNodeBlendList
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendByPosture");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendByProperty
// 0x0038 (0x014C - 0x0114)
class UAnimNodeBlendByProperty : public UAnimNodeBlendList
{
public:
	struct FName                                       PropertyName;                                             // 0x0114(0x0008) (Edit)
	unsigned long                                      bUseOwnersBase : 1;                                       // 0x011C(0x0004) (Edit)
	unsigned long                                      bForceUpdate : 1;                                         // 0x011C(0x0004) (Const, Transient)
	unsigned long                                      bUseSpecificBlendTimes : 1;                               // 0x011C(0x0004) (Edit)
	unsigned long                                      bSynchronizeNodesInEditor : 1;                            // 0x011C(0x0004) (Edit)
	struct FName                                       CachedPropertyName;                                       // 0x0120(0x0008) (Transient)
	struct FPointer                                    CachedFloatProperty;                                      // 0x0128(0x0004) (Const, Native, Transient)
	struct FPointer                                    CachedBoolProperty;                                       // 0x012C(0x0004) (Const, Native, Transient)
	struct FPointer                                    CachedByteProperty;                                       // 0x0130(0x0004) (Const, Native, Transient)
	class AActor*                                      CachedOwner;                                              // 0x0134(0x0004) (Transient)
	float                                              BlendTime;                                                // 0x0138(0x0004) (Edit)
	float                                              FloatPropMin;                                             // 0x013C(0x0004) (Edit)
	float                                              FloatPropMax;                                             // 0x0140(0x0004) (Edit)
	float                                              BlendToChild1Time;                                        // 0x0144(0x0004) (Edit)
	float                                              BlendToChild2Time;                                        // 0x0148(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendByProperty");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendBySpeed
// 0x0030 (0x0144 - 0x0114)
class UAnimNodeBlendBySpeed : public UAnimNodeBlendList
{
public:
	float                                              Speed;                                                    // 0x0114(0x0004)
	int                                                LastChannel;                                              // 0x0118(0x0004)
	float                                              BlendUpTime;                                              // 0x011C(0x0004) (Edit)
	float                                              BlendDownTime;                                            // 0x0120(0x0004) (Edit)
	float                                              BlendDownPerc;                                            // 0x0124(0x0004) (Edit)
	TArray<float>                                      Constraints;                                              // 0x0128(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bUseAcceleration : 1;                                     // 0x0134(0x0004) (Edit)
	float                                              BlendUpDelay;                                             // 0x0138(0x0004) (Edit)
	float                                              BlendDownDelay;                                           // 0x013C(0x0004) (Edit)
	float                                              BlendDelayRemaining;                                      // 0x0140(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendBySpeed");
		return ptr;
	}

};


// Class Engine.AnimNodeRandom
// 0x0018 (0x012C - 0x0114)
class UAnimNodeRandom : public UAnimNodeBlendList
{
public:
	TArray<struct FRandomAnimInfo>                     RandomInfo;                                               // 0x0114(0x000C) (Edit, EditFixedSize, NeedCtorLink, EditInline)
	class UAnimNodeSequence*                           PlayingSeqNode;                                           // 0x0120(0x0004) (Transient)
	int                                                PendingChildIndex;                                        // 0x0124(0x0004) (Transient)
	unsigned long                                      bPickedPendingChildIndex : 1;                             // 0x0128(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeRandom");
		return ptr;
	}

};


// Class Engine.AnimNodeBlendMultiBone
// 0x001B (0x010C - 0x00F1)
class UAnimNodeBlendMultiBone : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	TArray<struct FChildBoneBlendInfo>                 BlendTargetList;                                          // 0x00F4(0x000C) (Edit, NeedCtorLink)
	TArray<unsigned char>                              SourceRequiredBones;                                      // 0x0100(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeBlendMultiBone");
		return ptr;
	}


	void SetTargetStartBone(int TargetIdx, const struct FName& StartBoneName, float PerBoneIncrease);
};


// Class Engine.AnimNodeMirror
// 0x0007 (0x00F8 - 0x00F1)
class UAnimNodeMirror : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	unsigned long                                      bEnableMirroring : 1;                                     // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeMirror");
		return ptr;
	}

};


// Class Engine.AnimNodeScalePlayRate
// 0x0007 (0x00F8 - 0x00F1)
class UAnimNodeScalePlayRate : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	float                                              ScaleByValue;                                             // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeScalePlayRate");
		return ptr;
	}

};


// Class Engine.AnimNodeScaleRateBySpeed
// 0x0004 (0x00FC - 0x00F8)
class UAnimNodeScaleRateBySpeed : public UAnimNodeScalePlayRate
{
public:
	float                                              BaseSpeed;                                                // 0x00F8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeScaleRateBySpeed");
		return ptr;
	}

};


// Class Engine.AnimNodeSlot
// 0x0023 (0x0114 - 0x00F1)
class UAnimNodeSlot : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	unsigned long                                      bIsPlayingCustomAnim : 1;                                 // 0x00F4(0x0004) (Const)
	unsigned long                                      bEarlyAnimEndNotify : 1;                                  // 0x00F4(0x0004) (Edit)
	unsigned long                                      bSkipBlendWhenNotRendered : 1;                            // 0x00F4(0x0004) (Edit)
	unsigned long                                      bAdditiveAnimationsOverrideSource : 1;                    // 0x00F4(0x0004) (Edit)
	unsigned long                                      bIsBeingUsedByInterpGroup : 1;                            // 0x00F4(0x0004) (Const, Transient)
	unsigned long                                      bDontAddToAlwaysTickArray : 1;                            // 0x00F4(0x0004) (Edit)
	float                                              PendingBlendOutTime;                                      // 0x00F8(0x0004) (Const)
	int                                                CustomChildIndex;                                         // 0x00FC(0x0004) (Const)
	int                                                TargetChildIndex;                                         // 0x0100(0x0004) (Const)
	TArray<float>                                      TargetWeight;                                             // 0x0104(0x000C) (NeedCtorLink)
	float                                              BlendTimeToGo;                                            // 0x0110(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSlot");
		return ptr;
	}


	void TickChildWeights(float DeltaSeconds);
	void SetRootBoneRotationOption(TEnumAsByte<ERootRotationOption> AxisX, TEnumAsByte<ERootRotationOption> AxisY, TEnumAsByte<ERootRotationOption> AxisZ);
	void SetRootBoneAxisOption(TEnumAsByte<ERootBoneAxis> AxisX, TEnumAsByte<ERootBoneAxis> AxisY, TEnumAsByte<ERootBoneAxis> AxisZ);
	class UAnimNodeSequence* GetCustomAnimNodeSeq();
	void SetActorAnimEndNotification(bool bNewStatus);
	void SetCustomAnim(const struct FName& AnimName);
	void SetAllowPauseAnims(bool bSet);
	void StopCustomAnim(float BlendOutTime);
	struct FName GetPlayedAnimation();
	bool PlayCustomAnimByDuration(const struct FName& AnimName, float Duration, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride);
	float PlayCustomAnim(const struct FName& AnimName, float Rate, float BlendInTime, float BlendOutTime, bool bLooping, bool bOverride, float StartTime, float EndTime);
};


// Class Engine.AnimNodeSynch
// 0x000F (0x0100 - 0x00F1)
class UAnimNodeSynch : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	TArray<struct FSynchGroup>                         Groups;                                                   // 0x00F4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSynch");
		return ptr;
	}


	void SetGroupRateScale(const struct FName& GroupName, float NewRateScale);
	float GetRelativePosition(const struct FName& GroupName);
	void ForceRelativePosition(const struct FName& GroupName, float RelativePosition);
	class UAnimNodeSequence* GetMasterNodeOfGroup(const struct FName& GroupName);
	void RemoveNodeFromGroup(class UAnimNodeSequence* SeqNode, const struct FName& GroupName);
	void AddNodeToGroup(class UAnimNodeSequence* SeqNode, const struct FName& GroupName);
};


// Class Engine.AnimTree
// 0x0107 (0x01F8 - 0x00F1)
class UAnimTree : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F1(0x0003) MISSED OFFSET
	class UAnimTree*                                   AnimTreeTemplate;                                         // 0x00F4(0x0004) (Edit, Const)
	unsigned long                                      bEnablePooling : 1;                                       // 0x00F8(0x0004) (Edit)
	unsigned long                                      bUseSavedPose : 1;                                        // 0x00F8(0x0004)
	unsigned long                                      bBeingEdited : 1;                                         // 0x00F8(0x0004) (Transient)
	unsigned long                                      bParentNodeArrayBuilt : 1;                                // 0x00F8(0x0004) (DuplicateTransient)
	unsigned long                                      bRebuildAnimTickArray : 1;                                // 0x00F8(0x0004)
	TArray<struct FAnimGroup>                          AnimGroups;                                               // 0x00FC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               PrioritizedSkelBranches;                                  // 0x0108(0x000C) (NeedCtorLink, Deprecated)
	TArray<struct FName>                               ComposePrePassBoneNames;                                  // 0x0114(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               ComposePostPassBoneNames;                                 // 0x0120(0x000C) (Edit, NeedCtorLink)
	TArray<class UMorphNodeBase*>                      RootMorphNodes;                                           // 0x012C(0x000C) (ExportObject, NeedCtorLink, EditInline)
	TArray<struct FSkelControlListHead>                SkelControlLists;                                         // 0x0138(0x000C) (ExportObject, NeedCtorLink, EditInline)
	TArray<struct FBoneAtom>                           SavedPose;                                                // 0x0144(0x000C) (NeedCtorLink)
	int                                                MorphConnDrawY;                                           // 0x0150(0x0004)
	float                                              PreviewPlayRate;                                          // 0x0154(0x0004) (Edit)
	class USkeletalMesh*                               PreviewSkelMesh;                                          // 0x0158(0x0004) (Deprecated)
	class USkeletalMesh*                               SocketSkelMesh;                                           // 0x015C(0x0004) (Deprecated)
	class UStaticMesh*                                 SocketStaticMesh;                                         // 0x0160(0x0004) (Deprecated)
	struct FName                                       SocketName;                                               // 0x0164(0x0008) (Deprecated)
	TArray<class UAnimSet*>                            PreviewAnimSets;                                          // 0x016C(0x000C) (NeedCtorLink, Deprecated)
	TArray<class UMorphTargetSet*>                     PreviewMorphSets;                                         // 0x0178(0x000C) (NeedCtorLink, Deprecated)
	TArray<struct FPreviewSkelMeshStruct>              PreviewMeshList;                                          // 0x0184(0x000C) (Edit, NeedCtorLink)
	int                                                PreviewMeshIndex;                                         // 0x0190(0x0004)
	TArray<struct FPreviewSocketStruct>                PreviewSocketList;                                        // 0x0194(0x000C) (Edit, NeedCtorLink)
	int                                                PreviewSocketIndex;                                       // 0x01A0(0x0004)
	TArray<struct FPreviewAnimSetsStruct>              PreviewAnimSetList;                                       // 0x01A4(0x000C) (Edit, NeedCtorLink)
	int                                                PreviewAnimSetListIndex;                                  // 0x01B0(0x0004)
	int                                                PreviewAnimSetIndex;                                      // 0x01B4(0x0004)
	struct FVector                                     PreviewCamPos;                                            // 0x01B8(0x000C)
	struct FRotator                                    PreviewCamRot;                                            // 0x01C4(0x000C)
	struct FVector                                     PreviewFloorPos;                                          // 0x01D0(0x000C)
	int                                                PreviewFloorYaw;                                          // 0x01DC(0x0004)
	TArray<class UAnimNodeFrame*>                      AnimNodeFrames;                                           // 0x01E0(0x000C) (NeedCtorLink)
	TArray<class UAnimNode*>                           AnimTickArray;                                            // 0x01EC(0x000C) (DuplicateTransient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimTree");
		return ptr;
	}


	int GetGroupIndex(const struct FName& GroupName);
	float GetGroupRateScale(const struct FName& GroupName);
	void SetGroupRateScale(const struct FName& GroupName, float NewRateScale);
	float GetGroupRelativePosition(const struct FName& GroupName);
	void ForceGroupRelativePosition(const struct FName& GroupName, float RelativePosition);
	class UAnimNodeSequence* GetGroupNotifyMaster(const struct FName& GroupName);
	class UAnimNodeSequence* GetGroupSynchMaster(const struct FName& GroupName);
	bool SetAnimGroupForNode(class UAnimNodeSequence* SeqNode, const struct FName& GroupName, bool bCreateIfNotFound);
	void SetUseSavedPose(bool bUseSaved);
	class UMorphNodeBase* FindMorphNode(const struct FName& InNodeName);
	class USkelControlBase* FindSkelControl(const struct FName& InControlName);
};


// Class Engine.AnimNodeSequence
// 0x0060 (0x0140 - 0x00E0)
class UAnimNodeSequence : public UAnimNode
{
public:
	struct FName                                       AnimSeqName;                                              // 0x00E0(0x0008) (Edit, Const)
	float                                              Rate;                                                     // 0x00E8(0x0004) (Edit)
	unsigned long                                      bPlaying : 1;                                             // 0x00EC(0x0004) (Edit)
	unsigned long                                      bLooping : 1;                                             // 0x00EC(0x0004) (Edit)
	unsigned long                                      bCauseActorAnimEnd : 1;                                   // 0x00EC(0x0004) (Edit)
	unsigned long                                      bCauseActorAnimPlay : 1;                                  // 0x00EC(0x0004) (Edit)
	unsigned long                                      bZeroRootRotation : 1;                                    // 0x00EC(0x0004) (Edit)
	unsigned long                                      bZeroRootTranslation : 1;                                 // 0x00EC(0x0004) (Edit)
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;                      // 0x00EC(0x0004) (Edit)
	unsigned long                                      bNoNotifies : 1;                                          // 0x00EC(0x0004) (Edit)
	unsigned long                                      bForceRefposeWhenNotPlaying : 1;                          // 0x00EC(0x0004) (Edit)
	unsigned long                                      bIsIssuingNotifies : 1;                                   // 0x00EC(0x0004)
	unsigned long                                      bForceAlwaysSlave : 1;                                    // 0x00EC(0x0004) (Edit)
	unsigned long                                      bBlendPlayRate : 1;                                       // 0x00EC(0x0004) (Edit)
	unsigned long                                      bSynchronize : 1;                                         // 0x00EC(0x0004) (Edit, Const)
	unsigned long                                      bReverseSync : 1;                                         // 0x00EC(0x0004) (Edit, Const)
	unsigned long                                      bShowTimeLineSlider : 1;                                  // 0x00EC(0x0004) (Edit)
	unsigned long                                      bLoopCameraAnim : 1;                                      // 0x00EC(0x0004) (Edit)
	unsigned long                                      bRandomizeCameraAnimLoopStartTime : 1;                    // 0x00EC(0x0004) (Edit)
	unsigned long                                      bEditorOnlyAddRefPoseToAdditiveAnimation : 1;             // 0x00EC(0x0004) (Const)
	unsigned long                                      bCheckForFinishAnimEarly : 1;                             // 0x00EC(0x0004) (Transient)
	unsigned long                                      bBlendingOut : 1;                                         // 0x00EC(0x0004) (Transient)
	float                                              CurrentTime;                                              // 0x00F0(0x0004) (Edit, Const)
	float                                              PreviousTime;                                             // 0x00F4(0x0004) (Const, Transient)
	float                                              EndTime;                                                  // 0x00F8(0x0004) (Const, Transient)
	class UAnimSequence*                               AnimSeq;                                                  // 0x00FC(0x0004) (Const, Transient)
	int                                                AnimLinkupIndex;                                          // 0x0100(0x0004) (Const, Transient)
	float                                              NotifyWeightThreshold;                                    // 0x0104(0x0004) (Edit)
	struct FName                                       SynchGroupName;                                           // 0x0108(0x0008) (Edit, Const)
	float                                              SynchPosOffset;                                           // 0x0110(0x0004) (Edit)
	class UCameraAnim*                                 CameraAnim;                                               // 0x0114(0x0004) (Edit)
	class UCameraAnimInst*                             ActiveCameraAnimInstance;                                 // 0x0118(0x0004) (Transient)
	float                                              CameraAnimScale;                                          // 0x011C(0x0004) (Edit)
	float                                              CameraAnimPlayRate;                                       // 0x0120(0x0004) (Edit)
	float                                              CameraAnimBlendInTime;                                    // 0x0124(0x0004) (Edit)
	float                                              CameraAnimBlendOutTime;                                   // 0x0128(0x0004) (Edit)
	TEnumAsByte<ERootBoneAxis>                         RootBoneOption[0x3];                                      // 0x012C(0x0001) (Edit, Const)
	TEnumAsByte<ERootRotationOption>                   RootRotationOption[0x3];                                  // 0x012F(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0132(0x0002) MISSED OFFSET
	TArray<class USkelControlBase*>                    MetaDataSkelControlList;                                  // 0x0134(0x000C) (Const, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSequence");
		return ptr;
	}


	void SetRootBoneRotationOption(TEnumAsByte<ERootRotationOption> AxisX, TEnumAsByte<ERootRotationOption> AxisY, TEnumAsByte<ERootRotationOption> AxisZ);
	void SetRootBoneAxisOption(TEnumAsByte<ERootBoneAxis> AxisX, TEnumAsByte<ERootBoneAxis> AxisY, TEnumAsByte<ERootBoneAxis> AxisZ);
	float GetTimeLeft();
	float GetAnimPlaybackLength();
	float GetGlobalPlayRate();
	float GetGroupRelativePosition();
	float FindGroupPosition(float GroupRelativePosition);
	float FindGroupRelativePosition(float GroupRelativePosition);
	float GetNormalizedPosition();
	void SetPosition(float NewTime, bool bFireNotifies);
	void ReplayAnim();
	void StopAnim();
	void PlayAnim(bool bLoop, float InRate, float StartTime);
	void SetAnim(const struct FName& Sequence);
};


// Class Engine.AnimNodeSequenceBlendBase
// 0x000C (0x014C - 0x0140)
class UAnimNodeSequenceBlendBase : public UAnimNodeSequence
{
public:
	TArray<struct FAnimBlendInfo>                      Anims;                                                    // 0x0140(0x000C) (Edit, ExportObject, EditFixedSize, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSequenceBlendBase");
		return ptr;
	}

};


// Class Engine.AnimNodeSequenceBlendByAim
// 0x0070 (0x01BC - 0x014C)
class UAnimNodeSequenceBlendByAim : public UAnimNodeSequenceBlendBase
{
public:
	struct FVector2D                                   Aim;                                                      // 0x014C(0x0008) (Edit)
	struct FVector2D                                   PreviousAim;                                              // 0x0154(0x0008) (Const, Transient)
	struct FVector2D                                   HorizontalRange;                                          // 0x015C(0x0008) (Edit)
	struct FVector2D                                   VerticalRange;                                            // 0x0164(0x0008) (Edit)
	struct FVector2D                                   AngleOffset;                                              // 0x016C(0x0008) (Edit)
	struct FName                                       AnimName_LU;                                              // 0x0174(0x0008) (Edit)
	struct FName                                       AnimName_LC;                                              // 0x017C(0x0008) (Edit)
	struct FName                                       AnimName_LD;                                              // 0x0184(0x0008) (Edit)
	struct FName                                       AnimName_CU;                                              // 0x018C(0x0008) (Edit)
	struct FName                                       AnimName_CC;                                              // 0x0194(0x0008) (Edit)
	struct FName                                       AnimName_CD;                                              // 0x019C(0x0008) (Edit)
	struct FName                                       AnimName_RU;                                              // 0x01A4(0x0008) (Edit)
	struct FName                                       AnimName_RC;                                              // 0x01AC(0x0008) (Edit)
	struct FName                                       AnimName_RD;                                              // 0x01B4(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeSequenceBlendByAim");
		return ptr;
	}


	void CheckAnimsUpToDate();
};


// Class Engine.AnimNodeFrame
// 0x002C (0x008C - 0x0060)
class UAnimNodeFrame : public UAnimObject
{
public:
	int                                                SizeX;                                                    // 0x0060(0x0004) (Edit)
	int                                                SizeY;                                                    // 0x0064(0x0004) (Edit)
	int                                                BorderWidth;                                              // 0x0068(0x0004) (Edit)
	unsigned long                                      bDrawBox : 1;                                             // 0x006C(0x0004) (Edit)
	unsigned long                                      bFilled : 1;                                              // 0x006C(0x0004) (Edit)
	unsigned long                                      bTileFill : 1;                                            // 0x006C(0x0004) (Edit)
	struct FColor                                      BorderColor;                                              // 0x0070(0x0004) (Edit)
	struct FColor                                      FillColor;                                                // 0x0074(0x0004) (Edit)
	class UTexture2D*                                  FillTexture;                                              // 0x0078(0x0004) (Edit)
	class UMaterial*                                   FillMaterial;                                             // 0x007C(0x0004) (Edit)
	struct FString                                     ObjComment;                                               // 0x0080(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNodeFrame");
		return ptr;
	}

};


// Class Engine.MorphNodeBase
// 0x000C (0x006C - 0x0060)
class UMorphNodeBase : public UAnimObject
{
public:
	struct FName                                       NodeName;                                                 // 0x0060(0x0008) (Edit)
	unsigned long                                      bDrawSlider : 1;                                          // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeBase");
		return ptr;
	}

};


// Class Engine.MorphNodeMultiPose
// 0x0024 (0x0090 - 0x006C)
class UMorphNodeMultiPose : public UMorphNodeBase
{
public:
	TArray<class UMorphTarget*>                        Targets;                                                  // 0x006C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FName>                               MorphNames;                                               // 0x0078(0x000C) (Edit, NeedCtorLink)
	TArray<float>                                      Weights;                                                  // 0x0084(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeMultiPose");
		return ptr;
	}


	bool UpdateMorphTarget(class UMorphTarget* Target, float InWeight);
	void RemoveMorphTarget(const struct FName& MorphTargetName);
	bool AddMorphTarget(const struct FName& MorphTargetName, float InWeight);
};


// Class Engine.MorphNodePose
// 0x0010 (0x007C - 0x006C)
class UMorphNodePose : public UMorphNodeBase
{
public:
	class UMorphTarget*                                Target;                                                   // 0x006C(0x0004) (Transient)
	struct FName                                       MorphName;                                                // 0x0070(0x0008) (Edit)
	float                                              Weight;                                                   // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodePose");
		return ptr;
	}


	void SetMorphTarget(const struct FName& MorphTargetName);
};


// Class Engine.MorphNodeWeightBase
// 0x000C (0x0078 - 0x006C)
class UMorphNodeWeightBase : public UMorphNodeBase
{
public:
	TArray<struct FMorphNodeConn>                      NodeConns;                                                // 0x006C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeWeightBase");
		return ptr;
	}

};


// Class Engine.MorphNodeWeight
// 0x0004 (0x007C - 0x0078)
class UMorphNodeWeight : public UMorphNodeWeightBase
{
public:
	float                                              NodeWeight;                                               // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeWeight");
		return ptr;
	}


	void SetNodeWeight(float NewWeight);
};


// Class Engine.MorphNodeWeightByBoneAngle
// 0x003C (0x00B4 - 0x0078)
class UMorphNodeWeightByBoneAngle : public UMorphNodeWeightBase
{
public:
	float                                              Angle;                                                    // 0x0078(0x0004) (Const, Transient)
	float                                              NodeWeight;                                               // 0x007C(0x0004) (Const, Transient)
	struct FName                                       BaseBoneName;                                             // 0x0080(0x0008) (Edit)
	TEnumAsByte<EAxis>                                 BaseBoneAxis;                                             // 0x0088(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 AngleBoneAxis;                                            // 0x0089(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x008A(0x0002) MISSED OFFSET
	unsigned long                                      bInvertBaseBoneAxis : 1;                                  // 0x008C(0x0004) (Edit)
	unsigned long                                      bInvertAngleBoneAxis : 1;                                 // 0x008C(0x0004) (Edit)
	unsigned long                                      bControlMaterialParameter : 1;                            // 0x008C(0x0004) (Edit)
	struct FName                                       AngleBoneName;                                            // 0x0090(0x0008) (Edit)
	int                                                MaterialSlotId;                                           // 0x0098(0x0004) (Edit)
	struct FName                                       ScalarParameterName;                                      // 0x009C(0x0008) (Edit)
	class UMaterialInstanceConstant*                   MaterialInstanceConstant;                                 // 0x00A4(0x0004) (Transient)
	TArray<struct FBoneAngleMorph>                     WeightArray;                                              // 0x00A8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeWeightByBoneAngle");
		return ptr;
	}

};


// Class Engine.MorphNodeWeightByBoneRotation
// 0x0034 (0x00AC - 0x0078)
class UMorphNodeWeightByBoneRotation : public UMorphNodeWeightBase
{
public:
	float                                              Angle;                                                    // 0x0078(0x0004) (Const, Transient)
	float                                              NodeWeight;                                               // 0x007C(0x0004) (Const, Transient)
	struct FName                                       BoneName;                                                 // 0x0080(0x0008) (Edit)
	TEnumAsByte<EAxis>                                 BoneAxis;                                                 // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	unsigned long                                      bInvertBoneAxis : 1;                                      // 0x008C(0x0004) (Edit)
	unsigned long                                      bControlMaterialParameter : 1;                            // 0x008C(0x0004) (Edit)
	TArray<struct FBoneAngleMorph>                     WeightArray;                                              // 0x0090(0x000C) (Edit, NeedCtorLink)
	int                                                MaterialSlotId;                                           // 0x009C(0x0004) (Edit)
	struct FName                                       ScalarParameterName;                                      // 0x00A0(0x0008) (Edit)
	class UMaterialInstanceConstant*                   MaterialInstanceConstant;                                 // 0x00A8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphNodeWeightByBoneRotation");
		return ptr;
	}

};


// Class Engine.SkelControlBase
// 0x005C (0x00BC - 0x0060)
class USkelControlBase : public UAnimObject
{
public:
	struct FName                                       ControlName;                                              // 0x0060(0x0008) (Edit)
	float                                              ControlStrength;                                          // 0x0068(0x0004) (Edit)
	float                                              BlendInTime;                                              // 0x006C(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x0070(0x0004) (Edit)
	TEnumAsByte<EAlphaBlendType>                       BlendType;                                                // 0x0074(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	unsigned long                                      bPostPhysicsController : 1;                               // 0x0078(0x0004) (Edit)
	unsigned long                                      bSetStrengthFromAnimNode : 1;                             // 0x0078(0x0004) (Edit)
	unsigned long                                      bInitializedCachedNodeList : 1;                           // 0x0078(0x0004) (Transient)
	unsigned long                                      bControlledByAnimMetada : 1;                              // 0x0078(0x0004) (Edit)
	unsigned long                                      bInvertMetadataWeight : 1;                                // 0x0078(0x0004) (Edit)
	unsigned long                                      bPropagateSetActive : 1;                                  // 0x0078(0x0004) (Edit)
	unsigned long                                      bIgnoreWhenNotRendered : 1;                               // 0x0078(0x0004) (Edit)
	unsigned long                                      bShouldTickInScript : 1;                                  // 0x0078(0x0004)
	unsigned long                                      bShouldTickOwner : 1;                                     // 0x0078(0x0004)
	unsigned long                                      bEnableEaseInOut : 1;                                     // 0x0078(0x0004) (Edit, EditConst, Deprecated)
	float                                              StrengthTarget;                                           // 0x007C(0x0004)
	float                                              BlendTimeToGo;                                            // 0x0080(0x0004) (Transient)
	TArray<struct FName>                               StrengthAnimNodeNameList;                                 // 0x0084(0x000C) (Edit, NeedCtorLink)
	TArray<class UAnimNode*>                           CachedNodeList;                                           // 0x0090(0x000C) (Transient, NeedCtorLink)
	float                                              AnimMetadataWeight;                                       // 0x009C(0x0004) (Const, Transient)
	int                                                AnimMetaDataUpdateTag;                                    // 0x00A0(0x0004) (Const, Transient)
	float                                              BoneScale;                                                // 0x00A4(0x0004) (Edit)
	int                                                ControlTickTag;                                           // 0x00A8(0x0004) (Transient)
	int                                                IgnoreAtOrAboveLOD;                                       // 0x00AC(0x0004) (Edit)
	class USkelControlBase*                            NextControl;                                              // 0x00B0(0x0004)
	int                                                ControlPosX;                                              // 0x00B4(0x0004) (Deprecated)
	int                                                ControlPosY;                                              // 0x00B8(0x0004) (Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlBase");
		return ptr;
	}


	float GetControlMetadataWeight();
	void TickSkelControl(float DeltaTime, class USkeletalMeshComponent* SkelComp);
	void SetSkelControlStrength(float NewStrength, float InBlendTime);
	void SetSkelControlActive(bool bInActive);
};


// Class Engine.SkelControl_CCD_IK
// 0x0048 (0x0104 - 0x00BC)
class USkelControl_CCD_IK : public USkelControlBase
{
public:
	struct FVector                                     EffectorLocation;                                         // 0x00BC(0x000C) (Edit)
	TEnumAsByte<EBoneControlSpace>                     EffectorLocationSpace;                                    // 0x00C8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C9(0x0003) MISSED OFFSET
	struct FName                                       EffectorSpaceBoneName;                                    // 0x00CC(0x0008) (Edit)
	struct FVector                                     EffectorTranslationFromBone;                              // 0x00D4(0x000C) (Edit)
	int                                                NumBones;                                                 // 0x00E0(0x0004) (Edit)
	int                                                MaxPerBoneIterations;                                     // 0x00E4(0x0004) (Edit)
	int                                                IterationsCount;                                          // 0x00E8(0x0004) (Const)
	float                                              Precision;                                                // 0x00EC(0x0004) (Edit)
	unsigned long                                      bStartFromTail : 1;                                       // 0x00F0(0x0004) (Edit)
	unsigned long                                      bNoTurnOptimization : 1;                                  // 0x00F0(0x0004) (Edit)
	TArray<float>                                      AngleConstraint;                                          // 0x00F4(0x000C) (Edit, Const, NeedCtorLink)
	float                                              MaxAngleSteps;                                            // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControl_CCD_IK");
		return ptr;
	}

};


// Class Engine.SkelControl_Multiply
// 0x0004 (0x00C0 - 0x00BC)
class USkelControl_Multiply : public USkelControlBase
{
public:
	float                                              Multiplier;                                               // 0x00BC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControl_Multiply");
		return ptr;
	}

};


// Class Engine.SkelControl_TwistBone
// 0x000C (0x00C8 - 0x00BC)
class USkelControl_TwistBone : public USkelControlBase
{
public:
	struct FName                                       SourceBoneName;                                           // 0x00BC(0x0008) (Edit)
	float                                              TwistAngleScale;                                          // 0x00C4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControl_TwistBone");
		return ptr;
	}

};


// Class Engine.SkelControlLimb
// 0x0058 (0x0114 - 0x00BC)
class USkelControlLimb : public USkelControlBase
{
public:
	struct FVector                                     EffectorLocation;                                         // 0x00BC(0x000C) (Edit)
	TEnumAsByte<EBoneControlSpace>                     EffectorLocationSpace;                                    // 0x00C8(0x0001) (Edit)
	TEnumAsByte<EBoneControlSpace>                     JointTargetLocationSpace;                                 // 0x00C9(0x0001) (Edit)
	TEnumAsByte<EBoneControlSpace>                     JointOffsetSpace;                                         // 0x00CA(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 BoneAxis;                                                 // 0x00CB(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 JointAxis;                                                // 0x00CC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	struct FName                                       EffectorSpaceBoneName;                                    // 0x00D0(0x0008) (Edit)
	struct FVector                                     JointTargetLocation;                                      // 0x00D8(0x000C) (Edit)
	struct FName                                       JointTargetSpaceBoneName;                                 // 0x00E4(0x0008) (Edit)
	struct FVector                                     JointOffset;                                              // 0x00EC(0x000C) (Edit)
	struct FName                                       JointOffsetBoneName;                                      // 0x00F8(0x0008) (Edit)
	unsigned long                                      bInvertBoneAxis : 1;                                      // 0x0100(0x0004) (Edit)
	unsigned long                                      bInvertJointAxis : 1;                                     // 0x0100(0x0004) (Edit)
	unsigned long                                      bRotateJoint : 1;                                         // 0x0100(0x0004) (Edit)
	unsigned long                                      bMaintainEffectorRelRot : 1;                              // 0x0100(0x0004) (Edit)
	unsigned long                                      bTakeRotationFromEffectorSpace : 1;                       // 0x0100(0x0004) (Edit)
	unsigned long                                      bAllowStretching : 1;                                     // 0x0100(0x0004) (Edit)
	struct FVector2D                                   StretchLimits;                                            // 0x0104(0x0008) (Edit)
	struct FName                                       StretchRollBoneName;                                      // 0x010C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlLimb");
		return ptr;
	}

};


// Class Engine.SkelControlFootPlacement
// 0x0024 (0x0138 - 0x0114)
class USkelControlFootPlacement : public USkelControlLimb
{
public:
	float                                              FootOffset;                                               // 0x0114(0x0004) (Edit)
	TEnumAsByte<EAxis>                                 FootUpAxis;                                               // 0x0118(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	struct FRotator                                    FootRotOffset;                                            // 0x011C(0x000C) (Edit)
	unsigned long                                      bInvertFootUpAxis : 1;                                    // 0x0128(0x0004) (Edit)
	unsigned long                                      bOrientFootToGround : 1;                                  // 0x0128(0x0004) (Edit)
	unsigned long                                      bOnlyEnableForUpAdjustment : 1;                           // 0x0128(0x0004) (Edit)
	float                                              MaxUpAdjustment;                                          // 0x012C(0x0004) (Edit)
	float                                              MaxDownAdjustment;                                        // 0x0130(0x0004) (Edit)
	float                                              MaxFootOrientAdjust;                                      // 0x0134(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlFootPlacement");
		return ptr;
	}

};


// Class Engine.SkelControlLookAt
// 0x009C (0x0158 - 0x00BC)
class USkelControlLookAt : public USkelControlBase
{
public:
	struct FVector                                     TargetLocation;                                           // 0x00BC(0x000C) (Edit)
	TEnumAsByte<EBoneControlSpace>                     TargetLocationSpace;                                      // 0x00C8(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 LookAtAxis;                                               // 0x00C9(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 UpAxis;                                                   // 0x00CA(0x0001) (Edit)
	TEnumAsByte<EBoneControlSpace>                     AllowRotationSpace;                                       // 0x00CB(0x0001) (Edit)
	struct FName                                       TargetSpaceBoneName;                                      // 0x00CC(0x0008) (Edit)
	unsigned long                                      bInvertLookAtAxis : 1;                                    // 0x00D4(0x0004) (Edit)
	unsigned long                                      bDefineUpAxis : 1;                                        // 0x00D4(0x0004) (Edit)
	unsigned long                                      bInvertUpAxis : 1;                                        // 0x00D4(0x0004) (Edit)
	unsigned long                                      bEnableLimit : 1;                                         // 0x00D4(0x0004) (Edit)
	unsigned long                                      bLimitBasedOnRefPose : 1;                                 // 0x00D4(0x0004) (Edit)
	unsigned long                                      bDisableBeyondLimit : 1;                                  // 0x00D4(0x0004) (Edit)
	unsigned long                                      bNotifyBeyondLimit : 1;                                   // 0x00D4(0x0004) (Edit)
	unsigned long                                      bShowLimit : 1;                                           // 0x00D4(0x0004) (Edit)
	unsigned long                                      bAllowRotationX : 1;                                      // 0x00D4(0x0004) (Edit)
	unsigned long                                      bAllowRotationY : 1;                                      // 0x00D4(0x0004) (Edit)
	unsigned long                                      bAllowRotationZ : 1;                                      // 0x00D4(0x0004) (Edit)
	float                                              TargetLocationInterpSpeed;                                // 0x00D8(0x0004) (Edit)
	struct FVector                                     DesiredTargetLocation;                                    // 0x00DC(0x000C)
	struct FVector                                     ActorSpaceLookAtTarget;                                   // 0x00E8(0x000C) (Const, Transient)
	float                                              MaxAngle;                                                 // 0x00F4(0x0004) (Edit)
	float                                              OuterMaxAngle;                                            // 0x00F8(0x0004) (Edit)
	float                                              DeadZoneAngle;                                            // 0x00FC(0x0004) (Edit)
	struct FVector2D                                   RotationAngleRangeX;                                      // 0x0100(0x0008) (Edit)
	struct FVector2D                                   RotationAngleRangeY;                                      // 0x0108(0x0008) (Edit)
	struct FVector2D                                   RotationAngleRangeZ;                                      // 0x0110(0x0008) (Edit)
	struct FName                                       AllowRotationOtherBoneName;                               // 0x0118(0x0008) (Edit)
	float                                              LookAtAlpha;                                              // 0x0120(0x0004) (Const, Transient)
	float                                              LookAtAlphaTarget;                                        // 0x0124(0x0004) (Const, Transient)
	float                                              LookAtAlphaBlendTimeToGo;                                 // 0x0128(0x0004) (Const, Transient)
	struct FVector                                     LimitLookDir;                                             // 0x012C(0x000C) (Const, Transient)
	struct FVector                                     BaseLookDir;                                              // 0x0138(0x000C) (Const, Transient)
	struct FVector                                     BaseBonePos;                                              // 0x0144(0x000C) (Const, Transient)
	float                                              LastCalcTime;                                             // 0x0150(0x0004) (Const, Transient)
	int                                                ControlBoneIndex;                                         // 0x0154(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlLookAt");
		return ptr;
	}


	bool CanLookAtPoint(const struct FVector& PointLoc, bool bDrawDebugInfo, bool bDebugUsePersistentLines, bool bDebugFlushLinesFirst);
	void SetLookAtAlpha(float DesiredAlpha, float DesiredBlendTime);
	void InterpolateTargetLocation(float DeltaTime);
	void SetTargetLocation(const struct FVector& NewTargetLocation);
};


// Class Engine.SkelControlSingleBone
// 0x0030 (0x00EC - 0x00BC)
class USkelControlSingleBone : public USkelControlBase
{
public:
	unsigned long                                      bApplyTranslation : 1;                                    // 0x00BC(0x0004) (Edit)
	unsigned long                                      bApplyRotation : 1;                                       // 0x00BC(0x0004) (Edit)
	unsigned long                                      bAddTranslation : 1;                                      // 0x00BC(0x0004) (Edit)
	unsigned long                                      bAddRotation : 1;                                         // 0x00BC(0x0004) (Edit)
	unsigned long                                      bRemoveMeshRotation : 1;                                  // 0x00BC(0x0004) (Edit)
	struct FVector                                     BoneTranslation;                                          // 0x00C0(0x000C) (Edit)
	TEnumAsByte<EBoneControlSpace>                     BoneTranslationSpace;                                     // 0x00CC(0x0001) (Edit)
	TEnumAsByte<EBoneControlSpace>                     BoneRotationSpace;                                        // 0x00CD(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00CE(0x0002) MISSED OFFSET
	struct FName                                       TranslationSpaceBoneName;                                 // 0x00D0(0x0008) (Edit)
	struct FRotator                                    BoneRotation;                                             // 0x00D8(0x000C) (Edit)
	struct FName                                       RotationSpaceBoneName;                                    // 0x00E4(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlSingleBone");
		return ptr;
	}

};


// Class Engine.SkelControlHandlebars
// 0x0014 (0x0100 - 0x00EC)
class USkelControlHandlebars : public USkelControlSingleBone
{
public:
	TEnumAsByte<EAxis>                                 WheelRollAxis;                                            // 0x00EC(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 HandlebarRotateAxis;                                      // 0x00ED(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00EE(0x0002) MISSED OFFSET
	struct FName                                       WheelBoneName;                                            // 0x00F0(0x0008) (Edit)
	unsigned long                                      bInvertRotation : 1;                                      // 0x00F8(0x0004) (Edit)
	int                                                SteerWheelBoneIndex;                                      // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlHandlebars");
		return ptr;
	}

};


// Class Engine.SkelControlWheel
// 0x0018 (0x0104 - 0x00EC)
class USkelControlWheel : public USkelControlSingleBone
{
public:
	float                                              WheelDisplacement;                                        // 0x00EC(0x0004) (Edit, Transient)
	float                                              WheelMaxRenderDisplacement;                               // 0x00F0(0x0004) (Edit)
	float                                              WheelRoll;                                                // 0x00F4(0x0004) (Edit, Transient)
	TEnumAsByte<EAxis>                                 WheelRollAxis;                                            // 0x00F8(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 WheelSteeringAxis;                                        // 0x00F9(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00FA(0x0002) MISSED OFFSET
	float                                              WheelSteering;                                            // 0x00FC(0x0004) (Edit, Transient)
	unsigned long                                      bInvertWheelRoll : 1;                                     // 0x0100(0x0004) (Edit)
	unsigned long                                      bInvertWheelSteering : 1;                                 // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlWheel");
		return ptr;
	}

};


// Class Engine.SkelControlSpline
// 0x0014 (0x00D0 - 0x00BC)
class USkelControlSpline : public USkelControlBase
{
public:
	int                                                SplineLength;                                             // 0x00BC(0x0004) (Edit)
	TEnumAsByte<EAxis>                                 SplineBoneAxis;                                           // 0x00C0(0x0001) (Edit)
	TEnumAsByte<ESplineControlRotMode>                 BoneRotMode;                                              // 0x00C1(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00C2(0x0002) MISSED OFFSET
	unsigned long                                      bInvertSplineBoneAxis : 1;                                // 0x00C4(0x0004) (Edit)
	float                                              EndSplineTension;                                         // 0x00C8(0x0004) (Edit)
	float                                              StartSplineTension;                                       // 0x00CC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlSpline");
		return ptr;
	}

};


// Class Engine.SkelControlTrail
// 0x0074 (0x0130 - 0x00BC)
class USkelControlTrail : public USkelControlBase
{
public:
	int                                                ChainLength;                                              // 0x00BC(0x0004) (Edit)
	TEnumAsByte<EAxis>                                 ChainBoneAxis;                                            // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	unsigned long                                      bInvertChainBoneAxis : 1;                                 // 0x00C4(0x0004) (Edit)
	unsigned long                                      bLimitStretch : 1;                                        // 0x00C4(0x0004) (Edit)
	unsigned long                                      bActorSpaceFakeVel : 1;                                   // 0x00C4(0x0004) (Edit)
	unsigned long                                      bHadValidStrength : 1;                                    // 0x00C4(0x0004)
	float                                              TrailRelaxation;                                          // 0x00C8(0x0004) (Edit)
	float                                              StretchLimit;                                             // 0x00CC(0x0004) (Edit)
	struct FVector                                     FakeVelocity;                                             // 0x00D0(0x000C) (Edit)
	float                                              ThisTimstep;                                              // 0x00DC(0x0004)
	TArray<struct FVector>                             TrailBoneLocations;                                       // 0x00E0(0x000C) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	struct FMatrix                                     OldLocalToWorld;                                          // 0x00F0(0x0040) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkelControlTrail");
		return ptr;
	}

};


// Class Engine.AnimSet
// 0x00E0 (0x011C - 0x003C)
class UAnimSet : public UObject
{
public:
	unsigned long                                      bAnimRotationOnly : 1;                                    // 0x003C(0x0004) (Edit)
	TArray<struct FName>                               TrackBoneNames;                                           // 0x0040(0x000C) (NeedCtorLink)
	TArray<class UAnimSequence*>                       Sequences;                                                // 0x004C(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0058(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AnimSet.SequenceCache
	TArray<struct FAnimSetMeshLinkup>                  LinkupCache;                                              // 0x0094(0x000C) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x00A0(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AnimSet.SkelMesh2LinkupCache
	TArray<unsigned char>                              BoneUseAnimTranslation;                                   // 0x00DC(0x000C) (Transient, NeedCtorLink)
	TArray<unsigned char>                              ForceUseMeshTranslation;                                  // 0x00E8(0x000C) (Transient, NeedCtorLink)
	TArray<struct FName>                               UseTranslationBoneNames;                                  // 0x00F4(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               ForceMeshTranslationBoneNames;                            // 0x0100(0x000C) (Edit, NeedCtorLink)
	struct FName                                       PreviewSkelMeshName;                                      // 0x010C(0x0008)
	struct FName                                       BestRatioSkelMeshName;                                    // 0x0114(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimSet");
		return ptr;
	}

};


// Class Engine.MorphTarget
// 0x0018 (0x0054 - 0x003C)
class UMorphTarget : public UObject
{
public:
	TArray<int>                                        MorphLODModels;                                           // 0x003C(0x000C) (Const, Native)
	int                                                MaterialSlotId;                                           // 0x0048(0x0004) (Edit)
	struct FName                                       ScalarParameterName;                                      // 0x004C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphTarget");
		return ptr;
	}

};


// Class Engine.MorphTargetSet
// 0x001C (0x0058 - 0x003C)
class UMorphTargetSet : public UObject
{
public:
	TArray<class UMorphTarget*>                        Targets;                                                  // 0x003C(0x000C) (NeedCtorLink)
	class USkeletalMesh*                               BaseSkelMesh;                                             // 0x0048(0x0004)
	struct FArray_Mirror                               RawWedgePointIndices;                                     // 0x004C(0x000C) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphTargetSet");
		return ptr;
	}


	class UMorphTarget* FindMorphTarget(const struct FName& MorphTargetName);
};


// Class Engine.MorphWeightSequence
// 0x0000 (0x003C - 0x003C)
class UMorphWeightSequence : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MorphWeightSequence");
		return ptr;
	}

};


// Class Engine.DecalActorBase
// 0x0008 (0x01DC - 0x01D4)
class ADecalActorBase : public AActor
{
public:
	struct FPointer                                    VfTable_IEditorLinkSelectionInterface;                    // 0x01D4(0x0004) (Const, Native, NoExport)
	class UDecalComponent*                             Decal;                                                    // 0x01D8(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalActorBase");
		return ptr;
	}

};


// Class Engine.DecalActor
// 0x0000 (0x01DC - 0x01DC)
class ADecalActor : public ADecalActorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalActor");
		return ptr;
	}

};


// Class Engine.DecalActorMovable
// 0x0000 (0x01DC - 0x01DC)
class ADecalActorMovable : public ADecalActorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalActorMovable");
		return ptr;
	}

};


// Class Engine.DecalManager
// 0x0030 (0x0204 - 0x01D4)
class ADecalManager : public AActor
{
public:
	class UDecalComponent*                             DecalTemplate;                                            // 0x01D4(0x0004) (ExportObject, Component, EditInline)
	TArray<class UDecalComponent*>                     PoolDecals;                                               // 0x01D8(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	int                                                MaxActiveDecals;                                          // 0x01E4(0x0004)
	float                                              DecalLifeSpan;                                            // 0x01E8(0x0004) (Config, GlobalConfig)
	float                                              DecalDepthBias;                                           // 0x01EC(0x0004)
	struct FVector2D                                   DecalBlendRange;                                          // 0x01F0(0x0008)
	TArray<struct FActiveDecalInfo>                    ActiveDecals;                                             // 0x01F8(0x000C) (Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalManager");
		return ptr;
	}


	class UDecalComponent* SpawnDecal(class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, bool bProjectOnTerrain, bool bProjectOnSkeletalMeshes, const struct FName& HitBone, int HitNodeIndex, int HitLevelIndex, float InDecalLifeSpan, int InFracturedStaticMeshComponentIndex, float InDepthBias, const struct FVector2D& InBlendRange);
	class UDecalComponent* GetPooledComponent();
	void STATIC_SetDecalParameters(class UDecalComponent* TheDecal, class UMaterialInterface* DecalMaterial, const struct FVector& DecalLocation, const struct FRotator& DecalOrientation, float Width, float Height, float Thickness, bool bNoClip, float DecalRotation, class UPrimitiveComponent* HitComponent, bool bProjectOnTerrain, bool bProjectOnSkeletalMeshes, const struct FName& HitBone, int HitNodeIndex, int HitLevelIndex, int InFracturedStaticMeshComponentIndex, float DepthBias, const struct FVector2D& BlendRange);
	bool CanSpawnDecals();
	void DecalFinished(class UDecalComponent* Decal);
	bool STATIC_AreDynamicDecalsEnabled();
};


// Class Engine.DecalComponent
// 0x0158 (0x0330 - 0x01D8)
class UDecalComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x01D8(0x0004) (Edit, Const)
	float                                              Width;                                                    // 0x01DC(0x0004) (Edit)
	float                                              Height;                                                   // 0x01E0(0x0004) (Edit)
	float                                              TileX;                                                    // 0x01E4(0x0004) (Edit)
	float                                              TileY;                                                    // 0x01E8(0x0004) (Edit)
	float                                              OffsetX;                                                  // 0x01EC(0x0004) (Edit)
	float                                              OffsetY;                                                  // 0x01F0(0x0004) (Edit)
	float                                              DecalRotation;                                            // 0x01F4(0x0004) (Edit)
	float                                              FieldOfView;                                              // 0x01F8(0x0004)
	float                                              NearPlane;                                                // 0x01FC(0x0004) (Edit)
	float                                              FarPlane;                                                 // 0x0200(0x0004) (Edit)
	struct FVector                                     Location;                                                 // 0x0204(0x000C) (Transient)
	struct FRotator                                    Orientation;                                              // 0x0210(0x000C) (Transient)
	struct FVector                                     HitLocation;                                              // 0x021C(0x000C)
	struct FVector                                     HitNormal;                                                // 0x0228(0x000C)
	struct FVector                                     HitTangent;                                               // 0x0234(0x000C)
	struct FVector                                     HitBinormal;                                              // 0x0240(0x000C)
	unsigned long                                      bNoClip : 1;                                              // 0x024C(0x0004) (Edit)
	unsigned long                                      bStaticDecal : 1;                                         // 0x024C(0x0004) (Const)
	unsigned long                                      bProjectOnBackfaces : 1;                                  // 0x024C(0x0004) (Edit)
	unsigned long                                      bProjectOnHidden : 1;                                     // 0x024C(0x0004) (Edit)
	unsigned long                                      bProjectOnBSP : 1;                                        // 0x024C(0x0004) (Edit)
	unsigned long                                      bProjectOnStaticMeshes : 1;                               // 0x024C(0x0004) (Edit)
	unsigned long                                      bProjectOnSkeletalMeshes : 1;                             // 0x024C(0x0004) (Edit)
	unsigned long                                      bProjectOnTerrain : 1;                                    // 0x024C(0x0004) (Edit)
	unsigned long                                      bFlipBackfaceDirection : 1;                               // 0x024C(0x0004)
	unsigned long                                      bMovableDecal : 1;                                        // 0x024C(0x0004)
	unsigned long                                      bHasBeenAttached : 1;                                     // 0x024C(0x0004) (Transient)
	unsigned long                                      bDecalMaterialSetAtRunTime : 1;                           // 0x024C(0x0004) (Edit)
	class UPrimitiveComponent*                         HitComponent;                                             // 0x0250(0x0004) (ExportObject, Transient, Component, EditInline)
	struct FName                                       HitBone;                                                  // 0x0254(0x0008) (Transient)
	int                                                HitNodeIndex;                                             // 0x025C(0x0004) (Transient)
	int                                                HitLevelIndex;                                            // 0x0260(0x0004) (Transient)
	int                                                FracturedStaticMeshComponentIndex;                        // 0x0264(0x0004) (Transient)
	TArray<int>                                        HitNodeIndices;                                           // 0x0268(0x000C) (Const, Transient, NeedCtorLink)
	TArray<struct FDecalReceiver>                      DecalReceivers;                                           // 0x0274(0x000C) (Const, Component, DuplicateTransient, NeedCtorLink, NoImport)
	TArray<struct FPointer>                            StaticReceivers;                                          // 0x0280(0x000C) (Const, Native, Transient, DuplicateTransient, NoImport)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x028C(0x0004) (Const, Native, Transient, DuplicateTransient)
	TArray<struct FPlane>                              Planes;                                                   // 0x0290(0x000C) (Transient, NeedCtorLink)
	float                                              DepthBias;                                                // 0x029C(0x0004) (Edit)
	float                                              SlopeScaleDepthBias;                                      // 0x02A0(0x0004) (Edit)
	int                                                SortOrder;                                                // 0x02A4(0x0004) (Edit)
	float                                              BackfaceAngle;                                            // 0x02A8(0x0004) (Edit)
	struct FVector2D                                   BlendRange;                                               // 0x02AC(0x0008) (Edit)
	float                                              DynamicDecalCullDistance;                                 // 0x02B4(0x0004) (Edit)
	float                                              StreamingDistanceMultiplier;                              // 0x02B8(0x0004) (Edit, Const)
	TEnumAsByte<EDecalTransform>                       DecalTransform;                                           // 0x02BC(0x0001) (Const)
	TEnumAsByte<EFilterMode>                           FilterMode;                                               // 0x02BD(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x02BE(0x0002) MISSED OFFSET
	TArray<class AActor*>                              Filter;                                                   // 0x02C0(0x000C) (Edit, NeedCtorLink)
	TArray<class UPrimitiveComponent*>                 ReceiverImages;                                           // 0x02CC(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	struct FVector                                     ParentRelativeLocation;                                   // 0x02D8(0x000C) (Edit)
	struct FRotator                                    ParentRelativeOrientation;                                // 0x02E4(0x000C) (Edit)
	struct FMatrix                                     ParentRelLocRotMatrix;                                    // 0x02F0(0x0040) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalComponent");
		return ptr;
	}


	bool IsWaitingForResetToDefaultsToComplete();
	class UMaterialInterface* GetDecalMaterial();
	void SetDecalMaterial(class UMaterialInterface* NewDecalMaterial);
	void ResetToDefaults();
};


// Class Engine.ActorFactoryDecal
// 0x0004 (0x006C - 0x0068)
class UActorFactoryDecal : public UActorFactory
{
public:
	class UMaterialInterface*                          DecalMaterial;                                            // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryDecal");
		return ptr;
	}

};


// Class Engine.ActorFactoryDecalMovable
// 0x0000 (0x006C - 0x006C)
class UActorFactoryDecalMovable : public UActorFactoryDecal
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryDecalMovable");
		return ptr;
	}

};


// Class Engine.Material
// 0x0504 (0x071C - 0x0218)
class UMaterial : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0218(0x0004) (Edit)
	class UClass*                                      PhysicalMaterial;                                         // 0x021C(0x0004)
	class UTexture2D*                                  PhysMaterialMask;                                         // 0x0220(0x0004) (Edit)
	int                                                PhysMaterialMaskUVChannel;                                // 0x0224(0x0004) (Edit)
	class UPhysicalMaterial*                           BlackPhysicalMaterial;                                    // 0x0228(0x0004) (Edit)
	class UPhysicalMaterial*                           WhitePhysicalMaterial;                                    // 0x022C(0x0004) (Edit)
	struct FColorMaterialInput                         DiffuseColor;                                             // 0x0230(0x0034) (NeedCtorLink)
	struct FScalarMaterialInput                        DiffusePower;                                             // 0x0264(0x0034) (NeedCtorLink)
	struct FColorMaterialInput                         SpecularColor;                                            // 0x0298(0x0034) (NeedCtorLink)
	struct FScalarMaterialInput                        SpecularPower;                                            // 0x02CC(0x0034) (NeedCtorLink)
	struct FVectorMaterialInput                        Normal;                                                   // 0x0300(0x003C) (NeedCtorLink)
	struct FColorMaterialInput                         EmissiveColor;                                            // 0x033C(0x0034) (NeedCtorLink)
	struct FScalarMaterialInput                        Opacity;                                                  // 0x0370(0x0034) (NeedCtorLink)
	struct FScalarMaterialInput                        OpacityMask;                                              // 0x03A4(0x0034) (NeedCtorLink)
	float                                              OpacityMaskClipValue;                                     // 0x03D8(0x0004) (Edit)
	float                                              ShadowDepthBias;                                          // 0x03DC(0x0004) (Edit)
	struct FVector2MaterialInput                       Distortion;                                               // 0x03E0(0x0038) (NeedCtorLink)
	TEnumAsByte<EBlendMode>                            BlendMode;                                                // 0x0418(0x0001) (Edit)
	TEnumAsByte<EMaterialLightingModel>                LightingModel;                                            // 0x0419(0x0001) (Edit)
	TEnumAsByte<EParticleDownsampling>                 ParticleDownsampling;                                     // 0x041A(0x0001) (Edit)
	TEnumAsByte<EMaterialTessellationMode>             D3D11TessellationMode;                                    // 0x041B(0x0001) (Edit, Const)
	struct FColorMaterialInput                         CustomLighting;                                           // 0x041C(0x0034) (NeedCtorLink)
	struct FColorMaterialInput                         CustomSkylightDiffuse;                                    // 0x0450(0x0034) (NeedCtorLink)
	struct FVectorMaterialInput                        AnisotropicDirection;                                     // 0x0484(0x003C) (NeedCtorLink)
	struct FScalarMaterialInput                        TwoSidedLightingMask;                                     // 0x04C0(0x0034) (NeedCtorLink)
	struct FColorMaterialInput                         TwoSidedLightingColor;                                    // 0x04F4(0x0034) (NeedCtorLink)
	struct FVectorMaterialInput                        WorldPositionOffset;                                      // 0x0528(0x003C) (NeedCtorLink)
	struct FVectorMaterialInput                        WorldDisplacement;                                        // 0x0564(0x003C) (NeedCtorLink)
	struct FScalarMaterialInput                        TessellationMultiplier;                                   // 0x05A0(0x0034) (NeedCtorLink)
	struct FColorMaterialInput                         SubsurfaceInscatteringColor;                              // 0x05D4(0x0034) (NeedCtorLink)
	struct FColorMaterialInput                         SubsurfaceAbsorptionColor;                                // 0x0608(0x0034) (NeedCtorLink)
	struct FScalarMaterialInput                        SubsurfaceScatteringRadius;                               // 0x063C(0x0034) (NeedCtorLink)
	unsigned long                                      EnableSubsurfaceScattering : 1;                           // 0x0670(0x0004) (Edit)
	unsigned long                                      EnableSeparateTranslucency : 1;                           // 0x0670(0x0004) (Edit)
	unsigned long                                      bEnableMaskedAntialiasing : 1;                            // 0x0670(0x0004) (Edit)
	unsigned long                                      TwoSided : 1;                                             // 0x0670(0x0004) (Edit)
	unsigned long                                      TwoSidedSeparatePass : 1;                                 // 0x0670(0x0004) (Edit)
	unsigned long                                      bDisableDepthTest : 1;                                    // 0x0670(0x0004) (Edit)
	unsigned long                                      bSceneTextureRenderBehindTranslucency : 1;                // 0x0670(0x0004) (Edit)
	unsigned long                                      bAllowFog : 1;                                            // 0x0670(0x0004) (Edit)
	unsigned long                                      bTranslucencyReceiveDominantShadowsFromStatic : 1;        // 0x0670(0x0004) (Edit)
	unsigned long                                      bTranslucencyInheritDominantShadowsFromOpaque : 1;        // 0x0670(0x0004) (Edit)
	unsigned long                                      bAllowTranslucencyDoF : 1;                                // 0x0670(0x0004) (Edit)
	unsigned long                                      bUseOneLayerDistortion : 1;                               // 0x0670(0x0004) (Edit)
	unsigned long                                      bUseLitTranslucencyDepthPass : 1;                         // 0x0670(0x0004) (Edit)
	unsigned long                                      bUseLitTranslucencyPostRenderDepthPass : 1;               // 0x0670(0x0004) (Edit)
	unsigned long                                      bCastLitTranslucencyShadowAsMasked : 1;                   // 0x0670(0x0004) (Edit)
	unsigned long                                      bUsedAsLightFunction : 1;                                 // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithFogVolumes : 1;                                  // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedAsSpecialEngineMaterial : 1;                         // 0x0670(0x0004) (Const, DuplicateTransient)
	unsigned long                                      bUsedWithSkeletalMesh : 1;                                // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithTerrain : 1;                                     // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithLandscape : 1;                                   // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithMobileLandscape : 1;                             // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithFracturedMeshes : 1;                             // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithParticleSystem : 1;                              // 0x0670(0x0004) (Const)
	unsigned long                                      bUsedWithParticleSprites : 1;                             // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithBeamTrails : 1;                                  // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithParticleSubUV : 1;                               // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithSpeedTree : 1;                                   // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithStaticLighting : 1;                              // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithLensFlare : 1;                                   // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithGammaCorrection : 1;                             // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithInstancedMeshParticles : 1;                      // 0x0670(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithFluidSurfaces : 1;                               // 0x0674(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithDecals : 1;                                      // 0x0674(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithMaterialEffect : 1;                              // 0x0674(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithMorphTargets : 1;                                // 0x0674(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithRadialBlur : 1;                                  // 0x0674(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithInstancedMeshes : 1;                             // 0x0674(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithSplineMeshes : 1;                                // 0x0674(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithAPEXMeshes : 1;                                  // 0x0674(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithApexSprites : 1;                                 // 0x0674(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithScreenDoorFade : 1;                              // 0x0674(0x0004) (Edit, Const)
	unsigned long                                      bUsedWithOpacityShadows : 1;                              // 0x0674(0x0004) (Edit, Const)
	unsigned long                                      bEnableCrackFreeDisplacement : 1;                         // 0x0674(0x0004) (Edit, Const)
	unsigned long                                      bUseImageBasedReflections : 1;                            // 0x0674(0x0004) (Edit)
	unsigned long                                      Wireframe : 1;                                            // 0x0674(0x0004) (Edit)
	unsigned long                                      bPerPixelCameraVector : 1;                                // 0x0674(0x0004) (Edit)
	unsigned long                                      bAllowLightmapSpecular : 1;                               // 0x0674(0x0004) (Edit)
	unsigned long                                      bIsFallbackMaterial : 1;                                  // 0x0674(0x0004) (Deprecated)
	unsigned long                                      bUsesDistortion : 1;                                      // 0x0674(0x0004)
	unsigned long                                      bIsMasked : 1;                                            // 0x0674(0x0004)
	unsigned long                                      bIsPreviewMaterial : 1;                                   // 0x0674(0x0004) (Transient, DuplicateTransient)
	float                                              ParticleBlurRadius;                                       // 0x0678(0x0004) (Edit)
	float                                              ImageReflectionNormalDampening;                           // 0x067C(0x0004) (Edit)
	struct FPointer                                    MaterialResources[0x2];                                   // 0x0680(0x0004) (Const, Native, DuplicateTransient)
	struct FPointer                                    DefaultMaterialInstances[0x3];                            // 0x0688(0x0004) (Const, Native, DuplicateTransient)
	int                                                EditorX;                                                  // 0x0694(0x0004)
	int                                                EditorY;                                                  // 0x0698(0x0004)
	int                                                EditorPitch;                                              // 0x069C(0x0004)
	int                                                EditorYaw;                                                // 0x06A0(0x0004)
	TArray<class UMaterialExpression*>                 Expressions;                                              // 0x06A4(0x000C) (NeedCtorLink)
	TArray<class UMaterialExpressionComment*>          EditorComments;                                           // 0x06B0(0x000C) (NeedCtorLink)
	TArray<struct FMaterialFunctionInfo>               MaterialFunctionInfos;                                    // 0x06BC(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x06C8(0x003C) UNKNOWN PROPERTY: MapProperty Engine.Material.EditorParameters
	TArray<class UTexture*>                            ReferencedTextures;                                       // 0x0704(0x000C) (Const, NeedCtorLink, Deprecated)
	TArray<struct FGuid>                               ReferencedTextureGuids;                                   // 0x0710(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Material");
		return ptr;
	}

};


// Class Engine.DecalMaterial
// 0x0000 (0x071C - 0x071C)
class UDecalMaterial : public UMaterial
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalMaterial");
		return ptr;
	}

};


// Class Engine.FogVolumeDensityInfo
// 0x000C (0x01E0 - 0x01D4)
class AFogVolumeDensityInfo : public AInfo
{
public:
	class UFogVolumeDensityComponent*                  DensityComponent;                                         // 0x01D4(0x0004) (Edit, ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        AutomaticMeshComponent;                                   // 0x01D8(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      bEnabled : 1;                                             // 0x01DC(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeDensityInfo");
		return ptr;
	}


	void ApplyCheckpointRecord(struct AFogVolumeDensityInfo_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct AFogVolumeDensityInfo_FCheckpointRecord* Record);
	bool ShouldSaveForCheckpoint();
	void OnToggle(class USeqAct_Toggle* Action);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class Engine.FogVolumeConeDensityInfo
// 0x0000 (0x01E0 - 0x01E0)
class AFogVolumeConeDensityInfo : public AFogVolumeDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeConeDensityInfo");
		return ptr;
	}

};


// Class Engine.FogVolumeConstantDensityInfo
// 0x0000 (0x01E0 - 0x01E0)
class AFogVolumeConstantDensityInfo : public AFogVolumeDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeConstantDensityInfo");
		return ptr;
	}

};


// Class Engine.FogVolumeLinearHalfspaceDensityInfo
// 0x0000 (0x01E0 - 0x01E0)
class AFogVolumeLinearHalfspaceDensityInfo : public AFogVolumeDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeLinearHalfspaceDensityInfo");
		return ptr;
	}

};


// Class Engine.FogVolumeSphericalDensityInfo
// 0x0000 (0x01E0 - 0x01E0)
class AFogVolumeSphericalDensityInfo : public AFogVolumeDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeSphericalDensityInfo");
		return ptr;
	}

};


// Class Engine.ExponentialHeightFogComponent
// 0x002F (0x0084 - 0x0055)
class UExponentialHeightFogComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	unsigned long                                      bEnabled : 1;                                             // 0x0058(0x0004) (Edit, Const)
	float                                              FogHeight;                                                // 0x005C(0x0004) (Const)
	float                                              FogDensity;                                               // 0x0060(0x0004) (Edit, Const)
	float                                              FogHeightFalloff;                                         // 0x0064(0x0004) (Edit, Const)
	float                                              FogMaxOpacity;                                            // 0x0068(0x0004) (Edit, Const)
	float                                              StartDistance;                                            // 0x006C(0x0004) (Edit, Const)
	float                                              LightTerminatorAngle;                                     // 0x0070(0x0004) (Edit, Const)
	float                                              OppositeLightBrightness;                                  // 0x0074(0x0004) (Edit, Const)
	struct FColor                                      OppositeLightColor;                                       // 0x0078(0x0004) (Edit, Const)
	float                                              LightInscatteringBrightness;                              // 0x007C(0x0004) (Edit, Const)
	struct FColor                                      LightInscatteringColor;                                   // 0x0080(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ExponentialHeightFogComponent");
		return ptr;
	}


	void SetEnabled(bool bSetEnabled);
};


// Class Engine.FogVolumeDensityComponent
// 0x0043 (0x0098 - 0x0055)
class UFogVolumeDensityComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	class UMaterialInterface*                          FogMaterial;                                              // 0x0058(0x0004) (Edit)
	class UMaterialInterface*                          DefaultFogVolumeMaterial;                                 // 0x005C(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0060(0x0004) (Edit, Const)
	unsigned long                                      bAffectsTranslucency : 1;                                 // 0x0060(0x0004) (Edit)
	unsigned long                                      bOnlyAffectsTranslucency : 1;                             // 0x0060(0x0004) (Edit)
	struct FLinearColor                                SimpleLightColor;                                         // 0x0064(0x0010) (Edit)
	struct FLinearColor                                ApproxFogLightColor;                                      // 0x0074(0x0010) (Edit)
	float                                              StartDistance;                                            // 0x0084(0x0004) (Edit)
	float                                              MaxDistance;                                              // 0x0088(0x0004) (Edit)
	TArray<class AActor*>                              FogVolumeActors;                                          // 0x008C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeDensityComponent");
		return ptr;
	}


	void SetEnabled(bool bSetEnabled);
};


// Class Engine.FogVolumeConeDensityComponent
// 0x0028 (0x00C0 - 0x0098)
class UFogVolumeConeDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                               // 0x0098(0x0004) (Edit)
	struct FVector                                     ConeVertex;                                               // 0x009C(0x000C) (Edit)
	float                                              ConeRadius;                                               // 0x00A8(0x0004) (Edit)
	struct FVector                                     ConeAxis;                                                 // 0x00AC(0x000C) (Edit)
	float                                              ConeMaxAngle;                                             // 0x00B8(0x0004) (Edit)
	class UDrawLightConeComponent*                     PreviewCone;                                              // 0x00BC(0x0004) (Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeConeDensityComponent");
		return ptr;
	}

};


// Class Engine.FogVolumeConstantDensityComponent
// 0x0004 (0x009C - 0x0098)
class UFogVolumeConstantDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              Density;                                                  // 0x0098(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeConstantDensityComponent");
		return ptr;
	}

};


// Class Engine.FogVolumeLinearHalfspaceDensityComponent
// 0x0018 (0x00B0 - 0x0098)
class UFogVolumeLinearHalfspaceDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              PlaneDistanceFactor;                                      // 0x0098(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	struct FPlane                                      HalfspacePlane;                                           // 0x00A0(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeLinearHalfspaceDensityComponent");
		return ptr;
	}

};


// Class Engine.FogVolumeSphericalDensityComponent
// 0x0018 (0x00B0 - 0x0098)
class UFogVolumeSphericalDensityComponent : public UFogVolumeDensityComponent
{
public:
	float                                              MaxDensity;                                               // 0x0098(0x0004) (Edit)
	struct FVector                                     SphereCenter;                                             // 0x009C(0x000C)
	float                                              SphereRadius;                                             // 0x00A8(0x0004)
	class UDrawLightRadiusComponent*                   PreviewSphereRadius;                                      // 0x00AC(0x0004) (Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FogVolumeSphericalDensityComponent");
		return ptr;
	}

};


// Class Engine.ActorFactoryFogVolumeConstantDensityInfo
// 0x0008 (0x0070 - 0x0068)
class UActorFactoryFogVolumeConstantDensityInfo : public UActorFactory
{
public:
	class UMaterialInterface*                          SelectedMaterial;                                         // 0x0068(0x0004)
	unsigned long                                      bNothingSelected : 1;                                     // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryFogVolumeConstantDensityInfo");
		return ptr;
	}

};


// Class Engine.ActorFactoryFogVolumeLinearHalfspaceDensityInfo
// 0x0000 (0x0070 - 0x0070)
class UActorFactoryFogVolumeLinearHalfspaceDensityInfo : public UActorFactoryFogVolumeConstantDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryFogVolumeLinearHalfspaceDensityInfo");
		return ptr;
	}

};


// Class Engine.ActorFactoryFogVolumeSphericalDensityInfo
// 0x0000 (0x0070 - 0x0070)
class UActorFactoryFogVolumeSphericalDensityInfo : public UActorFactoryFogVolumeConstantDensityInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryFogVolumeSphericalDensityInfo");
		return ptr;
	}

};


// Class Engine.ApexDestructibleActor
// 0x0078 (0x024C - 0x01D4)
class AApexDestructibleActor : public AActor
{
public:
	struct FPointer                                    VfTable_IInterface_NavMeshPathObstacle;                   // 0x01D4(0x0004) (Const, Native, NoExport)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x01D8(0x0004) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      bFractureMaterialOverride : 1;                            // 0x01DC(0x0004) (Edit)
	unsigned long                                      bPlaySingleFractureMaterialEffect : 1;                    // 0x01DC(0x0004) (Edit, Const)
	unsigned long                                      bNavMeshObstacleRegistered : 1;                           // 0x01DC(0x0004) (Transient)
	TArray<class UFractureMaterial*>                   FractureMaterials;                                        // 0x01E0(0x000C) (Edit, Const, EditFixedSize, NeedCtorLink)
	class UApexStaticDestructibleComponent*            StaticDestructibleComponent;                              // 0x01EC(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UApexRenderVolumeComponent*                  DustRenderVolume;                                         // 0x01F0(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UApexRenderVolumeComponent*                  CrumbleRenderVolume;                                      // 0x01F4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UApexGenericAsset*                           CrumbleAsset;                                             // 0x01F8(0x0004) (Edit, Const, EditConst)
	class UApexGenericAsset*                           DustAsset;                                                // 0x01FC(0x0004) (Edit, Const, EditConst)
	int                                                LOD;                                                      // 0x0200(0x0004) (Edit, Const)
	TArray<unsigned char>                              VisibilityFactors;                                        // 0x0204(0x000C) (AlwaysInit, NeedCtorLink)
	TArray<class USoundCue*>                           FractureSounds;                                           // 0x0210(0x000C) (Transient, NeedCtorLink)
	TArray<class UParticleSystem*>                     FractureParticleEffects;                                  // 0x021C(0x000C) (Transient, NeedCtorLink)
	float                                              LastDamagedTime;                                          // 0x0228(0x0004) (Transient)
	float                                              LastNavMeshUpdateTime;                                    // 0x022C(0x0004) (Transient)
	struct FBox                                        NavMeshObstacleBounds;                                    // 0x0230(0x001C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexDestructibleActor");
		return ptr;
	}


	void OnSetMaterial(class USeqAct_SetMaterial* Action);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent);
	void TakeDamage(float Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void UpdateNavMeshObstacle();
	void TerminateNavMeshObstacle();
	void InitializeNavMeshObstacle();
	void Destroyed();
	void PostBeginPlay();
	void CacheFractureEffects();
	void SpawnFractureEmitter(class UParticleSystem* EmitterTemplate, const struct FVector& SpawnLocation, const struct FVector& SpawnDirection);
};


// Class Engine.FracturedStaticMeshActor
// 0x0068 (0x023C - 0x01D4)
class AFracturedStaticMeshActor : public AActor
{
public:
	int                                                MaxPartsToSpawnAtOnce;                                    // 0x01D4(0x0004) (Edit)
	class UFracturedStaticMeshComponent*               FracturedStaticMeshComponent;                             // 0x01D8(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UFracturedSkinnedMeshComponent*              SkinnedComponent;                                         // 0x01DC(0x0004) (Const, ExportObject, Component, EditInline)
	TArray<int>                                        ChunkHealth;                                              // 0x01E0(0x000C) (NeedCtorLink)
	unsigned long                                      bHasShownMissingSoundWarning : 1;                         // 0x01EC(0x0004) (Transient)
	unsigned long                                      bBreakChunksOnActorTouch : 1;                             // 0x01EC(0x0004) (Edit)
	unsigned long                                      bShouldSaveForCheckpoint : 1;                             // 0x01EC(0x0004) (Edit)
	TArray<class UClass*>                              FracturedByDamageType;                                    // 0x01F0(0x000C) (Edit, NeedCtorLink)
	float                                              ChunkHealthScale;                                         // 0x01FC(0x0004) (Edit)
	TArray<class UParticleSystem*>                     OverrideFragmentDestroyEffects;                           // 0x0200(0x000C) (Edit, NeedCtorLink)
	float                                              FractureCullMinDistance;                                  // 0x020C(0x0004) (Edit)
	float                                              FractureCullMaxDistance;                                  // 0x0210(0x0004) (Edit)
	TArray<struct FDeferredPartToSpawn>                DeferredPartsToSpawn;                                     // 0x0214(0x000C) (Transient, NeedCtorLink)
	struct FPhysEffectInfo                             PartImpactEffect;                                         // 0x0220(0x0010)
	class USoundCue*                                   ExplosionFractureSound;                                   // 0x0230(0x0004)
	class USoundCue*                                   SingleChunkFractureSound;                                 // 0x0234(0x0004)
	class UMaterialInterface*                          MI_LoseChunkPreviousMaterial;                             // 0x0238(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedStaticMeshActor");
		return ptr;
	}


	void NotifyHitByExplosion(class AController* InstigatorController, float DamageAmount, class UClass* dmgType);
	void SetLoseChunkReplacementMaterial();
	void HideFragmentsToMaximizeMemoryUsage();
	void HideOneFragment();
	void ResetVisibility();
	void BreakOffPartsInRadius(const struct FVector& Origin, float Radius, float RBStrength, bool bWantPhysChunksAndParticles);
	void Explode();
	void TakeDamage(float Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void RemoveDecals(int IndexToRemoveDecalsFrom);
	bool FractureEffectIsRelevant(bool bForceDedicated, class APawn* EffectInstigator, unsigned char* bWantPhysChunksAndParticles);
	bool IsFracturedByDamageType(class UClass* dmgType);
	bool SpawnDeferredParts();
	void BreakOffIsolatedIslands(TArray<int> IgnoreFrags, const struct FVector& ChunkDir, TArray<class AFracturedStaticMeshPart*> DisableCollWithPart, bool bWantPhysChunks, TArray<unsigned char>* FragmentVis);
	void ApplyCheckpointRecord(struct AFracturedStaticMeshActor_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct AFracturedStaticMeshActor_FCheckpointRecord* Record);
	bool ShouldSaveForCheckpoint();
	void ResetHealth();
	void PostBeginPlay();
	class AFracturedStaticMeshPart* SpawnPartMulti(TArray<int> ChunkIndices, const struct FVector& InitialVel, const struct FVector& InitialAngVel, float RelativeScale, bool bExplosion);
	class AFracturedStaticMeshPart* SpawnPart(int ChunkIndex, const struct FVector& InitialVel, const struct FVector& InitialAngVel, float RelativeScale, bool bExplosion);
};


// Class Engine.FracturedStaticMeshPart
// 0x0030 (0x026C - 0x023C)
class AFracturedStaticMeshPart : public AFracturedStaticMeshActor
{
public:
	float                                              DestroyPartRadiusFactor;                                  // 0x023C(0x0004)
	class AFracturedStaticMeshActor*                   BaseFracturedMeshActor;                                   // 0x0240(0x0004) (Transient)
	unsigned long                                      bHasBeenRecycled : 1;                                     // 0x0244(0x0004)
	unsigned long                                      bChangeRBChannelWhenAsleep : 1;                           // 0x0244(0x0004)
	unsigned long                                      bCompositeThatExplodesOnImpact : 1;                       // 0x0244(0x0004)
	float                                              LastSpawnTime;                                            // 0x0248(0x0004)
	int                                                PartPoolIndex;                                            // 0x024C(0x0004)
	float                                              FracPartGravScale;                                        // 0x0250(0x0004)
	TEnumAsByte<ERBCollisionChannel>                   AsleepRBChannel;                                          // 0x0254(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0255(0x0003) MISSED OFFSET
	struct FVector                                     OldVelocity;                                              // 0x0258(0x000C)
	float                                              CurrentVibrationLevel;                                    // 0x0264(0x0004)
	float                                              LastImpactSoundTime;                                      // 0x0268(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedStaticMeshPart");
		return ptr;
	}


	void BreakOffPartsInRadius(const struct FVector& Origin, float Radius, float RBStrength, bool bWantPhysChunksAndParticles);
	void Explode();
	void FellOutOfWorld(class UClass* dmgType);
	void TryToCleanUp();
	void TakeDamage(float Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void RecyclePart(bool bAddToFreePool);
	void Initialize();
};


// Class Engine.FractureManager
// 0x0038 (0x020C - 0x01D4)
class AFractureManager : public AActor
{
public:
	int                                                FSMPartPoolSize;                                          // 0x01D4(0x0004)
	unsigned long                                      bEnableAntiVibration : 1;                                 // 0x01D8(0x0004) (Edit)
	unsigned long                                      bEnableSpawnChunkEffectForRadialDamage : 1;               // 0x01D8(0x0004) (Edit)
	float                                              DestroyVibrationLevel;                                    // 0x01DC(0x0004) (Edit)
	float                                              DestroyMinAngVel;                                         // 0x01E0(0x0004) (Edit)
	float                                              ExplosionVelScale;                                        // 0x01E4(0x0004) (Edit)
	TArray<class AFracturedStaticMeshPart*>            PartPool;                                                 // 0x01E8(0x000C) (NeedCtorLink)
	TArray<int>                                        FreeParts;                                                // 0x01F4(0x000C) (NeedCtorLink)
	TArray<class AFracturedStaticMeshActor*>           ActorsWithDeferredPartsToSpawn;                           // 0x0200(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FractureManager");
		return ptr;
	}


	void Tick(float DeltaTime);
	void ReturnPartActor(class AFracturedStaticMeshPart* Part);
	class AFracturedStaticMeshPart* SpawnPartActor(class AFracturedStaticMeshActor* Parent, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	class AFracturedStaticMeshPart* GetFSMPart(class AFracturedStaticMeshActor* Parent, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	void ResetPoolVisibility();
	void CreateFSMParts();
	void CleanUpFSMParts();
	void Destroyed();
	void PreBeginPlay();
	float GetFSMFractureCullDistanceScale();
	float GetFSMRadialSpawnChanceScale();
	float GetFSMDirectSpawnChanceScale();
	float GetNumFSMPartsScale();
	void SpawnChunkDestroyEffect(class UParticleSystem* Effect, const struct FBox& ChunkBox, const struct FVector& ChunkDir, float Scale);
};


// Class Engine.ImageReflection
// 0x000C (0x01E0 - 0x01D4)
class AImageReflection : public AActor
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x01D4(0x0004) (Net)
	class UImageReflectionComponent*                   ReflectionComponent;                                      // 0x01D8(0x0004) (ExportObject, Component, EditInline, Deprecated)
	class UImageBasedReflectionComponent*              ImageReflectionComponent;                                 // 0x01DC(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ImageReflection");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class Engine.ImageReflectionSceneCapture
// 0x0008 (0x01E8 - 0x01E0)
class AImageReflectionSceneCapture : public AImageReflection
{
public:
	float                                              DepthRange;                                               // 0x01E0(0x0004) (Edit)
	float                                              ColorRange;                                               // 0x01E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ImageReflectionSceneCapture");
		return ptr;
	}

};


// Class Engine.ImageReflectionShadowPlane
// 0x0008 (0x01DC - 0x01D4)
class AImageReflectionShadowPlane : public AActor
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x01D4(0x0004) (Net)
	class UImageReflectionShadowPlaneComponent*        ReflectionShadowComponent;                                // 0x01D8(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ImageReflectionShadowPlane");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class Engine.ImageReflectionComponent
// 0x0007 (0x005C - 0x0055)
class UImageReflectionComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	class UTexture2D*                                  ReflectionTexture;                                        // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ImageReflectionComponent");
		return ptr;
	}

};


// Class Engine.ImageReflectionShadowPlaneComponent
// 0x0018 (0x01F0 - 0x01D8)
class UImageReflectionShadowPlaneComponent : public UPrimitiveComponent
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x01D8(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01DC(0x0004) MISSED OFFSET
	struct FPlane                                      ReflectionPlane;                                          // 0x01E0(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ImageReflectionShadowPlaneComponent");
		return ptr;
	}


	void SetEnabled(bool bSetEnabled);
};


// Class Engine.ApexComponentBase
// 0x0014 (0x01F8 - 0x01E4)
class UApexComponentBase : public UMeshComponent
{
public:
	struct FPointer                                    ComponentBaseResources;                                   // 0x01E4(0x0004) (Const, Native, Transient)
	struct FRenderCommandFence_Mirror                  ReleaseResourcesFence;                                    // 0x01E8(0x0004) (Const, Native, Transient)
	class UApexAsset*                                  Asset;                                                    // 0x01EC(0x0004) (Edit, Const)
	struct FColor                                      WireframeColor;                                           // 0x01F0(0x0004) (Edit)
	unsigned long                                      bAssetChanged : 1;                                        // 0x01F4(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexComponentBase");
		return ptr;
	}

};


// Class Engine.ApexDynamicComponent
// 0x0004 (0x01FC - 0x01F8)
class UApexDynamicComponent : public UApexComponentBase
{
public:
	struct FPointer                                    ComponentDynamicResources;                                // 0x01F8(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexDynamicComponent");
		return ptr;
	}

};


// Class Engine.ApexStaticComponent
// 0x0000 (0x01F8 - 0x01F8)
class UApexStaticComponent : public UApexComponentBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexStaticComponent");
		return ptr;
	}

};


// Class Engine.ApexStaticDestructibleComponent
// 0x0014 (0x020C - 0x01F8)
class UApexStaticDestructibleComponent : public UApexStaticComponent
{
public:
	float                                              SleepEnergyThreshold;                                     // 0x01F8(0x0004) (Edit)
	float                                              SleepDamping;                                             // 0x01FC(0x0004) (Edit)
	struct FPointer                                    ApexDestructibleActor;                                    // 0x0200(0x0004) (Native, DuplicateTransient)
	struct FPointer                                    ApexDestructiblePreview;                                  // 0x0204(0x0004) (Native, DuplicateTransient)
	unsigned long                                      bIsThumbnailComponent : 1;                                // 0x0208(0x0004) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexStaticDestructibleComponent");
		return ptr;
	}

};


// Class Engine.FracturedBaseComponent
// 0x0020 (0x0274 - 0x0254)
class UFracturedBaseComponent : public UStaticMeshComponent
{
public:
	struct FPointer                                    ComponentBaseResources;                                   // 0x0254(0x0004) (Const, Native, Transient)
	struct FRenderCommandFence_Mirror                  ReleaseResourcesFence;                                    // 0x0258(0x0004) (Const, Native, Transient)
	TArray<unsigned char>                              VisibleFragments;                                         // 0x025C(0x000C) (Const, Transient, NeedCtorLink)
	unsigned long                                      bVisibilityHasChanged : 1;                                // 0x0268(0x0004) (Transient)
	unsigned long                                      bVisibilityReset : 1;                                     // 0x0268(0x0004) (Const, Transient)
	unsigned long                                      bInitialVisibilityValue : 1;                              // 0x0268(0x0004) (Const)
	unsigned long                                      bUseDynamicIndexBuffer : 1;                               // 0x0268(0x0004) (Const)
	unsigned long                                      bUseDynamicIBWithHiddenFragments : 1;                     // 0x0268(0x0004) (Const)
	int                                                NumResourceIndices;                                       // 0x026C(0x0004) (Const)
	int                                                bResetStaticMesh;                                         // 0x0270(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedBaseComponent");
		return ptr;
	}


	int GetNumVisibleFragments();
	int GetNumFragments();
	bool IsFragmentVisible(int FragmentIndex);
	TArray<unsigned char> GetVisibleFragments();
	bool SetStaticMesh(class UStaticMesh* NewMesh, bool bForce);
};


// Class Engine.FracturedSkinnedMeshComponent
// 0x0020 (0x0294 - 0x0274)
class UFracturedSkinnedMeshComponent : public UFracturedBaseComponent
{
public:
	struct FPointer                                    ComponentSkinResources;                                   // 0x0274(0x0004) (Const, Native, Transient)
	TArray<struct FMatrix>                             FragmentTransforms;                                       // 0x0278(0x000C) (Const, Transient, NeedCtorLink)
	TArray<class UFracturedStaticMeshComponent*>       DependentComponents;                                      // 0x0284(0x000C) (Const, ExportObject, Transient, Component, NeedCtorLink, EditInline)
	unsigned long                                      bBecameVisible : 1;                                       // 0x0290(0x0004) (Const, Transient)
	unsigned long                                      bFragmentTransformsChanged : 1;                           // 0x0290(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedSkinnedMeshComponent");
		return ptr;
	}

};


// Class Engine.FracturedStaticMeshComponent
// 0x0040 (0x02B4 - 0x0274)
class UFracturedStaticMeshComponent : public UFracturedBaseComponent
{
public:
	TArray<unsigned char>                              FragmentNeighborsVisible;                                 // 0x0274(0x000C) (Const, Transient, NeedCtorLink)
	struct FBox                                        VisibleBox;                                               // 0x0280(0x001C) (Const)
	unsigned long                                      bUseSkinnedRendering : 1;                                 // 0x029C(0x0004) (Const)
	unsigned long                                      bUseVisibleVertsForBounds : 1;                            // 0x029C(0x0004)
	unsigned long                                      bTopFragmentsRootNonDestroyable : 1;                      // 0x029C(0x0004) (Edit)
	unsigned long                                      bBottomFragmentsRootNonDestroyable : 1;                   // 0x029C(0x0004) (Edit)
	float                                              TopBottomFragmentDistThreshold;                           // 0x02A0(0x0004) (Edit)
	class UMaterialInterface*                          LoseChunkOutsideMaterialOverride;                         // 0x02A4(0x0004) (Edit)
	float                                              FragmentBoundsMaxZ;                                       // 0x02A8(0x0004)
	float                                              FragmentBoundsMinZ;                                       // 0x02AC(0x0004)
	class UFracturedSkinnedMeshComponent*              SkinnedComponent;                                         // 0x02B0(0x0004) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedStaticMeshComponent");
		return ptr;
	}


	class UPhysicalMaterial* GetFracturedMeshPhysMaterial();
	void RecreatePhysState();
	TArray<int> GetBoundaryHiddenFragments(TArray<int> AdditionalVisibleFragments);
	TArray<struct FFragmentGroup> GetFragmentGroups(TArray<int> IgnoreFragments, float MinConnectionArea);
	int GetCoreFragmentIndex();
	struct FVector GetFragmentAverageExteriorNormal(int FragmentIndex);
	struct FBox GetFragmentBox(int FragmentIndex);
	bool IsNoPhysFragment(int FragmentIndex);
	bool IsRootFragment(int FragmentIndex);
	bool IsFragmentDestroyable(int FragmentIndex);
	void SetVisibleFragments(TArray<unsigned char> VisibilityFactors);
};


// Class Engine.ImageBasedReflectionComponent
// 0x0018 (0x026C - 0x0254)
class UImageBasedReflectionComponent : public UStaticMeshComponent
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0254(0x0004) (Edit)
	unsigned long                                      bTwoSided : 1;                                            // 0x0254(0x0004) (Edit)
	class UTexture2D*                                  ReflectionTexture;                                        // 0x0258(0x0004) (Edit)
	struct FLinearColor                                ReflectionColor;                                          // 0x025C(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ImageBasedReflectionComponent");
		return ptr;
	}


	void OnUpdatePropertyReflectionColor();
	void UpdateImageReflectionParameters();
	void SetEnabled(bool bSetEnabled);
};


// Class Engine.InstancedStaticMeshComponent
// 0x0058 (0x02AC - 0x0254)
class UInstancedStaticMeshComponent : public UStaticMeshComponent
{
public:
	TArray<struct FInstancedStaticMeshInstanceData>    PerInstanceData;                                          // 0x0254(0x000C) (NeedCtorLink, Deprecated)
	TArray<struct FInstancedStaticMeshInstanceData>    PerInstanceSMData;                                        // 0x0260(0x000C) (Native)
	int                                                NumPendingLightmaps;                                      // 0x026C(0x0004) (Transient)
	int                                                ComponentJoinKey;                                         // 0x0270(0x0004)
	TArray<struct FInstancedStaticMeshMappingInfo>     CachedMappings;                                           // 0x0274(0x000C) (Transient, NeedCtorLink)
	int                                                InstancingRandomSeed;                                     // 0x0280(0x0004) (Edit)
	int                                                InstanceStartCullDistance;                                // 0x0284(0x0004) (Edit)
	int                                                InstanceEndCullDistance;                                  // 0x0288(0x0004) (Edit)
	struct FBitArray_Mirror                            SelectedInstances;                                        // 0x028C(0x001C) (Const, Native)
	unsigned long                                      bDontResolveInstancedLightmaps : 1;                       // 0x02A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InstancedStaticMeshComponent");
		return ptr;
	}

};


// Class Engine.SplineMeshComponent
// 0x0068 (0x02BC - 0x0254)
class USplineMeshComponent : public UStaticMeshComponent
{
public:
	struct FSplineMeshParams                           SplineParams;                                             // 0x0254(0x0058)
	struct FVector                                     SplineXDir;                                               // 0x02AC(0x000C)
	unsigned long                                      bSmoothInterpRollScale : 1;                               // 0x02B8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineMeshComponent");
		return ptr;
	}

};


// Class Engine.ApexAsset
// 0x004C (0x0088 - 0x003C)
class UApexAsset : public UObject
{
public:
	struct FString                                     OriginalApexName;                                         // 0x003C(0x000C) (Const, NeedCtorLink, EditInline)
	TArray<class UApexComponentBase*>                  ApexComponents;                                           // 0x0048(0x000C) (Const, ExportObject, Native, Transient, Component, EditInline)
	TArray<class UApexAsset*>                          NamedReferences;                                          // 0x0054(0x000C) (Edit, Const, NeedCtorLink, EditInline, EditInlineUse)
	struct FString                                     SourceFilePath;                                           // 0x0060(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	struct FString                                     SourceFileTimestamp;                                      // 0x006C(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	struct FPointer                                    MApexAsset;                                               // 0x0078(0x0004) (Native)
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x007C(0x000C) (Edit, Const, EditFixedSize, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexAsset");
		return ptr;
	}

};


// Class Engine.ApexClothingAsset
// 0x004C (0x00D4 - 0x0088)
class UApexClothingAsset : public UApexAsset
{
public:
	TArray<struct FClothingLodInfo>                    LodMaterialInfo;                                          // 0x0088(0x000C) (Edit, Const, EditFixedSize, NeedCtorLink)
	class UApexGenericAsset*                           ApexClothingLibrary;                                      // 0x0094(0x0004) (Const, Deprecated)
	unsigned long                                      bUseHardwareCloth : 1;                                    // 0x0098(0x0004) (Edit, Const)
	unsigned long                                      bFallbackSkinning : 1;                                    // 0x0098(0x0004) (Edit, Const)
	unsigned long                                      bSlowStart : 1;                                           // 0x0098(0x0004) (Edit, Const)
	unsigned long                                      bRecomputeNormals : 1;                                    // 0x0098(0x0004) (Edit, Const)
	unsigned long                                      bAllowAdaptiveTargetFrequency : 1;                        // 0x0098(0x0004) (Edit, Const)
	unsigned long                                      bResetAfterTeleport : 1;                                  // 0x0098(0x0004) (Edit, Const)
	unsigned long                                      bUseLocalSpaceSimulation : 1;                             // 0x0098(0x0004) (Edit, Const)
	unsigned long                                      bHasUniqueAssetMaterialNames : 1;                         // 0x0098(0x0004)
	unsigned long                                      IgnoreInitialTrigger : 1;                                 // 0x0098(0x0004) (Edit)
	int                                                UVChannelForTangentUpdate;                                // 0x009C(0x0004) (Edit, Const)
	float                                              MaxDistanceBlendTime;                                     // 0x00A0(0x0004) (Edit, Const)
	float                                              ContinuousRotationThreshold;                              // 0x00A4(0x0004) (Edit, Const)
	float                                              ContinuousDistanceThreshold;                              // 0x00A8(0x0004) (Edit, Const)
	float                                              LodWeightsMaxDistance;                                    // 0x00AC(0x0004) (Edit, Const)
	float                                              LodWeightsDistanceWeight;                                 // 0x00B0(0x0004) (Edit, Const)
	float                                              LodWeightsBias;                                           // 0x00B4(0x0004) (Edit, Const)
	float                                              LodWeightsBenefitsBias;                                   // 0x00B8(0x0004) (Edit, Const)
	float                                              LODDecayTime;                                             // 0x00BC(0x0004) (Edit, Const)
	class USoundCue*                                   SoundOnMove;                                              // 0x00C0(0x0004) (Edit)
	class USoundCue*                                   SoundOnRest;                                              // 0x00C4(0x0004) (Edit)
	class USoundCue*                                   SoundWhileMoving;                                         // 0x00C8(0x0004) (Edit)
	float                                              SpeedThresholdOnMove;                                     // 0x00CC(0x0004) (Edit)
	float                                              SpeedThresholdOnRest;                                     // 0x00D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexClothingAsset");
		return ptr;
	}

};


// Class Engine.ApexDestructibleAsset
// 0x010C (0x0194 - 0x0088)
class UApexDestructibleAsset : public UApexAsset
{
public:
	TArray<class UFractureMaterial*>                   FractureMaterials;                                        // 0x0088(0x000C) (Edit, Const, EditFixedSize, NeedCtorLink)
	unsigned long                                      bPlaySingleFractureMaterialEffect : 1;                    // 0x0094(0x0004) (Edit, Const)
	unsigned long                                      bHasUniqueAssetMaterialNames : 1;                         // 0x0094(0x0004)
	unsigned long                                      bDynamic : 1;                                             // 0x0094(0x0004) (Deprecated)
	unsigned long                                      bDynamicNavMeshObstacle : 1;                              // 0x0094(0x0004) (Edit)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                      // 0x0098(0x0004) (Edit)
	struct FPointer                                    MDestructibleThumbnailComponent;                          // 0x009C(0x0004) (Native)
	class UApexGenericAsset*                           CrumbleEmitter;                                           // 0x00A0(0x0004) (Edit)
	class UApexGenericAsset*                           DustEmitter;                                              // 0x00A4(0x0004) (Edit)
	struct FNxDestructibleParameters                   DestructibleParameters;                                   // 0x00A8(0x00EC) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexDestructibleAsset");
		return ptr;
	}

};


// Class Engine.ApexGenericAsset
// 0x0028 (0x00B0 - 0x0088)
class UApexGenericAsset : public UApexAsset
{
public:
	TEnumAsByte<ERBCollisionChannel>                   CollideChannel;                                           // 0x0088(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x008C(0x0004) (Edit, Const)
	struct FPointer                                    GroupsMask;                                               // 0x0090(0x0004) (Const, Native, Transient)
	struct FPointer                                    GroupsMask64;                                             // 0x0094(0x0004) (Const, Native, Transient)
	TArray<class UApexGenericAsset*>                   AssetDependencies;                                        // 0x0098(0x000C) (Edit, Const, EditFixedSize, NeedCtorLink)
	TArray<class UStaticMesh*>                         MeshDependencies;                                         // 0x00A4(0x000C) (Edit, Const, EditFixedSize, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexGenericAsset");
		return ptr;
	}

};


// Class Engine.InterpFilter
// 0x000C (0x0048 - 0x003C)
class UInterpFilter : public UObject
{
public:
	struct FString                                     Caption;                                                  // 0x003C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter");
		return ptr;
	}

};


// Class Engine.InterpFilter_Classes
// 0x0010 (0x0058 - 0x0048)
class UInterpFilter_Classes : public UInterpFilter
{
public:
	class UClass*                                      ClassToFilterBy;                                          // 0x0048(0x0004)
	TArray<class UClass*>                              TrackClasses;                                             // 0x004C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter_Classes");
		return ptr;
	}

};


// Class Engine.InterpFilter_Custom
// 0x000C (0x0054 - 0x0048)
class UInterpFilter_Custom : public UInterpFilter
{
public:
	TArray<class UInterpGroup*>                        GroupsToInclude;                                          // 0x0048(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpFilter_Custom");
		return ptr;
	}

};


// Class Engine.InterpGroup
// 0x002C (0x0068 - 0x003C)
class UInterpGroup : public UObject
{
public:
	struct FPointer                                    VfTable_FInterpEdInputInterface;                          // 0x003C(0x0004) (Const, Native, NoExport)
	TArray<class UInterpTrack*>                        InterpTracks;                                             // 0x0040(0x000C) (ExportObject, NeedCtorLink)
	struct FName                                       GroupName;                                                // 0x004C(0x0008)
	struct FColor                                      GroupColor;                                               // 0x0054(0x0004) (Edit)
	TArray<class UAnimSet*>                            GroupAnimSets;                                            // 0x0058(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bCollapsed : 1;                                           // 0x0064(0x0004)
	unsigned long                                      bVisible : 1;                                             // 0x0064(0x0004) (Transient)
	unsigned long                                      bIsFolder : 1;                                            // 0x0064(0x0004)
	unsigned long                                      bIsParented : 1;                                          // 0x0064(0x0004)
	unsigned long                                      bIsSelected : 1;                                          // 0x0064(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroup");
		return ptr;
	}

};


// Class Engine.InterpGroupAI
// 0x0010 (0x0078 - 0x0068)
class UInterpGroupAI : public UInterpGroup
{
public:
	class UClass*                                      PreviewPawnClass;                                         // 0x0068(0x0004) (Edit)
	struct FName                                       StageMarkGroup;                                           // 0x006C(0x0008) (Edit)
	unsigned long                                      SnapToRootBoneLocationWhenFinished : 1;                   // 0x0074(0x0004) (Edit)
	unsigned long                                      bNoEncroachmentCheck : 1;                                 // 0x0074(0x0004) (Edit)
	unsigned long                                      bDisableWorldCollision : 1;                               // 0x0074(0x0004) (Edit)
	unsigned long                                      bIgnoreLegacyHeightAdjust : 1;                            // 0x0074(0x0004) (Edit)
	unsigned long                                      bRecreatePreviewPawn : 1;                                 // 0x0074(0x0004) (Transient)
	unsigned long                                      bRefreshStageMarkGroup : 1;                               // 0x0074(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupAI");
		return ptr;
	}

};


// Class Engine.InterpGroupCamera
// 0x003C (0x00A4 - 0x0068)
class UInterpGroupCamera : public UInterpGroup
{
public:
	class UCameraAnim*                                 CameraAnimInst;                                           // 0x0068(0x0004) (Transient)
	struct FCameraPreviewInfo                          Target;                                                   // 0x006C(0x0034) (Edit, NeedCtorLink)
	float                                              CompressTolerance;                                        // 0x00A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupCamera");
		return ptr;
	}

};


// Class Engine.InterpGroupDirector
// 0x0000 (0x0068 - 0x0068)
class UInterpGroupDirector : public UInterpGroup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupDirector");
		return ptr;
	}

};


// Class Engine.InterpGroupInst
// 0x0018 (0x0054 - 0x003C)
class UInterpGroupInst : public UObject
{
public:
	class UInterpGroup*                                Group;                                                    // 0x003C(0x0004)
	class AActor*                                      GroupActor;                                               // 0x0040(0x0004)
	TArray<class UInterpTrackInst*>                    TrackInst;                                                // 0x0044(0x000C) (NeedCtorLink)
	struct FPointer                                    CachedCamOverridePostProcess;                             // 0x0050(0x0004) (Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInst");
		return ptr;
	}

};


// Class Engine.InterpGroupInstAI
// 0x0014 (0x0068 - 0x0054)
class UInterpGroupInstAI : public UInterpGroupInst
{
public:
	class UInterpGroupAI*                              AIGroup;                                                  // 0x0054(0x0004) (Transient)
	TEnumAsByte<EPhysics>                              SavedPhysics;                                             // 0x0058(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	unsigned long                                      bSavedNoEncroachCheck : 1;                                // 0x005C(0x0004)
	unsigned long                                      bSavedCollideActors : 1;                                  // 0x005C(0x0004)
	unsigned long                                      bSavedBlockActors : 1;                                    // 0x005C(0x0004)
	class APawn*                                       PreviewPawn;                                              // 0x0060(0x0004) (Transient)
	class AActor*                                      StageMarkActor;                                           // 0x0064(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInstAI");
		return ptr;
	}

};


// Class Engine.InterpGroupInstCamera
// 0x0000 (0x0054 - 0x0054)
class UInterpGroupInstCamera : public UInterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInstCamera");
		return ptr;
	}

};


// Class Engine.InterpGroupInstDirector
// 0x0000 (0x0054 - 0x0054)
class UInterpGroupInstDirector : public UInterpGroupInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpGroupInstDirector");
		return ptr;
	}

};


// Class Engine.InterpTrackBoolProp
// 0x0014 (0x0094 - 0x0080)
class UInterpTrackBoolProp : public UInterpTrack
{
public:
	TArray<struct FBoolTrackKey>                       BoolTrack;                                                // 0x0080(0x000C) (NeedCtorLink)
	struct FName                                       PropertyName;                                             // 0x008C(0x0008) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackBoolProp");
		return ptr;
	}

};


// Class Engine.InterpTrackDirector
// 0x0010 (0x0090 - 0x0080)
class UInterpTrackDirector : public UInterpTrack
{
public:
	TArray<struct FDirectorTrackCut>                   CutTrack;                                                 // 0x0080(0x000C) (NeedCtorLink)
	unsigned long                                      bSimulateCameraCutsOnClients : 1;                         // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackDirector");
		return ptr;
	}

};


// Class Engine.InterpTrackEvent
// 0x0010 (0x0090 - 0x0080)
class UInterpTrackEvent : public UInterpTrack
{
public:
	TArray<struct FEventTrackKey>                      EventTrack;                                               // 0x0080(0x000C) (NeedCtorLink)
	unsigned long                                      bFireEventsWhenForwards : 1;                              // 0x008C(0x0004) (Edit)
	unsigned long                                      bFireEventsWhenBackwards : 1;                             // 0x008C(0x0004) (Edit)
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;                       // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackEvent");
		return ptr;
	}

};


// Class Engine.InterpTrackFaceFX
// 0x0028 (0x00A8 - 0x0080)
class UInterpTrackFaceFX : public UInterpTrack
{
public:
	TArray<class UFaceFXAnimSet*>                      FaceFXAnimSets;                                           // 0x0080(0x000C) (Edit, NeedCtorLink)
	TArray<struct FFaceFXTrackKey>                     FaceFXSeqs;                                               // 0x008C(0x000C) (NeedCtorLink)
	class UFaceFXAsset*                                CachedActorFXAsset;                                       // 0x0098(0x0004) (Transient)
	TArray<struct FFaceFXSoundCueKey>                  FaceFXSoundCueKeys;                                       // 0x009C(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFaceFX");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatBase
// 0x0014 (0x0094 - 0x0080)
class UInterpTrackFloatBase : public UInterpTrack
{
public:
	struct FInterpCurveFloat                           FloatTrack;                                               // 0x0080(0x0010) (NeedCtorLink)
	float                                              CurveTension;                                             // 0x0090(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatBase");
		return ptr;
	}

};


// Class Engine.InterpTrackAnimControl
// 0x0024 (0x00B8 - 0x0094)
class UInterpTrackAnimControl : public UInterpTrackFloatBase
{
public:
	TArray<class UAnimSet*>                            AnimSets;                                                 // 0x0094(0x000C) (NeedCtorLink)
	struct FName                                       SlotName;                                                 // 0x00A0(0x0008) (Edit)
	TArray<struct FAnimControlTrackKey>                AnimSeqs;                                                 // 0x00A8(0x000C) (NeedCtorLink)
	unsigned long                                      bEnableRootMotion : 1;                                    // 0x00B4(0x0004) (Edit)
	unsigned long                                      bSkipAnimNotifiers : 1;                                   // 0x00B4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackAnimControl");
		return ptr;
	}

};


// Class Engine.InterpTrackFade
// 0x0004 (0x0098 - 0x0094)
class UInterpTrackFade : public UInterpTrackFloatBase
{
public:
	unsigned long                                      bPersistFade : 1;                                         // 0x0094(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFade");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatMaterialParam
// 0x001C (0x00B0 - 0x0094)
class UInterpTrackFloatMaterialParam : public UInterpTrackFloatBase
{
public:
	TArray<struct FMaterialReferenceList>              Materials;                                                // 0x0094(0x000C) (Edit, Const, Component, NeedCtorLink)
	class UMaterialInterface*                          Material;                                                 // 0x00A0(0x0004) (Const, Deprecated)
	struct FName                                       ParamName;                                                // 0x00A4(0x0008) (Edit)
	unsigned long                                      bNeedsMaterialRefsUpdate : 1;                             // 0x00AC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatParticleParam
// 0x0008 (0x009C - 0x0094)
class UInterpTrackFloatParticleParam : public UInterpTrackFloatBase
{
public:
	struct FName                                       ParamName;                                                // 0x0094(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatParticleParam");
		return ptr;
	}

};


// Class Engine.InterpTrackFloatProp
// 0x0008 (0x009C - 0x0094)
class UInterpTrackFloatProp : public UInterpTrackFloatBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0094(0x0008) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackFloatProp");
		return ptr;
	}

};


// Class Engine.InterpTrackMorphWeight
// 0x0008 (0x009C - 0x0094)
class UInterpTrackMorphWeight : public UInterpTrackFloatBase
{
public:
	struct FName                                       MorphNodeName;                                            // 0x0094(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackMorphWeight");
		return ptr;
	}

};


// Class Engine.InterpTrackMove
// 0x0042 (0x00C2 - 0x0080)
class UInterpTrackMove : public UInterpTrack
{
public:
	struct FInterpCurveVector                          PosTrack;                                                 // 0x0080(0x0010) (NeedCtorLink)
	struct FInterpCurveVector                          EulerTrack;                                               // 0x0090(0x0010) (NeedCtorLink)
	struct FInterpLookupTrack                          LookupTrack;                                              // 0x00A0(0x000C) (NeedCtorLink)
	struct FName                                       LookAtGroupName;                                          // 0x00AC(0x0008) (Edit)
	float                                              LinCurveTension;                                          // 0x00B4(0x0004) (Edit)
	float                                              AngCurveTension;                                          // 0x00B8(0x0004) (Edit)
	unsigned long                                      bUseQuatInterpolation : 1;                                // 0x00BC(0x0004) (Edit)
	unsigned long                                      bShowArrowAtKeys : 1;                                     // 0x00BC(0x0004) (Edit)
	unsigned long                                      bDisableMovement : 1;                                     // 0x00BC(0x0004) (Edit)
	unsigned long                                      bShowTranslationOnCurveEd : 1;                            // 0x00BC(0x0004) (Edit)
	unsigned long                                      bShowRotationOnCurveEd : 1;                               // 0x00BC(0x0004) (Edit)
	unsigned long                                      bHide3DTrack : 1;                                         // 0x00BC(0x0004) (Edit)
	unsigned long                                      bUseRawActorTMforRelativeToInitial : 1;                   // 0x00BC(0x0004) (Edit)
	TEnumAsByte<EInterpTrackMoveFrame>                 MoveFrame;                                                // 0x00C0(0x0001) (Edit, EditConst)
	TEnumAsByte<EInterpTrackMoveRotMode>               RotMode;                                                  // 0x00C1(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackMove");
		return ptr;
	}

};


// Class Engine.InterpTrackMoveAxis
// 0x0010 (0x00A4 - 0x0094)
class UInterpTrackMoveAxis : public UInterpTrackFloatBase
{
public:
	TEnumAsByte<EInterpMoveAxis>                       MoveAxis;                                                 // 0x0094(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	struct FInterpLookupTrack                          LookupTrack;                                              // 0x0098(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackMoveAxis");
		return ptr;
	}

};


// Class Engine.InterpTrackSkelControlScale
// 0x0008 (0x009C - 0x0094)
class UInterpTrackSkelControlScale : public UInterpTrackFloatBase
{
public:
	struct FName                                       SkelControlName;                                          // 0x0094(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackSkelControlScale");
		return ptr;
	}

};


// Class Engine.InterpTrackSkelControlStrength
// 0x0008 (0x009C - 0x0094)
class UInterpTrackSkelControlStrength : public UInterpTrackFloatBase
{
public:
	struct FName                                       SkelControlName;                                          // 0x0094(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackSkelControlStrength");
		return ptr;
	}

};


// Class Engine.InterpTrackSlomo
// 0x0000 (0x0094 - 0x0094)
class UInterpTrackSlomo : public UInterpTrackFloatBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackSlomo");
		return ptr;
	}

};


// Class Engine.InterpTrackHeadTracking
// 0x0044 (0x00C4 - 0x0080)
class UInterpTrackHeadTracking : public UInterpTrack
{
public:
	TArray<struct FHeadTrackingKey>                    HeadTrackingTrack;                                        // 0x0080(0x000C) (NeedCtorLink)
	TArray<struct FName>                               TrackControllerName;                                      // 0x008C(0x000C) (Edit, NeedCtorLink)
	float                                              LookAtActorRadius;                                        // 0x0098(0x0004) (Edit)
	unsigned long                                      bDisableBeyondLimit : 1;                                  // 0x009C(0x0004) (Edit)
	unsigned long                                      bLookAtPawns : 1;                                         // 0x009C(0x0004) (Edit)
	float                                              MaxLookAtTime;                                            // 0x00A0(0x0004) (Edit)
	float                                              MinLookAtTime;                                            // 0x00A4(0x0004) (Edit)
	float                                              MaxInterestTime;                                          // 0x00A8(0x0004) (Edit)
	TArray<class UClass*>                              ActorClassesToLookAt;                                     // 0x00AC(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               TargetBoneNames;                                          // 0x00B8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackHeadTracking");
		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorBase
// 0x0014 (0x0094 - 0x0080)
class UInterpTrackLinearColorBase : public UInterpTrack
{
public:
	struct FInterpCurveLinearColor                     LinearColorTrack;                                         // 0x0080(0x0010) (NeedCtorLink)
	float                                              CurveTension;                                             // 0x0090(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackLinearColorBase");
		return ptr;
	}

};


// Class Engine.InterpTrackLinearColorProp
// 0x0008 (0x009C - 0x0094)
class UInterpTrackLinearColorProp : public UInterpTrackLinearColorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0094(0x0008) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackLinearColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackNotify
// 0x0020 (0x00A0 - 0x0080)
class UInterpTrackNotify : public UInterpTrack
{
public:
	class UAnimNodeSequence*                           Node;                                                     // 0x0080(0x0004)
	struct FName                                       ParentNodeName;                                           // 0x0084(0x0008)
	class UAnimSequence*                               OuterSequence;                                            // 0x008C(0x0004)
	class UAnimSet*                                    OuterSet;                                                 // 0x0090(0x0004)
	TArray<struct FNotifyTrackKey>                     NotifyTrack;                                              // 0x0094(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackNotify");
		return ptr;
	}

};


// Class Engine.InterpTrackParticleReplay
// 0x0014 (0x0094 - 0x0080)
class UInterpTrackParticleReplay : public UInterpTrack
{
public:
	TArray<struct FParticleReplayTrackKey>             TrackKeys;                                                // 0x0080(0x000C) (NeedCtorLink, EditInline)
	unsigned long                                      bIsCapturingReplay : 1;                                   // 0x008C(0x0004) (Const, Transient)
	float                                              FixedTimeStep;                                            // 0x0090(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackParticleReplay");
		return ptr;
	}

};


// Class Engine.InterpTrackToggle
// 0x0010 (0x0090 - 0x0080)
class UInterpTrackToggle : public UInterpTrack
{
public:
	TArray<struct FToggleTrackKey>                     ToggleTrack;                                              // 0x0080(0x000C) (NeedCtorLink)
	unsigned long                                      bActivateSystemEachUpdate : 1;                            // 0x008C(0x0004) (Edit)
	unsigned long                                      bActivateWithJustAttachedFlag : 1;                        // 0x008C(0x0004) (Edit)
	unsigned long                                      bFireEventsWhenForwards : 1;                              // 0x008C(0x0004) (Edit)
	unsigned long                                      bFireEventsWhenBackwards : 1;                             // 0x008C(0x0004) (Edit)
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;                       // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackToggle");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorBase
// 0x0014 (0x0094 - 0x0080)
class UInterpTrackVectorBase : public UInterpTrack
{
public:
	struct FInterpCurveVector                          VectorTrack;                                              // 0x0080(0x0010) (NeedCtorLink)
	float                                              CurveTension;                                             // 0x0090(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorBase");
		return ptr;
	}

};


// Class Engine.InterpTrackAudioMaster
// 0x0000 (0x0094 - 0x0094)
class UInterpTrackAudioMaster : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackAudioMaster");
		return ptr;
	}

};


// Class Engine.InterpTrackColorProp
// 0x0008 (0x009C - 0x0094)
class UInterpTrackColorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0094(0x0008) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackColorScale
// 0x0000 (0x0094 - 0x0094)
class UInterpTrackColorScale : public UInterpTrackVectorBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackColorScale");
		return ptr;
	}

};


// Class Engine.InterpTrackSound
// 0x0010 (0x00A4 - 0x0094)
class UInterpTrackSound : public UInterpTrackVectorBase
{
public:
	TArray<struct FSoundTrackKey>                      Sounds;                                                   // 0x0094(0x000C) (NeedCtorLink)
	unsigned long                                      bPlayOnReverse : 1;                                       // 0x00A0(0x0004) (Edit)
	unsigned long                                      bContinueSoundOnMatineeEnd : 1;                           // 0x00A0(0x0004) (Edit)
	unsigned long                                      bSuppressSubtitles : 1;                                   // 0x00A0(0x0004) (Edit)
	unsigned long                                      bTreatAsDialogue : 1;                                     // 0x00A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackSound");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorMaterialParam
// 0x001C (0x00B0 - 0x0094)
class UInterpTrackVectorMaterialParam : public UInterpTrackVectorBase
{
public:
	TArray<struct FMaterialReferenceList>              Materials;                                                // 0x0094(0x000C) (Edit, Const, Component, NeedCtorLink)
	class UMaterialInterface*                          Material;                                                 // 0x00A0(0x0004) (Const, Deprecated)
	struct FName                                       ParamName;                                                // 0x00A4(0x0008) (Edit)
	unsigned long                                      bNeedsMaterialRefsUpdate : 1;                             // 0x00AC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackVectorProp
// 0x0008 (0x009C - 0x0094)
class UInterpTrackVectorProp : public UInterpTrackVectorBase
{
public:
	struct FName                                       PropertyName;                                             // 0x0094(0x0008) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVectorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackVisibility
// 0x0010 (0x0090 - 0x0080)
class UInterpTrackVisibility : public UInterpTrack
{
public:
	TArray<struct FVisibilityTrackKey>                 VisibilityTrack;                                          // 0x0080(0x000C) (NeedCtorLink)
	unsigned long                                      bFireEventsWhenForwards : 1;                              // 0x008C(0x0004) (Edit)
	unsigned long                                      bFireEventsWhenBackwards : 1;                             // 0x008C(0x0004) (Edit)
	unsigned long                                      bFireEventsWhenJumpingForwards : 1;                       // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackVisibility");
		return ptr;
	}

};


// Class Engine.InterpTrackInst
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInst : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInst");
		return ptr;
	}

};


// Class Engine.InterpTrackInstAnimControl
// 0x001C (0x0058 - 0x003C)
class UInterpTrackInstAnimControl : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x003C(0x0004) (Transient)
	struct FVector                                     InitPosition;                                             // 0x0040(0x000C) (Transient)
	struct FRotator                                    InitRotation;                                             // 0x004C(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstAnimControl");
		return ptr;
	}

};


// Class Engine.InterpTrackInstAudioMaster
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstAudioMaster : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstAudioMaster");
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorScale
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstColorScale : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstColorScale");
		return ptr;
	}

};


// Class Engine.InterpTrackInstDirector
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstDirector : public UInterpTrackInst
{
public:
	class AActor*                                      OldViewTarget;                                            // 0x003C(0x0004)
	struct FRenderingPerformanceOverrides              OldRenderingOverrides;                                    // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstDirector");
		return ptr;
	}

};


// Class Engine.InterpTrackInstEvent
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstEvent : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstEvent");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFaceFX
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstFaceFX : public UInterpTrackInst
{
public:
	unsigned long                                      bFirstUpdate : 1;                                         // 0x003C(0x0004) (Transient)
	float                                              LastUpdatePosition;                                       // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFaceFX");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFade
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstFade : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFade");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatMaterialParam
// 0x0010 (0x004C - 0x003C)
class UInterpTrackInstFloatMaterialParam : public UInterpTrackInst
{
public:
	TArray<struct FFloatMaterialParamMICData>          MICInfos;                                                 // 0x003C(0x000C) (NeedCtorLink)
	class UInterpTrackFloatMaterialParam*              InstancedTrack;                                           // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatParticleParam
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstFloatParticleParam : public UInterpTrackInst
{
public:
	float                                              ResetFloat;                                               // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatParticleParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstHeadTracking
// 0x0054 (0x0090 - 0x003C)
class UInterpTrackInstHeadTracking : public UInterpTrackInst
{
public:
	TEnumAsByte<EHeadTrackingAction>                   Action;                                                   // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData01[0x3C];                                      // 0x003D(0x003C) UNKNOWN PROPERTY: MapProperty Engine.InterpTrackInstHeadTracking.CurrentActorMap
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x007C(0x0004) (ExportObject, Transient, Component, EditInline)
	TArray<class USkelControlLookAt*>                  TrackControls;                                            // 0x0080(0x000C) (Transient, NeedCtorLink)
	float                                              LastUpdatePosition;                                       // 0x008C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstHeadTracking");
		return ptr;
	}

};


// Class Engine.InterpTrackInstMorphWeight
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstMorphWeight : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstMorphWeight");
		return ptr;
	}

};


// Class Engine.InterpTrackInstMove
// 0x0074 (0x00B0 - 0x003C)
class UInterpTrackInstMove : public UInterpTrackInst
{
public:
	struct FVector                                     ResetLocation;                                            // 0x003C(0x000C)
	struct FRotator                                    ResetRotation;                                            // 0x0048(0x000C)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0054(0x000C) MISSED OFFSET
	struct FMatrix                                     InitialTM;                                                // 0x0060(0x0040)
	struct FQuat                                       InitialQuat;                                              // 0x00A0(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstMove");
		return ptr;
	}

};


// Class Engine.InterpTrackInstNotify
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstNotify : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstNotify");
		return ptr;
	}

};


// Class Engine.InterpTrackInstParticleReplay
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstParticleReplay : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstParticleReplay");
		return ptr;
	}

};


// Class Engine.InterpTrackInstProperty
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstProperty : public UInterpTrackInst
{
public:
	class UFunction*                                   PropertyUpdateCallback;                                   // 0x003C(0x0004)
	class UObject*                                     PropertyOuterObjectInst;                                  // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstProperty");
		return ptr;
	}

};


// Class Engine.InterpTrackInstBoolProp
// 0x000C (0x0050 - 0x0044)
class UInterpTrackInstBoolProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    BoolProp;                                                 // 0x0044(0x0004)
	int                                                BitMask;                                                  // 0x0048(0x0004)
	unsigned long                                      ResetBool : 1;                                            // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstBoolProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstColorProp
// 0x0008 (0x004C - 0x0044)
class UInterpTrackInstColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                                // 0x0044(0x0004)
	struct FColor                                      ResetColor;                                               // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstFloatProp
// 0x000C (0x0050 - 0x0044)
class UInterpTrackInstFloatProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    FloatProp;                                                // 0x0044(0x0004)
	float                                              ResetFloat;                                               // 0x0048(0x0004)
	struct FPointer                                    DistributionProp;                                         // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstFloatProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstLinearColorProp
// 0x0014 (0x0058 - 0x0044)
class UInterpTrackInstLinearColorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    ColorProp;                                                // 0x0044(0x0004)
	struct FLinearColor                                ResetColor;                                               // 0x0048(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstLinearColorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorProp
// 0x0010 (0x0054 - 0x0044)
class UInterpTrackInstVectorProp : public UInterpTrackInstProperty
{
public:
	struct FPointer                                    VectorProp;                                               // 0x0044(0x0004)
	struct FVector                                     ResetVector;                                              // 0x0048(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorProp");
		return ptr;
	}

};


// Class Engine.InterpTrackInstSkelControlScale
// 0x0000 (0x003C - 0x003C)
class UInterpTrackInstSkelControlScale : public UInterpTrackInst
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstSkelControlScale");
		return ptr;
	}

};


// Class Engine.InterpTrackInstSkelControlStrength
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstSkelControlStrength : public UInterpTrackInst
{
public:
	unsigned long                                      bSavedControlledByAnimMetaData : 1;                       // 0x003C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstSkelControlStrength");
		return ptr;
	}

};


// Class Engine.InterpTrackInstSlomo
// 0x0004 (0x0040 - 0x003C)
class UInterpTrackInstSlomo : public UInterpTrackInst
{
public:
	float                                              OldTimeDilation;                                          // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstSlomo");
		return ptr;
	}

};


// Class Engine.InterpTrackInstSound
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstSound : public UInterpTrackInst
{
public:
	float                                              LastUpdatePosition;                                       // 0x003C(0x0004)
	class UAudioComponent*                             PlayAudioComp;                                            // 0x0040(0x0004) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstSound");
		return ptr;
	}

};


// Class Engine.InterpTrackInstToggle
// 0x000C (0x0048 - 0x003C)
class UInterpTrackInstToggle : public UInterpTrackInst
{
public:
	TEnumAsByte<ETrackToggleAction>                    Action;                                                   // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x0040(0x0004)
	unsigned long                                      bSavedActiveState : 1;                                    // 0x0044(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstToggle");
		return ptr;
	}

};


// Class Engine.InterpTrackInstVectorMaterialParam
// 0x0010 (0x004C - 0x003C)
class UInterpTrackInstVectorMaterialParam : public UInterpTrackInst
{
public:
	TArray<struct FVectorMaterialParamMICData>         MICInfos;                                                 // 0x003C(0x000C) (NeedCtorLink)
	class UInterpTrackVectorMaterialParam*             InstancedTrack;                                           // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstVectorMaterialParam");
		return ptr;
	}

};


// Class Engine.InterpTrackInstVisibility
// 0x0008 (0x0044 - 0x003C)
class UInterpTrackInstVisibility : public UInterpTrackInst
{
public:
	TEnumAsByte<EVisibilityTrackAction>                Action;                                                   // 0x003C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x003D(0x0003) MISSED OFFSET
	float                                              LastUpdatePosition;                                       // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpTrackInstVisibility");
		return ptr;
	}

};


// Class Engine.MaterialExpression
// 0x0044 (0x0080 - 0x003C)
class UMaterialExpression : public UObject
{
public:
	int                                                EditorX;                                                  // 0x003C(0x0004) (Deprecated)
	int                                                EditorY;                                                  // 0x0040(0x0004) (Deprecated)
	int                                                MaterialExpressionEditorX;                                // 0x0044(0x0004)
	int                                                MaterialExpressionEditorY;                                // 0x0048(0x0004)
	unsigned long                                      bRealtimePreview : 1;                                     // 0x004C(0x0004)
	unsigned long                                      bNeedToUpdatePreview : 1;                                 // 0x004C(0x0004) (Transient)
	unsigned long                                      bIsParameterExpression : 1;                               // 0x004C(0x0004)
	unsigned long                                      bShowOutputNameOnPin : 1;                                 // 0x004C(0x0004)
	unsigned long                                      bHidePreviewWindow : 1;                                   // 0x004C(0x0004)
	unsigned long                                      bShowInputs : 1;                                          // 0x004C(0x0004)
	unsigned long                                      bShowOutputs : 1;                                         // 0x004C(0x0004)
	unsigned long                                      bUsedByStaticParameterSet : 1;                            // 0x004C(0x0004)
	class UMaterial*                                   Material;                                                 // 0x0050(0x0004) (Const)
	class UMaterialFunction*                           Function;                                                 // 0x0054(0x0004) (Const)
	struct FString                                     Desc;                                                     // 0x0058(0x000C) (Edit, NeedCtorLink)
	struct FColor                                      BorderColor;                                              // 0x0064(0x0004)
	TArray<struct FName>                               MenuCategories;                                           // 0x0068(0x000C) (NeedCtorLink)
	TArray<struct FExpressionOutput>                   Outputs;                                                  // 0x0074(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpression");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAbs
// 0x002C (0x00AC - 0x0080)
class UMaterialExpressionAbs : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAbs");
		return ptr;
	}

};


// Class Engine.MaterialExpressionActorWorldPosition
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionActorWorldPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionActorWorldPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAdd
// 0x0058 (0x00D8 - 0x0080)
class UMaterialExpressionAdd : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            B;                                                        // 0x00AC(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAdd");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAppendVector
// 0x0058 (0x00D8 - 0x0080)
class UMaterialExpressionAppendVector : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            B;                                                        // 0x00AC(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAppendVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionBumpOffset
// 0x008C (0x010C - 0x0080)
class UMaterialExpressionBumpOffset : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Height;                                                   // 0x00AC(0x002C) (NeedCtorLink)
	struct FExpressionInput                            HeightRatioInput;                                         // 0x00D8(0x002C) (NeedCtorLink)
	float                                              HeightRatio;                                              // 0x0104(0x0004) (Edit)
	float                                              ReferencePlane;                                           // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionBumpOffset");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraVector
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionCameraVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCameraWorldPosition
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionCameraWorldPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCameraWorldPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCeil
// 0x002C (0x00AC - 0x0080)
class UMaterialExpressionCeil : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCeil");
		return ptr;
	}

};


// Class Engine.MaterialExpressionClamp
// 0x0084 (0x0104 - 0x0080)
class UMaterialExpressionClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Min;                                                      // 0x00AC(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Max;                                                      // 0x00D8(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionClamp");
		return ptr;
	}

};


// Class Engine.MaterialExpressionComment
// 0x001C (0x009C - 0x0080)
class UMaterialExpressionComment : public UMaterialExpression
{
public:
	int                                                PosX;                                                     // 0x0080(0x0004)
	int                                                PosY;                                                     // 0x0084(0x0004)
	int                                                SizeX;                                                    // 0x0088(0x0004)
	int                                                SizeY;                                                    // 0x008C(0x0004)
	struct FString                                     Text;                                                     // 0x0090(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionComment");
		return ptr;
	}

};


// Class Engine.MaterialExpressionComponentMask
// 0x0030 (0x00B0 - 0x0080)
class UMaterialExpressionComponentMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)
	unsigned long                                      R : 1;                                                    // 0x00AC(0x0004) (Edit)
	unsigned long                                      G : 1;                                                    // 0x00AC(0x0004) (Edit)
	unsigned long                                      B : 1;                                                    // 0x00AC(0x0004) (Edit)
	unsigned long                                      A : 1;                                                    // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionComponentMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant
// 0x0004 (0x0084 - 0x0080)
class UMaterialExpressionConstant : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant2Vector
// 0x0008 (0x0088 - 0x0080)
class UMaterialExpressionConstant2Vector : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0080(0x0004) (Edit)
	float                                              G;                                                        // 0x0084(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant2Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant3Vector
// 0x000C (0x008C - 0x0080)
class UMaterialExpressionConstant3Vector : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0080(0x0004) (Edit)
	float                                              G;                                                        // 0x0084(0x0004) (Edit)
	float                                              B;                                                        // 0x0088(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant3Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstant4Vector
// 0x0010 (0x0090 - 0x0080)
class UMaterialExpressionConstant4Vector : public UMaterialExpression
{
public:
	float                                              R;                                                        // 0x0080(0x0004) (Edit)
	float                                              G;                                                        // 0x0084(0x0004) (Edit)
	float                                              B;                                                        // 0x0088(0x0004) (Edit)
	float                                              A;                                                        // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstant4Vector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstantBiasScale
// 0x0034 (0x00B4 - 0x0080)
class UMaterialExpressionConstantBiasScale : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)
	float                                              Bias;                                                     // 0x00AC(0x0004) (Edit)
	float                                              Scale;                                                    // 0x00B0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstantBiasScale");
		return ptr;
	}

};


// Class Engine.MaterialExpressionConstantClamp
// 0x0034 (0x00B4 - 0x0080)
class UMaterialExpressionConstantClamp : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)
	float                                              Min;                                                      // 0x00AC(0x0004) (Edit)
	float                                              Max;                                                      // 0x00B0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionConstantClamp");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCosine
// 0x0030 (0x00B0 - 0x0080)
class UMaterialExpressionCosine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)
	float                                              Period;                                                   // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCosine");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCrossProduct
// 0x0058 (0x00D8 - 0x0080)
class UMaterialExpressionCrossProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            B;                                                        // 0x00AC(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCrossProduct");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCustom
// 0x0028 (0x00A8 - 0x0080)
class UMaterialExpressionCustom : public UMaterialExpression
{
public:
	struct FString                                     Code;                                                     // 0x0080(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<ECustomMaterialOutputType>             OutputType;                                               // 0x008C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	struct FString                                     Description;                                              // 0x0090(0x000C) (Edit, NeedCtorLink)
	TArray<struct FCustomInput>                        Inputs;                                                   // 0x009C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCustom");
		return ptr;
	}

};


// Class Engine.MaterialExpressionCustomTexture
// 0x0004 (0x0084 - 0x0080)
class UMaterialExpressionCustomTexture : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                                  // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionCustomTexture");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthBiasedAlpha
// 0x0060 (0x00E0 - 0x0080)
class UMaterialExpressionDepthBiasedAlpha : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x0080(0x0004) (Edit)
	float                                              BiasScale;                                                // 0x0084(0x0004) (Edit)
	struct FExpressionInput                            Alpha;                                                    // 0x0088(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Bias;                                                     // 0x00B4(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasedAlpha");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthBiasedBlend
// 0x008C (0x010C - 0x0080)
class UMaterialExpressionDepthBiasedBlend : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x0080(0x0004) (Edit)
	float                                              BiasScale;                                                // 0x0084(0x0004) (Edit)
	struct FExpressionInput                            RGB;                                                      // 0x0088(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Alpha;                                                    // 0x00B4(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Bias;                                                     // 0x00E0(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasedBlend");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthOfFieldFunction
// 0x0030 (0x00B0 - 0x0080)
class UMaterialExpressionDepthOfFieldFunction : public UMaterialExpression
{
public:
	TEnumAsByte<EDepthOfFieldFunctionValue>            FunctionValue;                                            // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	struct FExpressionInput                            Depth;                                                    // 0x0084(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthOfFieldFunction");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDeriveNormalZ
// 0x002C (0x00AC - 0x0080)
class UMaterialExpressionDeriveNormalZ : public UMaterialExpression
{
public:
	struct FExpressionInput                            InXY;                                                     // 0x0080(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDeriveNormalZ");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDesaturation
// 0x0068 (0x00E8 - 0x0080)
class UMaterialExpressionDesaturation : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Percent;                                                  // 0x00AC(0x002C) (NeedCtorLink)
	struct FLinearColor                                LuminanceFactors;                                         // 0x00D8(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDesaturation");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDestColor
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionDestColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDestColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDestDepth
// 0x0004 (0x0084 - 0x0080)
class UMaterialExpressionDestDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDestDepth");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDistance
// 0x0058 (0x00D8 - 0x0080)
class UMaterialExpressionDistance : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            B;                                                        // 0x00AC(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDistance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDivide
// 0x0058 (0x00D8 - 0x0080)
class UMaterialExpressionDivide : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            B;                                                        // 0x00AC(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDivide");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDotProduct
// 0x0058 (0x00D8 - 0x0080)
class UMaterialExpressionDotProduct : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            B;                                                        // 0x00AC(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDotProduct");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDynamicParameter
// 0x000C (0x008C - 0x0080)
class UMaterialExpressionDynamicParameter : public UMaterialExpression
{
public:
	TArray<struct FString>                             ParamNames;                                               // 0x0080(0x000C) (Edit, EditFixedSize, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDynamicParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMeshEmitterDynamicParameter
// 0x0000 (0x008C - 0x008C)
class UMaterialExpressionMeshEmitterDynamicParameter : public UMaterialExpressionDynamicParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMeshEmitterDynamicParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFloor
// 0x002C (0x00AC - 0x0080)
class UMaterialExpressionFloor : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFloor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFluidNormal
// 0x002C (0x00AC - 0x0080)
class UMaterialExpressionFluidNormal : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0080(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFluidNormal");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFmod
// 0x0058 (0x00D8 - 0x0080)
class UMaterialExpressionFmod : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            B;                                                        // 0x00AC(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFmod");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFoliageImpulseDirection
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionFoliageImpulseDirection : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFoliageImpulseDirection");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFoliageNormalizedRotationAxisAndAngle
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionFoliageNormalizedRotationAxisAndAngle : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFoliageNormalizedRotationAxisAndAngle");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSample
// 0x0008 (0x0088 - 0x0080)
class UMaterialExpressionFontSample : public UMaterialExpression
{
public:
	class UFont*                                       Font;                                                     // 0x0080(0x0004) (Edit)
	int                                                FontTexturePage;                                          // 0x0084(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSample");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFontSampleParameter
// 0x0020 (0x00A8 - 0x0088)
class UMaterialExpressionFontSampleParameter : public UMaterialExpressionFontSample
{
public:
	struct FName                                       ParameterName;                                            // 0x0088(0x0008) (Edit)
	struct FGuid                                       ExpressionGUID;                                           // 0x0090(0x0010) (Const)
	struct FName                                       Group;                                                    // 0x00A0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFontSampleParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFrac
// 0x002C (0x00AC - 0x0080)
class UMaterialExpressionFrac : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFrac");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFresnel
// 0x0030 (0x00B0 - 0x0080)
class UMaterialExpressionFresnel : public UMaterialExpression
{
public:
	float                                              Exponent;                                                 // 0x0080(0x0004) (Edit)
	struct FExpressionInput                            Normal;                                                   // 0x0084(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFresnel");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFunctionInput
// 0x0078 (0x00F8 - 0x0080)
class UMaterialExpressionFunctionInput : public UMaterialExpression
{
public:
	struct FExpressionInput                            Preview;                                                  // 0x0080(0x002C) (NeedCtorLink)
	struct FString                                     InputName;                                                // 0x00AC(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Description;                                              // 0x00B8(0x000C) (Edit, NeedCtorLink)
	struct FGuid                                       Id;                                                       // 0x00C4(0x0010) (Const)
	TEnumAsByte<EFunctionInputType>                    InputType;                                                // 0x00D4(0x0001) (Edit)
	unsigned char                                      UnknownData00[0xB];                                       // 0x00D5(0x000B) MISSED OFFSET
	struct FVector4                                    PreviewValue;                                             // 0x00E0(0x0010) (Edit)
	unsigned long                                      bUsePreviewValueAsDefault : 1;                            // 0x00F0(0x0004) (Edit)
	unsigned long                                      bCompilingFunctionPreview : 1;                            // 0x00F0(0x0004) (Transient)
	int                                                SortPriority;                                             // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFunctionInput");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFunctionOutput
// 0x005C (0x00DC - 0x0080)
class UMaterialExpressionFunctionOutput : public UMaterialExpression
{
public:
	struct FString                                     OutputName;                                               // 0x0080(0x000C) (Edit, NeedCtorLink)
	struct FString                                     Description;                                              // 0x008C(0x000C) (Edit, NeedCtorLink)
	int                                                SortPriority;                                             // 0x0098(0x0004) (Edit)
	struct FExpressionInput                            A;                                                        // 0x009C(0x002C) (NeedCtorLink)
	unsigned long                                      bLastPreviewed : 1;                                       // 0x00C8(0x0004)
	struct FGuid                                       Id;                                                       // 0x00CC(0x0010) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFunctionOutput");
		return ptr;
	}

};


// Class Engine.MaterialExpressionIf
// 0x00DC (0x015C - 0x0080)
class UMaterialExpressionIf : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            B;                                                        // 0x00AC(0x002C) (NeedCtorLink)
	struct FExpressionInput                            AGreaterThanB;                                            // 0x00D8(0x002C) (NeedCtorLink)
	struct FExpressionInput                            AEqualsB;                                                 // 0x0104(0x002C) (NeedCtorLink)
	struct FExpressionInput                            ALessThanB;                                               // 0x0130(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionIf");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLandscapeLayerBlend
// 0x001C (0x009C - 0x0080)
class UMaterialExpressionLandscapeLayerBlend : public UMaterialExpression
{
public:
	TArray<struct FLayerBlendInput>                    Layers;                                                   // 0x0080(0x000C) (Edit, NeedCtorLink)
	struct FGuid                                       ExpressionGUID;                                           // 0x008C(0x0010) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLandscapeLayerBlend");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareIntensity
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionLensFlareIntensity : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareIntensity");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareOcclusion
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionLensFlareOcclusion : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareOcclusion");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareRadialDistance
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionLensFlareRadialDistance : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareRadialDistance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareRayDistance
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionLensFlareRayDistance : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareRayDistance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLensFlareSourceDistance
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionLensFlareSourceDistance : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLensFlareSourceDistance");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmapUVs
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionLightmapUVs : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLightmapUVs");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightmassReplace
// 0x0058 (0x00D8 - 0x0080)
class UMaterialExpressionLightmassReplace : public UMaterialExpression
{
public:
	struct FExpressionInput                            Realtime;                                                 // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Lightmass;                                                // 0x00AC(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLightmassReplace");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLightVector
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionLightVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLightVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionLinearInterpolate
// 0x0084 (0x0104 - 0x0080)
class UMaterialExpressionLinearInterpolate : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            B;                                                        // 0x00AC(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Alpha;                                                    // 0x00D8(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionLinearInterpolate");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMaterialFunctionCall
// 0x001C (0x009C - 0x0080)
class UMaterialExpressionMaterialFunctionCall : public UMaterialExpression
{
public:
	class UMaterialFunction*                           MaterialFunction;                                         // 0x0080(0x0004) (Edit)
	TArray<struct FFunctionExpressionInput>            FunctionInputs;                                           // 0x0084(0x000C) (NeedCtorLink)
	TArray<struct FFunctionExpressionOutput>           FunctionOutputs;                                          // 0x0090(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMaterialFunctionCall");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMeshEmitterVertexColor
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionMeshEmitterVertexColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMeshEmitterVertexColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMultiply
// 0x0058 (0x00D8 - 0x0080)
class UMaterialExpressionMultiply : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            B;                                                        // 0x00AC(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMultiply");
		return ptr;
	}

};


// Class Engine.MaterialExpressionNormalize
// 0x002C (0x00AC - 0x0080)
class UMaterialExpressionNormalize : public UMaterialExpression
{
public:
	struct FExpressionInput                            VectorInput;                                              // 0x0080(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionNormalize");
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectOrientation
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionObjectOrientation : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectOrientation");
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectRadius
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionObjectRadius : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectRadius");
		return ptr;
	}

};


// Class Engine.MaterialExpressionObjectWorldPosition
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionObjectWorldPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionObjectWorldPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionOcclusionPercentage
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionOcclusionPercentage : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionOcclusionPercentage");
		return ptr;
	}

};


// Class Engine.MaterialExpressionOneMinus
// 0x002C (0x00AC - 0x0080)
class UMaterialExpressionOneMinus : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionOneMinus");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPanner
// 0x0060 (0x00E0 - 0x0080)
class UMaterialExpressionPanner : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Time;                                                     // 0x00AC(0x002C) (NeedCtorLink)
	float                                              SpeedX;                                                   // 0x00D8(0x0004) (Edit)
	float                                              SpeedY;                                                   // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPanner");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParameter
// 0x0020 (0x00A0 - 0x0080)
class UMaterialExpressionParameter : public UMaterialExpression
{
public:
	struct FName                                       ParameterName;                                            // 0x0080(0x0008) (Edit)
	struct FGuid                                       ExpressionGUID;                                           // 0x0088(0x0010) (Const)
	struct FName                                       Group;                                                    // 0x0098(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionScalarParameter
// 0x0004 (0x00A4 - 0x00A0)
class UMaterialExpressionScalarParameter : public UMaterialExpressionParameter
{
public:
	float                                              DefaultValue;                                             // 0x00A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionScalarParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticBoolParameter
// 0x0008 (0x00A8 - 0x00A0)
class UMaterialExpressionStaticBoolParameter : public UMaterialExpressionParameter
{
public:
	unsigned long                                      DefaultValue : 1;                                         // 0x00A0(0x0004) (Edit)
	unsigned long                                      ExtendedCaptionDisplay : 1;                               // 0x00A0(0x0004) (Edit)
	struct FPointer                                    InstanceOverride;                                         // 0x00A4(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticBoolParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitchParameter
// 0x0058 (0x0100 - 0x00A8)
class UMaterialExpressionStaticSwitchParameter : public UMaterialExpressionStaticBoolParameter
{
public:
	struct FExpressionInput                            A;                                                        // 0x00A8(0x002C) (NeedCtorLink)
	struct FExpressionInput                            B;                                                        // 0x00D4(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitchParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticComponentMaskParameter
// 0x0034 (0x00D4 - 0x00A0)
class UMaterialExpressionStaticComponentMaskParameter : public UMaterialExpressionParameter
{
public:
	struct FExpressionInput                            Input;                                                    // 0x00A0(0x002C) (NeedCtorLink)
	unsigned long                                      DefaultR : 1;                                             // 0x00CC(0x0004) (Edit)
	unsigned long                                      DefaultG : 1;                                             // 0x00CC(0x0004) (Edit)
	unsigned long                                      DefaultB : 1;                                             // 0x00CC(0x0004) (Edit)
	unsigned long                                      DefaultA : 1;                                             // 0x00CC(0x0004) (Edit)
	struct FPointer                                    InstanceOverride;                                         // 0x00D0(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticComponentMaskParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVectorParameter
// 0x0010 (0x00B0 - 0x00A0)
class UMaterialExpressionVectorParameter : public UMaterialExpressionParameter
{
public:
	struct FLinearColor                                DefaultValue;                                             // 0x00A0(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVectorParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleMacroUV
// 0x0004 (0x0084 - 0x0080)
class UMaterialExpressionParticleMacroUV : public UMaterialExpression
{
public:
	unsigned long                                      bUseViewSpace : 1;                                        // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleMacroUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPerInstanceRandom
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionPerInstanceRandom : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPerInstanceRandom");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPixelDepth
// 0x0004 (0x0084 - 0x0080)
class UMaterialExpressionPixelDepth : public UMaterialExpression
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPixelDepth");
		return ptr;
	}

};


// Class Engine.MaterialExpressionPower
// 0x0058 (0x00D8 - 0x0080)
class UMaterialExpressionPower : public UMaterialExpression
{
public:
	struct FExpressionInput                            Base;                                                     // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Exponent;                                                 // 0x00AC(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionPower");
		return ptr;
	}

};


// Class Engine.MaterialExpressionQualitySwitch
// 0x0058 (0x00D8 - 0x0080)
class UMaterialExpressionQualitySwitch : public UMaterialExpression
{
public:
	struct FExpressionInput                            High;                                                     // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Low;                                                      // 0x00AC(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionQualitySwitch");
		return ptr;
	}

};


// Class Engine.MaterialExpressionReflectionVector
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionReflectionVector : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionReflectionVector");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotateAboutAxis
// 0x0084 (0x0104 - 0x0080)
class UMaterialExpressionRotateAboutAxis : public UMaterialExpression
{
public:
	struct FExpressionInput                            NormalizedRotationAxisAndAngle;                           // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            PositionOnAxis;                                           // 0x00AC(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Position;                                                 // 0x00D8(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRotateAboutAxis");
		return ptr;
	}

};


// Class Engine.MaterialExpressionRotator
// 0x0064 (0x00E4 - 0x0080)
class UMaterialExpressionRotator : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinate;                                               // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Time;                                                     // 0x00AC(0x002C) (NeedCtorLink)
	float                                              CenterX;                                                  // 0x00D8(0x0004) (Edit)
	float                                              CenterY;                                                  // 0x00DC(0x0004) (Edit)
	float                                              Speed;                                                    // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionRotator");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneDepth
// 0x0030 (0x00B0 - 0x0080)
class UMaterialExpressionSceneDepth : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0080(0x002C) (NeedCtorLink)
	unsigned long                                      bNormalize : 1;                                           // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneDepth");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSceneTexture
// 0x0034 (0x00B4 - 0x0080)
class UMaterialExpressionSceneTexture : public UMaterialExpression
{
public:
	struct FExpressionInput                            Coordinates;                                              // 0x0080(0x002C) (NeedCtorLink)
	TEnumAsByte<ESceneTextureType>                     SceneTextureType;                                         // 0x00AC(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	unsigned long                                      ScreenAlign : 1;                                          // 0x00B0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSceneTexture");
		return ptr;
	}

};


// Class Engine.MaterialExpressionScreenPosition
// 0x0004 (0x0084 - 0x0080)
class UMaterialExpressionScreenPosition : public UMaterialExpression
{
public:
	unsigned long                                      ScreenAlign : 1;                                          // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionScreenPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionScreenSize
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionScreenSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionScreenSize");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSine
// 0x0030 (0x00B0 - 0x0080)
class UMaterialExpressionSine : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)
	float                                              Period;                                                   // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSine");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSphereMask
// 0x00B8 (0x0138 - 0x0080)
class UMaterialExpressionSphereMask : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            B;                                                        // 0x00AC(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Radius;                                                   // 0x00D8(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Hardness;                                                 // 0x0104(0x002C) (NeedCtorLink)
	float                                              AttenuationRadius;                                        // 0x0130(0x0004) (Edit)
	float                                              HardnessPercent;                                          // 0x0134(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSphereMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSquareRoot
// 0x002C (0x00AC - 0x0080)
class UMaterialExpressionSquareRoot : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSquareRoot");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticBool
// 0x0004 (0x0084 - 0x0080)
class UMaterialExpressionStaticBool : public UMaterialExpression
{
public:
	unsigned long                                      Value : 1;                                                // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticBool");
		return ptr;
	}

};


// Class Engine.MaterialExpressionStaticSwitch
// 0x0088 (0x0108 - 0x0080)
class UMaterialExpressionStaticSwitch : public UMaterialExpression
{
public:
	unsigned long                                      DefaultValue : 1;                                         // 0x0080(0x0004) (Edit)
	unsigned long                                      ExtendedCaptionDisplay : 1;                               // 0x0080(0x0004) (Edit)
	struct FExpressionInput                            A;                                                        // 0x0084(0x002C) (NeedCtorLink)
	struct FExpressionInput                            B;                                                        // 0x00B0(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Value;                                                    // 0x00DC(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionStaticSwitch");
		return ptr;
	}

};


// Class Engine.MaterialExpressionSubtract
// 0x0058 (0x00D8 - 0x0080)
class UMaterialExpressionSubtract : public UMaterialExpression
{
public:
	struct FExpressionInput                            A;                                                        // 0x0080(0x002C) (NeedCtorLink)
	struct FExpressionInput                            B;                                                        // 0x00AC(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionSubtract");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTerrainLayerCoords
// 0x0014 (0x0094 - 0x0080)
class UMaterialExpressionTerrainLayerCoords : public UMaterialExpression
{
public:
	TEnumAsByte<ETerrainCoordMappingType>              MappingType;                                              // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	float                                              MappingScale;                                             // 0x0084(0x0004) (Edit)
	float                                              MappingRotation;                                          // 0x0088(0x0004) (Edit)
	float                                              MappingPanU;                                              // 0x008C(0x0004) (Edit)
	float                                              MappingPanV;                                              // 0x0090(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTerrainLayerCoords");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTerrainLayerSwitch
// 0x0078 (0x00F8 - 0x0080)
class UMaterialExpressionTerrainLayerSwitch : public UMaterialExpression
{
public:
	struct FPointer                                    InstanceOverride;                                         // 0x0080(0x0004) (Const, Native, Transient)
	struct FExpressionInput                            LayerUsed;                                                // 0x0084(0x002C) (NeedCtorLink)
	struct FExpressionInput                            LayerNotUsed;                                             // 0x00B0(0x002C) (NeedCtorLink)
	struct FName                                       ParameterName;                                            // 0x00DC(0x0008) (Edit)
	unsigned long                                      PreviewUsed : 1;                                          // 0x00E4(0x0004) (Edit)
	struct FGuid                                       ExpressionGUID;                                           // 0x00E8(0x0010) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTerrainLayerSwitch");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTerrainLayerWeight
// 0x0078 (0x00F8 - 0x0080)
class UMaterialExpressionTerrainLayerWeight : public UMaterialExpression
{
public:
	struct FPointer                                    InstanceOverride;                                         // 0x0080(0x0004) (Const, Native, Transient)
	struct FExpressionInput                            Base;                                                     // 0x0084(0x002C) (NeedCtorLink)
	struct FExpressionInput                            Layer;                                                    // 0x00B0(0x002C) (NeedCtorLink)
	struct FName                                       ParameterName;                                            // 0x00DC(0x0008) (Edit)
	float                                              PreviewWeight;                                            // 0x00E4(0x0004) (Edit)
	struct FGuid                                       ExpressionGUID;                                           // 0x00E8(0x0010) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTerrainLayerWeight");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTexelSize
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTexelSize : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTexelSize");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureCoordinate
// 0x0010 (0x0090 - 0x0080)
class UMaterialExpressionTextureCoordinate : public UMaterialExpression
{
public:
	int                                                CoordinateIndex;                                          // 0x0080(0x0004) (Edit)
	float                                              UTiling;                                                  // 0x0084(0x0004) (Edit)
	float                                              VTiling;                                                  // 0x0088(0x0004) (Edit)
	unsigned long                                      UnMirrorU : 1;                                            // 0x008C(0x0004) (Edit)
	unsigned long                                      UnMirrorV : 1;                                            // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureCoordinate");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureObject
// 0x0004 (0x0084 - 0x0080)
class UMaterialExpressionTextureObject : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                                  // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureObject");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSample
// 0x005C (0x00DC - 0x0080)
class UMaterialExpressionTextureSample : public UMaterialExpression
{
public:
	class UTexture*                                    Texture;                                                  // 0x0080(0x0004) (Edit)
	struct FExpressionInput                            Coordinates;                                              // 0x0084(0x002C) (NeedCtorLink)
	struct FExpressionInput                            TextureObject;                                            // 0x00B0(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSample");
		return ptr;
	}

};


// Class Engine.MaterialExpressionDepthBiasBlend
// 0x0034 (0x0110 - 0x00DC)
class UMaterialExpressionDepthBiasBlend : public UMaterialExpressionTextureSample
{
public:
	unsigned long                                      bNormalize : 1;                                           // 0x00DC(0x0004) (Edit)
	float                                              BiasScale;                                                // 0x00E0(0x0004) (Edit)
	struct FExpressionInput                            Bias;                                                     // 0x00E4(0x002C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionDepthBiasBlend");
		return ptr;
	}

};


// Class Engine.MaterialExpressionFlipBookSample
// 0x0000 (0x00DC - 0x00DC)
class UMaterialExpressionFlipBookSample : public UMaterialExpressionTextureSample
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionFlipBookSample");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMeshSubUV
// 0x0000 (0x00DC - 0x00DC)
class UMaterialExpressionMeshSubUV : public UMaterialExpressionTextureSample
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMeshSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionMeshSubUVBlend
// 0x0000 (0x00DC - 0x00DC)
class UMaterialExpressionMeshSubUVBlend : public UMaterialExpressionMeshSubUV
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionMeshSubUVBlend");
		return ptr;
	}

};


// Class Engine.MaterialExpressionParticleSubUV
// 0x0000 (0x00DC - 0x00DC)
class UMaterialExpressionParticleSubUV : public UMaterialExpressionTextureSample
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionParticleSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter
// 0x0020 (0x00FC - 0x00DC)
class UMaterialExpressionTextureSampleParameter : public UMaterialExpressionTextureSample
{
public:
	struct FName                                       ParameterName;                                            // 0x00DC(0x0008) (Edit)
	struct FGuid                                       ExpressionGUID;                                           // 0x00E4(0x0010) (Const)
	struct FName                                       Group;                                                    // 0x00F4(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureObjectParameter
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureObjectParameter : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureObjectParameter");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameter2D
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureSampleParameter2D : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameter2D");
		return ptr;
	}

};


// Class Engine.MaterialExpressionAntialiasedTextureMask
// 0x0005 (0x0101 - 0x00FC)
class UMaterialExpressionAntialiasedTextureMask : public UMaterialExpressionTextureSampleParameter2D
{
public:
	float                                              Threshold;                                                // 0x00FC(0x0004) (Edit)
	TEnumAsByte<ETextureColorChannel>                  Channel;                                                  // 0x0100(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionAntialiasedTextureMask");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterFlipbook
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureSampleParameterFlipbook : public UMaterialExpressionTextureSampleParameter2D
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterFlipbook");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterMeshSubUV
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureSampleParameterMeshSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterMeshSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterMeshSubUVBlend
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureSampleParameterMeshSubUVBlend : public UMaterialExpressionTextureSampleParameterMeshSubUV
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterMeshSubUVBlend");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterSubUV
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureSampleParameterSubUV : public UMaterialExpressionTextureSampleParameter2D
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterSubUV");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterCube
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureSampleParameterCube : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterCube");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterMovie
// 0x0000 (0x00FC - 0x00FC)
class UMaterialExpressionTextureSampleParameterMovie : public UMaterialExpressionTextureSampleParameter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterMovie");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTextureSampleParameterNormal
// 0x0004 (0x0100 - 0x00FC)
class UMaterialExpressionTextureSampleParameterNormal : public UMaterialExpressionTextureSampleParameter
{
public:
	struct FPointer                                    InstanceOverride;                                         // 0x00FC(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTextureSampleParameterNormal");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTime
// 0x0004 (0x0084 - 0x0080)
class UMaterialExpressionTime : public UMaterialExpression
{
public:
	unsigned long                                      bIgnorePause : 1;                                         // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTime");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransform
// 0x002E (0x00AE - 0x0080)
class UMaterialExpressionTransform : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)
	TEnumAsByte<EMaterialVectorCoordTransformSource>   TransformSourceType;                                      // 0x00AC(0x0001) (Edit, Const)
	TEnumAsByte<EMaterialVectorCoordTransform>         TransformType;                                            // 0x00AD(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTransform");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTransformPosition
// 0x002E (0x00AE - 0x0080)
class UMaterialExpressionTransformPosition : public UMaterialExpression
{
public:
	struct FExpressionInput                            Input;                                                    // 0x0080(0x002C) (NeedCtorLink)
	TEnumAsByte<EMaterialPositionTransformSource>      TransformSourceType;                                      // 0x00AC(0x0001) (Edit, Const)
	TEnumAsByte<EMaterialPositionTransform>            TransformType;                                            // 0x00AD(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTransformPosition");
		return ptr;
	}

};


// Class Engine.MaterialExpressionTwoSidedSign
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionTwoSidedSign : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionTwoSidedSign");
		return ptr;
	}

};


// Class Engine.MaterialExpressionVertexColor
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionVertexColor : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionVertexColor");
		return ptr;
	}

};


// Class Engine.MaterialExpressionWindDirectionAndSpeed
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionWindDirectionAndSpeed : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionWindDirectionAndSpeed");
		return ptr;
	}

};


// Class Engine.MaterialExpressionWorldNormal
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionWorldNormal : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionWorldNormal");
		return ptr;
	}

};


// Class Engine.MaterialExpressionWorldPosition
// 0x0000 (0x0080 - 0x0080)
class UMaterialExpressionWorldPosition : public UMaterialExpression
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialExpressionWorldPosition");
		return ptr;
	}

};


// Class Engine.MaterialFunction
// 0x0048 (0x0084 - 0x003C)
class UMaterialFunction : public UObject
{
public:
	struct FGuid                                       StateId;                                                  // 0x003C(0x0010) (DuplicateTransient)
	class UMaterialFunction*                           ParentFunction;                                           // 0x004C(0x0004) (Transient)
	struct FString                                     Description;                                              // 0x0050(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bExposeToLibrary : 1;                                     // 0x005C(0x0004) (Edit)
	unsigned long                                      bReentrantFlag : 1;                                       // 0x005C(0x0004) (Const, Transient)
	TArray<struct FString>                             LibraryCategories;                                        // 0x0060(0x000C) (Edit, NeedCtorLink)
	TArray<class UMaterialExpression*>                 FunctionExpressions;                                      // 0x006C(0x000C) (NeedCtorLink)
	TArray<class UMaterialExpressionComment*>          FunctionEditorComments;                                   // 0x0078(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialFunction");
		return ptr;
	}

};


// Class Engine.MaterialInstance
// 0x0060 (0x0278 - 0x0218)
class UMaterialInstance : public UMaterialInterface
{
public:
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0218(0x0004) (Edit)
	class UMaterialInterface*                          Parent;                                                   // 0x021C(0x0004) (Edit, Const)
	class UTexture2D*                                  PhysMaterialMask;                                         // 0x0220(0x0004) (Edit)
	int                                                PhysMaterialMaskUVChannel;                                // 0x0224(0x0004) (Edit)
	class UPhysicalMaterial*                           BlackPhysicalMaterial;                                    // 0x0228(0x0004) (Edit)
	class UPhysicalMaterial*                           WhitePhysicalMaterial;                                    // 0x022C(0x0004) (Edit)
	unsigned long                                      bHasStaticPermutationResource : 1;                        // 0x0230(0x0004)
	unsigned long                                      bStaticPermutationDirty : 1;                              // 0x0230(0x0004) (Native, Transient)
	unsigned long                                      ReentrantFlag : 1;                                        // 0x0230(0x0004) (Const, Native)
	unsigned long                                      bNeedsMaterialFlattening : 1;                             // 0x0230(0x0004) (Const, Transient)
	struct FPointer                                    StaticParameters[0x2];                                    // 0x0234(0x0004) (Const, Native, DuplicateTransient)
	struct FPointer                                    StaticPermutationResources[0x2];                          // 0x023C(0x0004) (Const, Native, DuplicateTransient)
	struct FPointer                                    Resources[0x3];                                           // 0x0244(0x0004) (Const, Native, DuplicateTransient)
	TArray<class UTexture*>                            ReferencedTextures;                                       // 0x0250(0x000C) (Const, NeedCtorLink, Deprecated)
	TArray<struct FGuid>                               ReferencedTextureGuids;                                   // 0x025C(0x000C) (Const, NeedCtorLink)
	struct FGuid                                       ParentLightingGuid;                                       // 0x0268(0x0010) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstance");
		return ptr;
	}


	bool IsInMapOrTransientPackage();
	void ClearParameterValues(bool bOnlyClearTextures);
	void SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage);
	bool GetTextureParameterValue(const struct FName& ParameterName, class UTexture** Value);
	void SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value);
	void SetScalarCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveFloat* Value);
	void SetScalarParameterValue(const struct FName& ParameterName, float Value);
	void SetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* Value);
	void SetParent(class UMaterialInterface* NewParent);
};


// Class Engine.MaterialInstanceConstant
// 0x0030 (0x02A8 - 0x0278)
class UMaterialInstanceConstant : public UMaterialInstance
{
public:
	TArray<struct FFontParameterValue>                 FontParameterValues;                                      // 0x0278(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                    // 0x0284(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                   // 0x0290(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                    // 0x029C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceConstant");
		return ptr;
	}


	void ClearParameterValues(bool bOnlyClearTextures);
	bool GetMobileVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* OutValue);
	bool GetMobileTextureParameterValue(const struct FName& ParameterName, class UTexture** OutValue);
	bool GetMobileScalarParameterValue(const struct FName& ParameterName, float* OutValue);
	void SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage);
	void SetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* Value);
	void SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value);
	void SetScalarParameterValue(const struct FName& ParameterName, float Value);
	void SetParent(class UMaterialInterface* NewParent);
};


// Class Engine.LandscapeMaterialInstanceConstant
// 0x000C (0x02B4 - 0x02A8)
class ULandscapeMaterialInstanceConstant : public UMaterialInstanceConstant
{
public:
	unsigned long                                      bIsLayerThumbnail : 1;                                    // 0x02A8(0x0004)
	int                                                DataWeightmapIndex;                                       // 0x02AC(0x0004)
	int                                                DataWeightmapSize;                                        // 0x02B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LandscapeMaterialInstanceConstant");
		return ptr;
	}

};


// Class Engine.MaterialInstanceTimeVarying
// 0x0044 (0x02BC - 0x0278)
class UMaterialInstanceTimeVarying : public UMaterialInstance
{
public:
	unsigned long                                      bAutoActivateAll : 1;                                     // 0x0278(0x0004) (Edit)
	float                                              Duration;                                                 // 0x027C(0x0004) (Transient)
	TArray<struct FFontParameterValueOverTime>         FontParameterValues;                                      // 0x0280(0x000C) (Edit, NeedCtorLink)
	TArray<struct FScalarParameterValueOverTime>       ScalarParameterValues;                                    // 0x028C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FTextureParameterValueOverTime>      TextureParameterValues;                                   // 0x0298(0x000C) (Edit, NeedCtorLink)
	TArray<struct FVectorParameterValueOverTime>       VectorParameterValues;                                    // 0x02A4(0x000C) (Edit, NeedCtorLink)
	TArray<struct FLinearColorParameterValueOverTime>  LinearColorParameterValues;                               // 0x02B0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceTimeVarying");
		return ptr;
	}


	bool CheckForVectorParameterConflicts(const struct FName& ParameterName);
	float GetMaxDurationFromAllParameters();
	void ClearParameterValues(bool bOnlyClearTextures);
	void SetFontParameterValue(const struct FName& ParameterName, class UFont* FontValue, int FontPage);
	void SetVectorStartTime(const struct FName& ParameterName, float Value);
	void SetLinearColorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveLinearColor* Value);
	void SetLinearColorParameterValue(const struct FName& ParameterName, struct FLinearColor* Value);
	void SetVectorCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveVector* Value);
	void SetVectorParameterValue(const struct FName& ParameterName, struct FLinearColor* Value);
	void SetTextureParameterValue(const struct FName& ParameterName, class UTexture* Value);
	void SetDuration(float Value);
	void SetScalarStartTime(const struct FName& ParameterName, float Value);
	void SetScalarCurveParameterValue(const struct FName& ParameterName, struct FInterpCurveFloat* Value);
	void SetScalarParameterValue(const struct FName& ParameterName, float Value);
	void SetParent(class UMaterialInterface* NewParent);
};


// Class Engine.EmitterCameraLensEffectBase
// 0x0024 (0x0204 - 0x01E0)
class AEmitterCameraLensEffectBase : public AEmitter
{
public:
	class UParticleSystem*                             PS_CameraEffect;                                          // 0x01E0(0x0004)
	class UParticleSystem*                             PS_CameraEffectNonExtremeContent;                         // 0x01E4(0x0004)
	float                                              BaseFOV;                                                  // 0x01E8(0x0004)
	float                                              DistFromCamera;                                           // 0x01EC(0x0004) (Edit, Const)
	unsigned long                                      bAllowMultipleInstances : 1;                              // 0x01F0(0x0004) (Edit, Const)
	TArray<class UClass*>                              EmittersToTreatAsSame;                                    // 0x01F4(0x000C) (NeedCtorLink)
	class ACamera*                                     BaseCamera;                                               // 0x0200(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EmitterCameraLensEffectBase");
		return ptr;
	}


	void UpdateLocation(float CamFOVDeg, struct FVector* CamLoc, struct FRotator* CamRot);
	void ActivateLensEffect();
	void PostBeginPlay();
	void NotifyRetriggered();
	void RegisterCamera(class ACamera* C);
	void Destroyed();
};


// Class Engine.ParticleEventManager
// 0x0000 (0x01D4 - 0x01D4)
class AParticleEventManager : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleEventManager");
		return ptr;
	}


	void HandleParticleModuleEventSendToGame(class UParticleModuleEventSendToGame* InEvent, struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName);
};


// Class Engine.ParticleSystemComponent
// 0x0164 (0x033C - 0x01D8)
class UParticleSystemComponent : public UPrimitiveComponent
{
public:
	class UParticleSystem*                             Template;                                                 // 0x01D8(0x0004) (Edit, Const)
	class UClass*                                      LightEnvironmentClass;                                    // 0x01DC(0x0004)
	class AActor*                                      LightEnvironmentSharedInstigator;                         // 0x01E0(0x0004) (Transient)
	int                                                MaxLightEnvironmentPooledReuses;                          // 0x01E4(0x0004) (Transient)
	TArray<struct FPointer>                            EmitterInstances;                                         // 0x01E8(0x000C) (Const, Native, Transient)
	TArray<class UStaticMeshComponent*>                SMComponents;                                             // 0x01F4(0x000C) (Const, ExportObject, Transient, Component, DuplicateTransient, NeedCtorLink, EditInline)
	TArray<class UMaterialInterface*>                  SMMaterialInterfaces;                                     // 0x0200(0x000C) (Const, Transient, DuplicateTransient, NeedCtorLink)
	TArray<class USkeletalMeshComponent*>              SkelMeshComponents;                                       // 0x020C(0x000C) (Const, ExportObject, Transient, Component, DuplicateTransient, NeedCtorLink, EditInline)
	TArray<struct FViewParticleEmitterInstanceMotionBlurInfo> ViewMBInfoArray;                                          // 0x0218(0x000C) (Const, Native, Transient)
	unsigned long                                      bAutoActivate : 1;                                        // 0x0224(0x0004) (Edit)
	unsigned long                                      bWasCompleted : 1;                                        // 0x0224(0x0004) (Const, Transient)
	unsigned long                                      bSuppressSpawning : 1;                                    // 0x0224(0x0004) (Const, Transient)
	unsigned long                                      bWasDeactivated : 1;                                      // 0x0224(0x0004) (Const, Transient)
	unsigned long                                      bResetOnDetach : 1;                                       // 0x0224(0x0004) (Edit)
	unsigned long                                      bUpdateOnDedicatedServer : 1;                             // 0x0224(0x0004)
	unsigned long                                      bJustAttached : 1;                                        // 0x0224(0x0004) (Transient)
	unsigned long                                      bIsActive : 1;                                            // 0x0224(0x0004) (Transient)
	unsigned long                                      bHasBeenActivated : 1;                                    // 0x0224(0x0004) (Transient)
	unsigned long                                      bWarmingUp : 1;                                           // 0x0224(0x0004)
	unsigned long                                      bIsCachedInPool : 1;                                      // 0x0224(0x0004)
	unsigned long                                      bOverrideLODMethod : 1;                                   // 0x0224(0x0004) (Edit)
	unsigned long                                      bSkipUpdateDynamicDataDuringTick : 1;                     // 0x0224(0x0004)
	unsigned long                                      bSkipBoundsUpdate : 1;                                    // 0x0224(0x0004)
	unsigned long                                      bUpdateComponentInTick : 1;                               // 0x0224(0x0004)
	unsigned long                                      bDeferredBeamUpdate : 1;                                  // 0x0224(0x0004)
	unsigned long                                      bForcedInActive : 1;                                      // 0x0224(0x0004) (Transient)
	unsigned long                                      bIsWarmingUp : 1;                                         // 0x0224(0x0004) (Transient)
	unsigned long                                      bIsViewRelevanceDirty : 1;                                // 0x0224(0x0004) (Transient)
	unsigned long                                      bRecacheViewRelevance : 1;                                // 0x0224(0x0004) (Transient)
	unsigned long                                      bCastOpacityShadows : 1;                                  // 0x0224(0x0004) (Edit)
	unsigned long                                      bUseFixedRelativeShadowBoundingBox : 1;                   // 0x0224(0x0004) (Edit)
	unsigned long                                      bLODUpdatePending : 1;                                    // 0x0224(0x0004) (Transient)
	unsigned long                                      bSkipSpawnCountCheck : 1;                                 // 0x0224(0x0004) (Transient)
	TArray<struct FParticleSysParam>                   InstanceParameters;                                       // 0x0228(0x000C) (Edit, NeedCtorLink, EditInline)
	struct FVector                                     OldPosition;                                              // 0x0234(0x000C)
	struct FVector                                     PartSysVelocity;                                          // 0x0240(0x000C)
	float                                              WarmupTime;                                               // 0x024C(0x0004)
	float                                              WarmupTickRate;                                           // 0x0250(0x0004)
	int                                                LODLevel;                                                 // 0x0254(0x0004) (Transient)
	float                                              SecondsBeforeInactive;                                    // 0x0258(0x0004) (Edit)
	float                                              TimeSinceLastForceUpdateTransform;                        // 0x025C(0x0004) (Transient)
	float                                              MaxTimeBeforeForceUpdateTransform;                        // 0x0260(0x0004)
	int                                                EditorLODLevel;                                           // 0x0264(0x0004)
	int                                                EditorDetailMode;                                         // 0x0268(0x0004)
	float                                              AccumTickTime;                                            // 0x026C(0x0004) (Transient)
	TEnumAsByte<EParticleSystemLODMethod>              LODMethod;                                                // 0x0270(0x0001) (Edit)
	TEnumAsByte<EParticleReplayState>                  ReplayState;                                              // 0x0271(0x0001) (Const, Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0272(0x0002) MISSED OFFSET
	TArray<struct FMaterialViewRelevance>              CachedViewRelevanceFlags;                                 // 0x0274(0x000C) (Const, Transient, NeedCtorLink)
	struct FColor                                      OpacityShadowsExtAmbient;                                 // 0x0280(0x0004) (Edit)
	struct FColor                                      OpacityShadowsSelfAmbient;                                // 0x0284(0x0004) (Edit)
	float                                              OpacityShadowsOpacityMultiplier;                          // 0x0288(0x0004) (Edit)
	class ALight*                                      OpacityShadowsLightSource;                                // 0x028C(0x0004) (Edit)
	class AKActor*                                     OpacityShadowsOpaqueShadowCaster;                         // 0x0290(0x0004) (Edit)
	struct FBox                                        FixedRelativeShadowBoundingBox;                           // 0x0294(0x001C) (Edit)
	float                                              OpacityShadowsTransitionSize;                             // 0x02B0(0x0004) (Edit)
	struct FBoxSphereBounds                            ShadowBounds;                                             // 0x02B4(0x001C) (Transient)
	TArray<class UParticleSystemReplay*>               ReplayClips;                                              // 0x02D0(0x000C) (Edit, Const, NeedCtorLink, EditInline)
	int                                                ReplayClipIDNumber;                                       // 0x02DC(0x0004) (Const, Transient)
	int                                                ReplayFrameIndex;                                         // 0x02E0(0x0004) (Const, Transient)
	float                                              AccumLODDistanceCheckTime;                                // 0x02E4(0x0004) (Transient)
	TArray<struct FParticleEventSpawnData>             SpawnEvents;                                              // 0x02E8(0x000C) (Transient, NeedCtorLink)
	TArray<struct FParticleEventDeathData>             DeathEvents;                                              // 0x02F4(0x000C) (Transient, NeedCtorLink)
	TArray<struct FParticleEventCollideData>           CollisionEvents;                                          // 0x0300(0x000C) (Transient, NeedCtorLink)
	TArray<struct FParticleEventKismetData>            KismetEvents;                                             // 0x030C(0x000C) (Transient, NeedCtorLink)
	TArray<struct FParticleEventAttractorCollideData>  AttractorCollisionEvents;                                 // 0x0318(0x000C) (Transient, NeedCtorLink)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x0324(0x0004) (Const, Native, Transient)
	float                                              CustomTimeDilation;                                       // 0x0328(0x0004) (Edit)
	float                                              EmitterDelay;                                             // 0x032C(0x0004) (Transient)
	struct FScriptDelegate                             __OnSystemFinished__Delegate;                             // 0x0330(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSystemComponent");
		return ptr;
	}


	void SetStopSpawning(int InEmitterIndex, bool bInStopSpawning);
	void ResetToDefaults();
	void SetActive(bool bNowActive, bool bFlagAsJustAttached);
	void ClearParameter(const struct FName& ParameterName, TEnumAsByte<EParticleSysParamType> ParameterType);
	bool GetMaterialParameter(const struct FName& InName, class UMaterialInterface** OutMaterial);
	bool GetActorParameter(const struct FName& InName, class AActor** OutActor);
	bool GetColorParameter(const struct FName& InName, struct FColor* OutColor);
	bool GetVectorParameter(const struct FName& InName, struct FVector* OutVector);
	bool GetFloatParameter(const struct FName& InName, float* OutFloat);
	void SetMaterialParameter(const struct FName& ParameterName, class UMaterialInterface* Param);
	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void SetColorParameter(const struct FName& ParameterName, const struct FColor& Param);
	void SetVectorRandParameter(const struct FName& ParameterName, struct FVector* Param, struct FVector* ParamLow);
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetFloatRandParameter(const struct FName& ParameterName, float Param, float ParamLow);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	int GetEditorLODLevel();
	int GetLODLevel();
	void SetEditorLODLevel(int InLODLevel);
	void SetLODLevel(int InLODLevel);
	bool IsAllApexEmittersStopEmitting();
	void SetSpawnRateOnAllApexEmitters(float MinRate, float MaxRate);
	bool SystemHasCompleted();
	float GetMaxLifespan();
	int DetermineLODLevelForLocation(struct FVector* EffectLocation);
	void SetBeamTargetStrength(int EmitterIndex, float NewTargetStrength, int TargetIndex);
	void SetBeamTargetTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int TargetIndex);
	void SetBeamTargetPoint(int EmitterIndex, const struct FVector& NewTargetPoint, int TargetIndex);
	void SetBeamSourceStrength(int EmitterIndex, float NewSourceStrength, int SourceIndex);
	void SetBeamSourceTangent(int EmitterIndex, const struct FVector& NewTangentPoint, int SourceIndex);
	void SetBeamSourcePoint(int EmitterIndex, const struct FVector& NewSourcePoint, int SourceIndex);
	void SetBeamDistance(int EmitterIndex, float Distance);
	void SetBeamEndPoint(int EmitterIndex, const struct FVector& NewEndPoint);
	void SetBeamTessellationFactor(int EmitterIndex, float NewFactor);
	void SetBeamType(int EmitterIndex, int NewMethod);
	void RewindEmitterInstances();
	void RewindEmitterInstance(int EmitterIndex);
	void SetKillOnCompleted(int EmitterIndex, bool bKill);
	void SetKillOnDeactivate(int EmitterIndex, bool bKill);
	bool GetSkipBoundsUpdate();
	void SetSkipBoundsUpdate(bool bInSkipBoundsUpdate);
	bool GetSkipUpdateDynamicDataDuringTick();
	void SetSkipUpdateDynamicDataDuringTick(bool bInSkipUpdateDynamicDataDuringTick);
	void KillParticlesInEmitter(const struct FName& InEmitterName);
	void KillParticlesForced();
	void DeactivateSystem();
	void ActivateSystem(bool bFlagAsJustAttached);
	void SetTemplate(class UParticleSystem* NewTemplate);
	void OnSystemFinished(class UParticleSystemComponent* PSystem);
};


// Class Engine.DistributionFloatParticleParameter
// 0x0003 (0x0070 - 0x006D)
class UDistributionFloatParticleParameter : public UDistributionFloatParameterBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatParticleParameter");
		return ptr;
	}

};


// Class Engine.DistributionVectorParticleParameter
// 0x0001 (0x00A0 - 0x009F)
class UDistributionVectorParticleParameter : public UDistributionVectorParameterBase
{
public:
	unsigned char                                      UnknownData00[0x1];                                       // 0x009F(0x0001) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionVectorParticleParameter");
		return ptr;
	}

};


// Class Engine.ParticleEmitter
// 0x0030 (0x006C - 0x003C)
class UParticleEmitter : public UObject
{
public:
	struct FName                                       EmitterName;                                              // 0x003C(0x0008) (Edit)
	int                                                SubUVDataOffset;                                          // 0x0044(0x0004) (Transient)
	TEnumAsByte<EEmitterRenderMode>                    EmitterRenderMode;                                        // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FColor                                      EmitterEditorColor;                                       // 0x004C(0x0004) (Edit)
	TArray<class UParticleLODLevel*>                   LODLevels;                                                // 0x0050(0x000C) (ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      ConvertedModules : 1;                                     // 0x005C(0x0004)
	unsigned long                                      bCollapsed : 1;                                           // 0x005C(0x0004) (Edit)
	unsigned long                                      bIsSoloing : 1;                                           // 0x005C(0x0004) (Transient)
	unsigned long                                      bCookedOut : 1;                                           // 0x005C(0x0004)
	int                                                PeakActiveParticles;                                      // 0x0060(0x0004)
	int                                                InitialAllocationCount;                                   // 0x0064(0x0004) (Edit)
	float                                              MediumDetailSpawnRateScale;                               // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleEmitter");
		return ptr;
	}


	float GetMaxLifespan(float InComponentDelay);
};


// Class Engine.ParticleSpriteEmitter
// 0x0000 (0x006C - 0x006C)
class UParticleSpriteEmitter : public UParticleEmitter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSpriteEmitter");
		return ptr;
	}

};


// Class Engine.ParticleLODLevel
// 0x0064 (0x00A0 - 0x003C)
class UParticleLODLevel : public UObject
{
public:
	int                                                Level;                                                    // 0x003C(0x0004) (Const)
	unsigned long                                      bEnabled : 1;                                             // 0x0040(0x0004)
	unsigned long                                      ConvertedModules : 1;                                     // 0x0040(0x0004)
	class UParticleModuleRequired*                     RequiredModule;                                           // 0x0044(0x0004) (ExportObject, NeedCtorLink, EditInline)
	TArray<class UParticleModule*>                     Modules;                                                  // 0x0048(0x000C) (ExportObject, NeedCtorLink, EditInline)
	class UParticleModule*                             TypeDataModule;                                           // 0x0054(0x0004) (ExportObject)
	class UParticleModuleSpawn*                        SpawnModule;                                              // 0x0058(0x0004) (ExportObject)
	class UParticleModuleEventGenerator*               EventGenerator;                                           // 0x005C(0x0004) (ExportObject)
	TArray<class UParticleModuleSpawnBase*>            SpawningModules;                                          // 0x0060(0x000C) (Native)
	TArray<class UParticleModule*>                     SpawnModules;                                             // 0x006C(0x000C) (Native)
	TArray<class UParticleModule*>                     UpdateModules;                                            // 0x0078(0x000C) (Native)
	TArray<class UParticleModuleOrbit*>                OrbitModules;                                             // 0x0084(0x000C) (Native)
	TArray<class UParticleModuleEventReceiverBase*>    EventReceiverModules;                                     // 0x0090(0x000C) (Native)
	int                                                PeakActiveParticles;                                      // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleLODLevel");
		return ptr;
	}

};


// Class Engine.ParticleModule
// 0x000C (0x0048 - 0x003C)
class UParticleModule : public UObject
{
public:
	unsigned long                                      bSpawnModule : 1;                                         // 0x003C(0x0004)
	unsigned long                                      bUpdateModule : 1;                                        // 0x003C(0x0004)
	unsigned long                                      bFinalUpdateModule : 1;                                   // 0x003C(0x0004)
	unsigned long                                      bCurvesAsColor : 1;                                       // 0x003C(0x0004)
	unsigned long                                      b3DDrawMode : 1;                                          // 0x003C(0x0004) (Edit)
	unsigned long                                      bSupported3DDrawMode : 1;                                 // 0x003C(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x003C(0x0004)
	unsigned long                                      bEditable : 1;                                            // 0x003C(0x0004)
	unsigned long                                      LODDuplicate : 1;                                         // 0x003C(0x0004)
	unsigned long                                      bSupportsRandomSeed : 1;                                  // 0x003C(0x0004)
	unsigned long                                      bRequiresLoopingNotification : 1;                         // 0x003C(0x0004)
	unsigned char                                      LODValidity;                                              // 0x0040(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FColor                                      ModuleEditorColor;                                        // 0x0044(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModule");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationBase
// 0x0004 (0x004C - 0x0048)
class UParticleModuleAccelerationBase : public UParticleModule
{
public:
	unsigned long                                      bAlwaysInWorldSpace : 1;                                  // 0x0048(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleAcceleration
// 0x0020 (0x006C - 0x004C)
class UParticleModuleAcceleration : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      Acceleration;                                             // 0x004C(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bApplyOwnerScale : 1;                                     // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAcceleration");
		return ptr;
	}

};


// Class Engine.ParticleModuleAccelerationOverLifetime
// 0x001C (0x0068 - 0x004C)
class UParticleModuleAccelerationOverLifetime : public UParticleModuleAccelerationBase
{
public:
	struct FRawDistributionVector                      AccelOverLife;                                            // 0x004C(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAccelerationOverLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleAttractorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorBoneSocket
// 0x00D4 (0x011C - 0x0048)
class UParticleModuleAttractorBoneSocket : public UParticleModuleAttractorBase
{
public:
	TEnumAsByte<EBoneSocketAttractorFalloffType>       FalloffType;                                              // 0x0048(0x0001) (Edit)
	TEnumAsByte<ELocationBoneSocketDestination>        DestinationType;                                          // 0x0049(0x0001) (Edit)
	TEnumAsByte<ELocationBoneSocketDestSelectionMethod> SelectionMethod;                                          // 0x004A(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x004B(0x0001) MISSED OFFSET
	unsigned long                                      bParticleLifeRelative : 1;                                // 0x004C(0x0004) (Edit)
	unsigned long                                      bAttractAlongLengthOfBone : 1;                            // 0x004C(0x0004) (Edit)
	struct FRawDistributionFloat                       FalloffExponent;                                          // 0x0050(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Range;                                                    // 0x006C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0088(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       CollisionRadius;                                          // 0x00A4(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       DragCoefficient;                                          // 0x00C0(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       DragRadius;                                               // 0x00DC(0x001C) (Edit, Component, NeedCtorLink)
	struct FVector                                     UniversalOffset;                                          // 0x00F8(0x000C) (Edit)
	TArray<struct FAttractLocationBoneSocketInfo>      SourceLocations;                                          // 0x0104(0x000C) (Edit, NeedCtorLink)
	struct FName                                       SkelMeshActorParamName;                                   // 0x0110(0x0008) (Edit)
	class USkeletalMesh*                               EditorSkelMesh;                                           // 0x0118(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorBoneSocket");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorLine
// 0x0050 (0x0098 - 0x0048)
class UParticleModuleAttractorLine : public UParticleModuleAttractorBase
{
public:
	struct FVector                                     EndPoint0;                                                // 0x0048(0x000C) (Edit)
	struct FVector                                     EndPoint1;                                                // 0x0054(0x000C) (Edit)
	struct FRawDistributionFloat                       Range;                                                    // 0x0060(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Strength;                                                 // 0x007C(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorLine");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorParticle
// 0x004C (0x0094 - 0x0048)
class UParticleModuleAttractorParticle : public UParticleModuleAttractorBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0048(0x0008) (Edit, ExportObject, NoClear)
	struct FRawDistributionFloat                       Range;                                                    // 0x0050(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bStrengthByDistance : 1;                                  // 0x006C(0x0004) (Edit)
	unsigned long                                      bAffectBaseVelocity : 1;                                  // 0x006C(0x0004) (Edit)
	unsigned long                                      bRenewSource : 1;                                         // 0x006C(0x0004) (Edit)
	unsigned long                                      bInheritSourceVel : 1;                                    // 0x006C(0x0004) (Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	TEnumAsByte<EAttractorParticleSelectionMethod>     SelectionMethod;                                          // 0x008C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	int                                                LastSelIndex;                                             // 0x0090(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorParticle");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorPoint
// 0x0058 (0x00A0 - 0x0048)
class UParticleModuleAttractorPoint : public UParticleModuleAttractorBase
{
public:
	struct FRawDistributionVector                      Position;                                                 // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Range;                                                    // 0x0064(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0080(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      StrengthByDistance : 1;                                   // 0x009C(0x0004) (Edit)
	unsigned long                                      bAffectBaseVelocity : 1;                                  // 0x009C(0x0004) (Edit)
	unsigned long                                      bOverrideVelocity : 1;                                    // 0x009C(0x0004) (Edit)
	unsigned long                                      bUseWorldSpacePosition : 1;                               // 0x009C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorPoint");
		return ptr;
	}

};


// Class Engine.ParticleModuleAttractorSkelVertSurface
// 0x00F4 (0x013C - 0x0048)
class UParticleModuleAttractorSkelVertSurface : public UParticleModuleAttractorBase
{
public:
	TEnumAsByte<EVertSurfaceAttractorFalloffType>      FalloffType;                                              // 0x0048(0x0001) (Edit)
	TEnumAsByte<EAttractorSkelVertSurfaceDestination>  DestinationType;                                          // 0x0049(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004A(0x0002) MISSED OFFSET
	unsigned long                                      bParticleLifeRelative : 1;                                // 0x004C(0x0004) (Edit)
	unsigned long                                      bEnforceNormalCheck : 1;                                  // 0x004C(0x0004) (Edit)
	struct FRawDistributionFloat                       FalloffExponent;                                          // 0x0050(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Range;                                                    // 0x006C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0088(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       CollisionRadius;                                          // 0x00A4(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       DragCoefficient;                                          // 0x00C0(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       DragRadius;                                               // 0x00DC(0x001C) (Edit, Component, NeedCtorLink)
	struct FVector                                     UniversalOffset;                                          // 0x00F8(0x000C) (Edit)
	struct FName                                       SkelMeshActorParamName;                                   // 0x0104(0x0008) (Edit)
	class USkeletalMesh*                               EditorSkelMesh;                                           // 0x010C(0x0004) (Edit)
	TArray<struct FName>                               ValidAssociatedBones;                                     // 0x0110(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     NormalToCompare;                                          // 0x011C(0x000C) (Edit)
	float                                              NormalCheckToleranceDegrees;                              // 0x0128(0x0004) (Edit)
	float                                              NormalCheckTolerance;                                     // 0x012C(0x0004)
	TArray<int>                                        ValidMaterialIndices;                                     // 0x0130(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleAttractorSkelVertSurface");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleBeamBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamModifier
// 0x0068 (0x00B0 - 0x0048)
class UParticleModuleBeamModifier : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeamModifierType>                     ModifierType;                                             // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FBeamModifierOptions                        PositionOptions;                                          // 0x004C(0x0004) (Edit)
	struct FRawDistributionVector                      Position;                                                 // 0x0050(0x001C) (Edit, Component, NeedCtorLink)
	struct FBeamModifierOptions                        TangentOptions;                                           // 0x006C(0x0004) (Edit)
	struct FRawDistributionVector                      Tangent;                                                  // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bAbsoluteTangent : 1;                                     // 0x008C(0x0004) (Edit)
	struct FBeamModifierOptions                        StrengthOptions;                                          // 0x0090(0x0004) (Edit)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0094(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamModifier");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamNoise
// 0x00AC (0x00F4 - 0x0048)
class UParticleModuleBeamNoise : public UParticleModuleBeamBase
{
public:
	unsigned long                                      bLowFreq_Enabled : 1;                                     // 0x0048(0x0004) (Edit)
	unsigned long                                      bNRScaleEmitterTime : 1;                                  // 0x0048(0x0004) (Edit)
	unsigned long                                      bSmooth : 1;                                              // 0x0048(0x0004) (Edit)
	unsigned long                                      bNoiseLock : 1;                                           // 0x0048(0x0004) (Const)
	unsigned long                                      bOscillate : 1;                                           // 0x0048(0x0004) (Edit)
	unsigned long                                      bUseNoiseTangents : 1;                                    // 0x0048(0x0004) (Edit)
	unsigned long                                      bTargetNoise : 1;                                         // 0x0048(0x0004) (Edit)
	unsigned long                                      bApplyNoiseScale : 1;                                     // 0x0048(0x0004) (Edit)
	int                                                Frequency;                                                // 0x004C(0x0004) (Edit)
	int                                                Frequency_LowRange;                                       // 0x0050(0x0004) (Edit)
	struct FRawDistributionVector                      NoiseRange;                                               // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       NoiseRangeScale;                                          // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      NoiseSpeed;                                               // 0x008C(0x001C) (Edit, Component, NeedCtorLink)
	float                                              NoiseLockRadius;                                          // 0x00A8(0x0004) (Edit)
	float                                              NoiseLockTime;                                            // 0x00AC(0x0004) (Edit)
	float                                              NoiseTension;                                             // 0x00B0(0x0004) (Edit)
	struct FRawDistributionFloat                       NoiseTangentStrength;                                     // 0x00B4(0x001C) (Edit, Component, NeedCtorLink)
	int                                                NoiseTessellation;                                        // 0x00D0(0x0004) (Edit)
	float                                              FrequencyDistance;                                        // 0x00D4(0x0004) (Edit)
	struct FRawDistributionFloat                       NoiseScale;                                               // 0x00D8(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamNoise");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamSource
// 0x0064 (0x00AC - 0x0048)
class UParticleModuleBeamSource : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              SourceMethod;                                             // 0x0048(0x0001) (Edit)
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       SourceTangentMethod;                                      // 0x0049(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004A(0x0002) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x004C(0x0008) (Edit)
	unsigned long                                      bSourceAbsolute : 1;                                      // 0x0054(0x0004) (Edit)
	unsigned long                                      bLockSource : 1;                                          // 0x0054(0x0004) (Edit)
	unsigned long                                      bLockSourceTangent : 1;                                   // 0x0054(0x0004) (Edit)
	unsigned long                                      bLockSourceStength : 1;                                   // 0x0054(0x0004) (Edit)
	struct FRawDistributionVector                      Source;                                                   // 0x0058(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      SourceTangent;                                            // 0x0074(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       SourceStrength;                                           // 0x0090(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamSource");
		return ptr;
	}

};


// Class Engine.ParticleModuleBeamTarget
// 0x0068 (0x00B0 - 0x0048)
class UParticleModuleBeamTarget : public UParticleModuleBeamBase
{
public:
	TEnumAsByte<EBeam2SourceTargetMethod>              TargetMethod;                                             // 0x0048(0x0001) (Edit)
	TEnumAsByte<EBeam2SourceTargetTangentMethod>       TargetTangentMethod;                                      // 0x0049(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004A(0x0002) MISSED OFFSET
	struct FName                                       TargetName;                                               // 0x004C(0x0008) (Edit)
	struct FRawDistributionVector                      Target;                                                   // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bTargetAbsolute : 1;                                      // 0x0070(0x0004) (Edit)
	unsigned long                                      bLockTarget : 1;                                          // 0x0070(0x0004) (Edit)
	unsigned long                                      bLockTargetTangent : 1;                                   // 0x0070(0x0004) (Edit)
	unsigned long                                      bLockTargetStength : 1;                                   // 0x0070(0x0004) (Edit)
	struct FRawDistributionVector                      TargetTangent;                                            // 0x0074(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       TargetStrength;                                           // 0x0090(0x001C) (Edit, Component, NeedCtorLink)
	float                                              LockRadius;                                               // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleBeamTarget");
		return ptr;
	}

};


// Class Engine.ParticleModuleCameraBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleCameraBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCameraBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleCameraOffset
// 0x0021 (0x0069 - 0x0048)
class UParticleModuleCameraOffset : public UParticleModuleCameraBase
{
public:
	struct FRawDistributionFloat                       CameraOffset;                                             // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bSpawnTimeOnly : 1;                                       // 0x0064(0x0004) (Edit)
	TEnumAsByte<EParticleCameraOffsetUpdateMethod>     UpdateMethod;                                             // 0x0068(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCameraOffset");
		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleCollisionBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCollisionBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleCollision
// 0x00AC (0x00F4 - 0x0048)
class UParticleModuleCollision : public UParticleModuleCollisionBase
{
public:
	struct FRawDistributionVector                      DampingFactor;                                            // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      DampingFactorRotation;                                    // 0x0064(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       MaxCollisions;                                            // 0x0080(0x001C) (Edit, Component, NeedCtorLink)
	TEnumAsByte<EParticleCollisionComplete>            CollisionCompletionOption;                                // 0x009C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	unsigned long                                      bApplyPhysics : 1;                                        // 0x00A0(0x0004) (Edit)
	unsigned long                                      bPawnsDoNotDecrementCount : 1;                            // 0x00A0(0x0004) (Edit)
	unsigned long                                      bOnlyVerticalNormalsDecrementCount : 1;                   // 0x00A0(0x0004) (Edit)
	unsigned long                                      bDropDetail : 1;                                          // 0x00A0(0x0004) (Edit)
	unsigned long                                      bCollideOnlyIfVisible : 1;                                // 0x00A0(0x0004) (Edit)
	unsigned long                                      bCollideWithWorld : 1;                                    // 0x00A0(0x0004) (Edit)
	unsigned long                                      bCollideWithWorldAttractors : 1;                          // 0x00A0(0x0004) (Edit)
	struct FRawDistributionFloat                       ParticleMass;                                             // 0x00A4(0x001C) (Edit, Component, NeedCtorLink)
	float                                              DirScalar;                                                // 0x00C0(0x0004) (Edit)
	float                                              VerticalFudgeFactor;                                      // 0x00C4(0x0004) (Edit)
	struct FRawDistributionFloat                       DelayAmount;                                              // 0x00C8(0x001C) (Edit, Component, NeedCtorLink)
	float                                              MaxCollisionDistance;                                     // 0x00E4(0x0004) (Edit)
	TArray<struct FParticleAttractorCollisionAction>   ParticleAttractorCollisionActions;                        // 0x00E8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCollision");
		return ptr;
	}

};


// Class Engine.ParticleModuleCollisionActor
// 0x0010 (0x0104 - 0x00F4)
class UParticleModuleCollisionActor : public UParticleModuleCollision
{
public:
	TArray<struct FName>                               ActorsToCollideWith;                                      // 0x00F4(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bCheckPawnCollisions : 1;                                 // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleCollisionActor");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleColorBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleColor
// 0x003C (0x0084 - 0x0048)
class UParticleModuleColor : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      StartColor;                                               // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       StartAlpha;                                               // 0x0064(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bClampAlpha : 1;                                          // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColor");
		return ptr;
	}

};


// Class Engine.ParticleModuleColor_Seeded
// 0x0018 (0x009C - 0x0084)
class UParticleModuleColor_Seeded : public UParticleModuleColor
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0084(0x0018) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColor_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorByParameter
// 0x000C (0x0054 - 0x0048)
class UParticleModuleColorByParameter : public UParticleModuleColorBase
{
public:
	struct FName                                       ColorParam;                                               // 0x0048(0x0008) (Edit)
	struct FColor                                      DefaultColor;                                             // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorByParameter");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorOverLife
// 0x003C (0x0084 - 0x0048)
class UParticleModuleColorOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x0064(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bClampAlpha : 1;                                          // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorScaleOverDensity
// 0x0038 (0x0080 - 0x0048)
class UParticleModuleColorScaleOverDensity : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverDensity;                                    // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       AlphaScaleOverDensity;                                    // 0x0064(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorScaleOverDensity");
		return ptr;
	}

};


// Class Engine.ParticleModuleColorScaleOverLife
// 0x003C (0x0084 - 0x0048)
class UParticleModuleColorScaleOverLife : public UParticleModuleColorBase
{
public:
	struct FRawDistributionVector                      ColorScaleOverLife;                                       // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       AlphaScaleOverLife;                                       // 0x0064(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bEmitterTime : 1;                                         // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleColorScaleOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleEventBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventGenerator
// 0x000C (0x0054 - 0x0048)
class UParticleModuleEventGenerator : public UParticleModuleEventBase
{
public:
	TArray<struct FParticleEvent_GenerateInfo>         Events;                                                   // 0x0048(0x000C) (Edit, ExportObject, NeedCtorLink, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventGenerator");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverBase
// 0x000C (0x0054 - 0x0048)
class UParticleModuleEventReceiverBase : public UParticleModuleEventBase
{
public:
	TEnumAsByte<EParticleEventType>                    EventGeneratorType;                                       // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FName                                       EventName;                                                // 0x004C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverKillParticles
// 0x0004 (0x0058 - 0x0054)
class UParticleModuleEventReceiverKillParticles : public UParticleModuleEventReceiverBase
{
public:
	unsigned long                                      bStopSpawning : 1;                                        // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverKillParticles");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventReceiverSpawn
// 0x003C (0x0090 - 0x0054)
class UParticleModuleEventReceiverSpawn : public UParticleModuleEventReceiverBase
{
public:
	struct FRawDistributionFloat                       SpawnCount;                                               // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bUseParticleTime : 1;                                     // 0x0070(0x0004) (Edit)
	unsigned long                                      bUsePSysLocation : 1;                                     // 0x0070(0x0004) (Edit)
	unsigned long                                      bInheritVelocity : 1;                                     // 0x0070(0x0004) (Edit)
	struct FRawDistributionVector                      InheritVelocityScale;                                     // 0x0074(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventReceiverSpawn");
		return ptr;
	}

};


// Class Engine.ParticleModuleForceFieldBase
// 0x0004 (0x004C - 0x0048)
class UParticleModuleForceFieldBase : public UParticleModule
{
public:
	class UNxForceFieldComponent*                      ForceField;                                               // 0x0048(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleForceFieldBase");
		return ptr;
	}


	class UNxForceFieldComponent* GetForceFieldInstance(const struct FVector& Location);
};


// Class Engine.ParticleModuleKillBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleKillBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleKillBox
// 0x003C (0x0084 - 0x0048)
class UParticleModuleKillBox : public UParticleModuleKillBase
{
public:
	struct FRawDistributionVector                      LowerLeftCorner;                                          // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      UpperRightCorner;                                         // 0x0064(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bAbsolute : 1;                                            // 0x0080(0x0004) (Edit)
	unsigned long                                      bKillInside : 1;                                          // 0x0080(0x0004) (Edit)
	unsigned long                                      bAxisAlignedAndFixedSize : 1;                             // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillBox");
		return ptr;
	}

};


// Class Engine.ParticleModuleKillHeight
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleKillHeight : public UParticleModuleKillBase
{
public:
	struct FRawDistributionFloat                       Height;                                                   // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bAbsolute : 1;                                            // 0x0064(0x0004) (Edit)
	unsigned long                                      bFloor : 1;                                               // 0x0064(0x0004) (Edit)
	unsigned long                                      bApplyPSysScale : 1;                                      // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleKillHeight");
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetimeBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleLifetimeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLifetimeBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime
// 0x001C (0x0064 - 0x0048)
class UParticleModuleLifetime : public UParticleModuleLifetimeBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0048(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleLifetime_Seeded
// 0x0018 (0x007C - 0x0064)
class UParticleModuleLifetime_Seeded : public UParticleModuleLifetime
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0064(0x0018) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLifetime_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleLocationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocation
// 0x0024 (0x006C - 0x0048)
class UParticleModuleLocation : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      StartLocation;                                            // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	float                                              DistributeOverNPoints;                                    // 0x0064(0x0004) (Edit)
	float                                              DistributeThreshold;                                      // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocation");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocation_Seeded
// 0x0018 (0x0084 - 0x006C)
class UParticleModuleLocation_Seeded : public UParticleModuleLocation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x006C(0x0018) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocation_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationWorldOffset
// 0x0000 (0x006C - 0x006C)
class UParticleModuleLocationWorldOffset : public UParticleModuleLocation
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationWorldOffset_Seeded
// 0x0018 (0x0084 - 0x006C)
class UParticleModuleLocationWorldOffset_Seeded : public UParticleModuleLocationWorldOffset
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x006C(0x0018) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationWorldOffset_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationBoneSocket
// 0x0030 (0x0078 - 0x0048)
class UParticleModuleLocationBoneSocket : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<ELocationBoneSocketSource>             SourceType;                                               // 0x0048(0x0001) (Edit)
	TEnumAsByte<ELocationBoneSocketSelectionMethod>    SelectionMethod;                                          // 0x0049(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004A(0x0002) MISSED OFFSET
	struct FVector                                     UniversalOffset;                                          // 0x004C(0x000C) (Edit)
	TArray<struct FLocationBoneSocketInfo>             SourceLocations;                                          // 0x0058(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bUpdatePositionEachFrame : 1;                             // 0x0064(0x0004) (Edit)
	unsigned long                                      bOrientMeshEmitters : 1;                                  // 0x0064(0x0004) (Edit)
	unsigned long                                      bInheritVelocityAtSpawn : 1;                              // 0x0064(0x0004) (Edit)
	struct FName                                       SkelMeshActorParamName;                                   // 0x0068(0x0008) (Edit)
	class USkeletalMesh*                               EditorSkelMesh;                                           // 0x0070(0x0004) (Edit)
	float                                              LastUpdateTime;                                           // 0x0074(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationBoneSocket");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationDirect
// 0x0074 (0x00BC - 0x0048)
class UParticleModuleLocationDirect : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      Location;                                                 // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      LocationOffset;                                           // 0x0064(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      ScaleFactor;                                              // 0x0080(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      Direction;                                                // 0x009C(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bForceLocalSpace : 1;                                     // 0x00B8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationDirect");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitter
// 0x0018 (0x0060 - 0x0048)
class UParticleModuleLocationEmitter : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0048(0x0008) (Edit, ExportObject, NoClear)
	TEnumAsByte<ELocationEmitterSelectionMethod>       SelectionMethod;                                          // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	unsigned long                                      InheritSourceVelocity : 1;                                // 0x0054(0x0004) (Edit)
	unsigned long                                      bInheritSourceRotation : 1;                               // 0x0054(0x0004) (Edit)
	float                                              InheritSourceVelocityScale;                               // 0x0058(0x0004) (Edit)
	float                                              InheritSourceRotationScale;                               // 0x005C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitter");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationEmitterDirect
// 0x0008 (0x0050 - 0x0048)
class UParticleModuleLocationEmitterDirect : public UParticleModuleLocationBase
{
public:
	struct FName                                       EmitterName;                                              // 0x0048(0x0008) (Edit, ExportObject, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationEmitterDirect");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveBase
// 0x003C (0x0084 - 0x0048)
class UParticleModuleLocationPrimitiveBase : public UParticleModuleLocationBase
{
public:
	unsigned long                                      Positive_X : 1;                                           // 0x0048(0x0004) (Edit)
	unsigned long                                      Positive_Y : 1;                                           // 0x0048(0x0004) (Edit)
	unsigned long                                      Positive_Z : 1;                                           // 0x0048(0x0004) (Edit)
	unsigned long                                      Negative_X : 1;                                           // 0x0048(0x0004) (Edit)
	unsigned long                                      Negative_Y : 1;                                           // 0x0048(0x0004) (Edit)
	unsigned long                                      Negative_Z : 1;                                           // 0x0048(0x0004) (Edit)
	unsigned long                                      SurfaceOnly : 1;                                          // 0x0048(0x0004) (Edit)
	unsigned long                                      Velocity : 1;                                             // 0x0048(0x0004) (Edit)
	struct FRawDistributionFloat                       VelocityScale;                                            // 0x004C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      StartLocation;                                            // 0x0068(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder
// 0x003D (0x00C1 - 0x0084)
class UParticleModuleLocationPrimitiveCylinder : public UParticleModuleLocationPrimitiveBase
{
public:
	unsigned long                                      RadialVelocity : 1;                                       // 0x0084(0x0004) (Edit)
	unsigned long                                      bAdjustForWorldSpace : 1;                                 // 0x0084(0x0004) (Edit)
	struct FRawDistributionFloat                       StartRadius;                                              // 0x0088(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       StartHeight;                                              // 0x00A4(0x001C) (Edit, Component, NeedCtorLink)
	TEnumAsByte<ECylinderHeightAxis>                   HeightAxis;                                               // 0x00C0(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded
// 0x001B (0x00DC - 0x00C1)
class UParticleModuleLocationPrimitiveCylinder_Seeded : public UParticleModuleLocationPrimitiveCylinder
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x00C4(0x0018) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveCylinder_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere
// 0x001C (0x00A0 - 0x0084)
class UParticleModuleLocationPrimitiveSphere : public UParticleModuleLocationPrimitiveBase
{
public:
	struct FRawDistributionFloat                       StartRadius;                                              // 0x0084(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded
// 0x0018 (0x00B8 - 0x00A0)
class UParticleModuleLocationPrimitiveSphere_Seeded : public UParticleModuleLocationPrimitiveSphere
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x00A0(0x0018) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationPrimitiveSphere_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationSkelVertSurface
// 0x004C (0x0094 - 0x0048)
class UParticleModuleLocationSkelVertSurface : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<ELocationSkelVertSurfaceSource>        SourceType;                                               // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FVector                                     UniversalOffset;                                          // 0x004C(0x000C) (Edit)
	unsigned long                                      bUpdatePositionEachFrame : 1;                             // 0x0058(0x0004) (Edit)
	unsigned long                                      bOrientMeshEmitters : 1;                                  // 0x0058(0x0004) (Edit)
	unsigned long                                      bEnforceNormalCheck : 1;                                  // 0x0058(0x0004) (Edit)
	struct FName                                       SkelMeshActorParamName;                                   // 0x005C(0x0008) (Edit)
	class USkeletalMesh*                               EditorSkelMesh;                                           // 0x0064(0x0004) (Edit)
	TArray<struct FName>                               ValidAssociatedBones;                                     // 0x0068(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     NormalToCompare;                                          // 0x0074(0x000C) (Edit)
	float                                              NormalCheckToleranceDegrees;                              // 0x0080(0x0004) (Edit)
	float                                              NormalCheckTolerance;                                     // 0x0084(0x0004)
	TArray<int>                                        ValidMaterialIndices;                                     // 0x0088(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationSkelVertSurface");
		return ptr;
	}

};


// Class Engine.ParticleModuleLocationStaticVertSurface
// 0x0040 (0x0088 - 0x0048)
class UParticleModuleLocationStaticVertSurface : public UParticleModuleLocationBase
{
public:
	TEnumAsByte<ELocationStaticVertSurfaceSource>      SourceType;                                               // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FVector                                     UniversalOffset;                                          // 0x004C(0x000C) (Edit)
	unsigned long                                      bUpdatePositionEachFrame : 1;                             // 0x0058(0x0004) (Edit)
	unsigned long                                      bOrientMeshEmitters : 1;                                  // 0x0058(0x0004) (Edit)
	unsigned long                                      bEnforceNormalCheck : 1;                                  // 0x0058(0x0004) (Edit)
	struct FName                                       StaticMeshActorParamName;                                 // 0x005C(0x0008) (Edit)
	class UStaticMesh*                                 EditorStaticMesh;                                         // 0x0064(0x0004) (Edit)
	struct FVector                                     NormalToCompare;                                          // 0x0068(0x000C) (Edit)
	float                                              NormalCheckToleranceDegrees;                              // 0x0074(0x0004) (Edit)
	float                                              NormalCheckTolerance;                                     // 0x0078(0x0004)
	TArray<int>                                        ValidMaterialIndices;                                     // 0x007C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleLocationStaticVertSurface");
		return ptr;
	}

};


// Class Engine.ParticleModuleSourceMovement
// 0x001C (0x0064 - 0x0048)
class UParticleModuleSourceMovement : public UParticleModuleLocationBase
{
public:
	struct FRawDistributionVector                      SourceMovementScale;                                      // 0x0048(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSourceMovement");
		return ptr;
	}

};


// Class Engine.ParticleModuleMaterialBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleMaterialBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMaterialBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleMaterialByParameter
// 0x0018 (0x0060 - 0x0048)
class UParticleModuleMaterialByParameter : public UParticleModuleMaterialBase
{
public:
	TArray<struct FName>                               MaterialParameters;                                       // 0x0048(0x000C) (Edit, NeedCtorLink)
	TArray<class UMaterialInterface*>                  DefaultMaterials;                                         // 0x0054(0x000C) (Edit, EditFixedSize, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMaterialByParameter");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshMaterial
// 0x000C (0x0054 - 0x0048)
class UParticleModuleMeshMaterial : public UParticleModuleMaterialBase
{
public:
	TArray<class UMaterialInterface*>                  MeshMaterials;                                            // 0x0048(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshMaterial");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbitBase
// 0x0004 (0x004C - 0x0048)
class UParticleModuleOrbitBase : public UParticleModule
{
public:
	unsigned long                                      bUseEmitterTime : 1;                                      // 0x0048(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrbitBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrbit
// 0x0064 (0x00B0 - 0x004C)
class UParticleModuleOrbit : public UParticleModuleOrbitBase
{
public:
	TEnumAsByte<EOrbitChainMode>                       ChainMode;                                                // 0x004C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      OffsetAmount;                                             // 0x0050(0x001C) (Edit, Component, NeedCtorLink)
	struct FOrbitOptions                               OffsetOptions;                                            // 0x006C(0x0004) (Edit)
	struct FRawDistributionVector                      RotationAmount;                                           // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	struct FOrbitOptions                               RotationOptions;                                          // 0x008C(0x0004) (Edit)
	struct FRawDistributionVector                      RotationRateAmount;                                       // 0x0090(0x001C) (Edit, Component, NeedCtorLink)
	struct FOrbitOptions                               RotationRateOptions;                                      // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrbit");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleOrientationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleOrientationAxisLock
// 0x0001 (0x0049 - 0x0048)
class UParticleModuleOrientationAxisLock : public UParticleModuleOrientationBase
{
public:
	TEnumAsByte<EParticleAxisLock>                     LockAxisFlags;                                            // 0x0048(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleOrientationAxisLock");
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleParameterBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleParameterBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic
// 0x0014 (0x005C - 0x0048)
class UParticleModuleParameterDynamic : public UParticleModuleParameterBase
{
public:
	TArray<struct FEmitterDynamicParameter>            DynamicParams;                                            // 0x0048(0x000C) (Edit, EditFixedSize, Component, NeedCtorLink)
	int                                                UpdateFlags;                                              // 0x0054(0x0004)
	unsigned long                                      bUsesVelocity : 1;                                        // 0x0058(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic");
		return ptr;
	}

};


// Class Engine.ParticleModuleParameterDynamic_Seeded
// 0x0018 (0x0074 - 0x005C)
class UParticleModuleParameterDynamic_Seeded : public UParticleModuleParameterDynamic
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x005C(0x0018) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleParameterDynamic_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleRequired
// 0x009C (0x00E4 - 0x0048)
class UParticleModuleRequired : public UParticleModule
{
public:
	class UMaterialInterface*                          Material;                                                 // 0x0048(0x0004) (Edit)
	TEnumAsByte<EParticleScreenAlignment>              ScreenAlignment;                                          // 0x004C(0x0001) (Edit)
	TEnumAsByte<EParticleSortMode>                     SortMode;                                                 // 0x004D(0x0001) (Edit)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x004E(0x0001)
	TEnumAsByte<EParticleSubUVInterpMethod>            InterpolationMethod;                                      // 0x004F(0x0001) (Edit)
	TEnumAsByte<EEmitterNormalsMode>                   EmitterNormalsMode;                                       // 0x0050(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	unsigned long                                      bAllowImageFlipping : 1;                                  // 0x0054(0x0004) (Edit)
	unsigned long                                      bSquareImageFlipping : 1;                                 // 0x0054(0x0004) (Edit)
	unsigned long                                      bUseLocalSpace : 1;                                       // 0x0054(0x0004) (Edit)
	unsigned long                                      bKillOnDeactivate : 1;                                    // 0x0054(0x0004) (Edit)
	unsigned long                                      bKillOnCompleted : 1;                                     // 0x0054(0x0004) (Edit)
	unsigned long                                      bRequiresSorting : 1;                                     // 0x0054(0x0004) (Deprecated)
	unsigned long                                      bUseLegacyEmitterTime : 1;                                // 0x0054(0x0004) (Edit)
	unsigned long                                      bEnableNearParticleCulling : 1;                           // 0x0054(0x0004) (Edit)
	unsigned long                                      bEnableFarParticleCulling : 1;                            // 0x0054(0x0004) (Edit)
	unsigned long                                      bEmitterDurationUseRange : 1;                             // 0x0054(0x0004) (Edit)
	unsigned long                                      bDurationRecalcEachLoop : 1;                              // 0x0054(0x0004) (Edit)
	unsigned long                                      bEmitterDelayUseRange : 1;                                // 0x0054(0x0004) (Edit)
	unsigned long                                      bDelayFirstLoopOnly : 1;                                  // 0x0054(0x0004) (Edit)
	unsigned long                                      bScaleUV : 1;                                             // 0x0054(0x0004) (Edit)
	unsigned long                                      bDirectUV : 1;                                            // 0x0054(0x0004)
	unsigned long                                      bOverrideSystemMacroUV : 1;                               // 0x0054(0x0004) (Edit)
	unsigned long                                      bUseMaxDrawCount : 1;                                     // 0x0054(0x0004) (Edit)
	unsigned long                                      bOrbitModuleAffectsVelocityAlignment : 1;                 // 0x0054(0x0004) (Edit)
	float                                              NearCullDistance;                                         // 0x0058(0x0004) (Edit)
	float                                              NearFadeDistance;                                         // 0x005C(0x0004) (Edit)
	float                                              FarFadeDistance;                                          // 0x0060(0x0004) (Edit)
	float                                              FarCullDistance;                                          // 0x0064(0x0004) (Edit)
	float                                              EmitterDuration;                                          // 0x0068(0x0004) (Edit)
	float                                              EmitterDurationLow;                                       // 0x006C(0x0004) (Edit)
	int                                                EmitterLoops;                                             // 0x0070(0x0004) (Edit)
	struct FRawDistributionFloat                       SpawnRate;                                                // 0x0074(0x001C) (Component, NeedCtorLink)
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x0090(0x000C) (ExportObject, NeedCtorLink, NoClear)
	float                                              EmitterDelay;                                             // 0x009C(0x0004) (Edit)
	float                                              EmitterDelayLow;                                          // 0x00A0(0x0004) (Edit)
	int                                                SubImages_Horizontal;                                     // 0x00A4(0x0004) (Edit)
	int                                                SubImages_Vertical;                                       // 0x00A8(0x0004) (Edit)
	float                                              RandomImageTime;                                          // 0x00AC(0x0004)
	int                                                RandomImageChanges;                                       // 0x00B0(0x0004) (Edit)
	struct FVector                                     MacroUVPosition;                                          // 0x00B4(0x000C) (Edit)
	float                                              MacroUVRadius;                                            // 0x00C0(0x0004) (Edit)
	int                                                MaxDrawCount;                                             // 0x00C4(0x0004) (Edit)
	float                                              DownsampleThresholdScreenFraction;                        // 0x00C8(0x0004)
	struct FVector                                     NormalsSphereCenter;                                      // 0x00CC(0x000C) (Edit)
	struct FVector                                     NormalsCylinderDirection;                                 // 0x00D8(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRequired");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleRotationBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleMeshRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionVector                      StartRotation;                                            // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bInheritParent : 1;                                       // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotation");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotation_Seeded
// 0x0018 (0x0080 - 0x0068)
class UParticleModuleMeshRotation_Seeded : public UParticleModuleMeshRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0068(0x0018) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotation_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotation
// 0x001C (0x0064 - 0x0048)
class UParticleModuleRotation : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       StartRotation;                                            // 0x0048(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotation");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotation_Seeded
// 0x0018 (0x007C - 0x0064)
class UParticleModuleRotation_Seeded : public UParticleModuleRotation
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0064(0x0018) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotation_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationOverLifetime
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleRotationOverLifetime : public UParticleModuleRotationBase
{
public:
	struct FRawDistributionFloat                       RotationOverLife;                                         // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      Scale : 1;                                                // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationOverLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleRotationRateBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate
// 0x001C (0x0064 - 0x0048)
class UParticleModuleMeshRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      StartRotationRate;                                        // 0x0048(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRate_Seeded
// 0x0018 (0x007C - 0x0064)
class UParticleModuleMeshRotationRate_Seeded : public UParticleModuleMeshRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0064(0x0018) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRate_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateMultiplyLife
// 0x001C (0x0064 - 0x0048)
class UParticleModuleMeshRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x0048(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleMeshRotationRateOverLife
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleMeshRotationRateOverLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionVector                      RotRate;                                                  // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bScaleRotRate : 1;                                        // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleMeshRotationRateOverLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate
// 0x001C (0x0064 - 0x0048)
class UParticleModuleRotationRate : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       StartRotationRate;                                        // 0x0048(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRate");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRate_Seeded
// 0x0018 (0x007C - 0x0064)
class UParticleModuleRotationRate_Seeded : public UParticleModuleRotationRate
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0064(0x0018) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRate_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleRotationRateMultiplyLife
// 0x001C (0x0064 - 0x0048)
class UParticleModuleRotationRateMultiplyLife : public UParticleModuleRotationRateBase
{
public:
	struct FRawDistributionFloat                       LifeMultiplier;                                           // 0x0048(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleRotationRateMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleSizeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSize
// 0x001C (0x0064 - 0x0048)
class UParticleModuleSize : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      StartSize;                                                // 0x0048(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSize");
		return ptr;
	}

};


// Class Engine.ParticleModuleSize_Seeded
// 0x0018 (0x007C - 0x0064)
class UParticleModuleSize_Seeded : public UParticleModuleSize
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0064(0x0018) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSize_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeMultiplyLife
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleSizeMultiplyLife : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      MultiplyX : 1;                                            // 0x0064(0x0004) (Edit)
	unsigned long                                      MultiplyY : 1;                                            // 0x0064(0x0004) (Edit)
	unsigned long                                      MultiplyZ : 1;                                            // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyLife");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeMultiplyVelocity
// 0x0038 (0x0080 - 0x0048)
class UParticleModuleSizeMultiplyVelocity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      VelocityMultiplier;                                       // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      MultiplyX : 1;                                            // 0x0064(0x0004) (Edit)
	unsigned long                                      MultiplyY : 1;                                            // 0x0064(0x0004) (Edit)
	unsigned long                                      MultiplyZ : 1;                                            // 0x0064(0x0004) (Edit)
	struct FVector                                     CapMaxSize;                                               // 0x0068(0x000C) (Edit)
	struct FVector                                     CapMinSize;                                               // 0x0074(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeMultiplyVelocity");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScale
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleSizeScale : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScale;                                                // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      EnableX : 1;                                              // 0x0064(0x0004) (Edit)
	unsigned long                                      EnableY : 1;                                              // 0x0064(0x0004) (Edit)
	unsigned long                                      EnableZ : 1;                                              // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScale");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScaleByTime
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleSizeScaleByTime : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScaleByTime;                                          // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bEnableX : 1;                                             // 0x0064(0x0004) (Edit)
	unsigned long                                      bEnableY : 1;                                             // 0x0064(0x0004) (Edit)
	unsigned long                                      bEnableZ : 1;                                             // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScaleByTime");
		return ptr;
	}

};


// Class Engine.ParticleModuleSizeScaleOverDensity
// 0x001C (0x0064 - 0x0048)
class UParticleModuleSizeScaleOverDensity : public UParticleModuleSizeBase
{
public:
	struct FRawDistributionVector                      SizeScaleOverDensity;                                     // 0x0048(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSizeScaleOverDensity");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnBase
// 0x0004 (0x004C - 0x0048)
class UParticleModuleSpawnBase : public UParticleModule
{
public:
	unsigned long                                      bProcessSpawnRate : 1;                                    // 0x0048(0x0004) (Edit)
	unsigned long                                      bProcessBurstList : 1;                                    // 0x0048(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawn
// 0x0048 (0x0094 - 0x004C)
class UParticleModuleSpawn : public UParticleModuleSpawnBase
{
public:
	struct FRawDistributionFloat                       Rate;                                                     // 0x004C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       RateScale;                                                // 0x0068(0x001C) (Edit, Component, NeedCtorLink)
	TEnumAsByte<EParticleBurstMethod>                  ParticleBurstMethod;                                      // 0x0084(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	TArray<struct FParticleBurst>                      BurstList;                                                // 0x0088(0x000C) (Edit, ExportObject, NeedCtorLink, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawn");
		return ptr;
	}

};


// Class Engine.ParticleModuleSpawnPerUnit
// 0x0030 (0x007C - 0x004C)
class UParticleModuleSpawnPerUnit : public UParticleModuleSpawnBase
{
public:
	float                                              UnitScalar;                                               // 0x004C(0x0004) (Edit)
	struct FRawDistributionFloat                       SpawnPerUnit;                                             // 0x0050(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bIgnoreSpawnRateWhenMoving : 1;                           // 0x006C(0x0004) (Edit)
	unsigned long                                      bIgnoreMovementAlongX : 1;                                // 0x006C(0x0004) (Edit)
	unsigned long                                      bIgnoreMovementAlongY : 1;                                // 0x006C(0x0004) (Edit)
	unsigned long                                      bIgnoreMovementAlongZ : 1;                                // 0x006C(0x0004) (Edit)
	float                                              MovementTolerance;                                        // 0x0070(0x0004) (Edit)
	float                                              MaxFrameDistance;                                         // 0x0074(0x0004) (Edit)
	float                                              MinFrameDistance;                                         // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSpawnPerUnit");
		return ptr;
	}

};


// Class Engine.ParticleModuleStoreSpawnTimeBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleStoreSpawnTimeBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleStoreSpawnTimeBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleStoreSpawnTime
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleStoreSpawnTime : public UParticleModuleStoreSpawnTimeBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleStoreSpawnTime");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleSubUVBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUV
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleSubUV : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionFloat                       SubImageIndex;                                            // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bUseRealTime : 1;                                         // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUV");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVMovie
// 0x0024 (0x008C - 0x0068)
class UParticleModuleSubUVMovie : public UParticleModuleSubUV
{
public:
	unsigned long                                      bUseEmitterTime : 1;                                      // 0x0068(0x0004) (Edit)
	struct FRawDistributionFloat                       FrameRate;                                                // 0x006C(0x001C) (Edit, Component, NeedCtorLink)
	int                                                StartingFrame;                                            // 0x0088(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVMovie");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVDirect
// 0x0038 (0x0080 - 0x0048)
class UParticleModuleSubUVDirect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubUVPosition;                                            // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      SubUVSize;                                                // 0x0064(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVDirect");
		return ptr;
	}

};


// Class Engine.ParticleModuleSubUVSelect
// 0x001C (0x0064 - 0x0048)
class UParticleModuleSubUVSelect : public UParticleModuleSubUVBase
{
public:
	struct FRawDistributionVector                      SubImageSelect;                                           // 0x0048(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleSubUVSelect");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleTrailBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailSource
// 0x003C (0x0084 - 0x0048)
class UParticleModuleTrailSource : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<ETrail2SourceMethod>                   SourceMethod;                                             // 0x0048(0x0001) (Edit)
	TEnumAsByte<EParticleSourceSelectionMethod>        SelectionMethod;                                          // 0x0049(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004A(0x0002) MISSED OFFSET
	struct FName                                       SourceName;                                               // 0x004C(0x0008) (Edit)
	struct FRawDistributionFloat                       SourceStrength;                                           // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bLockSourceStength : 1;                                   // 0x0070(0x0004) (Edit)
	unsigned long                                      bInheritRotation : 1;                                     // 0x0070(0x0004) (Edit)
	int                                                SourceOffsetCount;                                        // 0x0074(0x0004) (Edit)
	TArray<struct FVector>                             SourceOffsetDefaults;                                     // 0x0078(0x000C) (Edit, EditFixedSize, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailSource");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailSpawn
// 0x0008 (0x0050 - 0x0048)
class UParticleModuleTrailSpawn : public UParticleModuleTrailBase
{
public:
	class UDistributionFloatParticleParameter*         SpawnDistanceMap;                                         // 0x0048(0x0004) (Edit, ExportObject, Component, NoClear, EditInline)
	float                                              MinSpawnVelocity;                                         // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailSpawn");
		return ptr;
	}

};


// Class Engine.ParticleModuleTrailTaper
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleTrailTaper : public UParticleModuleTrailBase
{
public:
	TEnumAsByte<ETrailTaperMethod>                     TaperMethod;                                              // 0x0048(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0049(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       TaperFactor;                                              // 0x004C(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTrailTaper");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleTypeDataBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataAnimTrail
// 0x001C (0x0064 - 0x0048)
class UParticleModuleTypeDataAnimTrail : public UParticleModuleTypeDataBase
{
public:
	struct FName                                       ControlEdgeName;                                          // 0x0048(0x0008) (Edit)
	int                                                SheetsPerTrail;                                           // 0x0050(0x0004) (Edit)
	unsigned long                                      bDeadTrailsOnDeactivate : 1;                              // 0x0054(0x0004) (Edit)
	unsigned long                                      bClipSourceSegement : 1;                                  // 0x0054(0x0004) (Edit)
	unsigned long                                      bEnablePreviousTangentRecalculation : 1;                  // 0x0054(0x0004) (Edit)
	unsigned long                                      bTangentRecalculationEveryFrame : 1;                      // 0x0054(0x0004) (Edit)
	unsigned long                                      bRenderGeometry : 1;                                      // 0x0054(0x0004) (Edit)
	unsigned long                                      bRenderSpawnPoints : 1;                                   // 0x0054(0x0004) (Edit)
	unsigned long                                      bRenderTangents : 1;                                      // 0x0054(0x0004) (Edit)
	unsigned long                                      bRenderTessellation : 1;                                  // 0x0054(0x0004) (Edit)
	float                                              TilingDistance;                                           // 0x0058(0x0004) (Edit)
	float                                              DistanceTessellationStepSize;                             // 0x005C(0x0004) (Edit)
	float                                              TangentTessellationScalar;                                // 0x0060(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataAnimTrail");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataApex
// 0x0044 (0x008C - 0x0048)
class UParticleModuleTypeDataApex : public UParticleModuleTypeDataBase
{
public:
	class UApexGenericAsset*                           ApexIOFX;                                                 // 0x0048(0x0004) (Edit)
	class UApexGenericAsset*                           ApexEmitter;                                              // 0x004C(0x0004) (Edit)
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0050(0x000C) (Edit, NeedCtorLink)
	TArray<class UStaticMesh*>                         Meshes;                                                   // 0x005C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      SubUVBlend : 1;                                           // 0x0068(0x0004) (Edit)
	int                                                SubUVStart;                                               // 0x006C(0x0004) (Edit)
	int                                                SubUVCount;                                               // 0x0070(0x0004) (Edit)
	int                                                SubImagesHorizontal;                                      // 0x0074(0x0004) (Edit)
	int                                                SubImagesVertical;                                        // 0x0078(0x0004) (Edit)
	struct FPointer                                    EmitterNotifier;                                          // 0x007C(0x0004) (Const, Native, Transient)
	TArray<struct FApexLODAsset>                       ApexLODAssets;                                            // 0x0080(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataApex");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataApexSprite
// 0x0000 (0x008C - 0x008C)
class UParticleModuleTypeDataApexSprite : public UParticleModuleTypeDataApex
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataApexSprite");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBeam
// 0x009C (0x00E4 - 0x0048)
class UParticleModuleTypeDataBeam : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<EBeamMethod>                           BeamMethod;                                               // 0x0048(0x0001) (Edit)
	TEnumAsByte<EBeamEndPointMethod>                   EndPointMethod;                                           // 0x0049(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004A(0x0002) MISSED OFFSET
	struct FRawDistributionFloat                       Distance;                                                 // 0x004C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      EndPoint;                                                 // 0x0068(0x001C) (Edit, Component, NeedCtorLink)
	int                                                TessellationFactor;                                       // 0x0084(0x0004) (Edit)
	struct FRawDistributionFloat                       EmitterStrength;                                          // 0x0088(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       TargetStrength;                                           // 0x00A4(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      EndPointDirection;                                        // 0x00C0(0x001C) (Edit, Component, NeedCtorLink)
	int                                                TextureTile;                                              // 0x00DC(0x0004) (Edit)
	unsigned long                                      RenderGeometry : 1;                                       // 0x00E0(0x0004) (Edit)
	unsigned long                                      RenderDirectLine : 1;                                     // 0x00E0(0x0004) (Edit)
	unsigned long                                      RenderLines : 1;                                          // 0x00E0(0x0004) (Edit)
	unsigned long                                      RenderTessellation : 1;                                   // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataBeam2
// 0x0080 (0x00C8 - 0x0048)
class UParticleModuleTypeDataBeam2 : public UParticleModuleTypeDataBase
{
public:
	TEnumAsByte<EBeam2Method>                          BeamMethod;                                               // 0x0048(0x0001) (Edit)
	TEnumAsByte<EBeamTaperMethod>                      TaperMethod;                                              // 0x0049(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x004A(0x0002) MISSED OFFSET
	int                                                TextureTile;                                              // 0x004C(0x0004) (Edit)
	float                                              TextureTileDistance;                                      // 0x0050(0x0004) (Edit)
	int                                                Sheets;                                                   // 0x0054(0x0004) (Edit)
	int                                                MaxBeamCount;                                             // 0x0058(0x0004) (Edit)
	float                                              Speed;                                                    // 0x005C(0x0004) (Edit)
	int                                                InterpolationPoints;                                      // 0x0060(0x0004) (Edit)
	unsigned long                                      bAlwaysOn : 1;                                            // 0x0064(0x0004) (Edit)
	unsigned long                                      RenderGeometry : 1;                                       // 0x0064(0x0004) (Edit)
	unsigned long                                      RenderDirectLine : 1;                                     // 0x0064(0x0004) (Edit)
	unsigned long                                      RenderLines : 1;                                          // 0x0064(0x0004) (Edit)
	unsigned long                                      RenderTessellation : 1;                                   // 0x0064(0x0004) (Edit)
	int                                                UpVectorStepSize;                                         // 0x0068(0x0004) (Edit)
	struct FName                                       BranchParentName;                                         // 0x006C(0x0008) (Edit)
	struct FRawDistributionFloat                       Distance;                                                 // 0x0074(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       TaperFactor;                                              // 0x0090(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       TaperScale;                                               // 0x00AC(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataBeam2");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataMesh
// 0x0018 (0x0060 - 0x0048)
class UParticleModuleTypeDataMesh : public UParticleModuleTypeDataBase
{
public:
	class UStaticMesh*                                 Mesh;                                                     // 0x0048(0x0004) (Edit)
	unsigned long                                      CastShadows : 1;                                          // 0x004C(0x0004)
	unsigned long                                      DoCollisions : 1;                                         // 0x004C(0x0004)
	unsigned long                                      bAllowMotionBlur : 1;                                     // 0x004C(0x0004) (Edit)
	unsigned long                                      bOverrideMaterial : 1;                                    // 0x004C(0x0004) (Edit)
	unsigned long                                      bCameraFacing : 1;                                        // 0x004C(0x0004) (Edit)
	unsigned long                                      bApplyParticleRotationAsSpin : 1;                         // 0x004C(0x0004) (Edit)
	TEnumAsByte<EMeshScreenAlignment>                  MeshAlignment;                                            // 0x0050(0x0001) (Edit)
	TEnumAsByte<EParticleAxisLock>                     AxisLockOption;                                           // 0x0051(0x0001) (Edit)
	TEnumAsByte<EMeshCameraFacingUpAxis>               CameraFacingUpAxisOption;                                 // 0x0052(0x0001) (Deprecated)
	TEnumAsByte<EMeshCameraFacingOptions>              CameraFacingOption;                                       // 0x0053(0x0001) (Edit)
	float                                              Pitch;                                                    // 0x0054(0x0004) (Edit)
	float                                              Roll;                                                     // 0x0058(0x0004) (Edit)
	float                                              Yaw;                                                      // 0x005C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataMesh");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataPhysX
// 0x0014 (0x005C - 0x0048)
class UParticleModuleTypeDataPhysX : public UParticleModuleTypeDataBase
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                              // 0x0048(0x0004) (Edit)
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                              // 0x004C(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataPhysX");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataMeshPhysX
// 0x0020 (0x0080 - 0x0060)
class UParticleModuleTypeDataMeshPhysX : public UParticleModuleTypeDataMesh
{
public:
	class UPhysXParticleSystem*                        PhysXParSys;                                              // 0x0060(0x0004) (Edit)
	TEnumAsByte<EPhysXMeshRotationMethod>              PhysXRotationMethod;                                      // 0x0064(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	float                                              FluidRotationCoefficient;                                 // 0x0068(0x0004) (Edit)
	struct FPhysXEmitterVerticalLodProperties          VerticalLod;                                              // 0x006C(0x0010) (Edit)
	float                                              ZOffset;                                                  // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataMeshPhysX");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataRibbon
// 0x0028 (0x0070 - 0x0048)
class UParticleModuleTypeDataRibbon : public UParticleModuleTypeDataBase
{
public:
	int                                                MaxTessellationBetweenParticles;                          // 0x0048(0x0004)
	int                                                SheetsPerTrail;                                           // 0x004C(0x0004) (Edit)
	int                                                MaxTrailCount;                                            // 0x0050(0x0004) (Edit)
	int                                                MaxParticleInTrailCount;                                  // 0x0054(0x0004) (Edit)
	unsigned long                                      bDeadTrailsOnDeactivate : 1;                              // 0x0058(0x0004) (Edit)
	unsigned long                                      bDeadTrailsOnSourceLoss : 1;                              // 0x0058(0x0004) (Edit)
	unsigned long                                      bClipSourceSegement : 1;                                  // 0x0058(0x0004) (Edit)
	unsigned long                                      bEnablePreviousTangentRecalculation : 1;                  // 0x0058(0x0004) (Edit)
	unsigned long                                      bTangentRecalculationEveryFrame : 1;                      // 0x0058(0x0004) (Edit)
	unsigned long                                      bSpawnInitialParticle : 1;                                // 0x0058(0x0004) (Edit)
	unsigned long                                      bRenderGeometry : 1;                                      // 0x0058(0x0004) (Edit)
	unsigned long                                      bRenderSpawnPoints : 1;                                   // 0x0058(0x0004) (Edit)
	unsigned long                                      bRenderTangents : 1;                                      // 0x0058(0x0004) (Edit)
	unsigned long                                      bRenderTessellation : 1;                                  // 0x0058(0x0004) (Edit)
	unsigned long                                      bEnableTangentDiffInterpScale : 1;                        // 0x0058(0x0004) (Edit)
	TEnumAsByte<ETrailsRenderAxisOption>               RenderAxis;                                               // 0x005C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	float                                              TangentSpawningScalar;                                    // 0x0060(0x0004) (Edit)
	float                                              TilingDistance;                                           // 0x0064(0x0004) (Edit)
	float                                              DistanceTessellationStepSize;                             // 0x0068(0x0004) (Edit)
	float                                              TangentTessellationScalar;                                // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataRibbon");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataTrail
// 0x0030 (0x0078 - 0x0048)
class UParticleModuleTypeDataTrail : public UParticleModuleTypeDataBase
{
public:
	unsigned long                                      RenderGeometry : 1;                                       // 0x0048(0x0004) (Edit)
	unsigned long                                      RenderLines : 1;                                          // 0x0048(0x0004) (Edit)
	unsigned long                                      RenderTessellation : 1;                                   // 0x0048(0x0004) (Edit)
	unsigned long                                      Tapered : 1;                                              // 0x0048(0x0004) (Edit)
	unsigned long                                      SpawnByDistance : 1;                                      // 0x0048(0x0004) (Edit)
	int                                                TessellationFactor;                                       // 0x004C(0x0004) (Edit)
	struct FRawDistributionFloat                       Tension;                                                  // 0x0050(0x001C) (Edit, Component, NeedCtorLink)
	struct FVector                                     SpawnDistance;                                            // 0x006C(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataTrail");
		return ptr;
	}

};


// Class Engine.ParticleModuleTypeDataTrail2
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleTypeDataTrail2 : public UParticleModuleTypeDataBase
{
public:
	int                                                TessellationFactor;                                       // 0x0048(0x0004) (Edit)
	float                                              TessellationFactorDistance;                               // 0x004C(0x0004)
	float                                              TessellationStrength;                                     // 0x0050(0x0004) (Edit)
	int                                                TextureTile;                                              // 0x0054(0x0004) (Edit)
	int                                                Sheets;                                                   // 0x0058(0x0004)
	int                                                MaxTrailCount;                                            // 0x005C(0x0004) (Edit)
	int                                                MaxParticleInTrailCount;                                  // 0x0060(0x0004) (Edit)
	unsigned long                                      bClipSourceSegement : 1;                                  // 0x0064(0x0004) (Edit)
	unsigned long                                      bClearTangents : 1;                                       // 0x0064(0x0004) (Edit)
	unsigned long                                      RenderGeometry : 1;                                       // 0x0064(0x0004) (Edit)
	unsigned long                                      RenderDirectLine : 1;                                     // 0x0064(0x0004) (Edit)
	unsigned long                                      RenderLines : 1;                                          // 0x0064(0x0004) (Edit)
	unsigned long                                      RenderTessellation : 1;                                   // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleTypeDataTrail2");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberBase
// 0x000C (0x0054 - 0x0048)
class UParticleModuleUberBase : public UParticleModule
{
public:
	TArray<struct FName>                               RequiredModules;                                          // 0x0048(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberLTISIVCL
// 0x00A8 (0x00FC - 0x0054)
class UParticleModuleUberLTISIVCL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0054(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartSize;                                                // 0x0070(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartVelocity;                                            // 0x008C(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x00A8(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x00C4(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00E0(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCL");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberLTISIVCLIL
// 0x00C4 (0x0118 - 0x0054)
class UParticleModuleUberLTISIVCLIL : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0054(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartSize;                                                // 0x0070(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartVelocity;                                            // 0x008C(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x00A8(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x00C4(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00E0(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartLocation;                                            // 0x00FC(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCLIL");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR
// 0x011C (0x0170 - 0x0054)
class UParticleModuleUberLTISIVCLILIRSSBLIRR : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0054(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartSize;                                                // 0x0070(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartVelocity;                                            // 0x008C(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x00A8(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x00C4(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00E0(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      StartLocation;                                            // 0x00FC(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionFloat                       StartRotation;                                            // 0x0118(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	struct FRawDistributionVector                      SizeLifeMultiplier;                                       // 0x0134(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)
	unsigned long                                      SizeMultiplyX : 1;                                        // 0x0150(0x0004) (Edit)
	unsigned long                                      SizeMultiplyY : 1;                                        // 0x0150(0x0004) (Edit)
	unsigned long                                      SizeMultiplyZ : 1;                                        // 0x0150(0x0004) (Edit)
	struct FRawDistributionFloat                       StartRotationRate;                                        // 0x0154(0x001C) (Edit, ExportObject, Component, NeedCtorLink, NoClear)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberLTISIVCLILIRSSBLIRR");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberRainDrops
// 0x0088 (0x00DC - 0x0054)
class UParticleModuleUberRainDrops : public UParticleModuleUberBase
{
public:
	float                                              LifetimeMin;                                              // 0x0054(0x0004) (Edit)
	float                                              LifetimeMax;                                              // 0x0058(0x0004) (Edit)
	struct FVector                                     StartSizeMin;                                             // 0x005C(0x000C) (Edit)
	struct FVector                                     StartSizeMax;                                             // 0x0068(0x000C) (Edit)
	struct FVector                                     StartVelocityMin;                                         // 0x0074(0x000C) (Edit)
	struct FVector                                     StartVelocityMax;                                         // 0x0080(0x000C) (Edit)
	float                                              StartVelocityRadialMin;                                   // 0x008C(0x0004) (Edit)
	float                                              StartVelocityRadialMax;                                   // 0x0090(0x0004) (Edit)
	struct FVector                                     ColorOverLife;                                            // 0x0094(0x000C) (Edit)
	float                                              AlphaOverLife;                                            // 0x00A0(0x0004) (Edit)
	unsigned long                                      bIsUsingCylinder : 1;                                     // 0x00A4(0x0004) (Edit)
	unsigned long                                      bPositive_X : 1;                                          // 0x00A4(0x0004) (Edit)
	unsigned long                                      bPositive_Y : 1;                                          // 0x00A4(0x0004) (Edit)
	unsigned long                                      bPositive_Z : 1;                                          // 0x00A4(0x0004) (Edit)
	unsigned long                                      bNegative_X : 1;                                          // 0x00A4(0x0004) (Edit)
	unsigned long                                      bNegative_Y : 1;                                          // 0x00A4(0x0004) (Edit)
	unsigned long                                      bNegative_Z : 1;                                          // 0x00A4(0x0004) (Edit)
	unsigned long                                      bSurfaceOnly : 1;                                         // 0x00A4(0x0004) (Edit)
	unsigned long                                      bVelocity : 1;                                            // 0x00A4(0x0004) (Edit)
	unsigned long                                      bRadialVelocity : 1;                                      // 0x00A4(0x0004) (Edit)
	float                                              PC_VelocityScale;                                         // 0x00A8(0x0004) (Edit)
	struct FVector                                     PC_StartLocation;                                         // 0x00AC(0x000C) (Edit)
	float                                              PC_StartRadius;                                           // 0x00B8(0x0004) (Edit)
	float                                              PC_StartHeight;                                           // 0x00BC(0x0004) (Edit)
	TEnumAsByte<ECylinderHeightAxis>                   PC_HeightAxis;                                            // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00C1(0x0003) MISSED OFFSET
	struct FVector                                     StartLocationMin;                                         // 0x00C4(0x000C) (Edit)
	struct FVector                                     StartLocationMax;                                         // 0x00D0(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberRainDrops");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberRainImpacts
// 0x0120 (0x0174 - 0x0054)
class UParticleModuleUberRainImpacts : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      StartSize;                                                // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      StartRotation;                                            // 0x008C(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bInheritParent : 1;                                       // 0x00A8(0x0004) (Edit)
	unsigned long                                      MultiplyX : 1;                                            // 0x00A8(0x0004) (Edit)
	unsigned long                                      MultiplyY : 1;                                            // 0x00A8(0x0004) (Edit)
	unsigned long                                      MultiplyZ : 1;                                            // 0x00A8(0x0004) (Edit)
	unsigned long                                      bIsUsingCylinder : 1;                                     // 0x00A8(0x0004) (Edit)
	unsigned long                                      bPositive_X : 1;                                          // 0x00A8(0x0004) (Edit)
	unsigned long                                      bPositive_Y : 1;                                          // 0x00A8(0x0004) (Edit)
	unsigned long                                      bPositive_Z : 1;                                          // 0x00A8(0x0004) (Edit)
	unsigned long                                      bNegative_X : 1;                                          // 0x00A8(0x0004) (Edit)
	unsigned long                                      bNegative_Y : 1;                                          // 0x00A8(0x0004) (Edit)
	unsigned long                                      bNegative_Z : 1;                                          // 0x00A8(0x0004) (Edit)
	unsigned long                                      bSurfaceOnly : 1;                                         // 0x00A8(0x0004) (Edit)
	unsigned long                                      bVelocity : 1;                                            // 0x00A8(0x0004) (Edit)
	unsigned long                                      bRadialVelocity : 1;                                      // 0x00A8(0x0004) (Edit)
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x00AC(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       PC_VelocityScale;                                         // 0x00C8(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      PC_StartLocation;                                         // 0x00E4(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       PC_StartRadius;                                           // 0x0100(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       PC_StartHeight;                                           // 0x011C(0x001C) (Edit, Component, NeedCtorLink)
	TEnumAsByte<ECylinderHeightAxis>                   PC_HeightAxis;                                            // 0x0138(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0139(0x0003) MISSED OFFSET
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x013C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x0158(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberRainImpacts");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberRainSplashA
// 0x00AC (0x0100 - 0x0054)
class UParticleModuleUberRainSplashA : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      StartSize;                                                // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      StartRotation;                                            // 0x008C(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      bInheritParent : 1;                                       // 0x00A8(0x0004) (Edit)
	unsigned long                                      MultiplyX : 1;                                            // 0x00A8(0x0004) (Edit)
	unsigned long                                      MultiplyY : 1;                                            // 0x00A8(0x0004) (Edit)
	unsigned long                                      MultiplyZ : 1;                                            // 0x00A8(0x0004) (Edit)
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x00AC(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x00C8(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00E4(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberRainSplashA");
		return ptr;
	}

};


// Class Engine.ParticleModuleUberRainSplashB
// 0x00AC (0x0100 - 0x0054)
class UParticleModuleUberRainSplashB : public UParticleModuleUberBase
{
public:
	struct FRawDistributionFloat                       Lifetime;                                                 // 0x0054(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      StartSize;                                                // 0x0070(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      ColorOverLife;                                            // 0x008C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       AlphaOverLife;                                            // 0x00A8(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionVector                      LifeMultiplier;                                           // 0x00C4(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      MultiplyX : 1;                                            // 0x00E0(0x0004) (Edit)
	unsigned long                                      MultiplyY : 1;                                            // 0x00E0(0x0004) (Edit)
	unsigned long                                      MultiplyZ : 1;                                            // 0x00E0(0x0004) (Edit)
	struct FRawDistributionFloat                       StartRotationRate;                                        // 0x00E4(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleUberRainSplashB");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityBase
// 0x0004 (0x004C - 0x0048)
class UParticleModuleVelocityBase : public UParticleModule
{
public:
	unsigned long                                      bInWorldSpace : 1;                                        // 0x0048(0x0004) (Edit)
	unsigned long                                      bApplyOwnerScale : 1;                                     // 0x0048(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityBase");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity
// 0x0038 (0x0084 - 0x004C)
class UParticleModuleVelocity : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      StartVelocity;                                            // 0x004C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       StartVelocityRadial;                                      // 0x0068(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocity");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocity_Seeded
// 0x0018 (0x009C - 0x0084)
class UParticleModuleVelocity_Seeded : public UParticleModuleVelocity
{
public:
	struct FParticleRandomSeedInfo                     RandomSeedInfo;                                           // 0x0084(0x0018) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocity_Seeded");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityCone
// 0x0044 (0x0090 - 0x004C)
class UParticleModuleVelocityCone : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionFloat                       Angle;                                                    // 0x004C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Velocity;                                                 // 0x0068(0x001C) (Edit, Component, NeedCtorLink)
	struct FVector                                     Direction;                                                // 0x0084(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityCone");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityInheritParent
// 0x001C (0x0068 - 0x004C)
class UParticleModuleVelocityInheritParent : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      Scale;                                                    // 0x004C(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityInheritParent");
		return ptr;
	}

};


// Class Engine.ParticleModuleVelocityOverLifetime
// 0x0020 (0x006C - 0x004C)
class UParticleModuleVelocityOverLifetime : public UParticleModuleVelocityBase
{
public:
	struct FRawDistributionVector                      VelOverLife;                                              // 0x004C(0x001C) (Edit, Component, NeedCtorLink)
	unsigned long                                      Absolute : 1;                                             // 0x0068(0x0004) (Edit, ExportObject)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleVelocityOverLifetime");
		return ptr;
	}

};


// Class Engine.ParticleModuleWorldForcesBase
// 0x0000 (0x0048 - 0x0048)
class UParticleModuleWorldForcesBase : public UParticleModule
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleWorldForcesBase");
		return ptr;
	}

};


// Class Engine.ParticleModulePhysicsVolumes
// 0x001D (0x0065 - 0x0048)
class UParticleModulePhysicsVolumes : public UParticleModuleWorldForcesBase
{
public:
	struct FRawDistributionFloat                       GlobalInfluence;                                          // 0x0048(0x001C) (Edit, Component, NeedCtorLink)
	TEnumAsByte<EParticleLevelInfluenceType>           LevelInfluenceType;                                       // 0x0064(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModulePhysicsVolumes");
		return ptr;
	}

};


// Class Engine.ParticleModuleWorldAttractor
// 0x0020 (0x0068 - 0x0048)
class UParticleModuleWorldAttractor : public UParticleModuleWorldForcesBase
{
public:
	unsigned long                                      bParticleLifeRelative : 1;                                // 0x0048(0x0004) (Edit)
	struct FRawDistributionFloat                       AttractorInfluence;                                       // 0x004C(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleWorldAttractor");
		return ptr;
	}

};


// Class Engine.ParticleModuleEventSendToGame
// 0x0000 (0x003C - 0x003C)
class UParticleModuleEventSendToGame : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleEventSendToGame");
		return ptr;
	}


	void DoEvent(struct FVector* InCollideDirection, struct FVector* InHitLocation, struct FVector* InHitNormal, struct FName* InBoneName);
};


// Class Engine.ParticleSystemReplay
// 0x0010 (0x004C - 0x003C)
class UParticleSystemReplay : public UObject
{
public:
	int                                                ClipIDNumber;                                             // 0x003C(0x0004) (Edit, Native)
	TArray<struct FParticleSystemReplayFrame>          Frames;                                                   // 0x0040(0x000C) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleSystemReplay");
		return ptr;
	}

};


// Class Engine.PhysXParticleSystem
// 0x0064 (0x00A0 - 0x003C)
class UPhysXParticleSystem : public UObject
{
public:
	int                                                MaxParticles;                                             // 0x003C(0x0004) (Edit)
	int                                                ParticleSpawnReserve;                                     // 0x0040(0x0004) (Edit)
	TEnumAsByte<ERBCollisionChannel>                   RBChannel;                                                // 0x0044(0x0001) (Edit, Const)
	TEnumAsByte<ESimulationMethod>                     SimulationMethod;                                         // 0x0045(0x0001) (Edit)
	TEnumAsByte<EPacketSizeMultiplier>                 PacketSizeMultiplier;                                     // 0x0046(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0047(0x0001) MISSED OFFSET
	struct FRBCollisionChannelContainer                RBCollideWithChannels;                                    // 0x0048(0x0004) (Edit, Const)
	float                                              CollisionDistance;                                        // 0x004C(0x0004) (Edit)
	float                                              RestitutionWithStaticShapes;                              // 0x0050(0x0004) (Edit)
	float                                              RestitutionWithDynamicShapes;                             // 0x0054(0x0004) (Edit)
	float                                              FrictionWithStaticShapes;                                 // 0x0058(0x0004) (Edit)
	float                                              FrictionWithDynamicShapes;                                // 0x005C(0x0004) (Edit)
	float                                              StaticFrictionWithStaticShapes;                           // 0x0060(0x0004) (Edit)
	float                                              StaticFrictionWithDynamicShapes;                          // 0x0064(0x0004) (Edit)
	unsigned long                                      bDynamicCollision : 1;                                    // 0x0068(0x0004) (Edit)
	unsigned long                                      bDisableGravity : 1;                                      // 0x0068(0x0004) (Edit)
	unsigned long                                      bStaticCollision : 1;                                     // 0x0068(0x0004) (Edit)
	unsigned long                                      bTwoWayCollision : 1;                                     // 0x0068(0x0004) (Edit)
	unsigned long                                      bDestroy : 1;                                             // 0x0068(0x0004) (Transient)
	unsigned long                                      bSyncFailed : 1;                                          // 0x0068(0x0004) (Transient)
	unsigned long                                      bIsInGame : 1;                                            // 0x0068(0x0004) (Transient)
	float                                              MaxMotionDistance;                                        // 0x006C(0x0004) (Edit)
	float                                              Damping;                                                  // 0x0070(0x0004) (Edit)
	struct FVector                                     ExternalAcceleration;                                     // 0x0074(0x000C) (Edit)
	float                                              RestParticleDistance;                                     // 0x0080(0x0004) (Edit)
	float                                              RestDensity;                                              // 0x0084(0x0004) (Edit)
	float                                              KernelRadiusMultiplier;                                   // 0x0088(0x0004) (Edit)
	float                                              Stiffness;                                                // 0x008C(0x0004) (Edit)
	float                                              Viscosity;                                                // 0x0090(0x0004) (Edit)
	float                                              CollisionResponseCoefficient;                             // 0x0094(0x0004) (Edit)
	struct FPointer                                    CascadeScene;                                             // 0x0098(0x0004) (Native)
	struct FPointer                                    PSys;                                                     // 0x009C(0x0004) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysXParticleSystem");
		return ptr;
	}

};


// Class Engine.KActor
// 0x00B8 (0x02C8 - 0x0210)
class AKActor : public ADynamicSMActor
{
public:
	unsigned long                                      bDamageAppliesImpulse : 1;                                // 0x0210(0x0004) (Edit)
	unsigned long                                      bWakeOnLevelStart : 1;                                    // 0x0210(0x0004) (Edit, Net)
	unsigned long                                      bCurrentSlide : 1;                                        // 0x0210(0x0004)
	unsigned long                                      bSlideActive : 1;                                         // 0x0210(0x0004)
	unsigned long                                      bEnableStayUprightSpring : 1;                             // 0x0210(0x0004) (Edit)
	unsigned long                                      bLimitMaxPhysicsVelocity : 1;                             // 0x0210(0x0004) (Edit)
	unsigned long                                      bNeedsRBStateReplication : 1;                             // 0x0210(0x0004) (Transient)
	unsigned long                                      bDisableClientSidePawnInteractions : 1;                   // 0x0210(0x0004)
	class UParticleSystemComponent*                    ImpactEffectComponent;                                    // 0x0214(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             ImpactSoundComponent;                                     // 0x0218(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             ImpactSoundComponent2;                                    // 0x021C(0x0004) (ExportObject, Component, EditInline)
	float                                              LastImpactTime;                                           // 0x0220(0x0004)
	struct FPhysEffectInfo                             ImpactEffectInfo;                                         // 0x0224(0x0010)
	class UParticleSystemComponent*                    SlideEffectComponent;                                     // 0x0234(0x0004) (ExportObject, Component, EditInline)
	class UAudioComponent*                             SlideSoundComponent;                                      // 0x0238(0x0004) (ExportObject, Component, EditInline)
	float                                              LastSlideTime;                                            // 0x023C(0x0004)
	struct FPhysEffectInfo                             SlideEffectInfo;                                          // 0x0240(0x0010)
	float                                              StayUprightTorqueFactor;                                  // 0x0250(0x0004) (Edit)
	float                                              StayUprightMaxTorque;                                     // 0x0254(0x0004) (Edit)
	float                                              MaxPhysicsVelocity;                                       // 0x0258(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x025C(0x0004) MISSED OFFSET
	struct FRigidBodyState                             RBState;                                                  // 0x0260(0x0040) (Const, Net, Native)
	float                                              AngErrorAccumulator;                                      // 0x02A0(0x0004) (Const, Native)
	struct FVector                                     ReplicatedDrawScale3D;                                    // 0x02A4(0x000C) (Net)
	struct FVector                                     InitialLocation;                                          // 0x02B0(0x000C) (Transient)
	struct FRotator                                    InitialRotation;                                          // 0x02BC(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KActor");
		return ptr;
	}


	void Reset();
	void OnTeleport(class USeqAct_Teleport* inAction);
	void OnToggle(class USeqAct_Toggle* Action);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent);
	void TakeDamage(float Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void ApplyImpulse(const struct FVector& ImpulseDir, float ImpulseMag, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo, class UClass* DamageType);
	void ReplicatedEvent(const struct FName& VarName);
	void SpawnedByKismet();
	void SetPhysicalCollisionProperties();
	void Destroyed();
	void FellOutOfWorld(class UClass* dmgType);
	void PostBeginPlay();
	void ResolveRBState();
	class UPhysicalMaterial* GetKActorPhysMaterial();
};


// Class Engine.KActorFromStatic
// 0x0008 (0x02D0 - 0x02C8)
class AKActorFromStatic : public AKActor
{
public:
	class AActor*                                      MyStaticMeshActor;                                        // 0x02C8(0x0004)
	float                                              MaxImpulseSpeed;                                          // 0x02CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KActorFromStatic");
		return ptr;
	}


	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Bump(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitNormal);
	void ReceiveImpulse(class APawn* Other, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ApplyImpulse(const struct FVector& ImpulseDir, float ImpulseMag, const struct FVector& HitLocation, const struct FTraceHitInfo& HitInfo, class UClass* DamageType);
	class AKActorFromStatic* STATIC_MakeDynamic(class UStaticMeshComponent* MovableMesh);
	void STATIC_MakeStatic();
	void BecomeStatic();
	void OnWakeRBPhysics();
	void OnSleepRBPhysics();
	void DisablePrecomputedLighting();
};


// Class Engine.KActorSpawnable
// 0x0004 (0x02CC - 0x02C8)
class AKActorSpawnable : public AKActor
{
public:
	unsigned long                                      bRecycleScaleToZero : 1;                                  // 0x02C8(0x0004)
	unsigned long                                      bScalingToZero : 1;                                       // 0x02C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KActorSpawnable");
		return ptr;
	}


	void ResetComponents();
	void RecycleInternal();
	void Recycle();
	void Initialize();
};


// Class Engine.KAsset
// 0x0010 (0x01E4 - 0x01D4)
class AKAsset : public AActor
{
public:
	class USkeletalMeshComponent*                      SkeletalMeshComponent;                                    // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bDamageAppliesImpulse : 1;                                // 0x01D8(0x0004) (Edit)
	unsigned long                                      bWakeOnLevelStart : 1;                                    // 0x01D8(0x0004) (Edit)
	unsigned long                                      bBlockPawns : 1;                                          // 0x01D8(0x0004) (Edit)
	class USkeletalMesh*                               ReplicatedMesh;                                           // 0x01DC(0x0004) (Net, Transient)
	class UPhysicsAsset*                               ReplicatedPhysAsset;                                      // 0x01E0(0x0004) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KAsset");
		return ptr;
	}


	void DoKismetAttachment(class AActor* Attachment, class USeqAct_AttachToActor* Action);
	void OnTeleport(class USeqAct_Teleport* inAction);
	void OnToggle(class USeqAct_Toggle* Action);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent);
	void TakeDamage(float Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	void ReplicatedEvent(const struct FName& VarName);
	void SetMeshAndPhysAsset(class USkeletalMesh* NewMesh, class UPhysicsAsset* NewPhysAsset);
	void PostBeginPlay();
};


// Class Engine.Vehicle
// 0x0074 (0x04D8 - 0x0464)
class AVehicle : public APawn
{
public:
	class APawn*                                       Driver;                                                   // 0x0464(0x0004) (Net)
	unsigned long                                      bDriving : 1;                                             // 0x0468(0x0004) (Net)
	unsigned long                                      bDriverIsVisible : 1;                                     // 0x0468(0x0004)
	unsigned long                                      bAttachDriver : 1;                                        // 0x0468(0x0004)
	unsigned long                                      bTurnInPlace : 1;                                         // 0x0468(0x0004)
	unsigned long                                      bSeparateTurretFocus : 1;                                 // 0x0468(0x0004)
	unsigned long                                      bFollowLookDir : 1;                                       // 0x0468(0x0004)
	unsigned long                                      bHasHandbrake : 1;                                        // 0x0468(0x0004)
	unsigned long                                      bScriptedRise : 1;                                        // 0x0468(0x0004)
	unsigned long                                      bDuckObstacles : 1;                                       // 0x0468(0x0004)
	unsigned long                                      bAvoidReversing : 1;                                      // 0x0468(0x0004)
	unsigned long                                      bRetryPathfindingWithDriver : 1;                          // 0x0468(0x0004)
	unsigned long                                      bIgnoreStallZ : 1;                                        // 0x0468(0x0004) (Edit)
	unsigned long                                      bDoExtraNetRelevancyTraces : 1;                           // 0x0468(0x0004)
	TArray<struct FVector>                             ExitPositions;                                            // 0x046C(0x000C) (Edit, NeedCtorLink)
	float                                              ExitRadius;                                               // 0x0478(0x0004)
	struct FVector                                     ExitOffset;                                               // 0x047C(0x000C)
	float                                              Steering;                                                 // 0x0488(0x0004) (Edit)
	float                                              Throttle;                                                 // 0x048C(0x0004) (Edit)
	float                                              Rise;                                                     // 0x0490(0x0004) (Edit)
	struct FVector                                     TargetLocationAdjustment;                                 // 0x0494(0x000C)
	float                                              DriverDamageMult;                                         // 0x04A0(0x0004)
	float                                              MomentumMult;                                             // 0x04A4(0x0004) (Edit)
	class UClass*                                      CrushedDamageType;                                        // 0x04A8(0x0004)
	float                                              MinCrushSpeed;                                            // 0x04AC(0x0004)
	float                                              ForceCrushPenetration;                                    // 0x04B0(0x0004)
	unsigned char                                      StuckCount;                                               // 0x04B4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x04B5(0x0003) MISSED OFFSET
	float                                              ThrottleTime;                                             // 0x04B8(0x0004)
	float                                              StuckTime;                                                // 0x04BC(0x0004)
	float                                              OldSteering;                                              // 0x04C0(0x0004)
	float                                              OnlySteeringStartTime;                                    // 0x04C4(0x0004)
	float                                              OldThrottle;                                              // 0x04C8(0x0004)
	float                                              AIMoveCheckTime;                                          // 0x04CC(0x0004) (Const)
	float                                              VehicleMovingTime;                                        // 0x04D0(0x0004)
	float                                              TurnTime;                                                 // 0x04D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Vehicle");
		return ptr;
	}


	void ZeroMovementVariables();
	void NotifyDriverTakeHit(class AController* InstigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum);
	void ReplicatedEvent(const struct FName& VarName);
	void DrivingStatusChanged();
	void SetDriving(bool B);
	struct FVector GetEntryLocation();
	void CrushedBy(class APawn* OtherPawn);
	void PancakeOther(class APawn* Other);
	bool EncroachingOn(class AActor* Other);
	class AController* GetCollisionDamageInstigator();
	void EncroachedBy(class AActor* Other);
	void FaceRotation(const struct FRotator& NewRotation, float DeltaTime);
	struct FName GetDefaultCameraMode(class APlayerController* RequestedBy);
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc);
	void DriverDied(class UClass* DamageType);
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void ThrowActiveWeapon(bool bDestroyWeap);
	void AdjustDriverDamage(class AController* InstigatedBy, const struct FVector& HitLocation, class UClass* DamageType, float* Damage, struct FVector* Momentum);
	void TakeDamage(float Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
	class AController* SetKillInstigator(class AController* InstigatedBy, class UClass* DamageType);
	void UnPossessed();
	bool TryExitPos(class APawn* ExitingDriver, const struct FVector& ExitPos, bool bMustFindGround);
	bool FindAutoExit(class APawn* ExitingDriver);
	bool PlaceExitingDriver(class APawn* ExitingDriver);
	void DriverLeft();
	void SetInputs(float InForward, float InStrafe, float InUp);
	bool DriverLeave(bool bForceLeave);
	struct FRotator GetExitRotation(class AController* C);
	bool ContinueOnFoot();
	void DetachDriver(class APawn* P);
	void AttachDriver(class APawn* P);
	void EntryAnnouncement(class AController* C);
	void PossessedBy(class AController* C, bool bVehicleTransition);
	bool DriverEnter(class APawn* P);
	bool TryToDrive(class APawn* P);
	bool AnySeatAvailable();
	bool CanEnterVehicle(class APawn* P);
	void Destroyed_HandleDriver();
	void Destroyed();
	bool CheatFly();
	bool CheatGhost();
	bool CheatWalk();
	void PostBeginPlay();
	void SetBaseEyeheight();
	void PlayerChangedTeam();
	void DriverRadiusDamage(float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, const struct FVector& HitLocation, class AActor* DamageCauser, float DamageFalloffExponent);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent);
	struct FVector GetTargetLocation(class AActor* RequestedBy, bool bRequestAlternateLoc);
	float GetMaxRiseForce();
	void Suicide();
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void NotifyTeamChanged();
};


// Class Engine.SVehicle
// 0x0120 (0x05F8 - 0x04D8)
class ASVehicle : public AVehicle
{
public:
	class USVehicleSimBase*                            SimObj;                                                   // 0x04D8(0x0004) (Edit, Const, ExportObject, Component, NoClear, EditInline)
	TArray<class USVehicleWheel*>                      Wheels;                                                   // 0x04DC(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	struct FVector                                     COMOffset;                                                // 0x04E8(0x000C) (Edit)
	struct FVector                                     InertiaTensorMultiplier;                                  // 0x04F4(0x000C) (Edit)
	unsigned long                                      bStayUpright : 1;                                         // 0x0500(0x0004) (Edit)
	unsigned long                                      bUseSuspensionAxis : 1;                                   // 0x0500(0x0004)
	unsigned long                                      bUpdateWheelShapes : 1;                                   // 0x0500(0x0004)
	unsigned long                                      bVehicleOnGround : 1;                                     // 0x0500(0x0004) (Const)
	unsigned long                                      bVehicleOnWater : 1;                                      // 0x0500(0x0004) (Const)
	unsigned long                                      bIsInverted : 1;                                          // 0x0500(0x0004) (Const)
	unsigned long                                      bChassisTouchingGround : 1;                               // 0x0500(0x0004) (Const)
	unsigned long                                      bWasChassisTouchingGroundLastTick : 1;                    // 0x0500(0x0004) (Const)
	unsigned long                                      bCanFlip : 1;                                             // 0x0500(0x0004)
	unsigned long                                      bFlipRight : 1;                                           // 0x0500(0x0004)
	unsigned long                                      bIsUprighting : 1;                                        // 0x0500(0x0004)
	unsigned long                                      bOutputHandbrake : 1;                                     // 0x0500(0x0004)
	unsigned long                                      bHoldingDownHandbrake : 1;                                // 0x0500(0x0004)
	float                                              StayUprightRollResistAngle;                               // 0x0504(0x0004) (Edit)
	float                                              StayUprightPitchResistAngle;                              // 0x0508(0x0004) (Edit)
	float                                              StayUprightStiffness;                                     // 0x050C(0x0004) (Edit)
	float                                              StayUprightDamping;                                       // 0x0510(0x0004) (Edit)
	class URB_StayUprightSetup*                        StayUprightConstraintSetup;                               // 0x0514(0x0004) (ExportObject, NeedCtorLink, EditInline)
	class URB_ConstraintInstance*                      StayUprightConstraintInstance;                            // 0x0518(0x0004) (ExportObject, NeedCtorLink, EditInline)
	float                                              HeavySuspensionShiftPercent;                              // 0x051C(0x0004)
	float                                              MaxSpeed;                                                 // 0x0520(0x0004) (Edit, Net)
	float                                              MaxAngularVelocity;                                       // 0x0524(0x0004) (Edit)
	float                                              TimeOffGround;                                            // 0x0528(0x0004) (Const)
	float                                              UprightLiftStrength;                                      // 0x052C(0x0004) (Edit)
	float                                              UprightTorqueStrength;                                    // 0x0530(0x0004) (Edit)
	float                                              UprightTime;                                              // 0x0534(0x0004) (Edit)
	float                                              UprightStartTime;                                         // 0x0538(0x0004)
	class UAudioComponent*                             EngineSound;                                              // 0x053C(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UAudioComponent*                             SquealSound;                                              // 0x0540(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class USoundCue*                                   CollisionSound;                                           // 0x0544(0x0004) (Edit)
	class USoundCue*                                   EnterVehicleSound;                                        // 0x0548(0x0004) (Edit)
	class USoundCue*                                   ExitVehicleSound;                                         // 0x054C(0x0004) (Edit)
	float                                              CollisionIntervalSecs;                                    // 0x0550(0x0004) (Edit)
	float                                              SquealThreshold;                                          // 0x0554(0x0004) (Edit, Const)
	float                                              SquealLatThreshold;                                       // 0x0558(0x0004) (Edit, Const)
	float                                              LatAngleVolumeMult;                                       // 0x055C(0x0004) (Edit, Const)
	float                                              EngineStartOffsetSecs;                                    // 0x0560(0x0004) (Edit, Const)
	float                                              EngineStopOffsetSecs;                                     // 0x0564(0x0004) (Edit, Const)
	float                                              LastCollisionSoundTime;                                   // 0x0568(0x0004)
	float                                              OutputBrake;                                              // 0x056C(0x0004)
	float                                              OutputGas;                                                // 0x0570(0x0004)
	float                                              OutputSteering;                                           // 0x0574(0x0004)
	float                                              OutputRise;                                               // 0x0578(0x0004)
	float                                              ForwardVel;                                               // 0x057C(0x0004)
	int                                                NumPoweredWheels;                                         // 0x0580(0x0004)
	struct FVector                                     BaseOffset;                                               // 0x0584(0x000C) (Edit)
	float                                              CamDist;                                                  // 0x0590(0x0004) (Edit)
	int                                                DriverViewPitch;                                          // 0x0594(0x0004)
	int                                                DriverViewYaw;                                            // 0x0598(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x059C(0x0004) MISSED OFFSET
	struct FVehicleState                               VState;                                                   // 0x05A0(0x0050) (Const, Net, Native)
	float                                              AngErrorAccumulator;                                      // 0x05F0(0x0004) (Const, Native)
	float                                              RadialImpulseScaling;                                     // 0x05F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicle");
		return ptr;
	}


	void GetSVehicleDebug(TArray<struct FString>* DebugInfo);
	float HermiteEval(float Slip);
	void DisplayWheelsDebug(class AHUD* HUD, float YL);
	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void PostTeleport(class ATeleporter* OutTeleporter);
	void SuspensionHeavyShift(float Delta);
	void RigidBodyCollision(class UPrimitiveComponent* HitComponent, class UPrimitiveComponent* OtherComponent, int ContactIndex, struct FCollisionImpactData* RigidCollisionData);
	void DrivingStatusChanged();
	void VehiclePlayExitSound();
	void VehiclePlayEnterSound();
	void StopEngineSoundTimed();
	void StopEngineSound();
	void StartEngineSoundTimed();
	void StartEngineSound();
	bool HasWheelsOnGround();
	bool TryToDrive(class APawn* P);
	struct FName GetDefaultCameraMode(class APlayerController* RequestedBy);
	bool CalcCamera(float fDeltaTime, struct FVector* out_CamLoc, struct FRotator* out_CamRot, float* out_FOV);
	bool Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	void AddVelocity(const struct FVector& NewVelocity, const struct FVector& HitLocation, class UClass* DamageType, const struct FTraceHitInfo& HitInfo);
	void InitVehicleRagdoll(class USkeletalMesh* RagdollMesh, class UPhysicsAsset* RagdollPhysAsset, const struct FVector& ActorMove, bool bClearAnimTree);
	void TakeRadiusDamage(class AController* InstigatedBy, float BaseDamage, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HurtOrigin, bool bFullDamage, class AActor* DamageCauser, float DamageFalloffExponent);
	void StopVehicleSounds();
	void TurnOff();
	void Destroyed();
	void PostInitAnimTree(class USkeletalMeshComponent* SkelComp);
	void PostBeginPlay();
	void SetWheelCollision(int WheelNum, bool bCollision);
	bool IsSleeping();
	void AddTorque(const struct FVector& Torque);
	void AddImpulse(const struct FVector& Impulse);
	void AddForce(const struct FVector& Force);
};


// Class Engine.RB_ConstraintActor
// 0x001C (0x01F0 - 0x01D4)
class ARB_ConstraintActor : public ARigidBodyBase
{
public:
	class AActor*                                      ConstraintActor1;                                         // 0x01D4(0x0004) (Edit)
	class AActor*                                      ConstraintActor2;                                         // 0x01D8(0x0004) (Edit)
	class URB_ConstraintSetup*                         ConstraintSetup;                                          // 0x01DC(0x0004) (Edit, ExportObject, NeedCtorLink, NoClear, EditInline)
	class URB_ConstraintInstance*                      ConstraintInstance;                                       // 0x01E0(0x0004) (Edit, ExportObject, NeedCtorLink, NoClear, EditInline)
	unsigned long                                      bDisableCollision : 1;                                    // 0x01E4(0x0004) (Edit, Const)
	unsigned long                                      bUpdateActor1RefFrame : 1;                                // 0x01E4(0x0004) (Edit)
	unsigned long                                      bUpdateActor2RefFrame : 1;                                // 0x01E4(0x0004) (Edit)
	class AActor*                                      PulleyPivotActor1;                                        // 0x01E8(0x0004) (Edit)
	class AActor*                                      PulleyPivotActor2;                                        // 0x01EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintActor");
		return ptr;
	}


	void OnToggleConstraintDrive(class USeqAct_ToggleConstraintDrive* Action);
	void OnToggle(class USeqAct_Toggle* Action);
	void OnDestroy(class USeqAct_Destroy* Action);
	void TermConstraint();
	void InitConstraint(class AActor* Actor1, class AActor* Actor2, const struct FName& Actor1Bone, const struct FName& Actor2Bone, float BreakThreshold);
	void SetDisableCollision(bool NewDisableCollision);
};


// Class Engine.RB_LineImpulseActor
// 0x0011 (0x01E5 - 0x01D4)
class ARB_LineImpulseActor : public ARigidBodyBase
{
public:
	float                                              ImpulseStrength;                                          // 0x01D4(0x0004) (Edit)
	float                                              ImpulseRange;                                             // 0x01D8(0x0004) (Edit)
	unsigned long                                      bVelChange : 1;                                           // 0x01DC(0x0004) (Edit)
	unsigned long                                      bStopAtFirstHit : 1;                                      // 0x01DC(0x0004) (Edit)
	unsigned long                                      bCauseFracture : 1;                                       // 0x01DC(0x0004) (Edit)
	class UArrowComponent*                             Arrow;                                                    // 0x01E0(0x0004) (ExportObject, Component, EditInline)
	unsigned char                                      ImpulseCount;                                             // 0x01E4(0x0001) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_LineImpulseActor");
		return ptr;
	}


	void ReplicatedEvent(const struct FName& VarName);
	void OnToggle(class USeqAct_Toggle* inAction);
	void FireLineImpulse();
};


// Class Engine.RB_RadialImpulseActor
// 0x0009 (0x01DD - 0x01D4)
class ARB_RadialImpulseActor : public ARigidBodyBase
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                          // 0x01D4(0x0004) (ExportObject, Component, EditInline)
	class URB_RadialImpulseComponent*                  ImpulseComponent;                                         // 0x01D8(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned char                                      ImpulseCount;                                             // 0x01DC(0x0001) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_RadialImpulseActor");
		return ptr;
	}


	void ReplicatedEvent(const struct FName& VarName);
	void OnToggle(class USeqAct_Toggle* inAction);
};


// Class Engine.RB_Thruster
// 0x0008 (0x01DC - 0x01D4)
class ARB_Thruster : public ARigidBodyBase
{
public:
	unsigned long                                      bThrustEnabled : 1;                                       // 0x01D4(0x0004) (Edit)
	float                                              ThrustStrength;                                           // 0x01D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_Thruster");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class Engine.WorldAttractor
// 0x00C8 (0x029C - 0x01D4)
class AWorldAttractor : public AActor
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x01D4(0x0004) (Edit)
	float                                              LoopDuration;                                             // 0x01D8(0x0004) (Edit)
	float                                              CurrentTime;                                              // 0x01DC(0x0004)
	TEnumAsByte<EWorldAttractorFalloffType>            FalloffType;                                              // 0x01E0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01E1(0x0003) MISSED OFFSET
	struct FMatineeRawDistributionFloat                FalloffExponent;                                          // 0x01E4(0x0024) (Edit, Component, NeedCtorLink)
	struct FMatineeRawDistributionFloat                Range;                                                    // 0x0208(0x0024) (Edit, Component, NeedCtorLink)
	struct FMatineeRawDistributionFloat                Strength;                                                 // 0x022C(0x0024) (Edit, Component, NeedCtorLink)
	float                                              CollisionRadius;                                          // 0x0250(0x0004) (Edit)
	struct FMatineeRawDistributionFloat                DragCoefficient;                                          // 0x0254(0x0024) (Edit, Component, NeedCtorLink)
	struct FMatineeRawDistributionFloat                DragRadius;                                               // 0x0278(0x0024) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WorldAttractor");
		return ptr;
	}


	void OnSetWorldAttractorParam(class USeqAct_SetWorldAttractorParam* Action);
};


// Class Engine.RB_ConstraintDrawComponent
// 0x0004 (0x01DC - 0x01D8)
class URB_ConstraintDrawComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          LimitMaterial;                                            // 0x01D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintDrawComponent");
		return ptr;
	}

};


// Class Engine.RB_RadialImpulseComponent
// 0x0014 (0x01EC - 0x01D8)
class URB_RadialImpulseComponent : public UPrimitiveComponent
{
public:
	TEnumAsByte<ERadialImpulseFalloff>                 ImpulseFalloff;                                           // 0x01D8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01D9(0x0003) MISSED OFFSET
	float                                              ImpulseStrength;                                          // 0x01DC(0x0004) (Edit)
	float                                              ImpulseRadius;                                            // 0x01E0(0x0004) (Edit)
	unsigned long                                      bVelChange : 1;                                           // 0x01E4(0x0004) (Edit)
	unsigned long                                      bCauseFracture : 1;                                       // 0x01E4(0x0004) (Edit)
	class UDrawSphereComponent*                        PreviewSphere;                                            // 0x01E8(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_RadialImpulseComponent");
		return ptr;
	}


	void FireImpulse(const struct FVector& Origin);
};


// Class Engine.RB_Handle
// 0x006B (0x00C0 - 0x0055)
class URB_Handle : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	class UPrimitiveComponent*                         GrabbedComponent;                                         // 0x0058(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       GrabbedBoneName;                                          // 0x005C(0x0008)
	int                                                SceneIndex;                                               // 0x0064(0x0004) (Const, Native, Transient)
	unsigned long                                      bInHardware : 1;                                          // 0x0068(0x0004) (Const, Native, Transient)
	unsigned long                                      bRotationConstrained : 1;                                 // 0x0068(0x0004) (Const, Native, Transient)
	unsigned long                                      bInterpolating : 1;                                       // 0x0068(0x0004)
	struct FPointer                                    HandleData;                                               // 0x006C(0x0004) (Const, Native, Transient)
	struct FPointer                                    KinActorData;                                             // 0x0070(0x0004) (Const, Native, Transient)
	float                                              LinearDamping;                                            // 0x0074(0x0004) (Edit)
	float                                              LinearStiffness;                                          // 0x0078(0x0004) (Edit)
	struct FVector                                     LinearStiffnessScale3D;                                   // 0x007C(0x000C) (Edit)
	struct FVector                                     LinearDampingScale3D;                                     // 0x0088(0x000C) (Edit)
	float                                              AngularDamping;                                           // 0x0094(0x0004) (Edit)
	float                                              AngularStiffness;                                         // 0x0098(0x0004) (Edit)
	struct FVector                                     Destination;                                              // 0x009C(0x000C)
	struct FVector                                     StepSize;                                                 // 0x00A8(0x000C)
	struct FVector                                     Location;                                                 // 0x00B4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_Handle");
		return ptr;
	}


	struct FQuat GetOrientation();
	void SetOrientation(struct FQuat* NewOrientation);
	void UpdateSmoothLocation(struct FVector* NewLocation);
	void SetSmoothLocation(const struct FVector& NewLocation, float MoveTime);
	void SetLocation(const struct FVector& NewLocation);
	void ReleaseComponent();
	void GrabComponent(class UPrimitiveComponent* Component, const struct FName& InBoneName, const struct FVector& GrabLocation, bool bConstrainRotation);
};


// Class Engine.RB_Spring
// 0x0053 (0x00A8 - 0x0055)
class URB_Spring : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	class UPrimitiveComponent*                         Component1;                                               // 0x0058(0x0004) (Const, ExportObject, Component, EditInline)
	struct FName                                       BoneName1;                                                // 0x005C(0x0008) (Const)
	class UPrimitiveComponent*                         Component2;                                               // 0x0064(0x0004) (Const, ExportObject, Component, EditInline)
	struct FName                                       BoneName2;                                                // 0x0068(0x0008) (Const)
	int                                                SceneIndex;                                               // 0x0070(0x0004) (Const, Native)
	unsigned long                                      bInHardware : 1;                                          // 0x0074(0x0004) (Const, Native)
	unsigned long                                      bEnableForceMassRatio : 1;                                // 0x0074(0x0004) (Edit)
	struct FPointer                                    SpringData;                                               // 0x0078(0x0004) (Const, Native)
	float                                              TimeSinceActivation;                                      // 0x007C(0x0004) (Const, Native)
	float                                              MinBodyMass;                                              // 0x0080(0x0004) (Const)
	float                                              SpringSaturateDist;                                       // 0x0084(0x0004) (Edit)
	float                                              SpringMaxForce;                                           // 0x0088(0x0004) (Edit)
	float                                              MaxForceMassRatio;                                        // 0x008C(0x0004) (Edit)
	struct FInterpCurveFloat                           SpringMaxForceTimeScale;                                  // 0x0090(0x0010) (Edit, NeedCtorLink)
	float                                              DampSaturateVel;                                          // 0x00A0(0x0004) (Edit)
	float                                              DampMaxForce;                                             // 0x00A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_Spring");
		return ptr;
	}


	void Clear();
	void SetComponents(class UPrimitiveComponent* InComponent1, const struct FName& InBoneName1, const struct FVector& Position1, class UPrimitiveComponent* InComponent2, const struct FName& InBoneName2, const struct FVector& Position2);
};


// Class Engine.SVehicleSimBase
// 0x003B (0x0090 - 0x0055)
class USVehicleSimBase : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	float                                              WheelSuspensionStiffness;                                 // 0x0058(0x0004) (Edit)
	float                                              WheelSuspensionDamping;                                   // 0x005C(0x0004) (Edit)
	float                                              WheelSuspensionBias;                                      // 0x0060(0x0004) (Edit)
	float                                              WheelLongExtremumSlip;                                    // 0x0064(0x0004) (Edit)
	float                                              WheelLongExtremumValue;                                   // 0x0068(0x0004) (Edit)
	float                                              WheelLongAsymptoteSlip;                                   // 0x006C(0x0004) (Edit)
	float                                              WheelLongAsymptoteValue;                                  // 0x0070(0x0004) (Edit)
	float                                              WheelLatExtremumSlip;                                     // 0x0074(0x0004) (Edit)
	float                                              WheelLatExtremumValue;                                    // 0x0078(0x0004) (Edit)
	float                                              WheelLatAsymptoteSlip;                                    // 0x007C(0x0004) (Edit)
	float                                              WheelLatAsymptoteValue;                                   // 0x0080(0x0004) (Edit)
	float                                              WheelInertia;                                             // 0x0084(0x0004) (Edit)
	unsigned long                                      bWheelSpeedOverride : 1;                                  // 0x0088(0x0004) (Edit)
	unsigned long                                      bClampedFrictionModel : 1;                                // 0x0088(0x0004) (Edit)
	unsigned long                                      bAutoDrive : 1;                                           // 0x0088(0x0004) (Edit)
	float                                              AutoDriveSteer;                                           // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleSimBase");
		return ptr;
	}

};


// Class Engine.SVehicleSimCar
// 0x0034 (0x00C4 - 0x0090)
class USVehicleSimCar : public USVehicleSimBase
{
public:
	float                                              ChassisTorqueScale;                                       // 0x0090(0x0004) (Edit)
	struct FInterpCurveFloat                           MaxSteerAngleCurve;                                       // 0x0094(0x0010) (Edit, NeedCtorLink)
	float                                              SteerSpeed;                                               // 0x00A4(0x0004) (Edit)
	float                                              ReverseThrottle;                                          // 0x00A8(0x0004) (Edit)
	float                                              EngineBrakeFactor;                                        // 0x00AC(0x0004) (Edit)
	float                                              MaxBrakeTorque;                                           // 0x00B0(0x0004) (Edit)
	float                                              StopThreshold;                                            // 0x00B4(0x0004) (Edit)
	unsigned long                                      bIsDriving : 1;                                           // 0x00B8(0x0004)
	float                                              ActualSteering;                                           // 0x00BC(0x0004)
	float                                              TimeSinceThrottle;                                        // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleSimCar");
		return ptr;
	}

};


// Class Engine.SVehicleSimTank
// 0x0030 (0x00F4 - 0x00C4)
class USVehicleSimTank : public USVehicleSimCar
{
public:
	float                                              LeftTrackVel;                                             // 0x00C4(0x0004)
	float                                              RightTrackVel;                                            // 0x00C8(0x0004)
	float                                              LeftTrackTorque;                                          // 0x00CC(0x0004)
	float                                              RightTrackTorque;                                         // 0x00D0(0x0004)
	float                                              MaxEngineTorque;                                          // 0x00D4(0x0004) (Edit)
	float                                              EngineDamping;                                            // 0x00D8(0x0004) (Edit)
	float                                              InsideTrackTorqueFactor;                                  // 0x00DC(0x0004) (Edit)
	float                                              SteeringLatStiffnessFactor;                               // 0x00E0(0x0004) (Edit)
	float                                              TurnInPlaceThrottle;                                      // 0x00E4(0x0004) (Edit)
	float                                              TurnMaxGripReduction;                                     // 0x00E8(0x0004) (Edit)
	float                                              TurnGripScaleRate;                                        // 0x00EC(0x0004) (Edit)
	unsigned long                                      bTurnInPlaceOnSteer : 1;                                  // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleSimTank");
		return ptr;
	}

};


// Class Engine.ActorFactoryApexClothing
// 0x0014 (0x008C - 0x0078)
class UActorFactoryApexClothing : public UActorFactorySkeletalMesh
{
public:
	TArray<class UApexClothingAsset*>                  ClothingAssets;                                           // 0x0078(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<ERBCollisionChannel>                   ClothingRBChannel;                                        // 0x0084(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	struct FRBCollisionChannelContainer                ClothingRBCollideWithChannels;                            // 0x0088(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryApexClothing");
		return ptr;
	}

};


// Class Engine.ApexDestructibleDamageParameters
// 0x000C (0x0048 - 0x003C)
class UApexDestructibleDamageParameters : public UObject
{
public:
	TArray<struct FDamagePair>                         DamageMap;                                                // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexDestructibleDamageParameters");
		return ptr;
	}

};


// Class Engine.FractureMaterial
// 0x0008 (0x0044 - 0x003C)
class UFractureMaterial : public UObject
{
public:
	class UParticleSystem*                             FractureEffect;                                           // 0x003C(0x0004) (Edit)
	class USoundCue*                                   FractureSound;                                            // 0x0040(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FractureMaterial");
		return ptr;
	}

};


// Class Engine.PhysicalMaterial
// 0x0064 (0x00A0 - 0x003C)
class UPhysicalMaterial : public UObject
{
public:
	int                                                MaterialIndex;                                            // 0x003C(0x0004) (Transient)
	float                                              Friction;                                                 // 0x0040(0x0004) (Edit)
	float                                              Restitution;                                              // 0x0044(0x0004) (Edit)
	unsigned long                                      bForceConeFriction : 1;                                   // 0x0048(0x0004) (Edit)
	unsigned long                                      bEnableAnisotropicFriction : 1;                           // 0x0048(0x0004) (Edit)
	struct FVector                                     AnisoFrictionDir;                                         // 0x004C(0x000C) (Edit)
	float                                              FrictionV;                                                // 0x0058(0x0004) (Edit)
	float                                              Density;                                                  // 0x005C(0x0004) (Edit)
	float                                              AngularDamping;                                           // 0x0060(0x0004) (Edit)
	float                                              LinearDamping;                                            // 0x0064(0x0004) (Edit)
	float                                              MagneticResponse;                                         // 0x0068(0x0004) (Edit)
	float                                              WindResponse;                                             // 0x006C(0x0004) (Edit)
	float                                              ImpactThreshold;                                          // 0x0070(0x0004) (Edit)
	float                                              ImpactReFireDelay;                                        // 0x0074(0x0004) (Edit)
	class UParticleSystem*                             ImpactEffect;                                             // 0x0078(0x0004) (Edit)
	class USoundCue*                                   ImpactSound;                                              // 0x007C(0x0004) (Edit)
	float                                              SlideThreshold;                                           // 0x0080(0x0004) (Edit)
	float                                              SlideReFireDelay;                                         // 0x0084(0x0004) (Edit)
	class UParticleSystem*                             SlideEffect;                                              // 0x0088(0x0004) (Edit)
	class USoundCue*                                   SlideSound;                                               // 0x008C(0x0004) (Edit)
	class USoundCue*                                   FractureSoundExplosion;                                   // 0x0090(0x0004) (Edit)
	class USoundCue*                                   FractureSoundSingle;                                      // 0x0094(0x0004) (Edit)
	class UPhysicalMaterial*                           Parent;                                                   // 0x0098(0x0004) (Edit)
	class UPhysicalMaterialPropertyBase*               PhysicalMaterialProperty;                                 // 0x009C(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicalMaterial");
		return ptr;
	}


	class UPhysicalMaterialPropertyBase* GetPhysicalMaterialProperty(class UClass* DesiredClass);
	void FindFractureSounds(class USoundCue** OutSoundExplosion, class USoundCue** OutSoundSingle);
	struct FPhysEffectInfo FindPhysEffectInfo(TEnumAsByte<EPhysEffectType> Type);
};


// Class Engine.PhysicalMaterialPropertyBase
// 0x0000 (0x003C - 0x003C)
class UPhysicalMaterialPropertyBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicalMaterialPropertyBase");
		return ptr;
	}

};


// Class Engine.PhysicsAsset
// 0x0068 (0x00A4 - 0x003C)
class UPhysicsAsset : public UObject
{
public:
	class USkeletalMesh*                               DefaultSkelMesh;                                          // 0x003C(0x0004) (Const)
	TArray<class URB_BodySetup*>                       BodySetup;                                                // 0x0040(0x000C) (Const, ExportObject, NeedCtorLink, EditInline)
	struct FMap_Mirror                                 BodySetupIndexMap;                                        // 0x004C(0x003C) (Const, Native)
	TArray<int>                                        BoundsBodies;                                             // 0x0088(0x000C) (Const, NeedCtorLink)
	TArray<class URB_ConstraintSetup*>                 ConstraintSetup;                                          // 0x0094(0x000C) (Const, ExportObject, NeedCtorLink, EditInline)
	class UPhysicsAssetInstance*                       DefaultInstance;                                          // 0x00A0(0x0004) (Const, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsAsset");
		return ptr;
	}


	int FindBodyIndex(const struct FName& BodyName);
};


// Class Engine.PhysicsAssetInstance
// 0x0078 (0x00B4 - 0x003C)
class UPhysicsAssetInstance : public UObject
{
public:
	class AActor*                                      Owner;                                                    // 0x003C(0x0004) (Const, Transient)
	int                                                RootBodyIndex;                                            // 0x0040(0x0004) (Const, Transient)
	TArray<class URB_BodyInstance*>                    Bodies;                                                   // 0x0044(0x000C) (Const, ExportObject, NeedCtorLink, EditInline)
	TArray<class URB_ConstraintInstance*>              Constraints;                                              // 0x0050(0x000C) (Const, ExportObject, NeedCtorLink, EditInline)
	struct FMap_Mirror                                 CollisionDisableTable;                                    // 0x005C(0x003C) (Const, Native)
	float                                              LinearSpringScale;                                        // 0x0098(0x0004) (Const)
	float                                              LinearDampingScale;                                       // 0x009C(0x0004) (Const)
	float                                              LinearForceLimitScale;                                    // 0x00A0(0x0004) (Const)
	float                                              AngularSpringScale;                                       // 0x00A4(0x0004) (Const)
	float                                              AngularDampingScale;                                      // 0x00A8(0x0004) (Const)
	float                                              AngularForceLimitScale;                                   // 0x00AC(0x0004) (Const)
	unsigned long                                      bInitBodies : 1;                                          // 0x00B0(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsAssetInstance");
		return ptr;
	}


	class URB_ConstraintInstance* FindConstraintInstance(const struct FName& ConName, class UPhysicsAsset* InAsset);
	class URB_BodyInstance* FindBodyInstance(const struct FName& BodyName, class UPhysicsAsset* InAsset);
	void SetFullAnimWeightBonesFixed(bool bNewFixed, class USkeletalMeshComponent* SkelMesh);
	void SetFullAnimWeightBlockRigidBody(bool bNewBlockRigidBody, class USkeletalMeshComponent* SkelMesh);
	void SetNamedBodiesBlockRigidBody(bool bNewBlockRigidBody, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh);
	void SetNamedRBBoneSprings(bool bEnable, TArray<struct FName> BoneNames, float InBoneLinearSpring, float InBoneAngularSpring, class USkeletalMeshComponent* SkelMeshComp);
	void SetNamedMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMeshComp, bool bSetOtherBodiesToComplement);
	void SetNamedMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMeshComp, bool bSetOtherBodiesToComplement);
	void SetAllMotorsAngularDriveParams(float InSpring, float InDamping, float InForceLimit, class USkeletalMeshComponent* SkelMesh, bool bSkipFullAnimWeightBodies);
	void SetAllMotorsAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, class USkeletalMeshComponent* SkelMeshComp, bool bSkipFullAnimWeightBodies);
	void SetAllMotorsAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive, class USkeletalMeshComponent* SkelMesh, bool bSkipFullAnimWeightBodies);
	void ForceAllBodiesBelowUnfixed(class UPhysicsAsset* InAsset, class USkeletalMeshComponent* InSkelMesh, bool InbInstanceAlwaysFullAnimWeight, struct FName* InBoneName);
	void SetNamedBodiesFixed(bool bNewFixed, TArray<struct FName> BoneNames, class USkeletalMeshComponent* SkelMesh, bool bSetOtherBodiesToComplement, bool bSkipFullAnimWeightBodies);
	void SetAllBodiesFixed(bool bNewFixed);
	float GetTotalMassBelowBone(const struct FName& InBoneName, class UPhysicsAsset* InAsset, class USkeletalMesh* InSkelMesh);
	void SetAngularDriveScale(float InAngularSpringScale, float InAngularDampingScale, float InAngularForceLimitScale);
	void SetLinearDriveScale(float InLinearSpringScale, float InLinearDampingScale, float InLinearForceLimitScale);
};


// Class Engine.PhysicsLODVerticalEmitter
// 0x0004 (0x0040 - 0x003C)
class UPhysicsLODVerticalEmitter : public UObject
{
public:
	int                                                ParticlePercentage;                                       // 0x003C(0x0004) (Native, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsLODVerticalEmitter");
		return ptr;
	}

};


// Class Engine.RB_BodyInstance
// 0x0060 (0x009C - 0x003C)
class URB_BodyInstance : public UObject
{
public:
	class UPrimitiveComponent*                         OwnerComponent;                                           // 0x003C(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	int                                                BodyIndex;                                                // 0x0040(0x0004) (Const)
	struct FVector                                     Velocity;                                                 // 0x0044(0x000C)
	struct FVector                                     PreviousVelocity;                                         // 0x0050(0x000C)
	int                                                SceneIndex;                                               // 0x005C(0x0004) (Const, Native)
	struct FPointer                                    BodyData;                                                 // 0x0060(0x0004) (Const, Native)
	struct FPointer                                    BoneSpring;                                               // 0x0064(0x0004) (Const, Native)
	struct FPointer                                    BoneSpringKinActor;                                       // 0x0068(0x0004) (Const, Native)
	unsigned long                                      bEnableBoneSpringLinear : 1;                              // 0x006C(0x0004) (Edit)
	unsigned long                                      bEnableBoneSpringAngular : 1;                             // 0x006C(0x0004) (Edit)
	unsigned long                                      bDisableOnOverextension : 1;                              // 0x006C(0x0004) (Edit)
	unsigned long                                      bNotifyOwnerOnOverextension : 1;                          // 0x006C(0x0004) (Edit)
	unsigned long                                      bTeleportOnOverextension : 1;                             // 0x006C(0x0004) (Edit)
	unsigned long                                      bUseKinActorForBoneSpring : 1;                            // 0x006C(0x0004) (Edit)
	unsigned long                                      bMakeSpringToBaseCollisionComponent : 1;                  // 0x006C(0x0004) (Edit)
	unsigned long                                      bOnlyCollideWithPawns : 1;                                // 0x006C(0x0004) (Edit, Const)
	unsigned long                                      bEnableCollisionResponse : 1;                             // 0x006C(0x0004) (Edit, Const)
	unsigned long                                      bPushBody : 1;                                            // 0x006C(0x0004) (Edit, Const)
	unsigned long                                      bForceUnfixed : 1;                                        // 0x006C(0x0004) (Transient)
	unsigned long                                      bInstanceAlwaysFullAnimWeight : 1;                        // 0x006C(0x0004) (Transient)
	float                                              BoneLinearSpring;                                         // 0x0070(0x0004) (Edit, Const)
	float                                              BoneLinearDamping;                                        // 0x0074(0x0004) (Edit, Const)
	float                                              BoneAngularSpring;                                        // 0x0078(0x0004) (Edit, Const)
	float                                              BoneAngularDamping;                                       // 0x007C(0x0004) (Edit, Const)
	float                                              OverextensionThreshold;                                   // 0x0080(0x0004) (Edit)
	float                                              CustomGravityFactor;                                      // 0x0084(0x0004) (Edit)
	float                                              LastEffectPlayedTime;                                     // 0x0088(0x0004) (Transient)
	float                                              ContactReportForceThreshold;                              // 0x008C(0x0004) (Edit)
	float                                              InstanceMassScale;                                        // 0x0090(0x0004) (Edit)
	float                                              InstanceDampingScale;                                     // 0x0094(0x0004) (Edit)
	class UPhysicalMaterial*                           PhysMaterialOverride;                                     // 0x0098(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_BodyInstance");
		return ptr;
	}


	void UpdateDampingProperties();
	void UpdateMassProperties(class URB_BodySetup* Setup);
	void SetContactReportForceThreshold(float Threshold);
	void EnableCollisionResponse(bool bEnableResponse);
	void SetPhysMaterialOverride(class UPhysicalMaterial* NewPhysMaterial);
	void SetBlockRigidBody(bool bNewBlockRigidBody);
	void SetBoneSpringTarget(bool bTeleport, struct FMatrix* InBoneTarget);
	void SetBoneSpringParams(float InLinearSpring, float InLinearDamping, float InAngularSpring, float InAngularDamping);
	void EnableBoneSpring(bool bInEnableLinear, bool bInEnableAngular, struct FMatrix* InBoneTarget);
	struct FVector GetUnrealWorldVelocityAtPoint(const struct FVector& Point);
	struct FVector GetUnrealWorldAngularVelocity();
	struct FVector GetUnrealWorldVelocity();
	struct FMatrix GetUnrealWorldTM();
	class UPhysicsAssetInstance* GetPhysicsAssetInstance();
	bool IsValidBodyInstance();
	bool IsFixed();
	void SetFixed(bool bNewFixed);
	float GetBodyMass();
};


// Class Engine.RB_ConstraintInstance
// 0x0070 (0x00AC - 0x003C)
class URB_ConstraintInstance : public UObject
{
public:
	class AActor*                                      Owner;                                                    // 0x003C(0x0004) (Const, Transient)
	class UPrimitiveComponent*                         OwnerComponent;                                           // 0x0040(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	int                                                ConstraintIndex;                                          // 0x0044(0x0004) (Const)
	int                                                SceneIndex;                                               // 0x0048(0x0004) (Const, Native)
	unsigned long                                      bInHardware : 1;                                          // 0x004C(0x0004) (Const, Native)
	unsigned long                                      bLinearXPositionDrive : 1;                                // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bLinearXVelocityDrive : 1;                                // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bLinearYPositionDrive : 1;                                // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bLinearYVelocityDrive : 1;                                // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bLinearZPositionDrive : 1;                                // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bLinearZVelocityDrive : 1;                                // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bSwingPositionDrive : 1;                                  // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bSwingVelocityDrive : 1;                                  // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bTwistPositionDrive : 1;                                  // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bTwistVelocityDrive : 1;                                  // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bAngularSlerpDrive : 1;                                   // 0x004C(0x0004) (Edit, Const)
	unsigned long                                      bTerminated : 1;                                          // 0x004C(0x0004)
	struct FPointer                                    ConstraintData;                                           // 0x0050(0x0004) (Const, Native)
	struct FVector                                     LinearPositionTarget;                                     // 0x0054(0x000C) (Edit, Const)
	struct FVector                                     LinearVelocityTarget;                                     // 0x0060(0x000C) (Edit, Const)
	float                                              LinearDriveSpring;                                        // 0x006C(0x0004) (Edit, Const)
	float                                              LinearDriveDamping;                                       // 0x0070(0x0004) (Edit, Const)
	float                                              LinearDriveForceLimit;                                    // 0x0074(0x0004) (Edit, Const)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) MISSED OFFSET
	struct FQuat                                       AngularPositionTarget;                                    // 0x0080(0x0010) (Edit, Const)
	struct FVector                                     AngularVelocityTarget;                                    // 0x0090(0x000C) (Edit, Const)
	float                                              AngularDriveSpring;                                       // 0x009C(0x0004) (Edit, Const)
	float                                              AngularDriveDamping;                                      // 0x00A0(0x0004) (Edit, Const)
	float                                              AngularDriveForceLimit;                                   // 0x00A4(0x0004) (Edit, Const)
	struct FPointer                                    DummyKinActor;                                            // 0x00A8(0x0004) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintInstance");
		return ptr;
	}


	void MoveKinActorTransform(struct FMatrix* NewTM);
	void SetLinearLimitSize(float NewLimitSize);
	void SetAngularDOFLimitScale(float InSwing1LimitScale, float InSwing2LimitScale, float InTwistLimitScale, class URB_ConstraintSetup* InSetup);
	void SetAngularDriveParams(float InSpring, float InDamping, float InForceLimit);
	void SetAngularVelocityTarget(const struct FVector& InVelTarget);
	void SetAngularPositionTarget(struct FQuat* InPosTarget);
	void SetLinearDriveParams(float InSpring, float InDamping, float InForceLimit);
	void SetLinearVelocityTarget(const struct FVector& InVelTarget);
	void SetLinearPositionTarget(const struct FVector& InPosTarget);
	void SetAngularVelocityDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetAngularPositionDrive(bool bEnableSwingDrive, bool bEnableTwistDrive);
	void SetLinearVelocityDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive);
	void SetLinearPositionDrive(bool bEnableXDrive, bool bEnableYDrive, bool bEnableZDrive);
	struct FVector GetConstraintLocation();
	class UPhysicsAssetInstance* GetPhysicsAssetInstance();
	void TermConstraint();
	void InitConstraint(class UPrimitiveComponent* PrimComp1, class UPrimitiveComponent* PrimComp2, class URB_ConstraintSetup* Setup, float Scale, class AActor* InOwner, class UPrimitiveComponent* InPrimComp, bool bMakeKinForBody1);
};


// Class Engine.RB_ConstraintSetup
// 0x00C4 (0x0100 - 0x003C)
class URB_ConstraintSetup : public UObject
{
public:
	struct FName                                       JointName;                                                // 0x003C(0x0008) (Edit, Const)
	struct FName                                       ConstraintBone1;                                          // 0x0044(0x0008) (Edit)
	struct FName                                       ConstraintBone2;                                          // 0x004C(0x0008) (Edit)
	struct FVector                                     Pos1;                                                     // 0x0054(0x000C)
	struct FVector                                     PriAxis1;                                                 // 0x0060(0x000C)
	struct FVector                                     SecAxis1;                                                 // 0x006C(0x000C)
	struct FVector                                     Pos2;                                                     // 0x0078(0x000C)
	struct FVector                                     PriAxis2;                                                 // 0x0084(0x000C)
	struct FVector                                     SecAxis2;                                                 // 0x0090(0x000C)
	struct FVector                                     PulleyPivot1;                                             // 0x009C(0x000C)
	struct FVector                                     PulleyPivot2;                                             // 0x00A8(0x000C)
	unsigned long                                      bEnableProjection : 1;                                    // 0x00B4(0x0004) (Edit)
	unsigned long                                      bLinearLimitSoft : 1;                                     // 0x00B4(0x0004) (Edit)
	unsigned long                                      bLinearBreakable : 1;                                     // 0x00B4(0x0004) (Edit)
	unsigned long                                      bSwingLimited : 1;                                        // 0x00B4(0x0004) (Edit)
	unsigned long                                      bTwistLimited : 1;                                        // 0x00B4(0x0004) (Edit)
	unsigned long                                      bSwingLimitSoft : 1;                                      // 0x00B4(0x0004) (Edit)
	unsigned long                                      bTwistLimitSoft : 1;                                      // 0x00B4(0x0004) (Edit)
	unsigned long                                      bAngularBreakable : 1;                                    // 0x00B4(0x0004) (Edit)
	unsigned long                                      bIsPulley : 1;                                            // 0x00B4(0x0004) (Edit)
	unsigned long                                      bMaintainMinDistance : 1;                                 // 0x00B4(0x0004) (Edit)
	struct FLinearDOFSetup                             LinearXSetup;                                             // 0x00B8(0x0008) (Edit)
	struct FLinearDOFSetup                             LinearYSetup;                                             // 0x00C0(0x0008) (Edit)
	struct FLinearDOFSetup                             LinearZSetup;                                             // 0x00C8(0x0008) (Edit)
	float                                              LinearLimitStiffness;                                     // 0x00D0(0x0004) (Edit)
	float                                              LinearLimitDamping;                                       // 0x00D4(0x0004) (Edit)
	float                                              LinearBreakThreshold;                                     // 0x00D8(0x0004) (Edit)
	float                                              Swing1LimitAngle;                                         // 0x00DC(0x0004) (Edit)
	float                                              Swing2LimitAngle;                                         // 0x00E0(0x0004) (Edit)
	float                                              TwistLimitAngle;                                          // 0x00E4(0x0004) (Edit)
	float                                              SwingLimitStiffness;                                      // 0x00E8(0x0004) (Edit)
	float                                              SwingLimitDamping;                                        // 0x00EC(0x0004) (Edit)
	float                                              TwistLimitStiffness;                                      // 0x00F0(0x0004) (Edit)
	float                                              TwistLimitDamping;                                        // 0x00F4(0x0004) (Edit)
	float                                              AngularBreakThreshold;                                    // 0x00F8(0x0004) (Edit)
	float                                              PulleyRatio;                                              // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintSetup");
		return ptr;
	}

};


// Class Engine.RB_BSJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_BSJointSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_BSJointSetup");
		return ptr;
	}

};


// Class Engine.RB_DistanceJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_DistanceJointSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_DistanceJointSetup");
		return ptr;
	}

};


// Class Engine.RB_HingeSetup
// 0x0000 (0x0100 - 0x0100)
class URB_HingeSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_HingeSetup");
		return ptr;
	}

};


// Class Engine.RB_PrismaticSetup
// 0x0000 (0x0100 - 0x0100)
class URB_PrismaticSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_PrismaticSetup");
		return ptr;
	}

};


// Class Engine.RB_PulleyJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_PulleyJointSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_PulleyJointSetup");
		return ptr;
	}

};


// Class Engine.RB_SkelJointSetup
// 0x0000 (0x0100 - 0x0100)
class URB_SkelJointSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_SkelJointSetup");
		return ptr;
	}

};


// Class Engine.RB_StayUprightSetup
// 0x0000 (0x0100 - 0x0100)
class URB_StayUprightSetup : public URB_ConstraintSetup
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_StayUprightSetup");
		return ptr;
	}

};


// Class Engine.SVehicleWheel
// 0x00CC (0x0114 - 0x0048)
class USVehicleWheel : public UComponent
{
public:
	float                                              Steer;                                                    // 0x0048(0x0004) (Edit)
	float                                              MotorTorque;                                              // 0x004C(0x0004) (Edit)
	float                                              BrakeTorque;                                              // 0x0050(0x0004) (Edit)
	float                                              ChassisTorque;                                            // 0x0054(0x0004) (Edit)
	unsigned long                                      bPoweredWheel : 1;                                        // 0x0058(0x0004) (Edit)
	unsigned long                                      bHoverWheel : 1;                                          // 0x0058(0x0004) (Edit)
	unsigned long                                      bCollidesVehicles : 1;                                    // 0x0058(0x0004) (Edit)
	unsigned long                                      bCollidesPawns : 1;                                       // 0x0058(0x0004) (Edit)
	unsigned long                                      bIsSquealing : 1;                                         // 0x0058(0x0004)
	unsigned long                                      bWheelOnGround : 1;                                       // 0x0058(0x0004)
	float                                              SteerFactor;                                              // 0x005C(0x0004) (Edit)
	struct FName                                       SkelControlName;                                          // 0x0060(0x0008) (Edit)
	class USkelControlWheel*                           WheelControl;                                             // 0x0068(0x0004)
	struct FName                                       BoneName;                                                 // 0x006C(0x0008) (Edit)
	struct FVector                                     BoneOffset;                                               // 0x0074(0x000C) (Edit)
	float                                              WheelRadius;                                              // 0x0080(0x0004) (Edit)
	float                                              SuspensionTravel;                                         // 0x0084(0x0004) (Edit)
	float                                              SuspensionSpeed;                                          // 0x0088(0x0004) (Edit)
	class UParticleSystem*                             WheelParticleSystem;                                      // 0x008C(0x0004) (Edit)
	TEnumAsByte<EWheelSide>                            Side;                                                     // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	float                                              LongSlipFactor;                                           // 0x0094(0x0004) (Edit)
	float                                              LatSlipFactor;                                            // 0x0098(0x0004) (Edit)
	float                                              HandbrakeLongSlipFactor;                                  // 0x009C(0x0004) (Edit)
	float                                              HandbrakeLatSlipFactor;                                   // 0x00A0(0x0004) (Edit)
	float                                              ParkedSlipFactor;                                         // 0x00A4(0x0004) (Edit)
	struct FVector                                     WheelPosition;                                            // 0x00A8(0x000C)
	float                                              SpinVel;                                                  // 0x00B4(0x0004)
	float                                              LongSlipRatio;                                            // 0x00B8(0x0004)
	float                                              LatSlipAngle;                                             // 0x00BC(0x0004)
	struct FVector                                     ContactNormal;                                            // 0x00C0(0x000C)
	struct FVector                                     LongDirection;                                            // 0x00CC(0x000C)
	struct FVector                                     LatDirection;                                             // 0x00D8(0x000C)
	float                                              ContactForce;                                             // 0x00E4(0x0004)
	float                                              LongImpulse;                                              // 0x00E8(0x0004)
	float                                              LatImpulse;                                               // 0x00EC(0x0004)
	float                                              DesiredSuspensionPosition;                                // 0x00F0(0x0004)
	float                                              SuspensionPosition;                                       // 0x00F4(0x0004)
	float                                              CurrentRotation;                                          // 0x00F8(0x0004)
	struct FPointer                                    WheelShape;                                               // 0x00FC(0x0004) (Const, Transient)
	int                                                WheelMaterialIndex;                                       // 0x0100(0x0004) (Const, Transient)
	class UClass*                                      WheelPSCClass;                                            // 0x0104(0x0004)
	class UParticleSystemComponent*                    WheelParticleComp;                                        // 0x0108(0x0004) (ExportObject, Component, EditInline)
	struct FName                                       SlipParticleParamName;                                    // 0x010C(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleWheel");
		return ptr;
	}

};


// Class Engine.NxGenericForceFieldBrush
// 0x00CC (0x02CC - 0x0200)
class ANxGenericForceFieldBrush : public AVolume
{
public:
	int                                                ExcludeChannel;                                           // 0x0200(0x0004) (Edit)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x0204(0x0004) (Edit)
	TEnumAsByte<ERBCollisionChannel>                   RBChannel;                                                // 0x0208(0x0001) (Edit, Const)
	TEnumAsByte<EFFB_ForceFieldCoordinates>            Coordinates;                                              // 0x0209(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x020A(0x0002) MISSED OFFSET
	struct FVector                                     Constant;                                                 // 0x020C(0x000C) (Edit)
	struct FVector                                     PositionMultiplierX;                                      // 0x0218(0x000C) (Edit)
	struct FVector                                     PositionMultiplierY;                                      // 0x0224(0x000C) (Edit)
	struct FVector                                     PositionMultiplierZ;                                      // 0x0230(0x000C) (Edit)
	struct FVector                                     PositionTarget;                                           // 0x023C(0x000C) (Edit)
	struct FVector                                     VelocityMultiplierX;                                      // 0x0248(0x000C) (Edit)
	struct FVector                                     VelocityMultiplierY;                                      // 0x0254(0x000C) (Edit)
	struct FVector                                     VelocityMultiplierZ;                                      // 0x0260(0x000C) (Edit)
	struct FVector                                     VelocityTarget;                                           // 0x026C(0x000C) (Edit)
	struct FVector                                     Noise;                                                    // 0x0278(0x000C) (Edit)
	struct FVector                                     FalloffLinear;                                            // 0x0284(0x000C) (Edit)
	struct FVector                                     FalloffQuadratic;                                         // 0x0290(0x000C) (Edit)
	float                                              TorusRadius;                                              // 0x029C(0x0004) (Edit)
	struct FPointer                                    ForceField;                                               // 0x02A0(0x0004) (Const, Native, Transient)
	TArray<struct FPointer>                            ConvexMeshes;                                             // 0x02A4(0x000C) (Const, Native, Transient)
	TArray<struct FPointer>                            ExclusionShapes;                                          // 0x02B0(0x000C) (Const, Native, Transient)
	TArray<struct FPointer>                            ExclusionShapePoses;                                      // 0x02BC(0x000C) (Const, Native, Transient)
	struct FPointer                                    LinearKernel;                                             // 0x02C8(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxGenericForceFieldBrush");
		return ptr;
	}


	bool StopsProjectile(class AProjectile* P);
	void PostBeginPlay();
};


// Class Engine.RB_ForceFieldExcludeVolume
// 0x0008 (0x0208 - 0x0200)
class ARB_ForceFieldExcludeVolume : public AVolume
{
public:
	int                                                ForceFieldChannel;                                        // 0x0200(0x0004) (Edit)
	int                                                SceneIndex;                                               // 0x0204(0x0004) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ForceFieldExcludeVolume");
		return ptr;
	}

};


// Class Engine.NxForceField
// 0x0040 (0x0214 - 0x01D4)
class ANxForceField : public AActor
{
public:
	int                                                ExcludeChannel;                                           // 0x01D4(0x0004) (Edit)
	unsigned long                                      bForceActive : 1;                                         // 0x01D8(0x0004) (Edit, Net)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x01DC(0x0004) (Edit, Const)
	TEnumAsByte<ERBCollisionChannel>                   RBChannel;                                                // 0x01E0(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01E1(0x0003) MISSED OFFSET
	struct FPointer                                    ForceField;                                               // 0x01E4(0x0004) (Const, Native, Transient)
	TArray<struct FPointer>                            ConvexMeshes;                                             // 0x01E8(0x000C) (Const, Native, Transient)
	TArray<struct FPointer>                            ExclusionShapes;                                          // 0x01F4(0x000C) (Const, Native, Transient)
	TArray<struct FPointer>                            ExclusionShapePoses;                                      // 0x0200(0x000C) (Const, Native, Transient)
	struct FPointer                                    U2NRotation;                                              // 0x020C(0x0004) (Const, Native, Transient)
	int                                                SceneIndex;                                               // 0x0210(0x0004) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxForceField");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* inAction);
	void DoInitRBPhys();
};


// Class Engine.NxCylindricalForceField
// 0x002C (0x0240 - 0x0214)
class ANxCylindricalForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                           // 0x0214(0x0004) (Edit)
	float                                              RotationalStrength;                                       // 0x0218(0x0004) (Edit)
	float                                              LiftStrength;                                             // 0x021C(0x0004) (Edit)
	float                                              ForceRadius;                                              // 0x0220(0x0004) (Edit)
	float                                              ForceTopRadius;                                           // 0x0224(0x0004) (Edit)
	float                                              LiftFalloffHeight;                                        // 0x0228(0x0004) (Edit)
	float                                              EscapeVelocity;                                           // 0x022C(0x0004) (Edit)
	float                                              ForceHeight;                                              // 0x0230(0x0004) (Edit)
	float                                              HeightOffset;                                             // 0x0234(0x0004) (Edit)
	unsigned long                                      UseSpecialRadialForce : 1;                                // 0x0238(0x0004) (Edit)
	struct FPointer                                    Kernel;                                                   // 0x023C(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxCylindricalForceField");
		return ptr;
	}

};


// Class Engine.NxCylindricalForceFieldCapsule
// 0x0004 (0x0244 - 0x0240)
class ANxCylindricalForceFieldCapsule : public ANxCylindricalForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                          // 0x0240(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxCylindricalForceFieldCapsule");
		return ptr;
	}


	void DoInitRBPhys();
};


// Class Engine.NxForceFieldGeneric
// 0x00B0 (0x02C4 - 0x0214)
class ANxForceFieldGeneric : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                                    // 0x0214(0x0004) (Edit, EditInline)
	class UActorComponent*                             DrawComponent;                                            // 0x0218(0x0004) (ExportObject, Component, EditInline)
	float                                              RoughExtentX;                                             // 0x021C(0x0004) (Edit)
	float                                              RoughExtentY;                                             // 0x0220(0x0004) (Edit)
	float                                              RoughExtentZ;                                             // 0x0224(0x0004) (Edit)
	TEnumAsByte<EFFG_ForceFieldCoordinates>            Coordinates;                                              // 0x0228(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0229(0x0003) MISSED OFFSET
	struct FVector                                     Constant;                                                 // 0x022C(0x000C) (Edit)
	struct FVector                                     PositionMultiplierX;                                      // 0x0238(0x000C) (Edit)
	struct FVector                                     PositionMultiplierY;                                      // 0x0244(0x000C) (Edit)
	struct FVector                                     PositionMultiplierZ;                                      // 0x0250(0x000C) (Edit)
	struct FVector                                     PositionTarget;                                           // 0x025C(0x000C) (Edit)
	struct FVector                                     VelocityMultiplierX;                                      // 0x0268(0x000C) (Edit)
	struct FVector                                     VelocityMultiplierY;                                      // 0x0274(0x000C) (Edit)
	struct FVector                                     VelocityMultiplierZ;                                      // 0x0280(0x000C) (Edit)
	struct FVector                                     VelocityTarget;                                           // 0x028C(0x000C) (Edit)
	struct FVector                                     Noise;                                                    // 0x0298(0x000C) (Edit)
	struct FVector                                     FalloffLinear;                                            // 0x02A4(0x000C) (Edit)
	struct FVector                                     FalloffQuadratic;                                         // 0x02B0(0x000C) (Edit)
	float                                              TorusRadius;                                              // 0x02BC(0x0004) (Edit)
	struct FPointer                                    LinearKernel;                                             // 0x02C0(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxForceFieldGeneric");
		return ptr;
	}


	void DoInitRBPhys();
};


// Class Engine.NxForceFieldRadial
// 0x001C (0x0230 - 0x0214)
class ANxForceFieldRadial : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                                    // 0x0214(0x0004) (Edit, EditInline)
	class UActorComponent*                             DrawComponent;                                            // 0x0218(0x0004) (ExportObject, Component, EditInline)
	float                                              ForceStrength;                                            // 0x021C(0x0004) (Edit)
	float                                              ForceRadius;                                              // 0x0220(0x0004) (Edit)
	float                                              SelfRotationStrength;                                     // 0x0224(0x0004) (Edit)
	TEnumAsByte<ERadialImpulseFalloff>                 ForceFalloff;                                             // 0x0228(0x0001) (Edit, ExportObject, Component)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0229(0x0003) MISSED OFFSET
	struct FPointer                                    Kernel;                                                   // 0x022C(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxForceFieldRadial");
		return ptr;
	}


	void DoInitRBPhys();
};


// Class Engine.NxForceFieldTornado
// 0x0038 (0x024C - 0x0214)
class ANxForceFieldTornado : public ANxForceField
{
public:
	class UForceFieldShape*                            Shape;                                                    // 0x0214(0x0004) (Edit, EditInline)
	class UActorComponent*                             DrawComponent;                                            // 0x0218(0x0004) (ExportObject, Component, EditInline)
	float                                              RadialStrength;                                           // 0x021C(0x0004) (Edit)
	float                                              RotationalStrength;                                       // 0x0220(0x0004) (Edit)
	float                                              LiftStrength;                                             // 0x0224(0x0004) (Edit)
	float                                              ForceRadius;                                              // 0x0228(0x0004) (Edit)
	float                                              ForceTopRadius;                                           // 0x022C(0x0004) (Edit)
	float                                              LiftFalloffHeight;                                        // 0x0230(0x0004) (Edit)
	float                                              EscapeVelocity;                                           // 0x0234(0x0004) (Edit)
	float                                              ForceHeight;                                              // 0x0238(0x0004) (Edit)
	float                                              HeightOffset;                                             // 0x023C(0x0004) (Edit)
	unsigned long                                      BSpecialRadialForceMode : 1;                              // 0x0240(0x0004) (Edit)
	float                                              SelfRotationStrength;                                     // 0x0244(0x0004) (Edit)
	struct FPointer                                    Kernel;                                                   // 0x0248(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxForceFieldTornado");
		return ptr;
	}


	void DoInitRBPhys();
};


// Class Engine.NxGenericForceField
// 0x009C (0x02B0 - 0x0214)
class ANxGenericForceField : public ANxForceField
{
public:
	TEnumAsByte<EFFG_ForceFieldCoordinates>            Coordinates;                                              // 0x0214(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0215(0x0003) MISSED OFFSET
	struct FVector                                     Constant;                                                 // 0x0218(0x000C) (Edit)
	struct FVector                                     PositionMultiplierX;                                      // 0x0224(0x000C) (Edit)
	struct FVector                                     PositionMultiplierY;                                      // 0x0230(0x000C) (Edit)
	struct FVector                                     PositionMultiplierZ;                                      // 0x023C(0x000C) (Edit)
	struct FVector                                     PositionTarget;                                           // 0x0248(0x000C) (Edit)
	struct FVector                                     VelocityMultiplierX;                                      // 0x0254(0x000C) (Edit)
	struct FVector                                     VelocityMultiplierY;                                      // 0x0260(0x000C) (Edit)
	struct FVector                                     VelocityMultiplierZ;                                      // 0x026C(0x000C) (Edit)
	struct FVector                                     VelocityTarget;                                           // 0x0278(0x000C) (Edit)
	struct FVector                                     Noise;                                                    // 0x0284(0x000C) (Edit)
	struct FVector                                     FalloffLinear;                                            // 0x0290(0x000C) (Edit)
	struct FVector                                     FalloffQuadratic;                                         // 0x029C(0x000C) (Edit)
	float                                              TorusRadius;                                              // 0x02A8(0x0004) (Edit)
	struct FPointer                                    LinearKernel;                                             // 0x02AC(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxGenericForceField");
		return ptr;
	}

};


// Class Engine.NxGenericForceFieldBox
// 0x0010 (0x02C0 - 0x02B0)
class ANxGenericForceFieldBox : public ANxGenericForceField
{
public:
	class UDrawBoxComponent*                           RenderComponent;                                          // 0x02B0(0x0004) (ExportObject, Component, EditInline)
	struct FVector                                     BoxExtent;                                                // 0x02B4(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxGenericForceFieldBox");
		return ptr;
	}


	void DoInitRBPhys();
};


// Class Engine.NxGenericForceFieldCapsule
// 0x000C (0x02BC - 0x02B0)
class ANxGenericForceFieldCapsule : public ANxGenericForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                          // 0x02B0(0x0004) (ExportObject, Component, EditInline)
	float                                              CapsuleHeight;                                            // 0x02B4(0x0004) (Edit)
	float                                              CapsuleRadius;                                            // 0x02B8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxGenericForceFieldCapsule");
		return ptr;
	}

};


// Class Engine.NxRadialForceField
// 0x0014 (0x0228 - 0x0214)
class ANxRadialForceField : public ANxForceField
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                          // 0x0214(0x0004) (ExportObject, Component, EditInline)
	float                                              ForceStrength;                                            // 0x0218(0x0004) (Edit)
	float                                              ForceRadius;                                              // 0x021C(0x0004) (Edit)
	TEnumAsByte<ERadialImpulseFalloff>                 ForceFalloff;                                             // 0x0220(0x0001) (Edit, ExportObject, Component)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0221(0x0003) MISSED OFFSET
	struct FPointer                                    LinearKernel;                                             // 0x0224(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxRadialForceField");
		return ptr;
	}

};


// Class Engine.NxRadialCustomForceField
// 0x0008 (0x0230 - 0x0228)
class ANxRadialCustomForceField : public ANxRadialForceField
{
public:
	float                                              SelfRotationStrength;                                     // 0x0228(0x0004) (Edit)
	struct FPointer                                    Kernel;                                                   // 0x022C(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxRadialCustomForceField");
		return ptr;
	}

};


// Class Engine.NxTornadoAngularForceField
// 0x0030 (0x0244 - 0x0214)
class ANxTornadoAngularForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                           // 0x0214(0x0004) (Edit)
	float                                              RotationalStrength;                                       // 0x0218(0x0004) (Edit)
	float                                              LiftStrength;                                             // 0x021C(0x0004) (Edit)
	float                                              ForceRadius;                                              // 0x0220(0x0004) (Edit)
	float                                              ForceTopRadius;                                           // 0x0224(0x0004) (Edit)
	float                                              LiftFalloffHeight;                                        // 0x0228(0x0004) (Edit)
	float                                              EscapeVelocity;                                           // 0x022C(0x0004) (Edit)
	float                                              ForceHeight;                                              // 0x0230(0x0004) (Edit)
	float                                              HeightOffset;                                             // 0x0234(0x0004) (Edit)
	unsigned long                                      BSpecialRadialForceMode : 1;                              // 0x0238(0x0004) (Edit)
	float                                              SelfRotationStrength;                                     // 0x023C(0x0004) (Edit)
	struct FPointer                                    Kernel;                                                   // 0x0240(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxTornadoAngularForceField");
		return ptr;
	}

};


// Class Engine.NxTornadoAngularForceFieldCapsule
// 0x0004 (0x0248 - 0x0244)
class ANxTornadoAngularForceFieldCapsule : public ANxTornadoAngularForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                          // 0x0244(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxTornadoAngularForceFieldCapsule");
		return ptr;
	}

};


// Class Engine.NxTornadoForceField
// 0x002C (0x0240 - 0x0214)
class ANxTornadoForceField : public ANxForceField
{
public:
	float                                              RadialStrength;                                           // 0x0214(0x0004) (Edit)
	float                                              RotationalStrength;                                       // 0x0218(0x0004) (Edit)
	float                                              LiftStrength;                                             // 0x021C(0x0004) (Edit)
	float                                              ForceRadius;                                              // 0x0220(0x0004) (Edit)
	float                                              ForceTopRadius;                                           // 0x0224(0x0004) (Edit)
	float                                              LiftFalloffHeight;                                        // 0x0228(0x0004) (Edit)
	float                                              EscapeVelocity;                                           // 0x022C(0x0004) (Edit)
	float                                              ForceHeight;                                              // 0x0230(0x0004) (Edit)
	float                                              HeightOffset;                                             // 0x0234(0x0004) (Edit)
	unsigned long                                      BSpecialRadialForceMode : 1;                              // 0x0238(0x0004) (Edit)
	struct FPointer                                    Kernel;                                                   // 0x023C(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxTornadoForceField");
		return ptr;
	}

};


// Class Engine.NxTornadoForceFieldCapsule
// 0x0004 (0x0244 - 0x0240)
class ANxTornadoForceFieldCapsule : public ANxTornadoForceField
{
public:
	class UDrawCapsuleComponent*                       RenderComponent;                                          // 0x0240(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxTornadoForceFieldCapsule");
		return ptr;
	}

};


// Class Engine.NxForceFieldSpawnable
// 0x0004 (0x01D8 - 0x01D4)
class ANxForceFieldSpawnable : public AActor
{
public:
	class UNxForceFieldComponent*                      ForceFieldComponent;                                      // 0x01D4(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxForceFieldSpawnable");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* inAction);
};


// Class Engine.RB_CylindricalForceActor
// 0x0030 (0x0204 - 0x01D4)
class ARB_CylindricalForceActor : public ARigidBodyBase
{
public:
	class UDrawCylinderComponent*                      RenderComponent;                                          // 0x01D4(0x0004) (Edit, ExportObject, Component, EditInline)
	float                                              RadialStrength;                                           // 0x01D8(0x0004) (Edit)
	float                                              RotationalStrength;                                       // 0x01DC(0x0004) (Edit)
	float                                              LiftStrength;                                             // 0x01E0(0x0004) (Edit)
	float                                              LiftFalloffHeight;                                        // 0x01E4(0x0004) (Edit)
	float                                              EscapeVelocity;                                           // 0x01E8(0x0004) (Edit)
	float                                              ForceRadius;                                              // 0x01EC(0x0004) (Edit)
	float                                              ForceTopRadius;                                           // 0x01F0(0x0004) (Edit)
	float                                              ForceHeight;                                              // 0x01F4(0x0004) (Edit)
	float                                              HeightOffset;                                             // 0x01F8(0x0004) (Edit)
	unsigned long                                      bForceActive : 1;                                         // 0x01FC(0x0004) (Edit, Net)
	unsigned long                                      bForceApplyToCloth : 1;                                   // 0x01FC(0x0004) (Edit)
	unsigned long                                      bForceApplyToFluid : 1;                                   // 0x01FC(0x0004) (Edit)
	unsigned long                                      bForceApplyToRigidBodies : 1;                             // 0x01FC(0x0004) (Edit)
	unsigned long                                      bForceApplyToProjectiles : 1;                             // 0x01FC(0x0004) (Edit)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x0200(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_CylindricalForceActor");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* inAction);
};


// Class Engine.RB_RadialForceActor
// 0x0020 (0x01F4 - 0x01D4)
class ARB_RadialForceActor : public ARigidBodyBase
{
public:
	class UDrawSphereComponent*                        RenderComponent;                                          // 0x01D4(0x0004) (ExportObject, Component, EditInline)
	float                                              ForceStrength;                                            // 0x01D8(0x0004) (Edit)
	float                                              ForceRadius;                                              // 0x01DC(0x0004) (Edit)
	float                                              SwirlStrength;                                            // 0x01E0(0x0004) (Edit)
	float                                              SpinTorque;                                               // 0x01E4(0x0004) (Edit)
	TEnumAsByte<ERadialImpulseFalloff>                 ForceFalloff;                                             // 0x01E8(0x0001) (Edit, ExportObject, Component)
	TEnumAsByte<ERadialForceType>                      RadialForceMode;                                          // 0x01E9(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01EA(0x0002) MISSED OFFSET
	unsigned long                                      bForceActive : 1;                                         // 0x01EC(0x0004) (Edit, Net)
	unsigned long                                      bForceApplyToCloth : 1;                                   // 0x01EC(0x0004) (Edit)
	unsigned long                                      bForceApplyToFluid : 1;                                   // 0x01EC(0x0004) (Edit)
	unsigned long                                      bForceApplyToRigidBodies : 1;                             // 0x01EC(0x0004) (Edit)
	unsigned long                                      bForceApplyToProjectiles : 1;                             // 0x01EC(0x0004) (Edit)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x01F0(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_RadialForceActor");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* inAction);
};


// Class Engine.NxForceFieldComponent
// 0x0050 (0x0228 - 0x01D8)
class UNxForceFieldComponent : public UPrimitiveComponent
{
public:
	class UForceFieldShape*                            Shape;                                                    // 0x01D8(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UActorComponent*                             DrawComponent;                                            // 0x01DC(0x0004) (ExportObject, Component, EditInline)
	int                                                ExcludeChannel;                                           // 0x01E0(0x0004) (Edit)
	unsigned long                                      bForceActive : 1;                                         // 0x01E4(0x0004) (Edit)
	unsigned long                                      bDestroyWhenInactive : 1;                                 // 0x01E4(0x0004) (Edit)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x01E8(0x0004) (Edit, Const)
	float                                              Duration;                                                 // 0x01EC(0x0004) (Edit)
	struct FPointer                                    ForceField;                                               // 0x01F0(0x0004) (Const, Native, Transient)
	TArray<struct FPointer>                            ConvexMeshes;                                             // 0x01F4(0x000C) (Const, Native, Transient)
	TArray<struct FPointer>                            ExclusionShapes;                                          // 0x0200(0x000C) (Const, Native, Transient)
	TArray<struct FPointer>                            ExclusionShapePoses;                                      // 0x020C(0x000C) (Const, Native, Transient)
	int                                                SceneIndex;                                               // 0x0218(0x0004) (Const, Native)
	float                                              ElapsedTime;                                              // 0x021C(0x0004)
	class UPrimitiveComponent*                         RenderComponent;                                          // 0x0220(0x0004) (ExportObject, Component, EditInline)
	struct FPointer                                    RBPhysScene;                                              // 0x0224(0x0004) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxForceFieldComponent");
		return ptr;
	}


	void DoInitRBPhys();
};


// Class Engine.NxForceFieldCylindricalComponent
// 0x002C (0x0254 - 0x0228)
class UNxForceFieldCylindricalComponent : public UNxForceFieldComponent
{
public:
	float                                              RadialStrength;                                           // 0x0228(0x0004) (Edit)
	float                                              RotationalStrength;                                       // 0x022C(0x0004) (Edit)
	float                                              LiftStrength;                                             // 0x0230(0x0004) (Edit)
	float                                              ForceRadius;                                              // 0x0234(0x0004) (Edit)
	float                                              ForceTopRadius;                                           // 0x0238(0x0004) (Edit)
	float                                              LiftFalloffHeight;                                        // 0x023C(0x0004) (Edit)
	float                                              EscapeVelocity;                                           // 0x0240(0x0004) (Edit)
	float                                              ForceHeight;                                              // 0x0244(0x0004) (Edit)
	float                                              HeightOffset;                                             // 0x0248(0x0004) (Edit)
	unsigned long                                      UseSpecialRadialForce : 1;                                // 0x024C(0x0004) (Edit)
	struct FPointer                                    Kernel;                                                   // 0x0250(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxForceFieldCylindricalComponent");
		return ptr;
	}

};


// Class Engine.NxForceFieldGenericComponent
// 0x00A8 (0x02D0 - 0x0228)
class UNxForceFieldGenericComponent : public UNxForceFieldComponent
{
public:
	float                                              RoughExtentX;                                             // 0x0228(0x0004) (Edit)
	float                                              RoughExtentY;                                             // 0x022C(0x0004) (Edit)
	float                                              RoughExtentZ;                                             // 0x0230(0x0004) (Edit)
	TEnumAsByte<EFFG_ForceFieldCoordinates>            Coordinates;                                              // 0x0234(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0235(0x0003) MISSED OFFSET
	struct FVector                                     Constant;                                                 // 0x0238(0x000C) (Edit)
	struct FVector                                     PositionMultiplierX;                                      // 0x0244(0x000C) (Edit)
	struct FVector                                     PositionMultiplierY;                                      // 0x0250(0x000C) (Edit)
	struct FVector                                     PositionMultiplierZ;                                      // 0x025C(0x000C) (Edit)
	struct FVector                                     PositionTarget;                                           // 0x0268(0x000C) (Edit)
	struct FVector                                     VelocityMultiplierX;                                      // 0x0274(0x000C) (Edit)
	struct FVector                                     VelocityMultiplierY;                                      // 0x0280(0x000C) (Edit)
	struct FVector                                     VelocityMultiplierZ;                                      // 0x028C(0x000C) (Edit)
	struct FVector                                     VelocityTarget;                                           // 0x0298(0x000C) (Edit)
	struct FVector                                     Noise;                                                    // 0x02A4(0x000C) (Edit)
	struct FVector                                     FalloffLinear;                                            // 0x02B0(0x000C) (Edit)
	struct FVector                                     FalloffQuadratic;                                         // 0x02BC(0x000C) (Edit)
	float                                              TorusRadius;                                              // 0x02C8(0x0004) (Edit)
	struct FPointer                                    Kernel;                                                   // 0x02CC(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxForceFieldGenericComponent");
		return ptr;
	}

};


// Class Engine.NxForceFieldRadialComponent
// 0x0014 (0x023C - 0x0228)
class UNxForceFieldRadialComponent : public UNxForceFieldComponent
{
public:
	float                                              ForceStrength;                                            // 0x0228(0x0004) (Edit)
	float                                              ForceRadius;                                              // 0x022C(0x0004) (Edit)
	float                                              SelfRotationStrength;                                     // 0x0230(0x0004) (Edit)
	TEnumAsByte<ERadialImpulseFalloff>                 ForceFalloff;                                             // 0x0234(0x0001) (Edit, ExportObject, Component)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0235(0x0003) MISSED OFFSET
	struct FPointer                                    Kernel;                                                   // 0x0238(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxForceFieldRadialComponent");
		return ptr;
	}

};


// Class Engine.NxForceFieldTornadoComponent
// 0x0030 (0x0258 - 0x0228)
class UNxForceFieldTornadoComponent : public UNxForceFieldComponent
{
public:
	float                                              RadialStrength;                                           // 0x0228(0x0004) (Edit)
	float                                              RotationalStrength;                                       // 0x022C(0x0004) (Edit)
	float                                              LiftStrength;                                             // 0x0230(0x0004) (Edit)
	float                                              ForceRadius;                                              // 0x0234(0x0004) (Edit)
	float                                              ForceTopRadius;                                           // 0x0238(0x0004) (Edit)
	float                                              LiftFalloffHeight;                                        // 0x023C(0x0004) (Edit)
	float                                              EscapeVelocity;                                           // 0x0240(0x0004) (Edit)
	float                                              ForceHeight;                                              // 0x0244(0x0004) (Edit)
	float                                              HeightOffset;                                             // 0x0248(0x0004) (Edit)
	unsigned long                                      BSpecialRadialForceMode : 1;                              // 0x024C(0x0004) (Edit)
	float                                              SelfRotationStrength;                                     // 0x0250(0x0004) (Edit)
	struct FPointer                                    Kernel;                                                   // 0x0254(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NxForceFieldTornadoComponent");
		return ptr;
	}

};


// Class Engine.ForceFieldShape
// 0x0000 (0x003C - 0x003C)
class UForceFieldShape : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFieldShape");
		return ptr;
	}


	class UPrimitiveComponent* GetDrawComponent();
	void FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset);
	void FillByCapsule(float Height, float Radius);
	void FillByBox(const struct FVector& Dimension);
	void FillBySphere(float Radius);
};


// Class Engine.ForceFieldShapeBox
// 0x0004 (0x0040 - 0x003C)
class UForceFieldShapeBox : public UForceFieldShape
{
public:
	class UDrawBoxComponent*                           Shape;                                                    // 0x003C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFieldShapeBox");
		return ptr;
	}


	class UPrimitiveComponent* GetDrawComponent();
	void FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset);
	void FillByCapsule(float Height, float Radius);
	void FillByBox(const struct FVector& Extent);
	void FillBySphere(float Radius);
	struct FVector GetRadii();
};


// Class Engine.ForceFieldShapeCapsule
// 0x0004 (0x0040 - 0x003C)
class UForceFieldShapeCapsule : public UForceFieldShape
{
public:
	class UDrawCapsuleComponent*                       Shape;                                                    // 0x003C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFieldShapeCapsule");
		return ptr;
	}


	class UPrimitiveComponent* GetDrawComponent();
	void FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset);
	void FillByCapsule(float Height, float Radius);
	void FillByBox(const struct FVector& Extent);
	void FillBySphere(float Radius);
	float GetRadius();
	float GetHeight();
};


// Class Engine.ForceFieldShapeSphere
// 0x0004 (0x0040 - 0x003C)
class UForceFieldShapeSphere : public UForceFieldShape
{
public:
	class UDrawSphereComponent*                        Shape;                                                    // 0x003C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForceFieldShapeSphere");
		return ptr;
	}


	class UPrimitiveComponent* GetDrawComponent();
	void FillByCylinder(float BottomRadius, float TopRadius, float Height, float HeightOffset);
	void FillByCapsule(float Height, float Radius);
	void FillByBox(const struct FVector& Extent);
	void FillBySphere(float Radius);
	float GetRadius();
};


// Class Engine.PrefabInstance
// 0x00BC (0x0290 - 0x01D4)
class APrefabInstance : public AActor
{
public:
	class UPrefab*                                     TemplatePrefab;                                           // 0x01D4(0x0004) (Const)
	int                                                TemplateVersion;                                          // 0x01D8(0x0004) (Const)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x01DC(0x003C) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.ArchetypeToInstanceMap
	class UPrefabSequence*                             SequenceInstance;                                         // 0x0218(0x0004) (Const)
	int                                                PI_PackageVersion;                                        // 0x021C(0x0004) (Const)
	int                                                PI_LicenseePackageVersion;                                // 0x0220(0x0004) (Const)
	TArray<unsigned char>                              PI_Bytes;                                                 // 0x0224(0x000C) (Const, NeedCtorLink)
	TArray<class UObject*>                             PI_CompleteObjects;                                       // 0x0230(0x000C) (Const, NeedCtorLink)
	TArray<class UObject*>                             PI_ReferencedObjects;                                     // 0x023C(0x000C) (Const, NeedCtorLink)
	TArray<struct FString>                             PI_SavedNames;                                            // 0x0248(0x000C) (Const, NeedCtorLink)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x0254(0x003C) UNKNOWN PROPERTY: MapProperty Engine.PrefabInstance.PI_ObjectMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrefabInstance");
		return ptr;
	}

};


// Class Engine.Prefab
// 0x0024 (0x0060 - 0x003C)
class UPrefab : public UObject
{
public:
	int                                                PrefabVersion;                                            // 0x003C(0x0004) (Const)
	TArray<class UObject*>                             PrefabArchetypes;                                         // 0x0040(0x000C) (Const, NeedCtorLink)
	TArray<class UObject*>                             RemovedArchetypes;                                        // 0x004C(0x000C) (Const, NeedCtorLink)
	class UPrefabSequence*                             PrefabSequence;                                           // 0x0058(0x0004) (Const)
	class UTexture2D*                                  PrefabPreview;                                            // 0x005C(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Prefab");
		return ptr;
	}

};


// Class Engine.SequenceObject
// 0x0054 (0x0090 - 0x003C)
class USequenceObject : public UObject
{
public:
	int                                                ObjInstanceVersion;                                       // 0x003C(0x0004) (Const)
	class USequence*                                   ParentSequence;                                           // 0x0040(0x0004) (Const, NoImport)
	int                                                ObjPosX;                                                  // 0x0044(0x0004)
	int                                                ObjPosY;                                                  // 0x0048(0x0004)
	struct FString                                     ObjName;                                                  // 0x004C(0x000C) (NeedCtorLink)
	struct FString                                     ObjCategory;                                              // 0x0058(0x000C) (NeedCtorLink)
	TArray<struct FString>                             ObjRemoveInProject;                                       // 0x0064(0x000C) (NeedCtorLink)
	struct FColor                                      ObjColor;                                                 // 0x0070(0x0004)
	struct FString                                     ObjComment;                                               // 0x0074(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bDeletable : 1;                                           // 0x0080(0x0004)
	unsigned long                                      bDrawFirst : 1;                                           // 0x0080(0x0004)
	unsigned long                                      bDrawLast : 1;                                            // 0x0080(0x0004)
	unsigned long                                      bOutputObjCommentToScreen : 1;                            // 0x0080(0x0004) (Edit)
	unsigned long                                      bSuppressAutoComment : 1;                                 // 0x0080(0x0004) (Edit)
	int                                                DrawWidth;                                                // 0x0084(0x0004)
	int                                                DrawHeight;                                               // 0x0088(0x0004)
	class USequenceObject*                             PIESequenceObject;                                        // 0x008C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceObject");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	bool ShouldClearNameOnPasting();
	bool IsPastingIntoLevelSequenceAllowed();
	bool IsValidLevelSequenceObject();
	class AWorldInfo* GetWorldInfo();
	void ScriptLog(const struct FString& LogText, bool bWarning);
};


// Class Engine.SequenceFrame
// 0x0020 (0x00B0 - 0x0090)
class USequenceFrame : public USequenceObject
{
public:
	int                                                SizeX;                                                    // 0x0090(0x0004) (Edit)
	int                                                SizeY;                                                    // 0x0094(0x0004) (Edit)
	int                                                BorderWidth;                                              // 0x0098(0x0004) (Edit)
	unsigned long                                      bDrawBox : 1;                                             // 0x009C(0x0004) (Edit)
	unsigned long                                      bFilled : 1;                                              // 0x009C(0x0004) (Edit)
	unsigned long                                      bTileFill : 1;                                            // 0x009C(0x0004) (Edit)
	struct FColor                                      BorderColor;                                              // 0x00A0(0x0004) (Edit)
	struct FColor                                      FillColor;                                                // 0x00A4(0x0004) (Edit)
	class UTexture2D*                                  FillTexture;                                              // 0x00A8(0x0004) (Edit)
	class UMaterial*                                   FillMaterial;                                             // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceFrame");
		return ptr;
	}

};


// Class Engine.SequenceFrameWrapped
// 0x0000 (0x00B0 - 0x00B0)
class USequenceFrameWrapped : public USequenceFrame
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceFrameWrapped");
		return ptr;
	}

};


// Class Engine.SequenceOp
// 0x0054 (0x00E4 - 0x0090)
class USequenceOp : public USequenceObject
{
public:
	unsigned long                                      bIsActivated : 1;                                         // 0x0090(0x0004) (Transient, DuplicateTransient, NoImport)
	unsigned long                                      bIsCurrentDebuggerOp : 1;                                 // 0x0090(0x0004) (Transient, DuplicateTransient, NoImport)
	unsigned long                                      bActive : 1;                                              // 0x0090(0x0004)
	unsigned long                                      bLatentExecution : 1;                                     // 0x0090(0x0004) (Const)
	unsigned long                                      bAutoActivateOutputLinks : 1;                             // 0x0090(0x0004)
	unsigned long                                      bHaveMovingVarConnector : 1;                              // 0x0090(0x0004) (Transient)
	unsigned long                                      bHaveMovingInputConnector : 1;                            // 0x0090(0x0004) (Transient)
	unsigned long                                      bHaveMovingOutputConnector : 1;                           // 0x0090(0x0004) (Transient)
	unsigned long                                      bPendingVarConnectorRecalc : 1;                           // 0x0090(0x0004) (Transient)
	unsigned long                                      bPendingInputConnectorRecalc : 1;                         // 0x0090(0x0004) (Transient)
	unsigned long                                      bPendingOutputConnectorRecalc : 1;                        // 0x0090(0x0004) (Transient)
	unsigned long                                      bIsBreakpointSet : 1;                                     // 0x0090(0x0004)
	unsigned long                                      bIsHiddenBreakpointSet : 1;                               // 0x0090(0x0004) (Transient, DuplicateTransient, NoImport)
	float                                              PIEActivationTime;                                        // 0x0094(0x0004) (Transient)
	class USequenceOp*                                 ActivatorSeqOp;                                           // 0x0098(0x0004) (Transient)
	int                                                LastActivatedInputLink;                                   // 0x009C(0x0004) (Transient)
	int                                                LastActivatedOutputLink;                                  // 0x00A0(0x0004) (Transient)
	TArray<struct FSeqOpInputLink>                     InputLinks;                                               // 0x00A4(0x000C) (NeedCtorLink)
	TArray<struct FSeqOpOutputLink>                    OutputLinks;                                              // 0x00B0(0x000C) (NeedCtorLink)
	TArray<struct FSeqVarLink>                         VariableLinks;                                            // 0x00BC(0x000C) (NeedCtorLink)
	TArray<struct FSeqEventLink>                       EventLinks;                                               // 0x00C8(0x000C) (NeedCtorLink)
	int                                                PlayerIndex;                                              // 0x00D4(0x0004) (Transient, NoImport)
	unsigned char                                      GamepadID;                                                // 0x00D8(0x0001) (Transient, NoImport)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D9(0x0003) MISSED OFFSET
	int                                                ActivateCount;                                            // 0x00DC(0x0004) (Transient)
	int                                                SearchTag;                                                // 0x00E0(0x0004) (Const, Transient, DuplicateTransient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceOp");
		return ptr;
	}


	void ForceActivateOutput(int OutputIdx);
	void ForceActivateInput(int InputIdx);
	class AController* GetController(class AActor* TheActor);
	class APawn* GetPawn(class AActor* TheActor);
	void Reset();
	void PublishLinkedVariableValues();
	void PopulateLinkedVariableValues();
	void VersionUpdated(int OldVersion, int NewVersion);
	void Deactivated();
	void Activated();
	bool ActivateNamedOutputLink(const struct FString& LinkDesc);
	bool ActivateOutputLink(int OutputIdx);
	void LinkedVariables(class UClass* VarClass, const struct FString& inDesc, class USequenceVariable** OutVariable);
	void GetBoolVars(const struct FString& inDesc, TArray<unsigned char>* boolVars);
	void GetInterpDataVars(const struct FString& inDesc, TArray<class UInterpData*>* outIData);
	void GetObjectVars(const struct FString& inDesc, TArray<class UObject*>* objVars);
	void GetLinkedObjects(class UClass* ObjectType, bool bRecurse, TArray<class USequenceObject*>* out_Objects);
	bool HasLinkedOps(bool bConsiderInputLinks);
};


// Class Engine.Sequence
// 0x0068 (0x014C - 0x00E4)
class USequence : public USequenceOp
{
public:
	struct FPointer                                    LogFile;                                                  // 0x00E4(0x0004) (Const)
	TArray<class USequenceObject*>                     SequenceObjects;                                          // 0x00E8(0x000C) (Const, ExportObject, NeedCtorLink)
	TArray<class USequenceOp*>                         ActiveSequenceOps;                                        // 0x00F4(0x000C) (Const, NeedCtorLink)
	TArray<class USequence*>                           NestedSequences;                                          // 0x0100(0x000C) (Const, Transient, NeedCtorLink)
	TArray<class USequenceEvent*>                      UnregisteredEvents;                                       // 0x010C(0x000C) (Const, NeedCtorLink)
	TArray<struct FActivateOp>                         DelayedActivatedOps;                                      // 0x0118(0x000C) (Const, NeedCtorLink)
	TArray<class USequenceOp*>                         DelayedLatentOps;                                         // 0x0124(0x000C) (Const, NeedCtorLink)
	unsigned long                                      bEnabled : 1;                                             // 0x0130(0x0004) (Edit)
	TArray<struct FQueuedActivationInfo>               QueuedActivations;                                        // 0x0134(0x000C) (NeedCtorLink)
	int                                                DefaultViewX;                                             // 0x0140(0x0004)
	int                                                DefaultViewY;                                             // 0x0144(0x0004)
	float                                              DefaultViewZoom;                                          // 0x0148(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Sequence");
		return ptr;
	}


	void SetEnabled(bool bInEnabled);
	void Reset();
	void FindSeqObjectsByName(const struct FString& SeqObjName, bool bCheckComment, bool bRecursive, bool bUseFullLevelName, TArray<class USequenceObject*>* OutputObjects);
	void FindSeqObjectsByClass(class UClass* DesiredClass, bool bRecursive, TArray<class USequenceObject*>* OutputObjects);
};


// Class Engine.PrefabSequence
// 0x0004 (0x0150 - 0x014C)
class UPrefabSequence : public USequence
{
public:
	class APrefabInstance*                             OwnerPrefab;                                              // 0x014C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrefabSequence");
		return ptr;
	}


	class APrefabInstance* GetOwnerPrefab();
	void SetOwnerPrefab(class APrefabInstance* InOwner);
};


// Class Engine.PrefabSequenceContainer
// 0x0000 (0x014C - 0x014C)
class UPrefabSequenceContainer : public USequence
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrefabSequenceContainer");
		return ptr;
	}

};


// Class Engine.SequenceAction
// 0x0018 (0x00FC - 0x00E4)
class USequenceAction : public USequenceOp
{
public:
	struct FName                                       HandlerName;                                              // 0x00E4(0x0008)
	unsigned long                                      bCallHandler : 1;                                         // 0x00EC(0x0004)
	TArray<class UObject*>                             Targets;                                                  // 0x00F0(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceAction");
		return ptr;
	}

};


// Class Engine.SeqAct_ActivateRemoteEvent
// 0x0010 (0x010C - 0x00FC)
class USeqAct_ActivateRemoteEvent : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                               // 0x00FC(0x0004) (Edit)
	struct FName                                       EventName;                                                // 0x0100(0x0008) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0108(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ActivateRemoteEvent");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_AndGate
// 0x001C (0x0118 - 0x00FC)
class USeqAct_AndGate : public USequenceAction
{
public:
	unsigned long                                      bOpen : 1;                                                // 0x00FC(0x0004) (Transient)
	TArray<unsigned long>                              LinkedOutputFiredStatus;                                  // 0x0100(0x000C) (Transient, NeedCtorLink)
	TArray<struct FPointer>                            LinkedOutputs;                                            // 0x010C(0x000C) (Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AndGate");
		return ptr;
	}

};


// Class Engine.SeqAct_ApplySoundNode
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_ApplySoundNode : public USequenceAction
{
public:
	class USoundCue*                                   PlaySound;                                                // 0x00FC(0x0004) (Edit)
	class USoundNode*                                  ApplyNode;                                                // 0x0100(0x0004) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ApplySoundNode");
		return ptr;
	}

};


// Class Engine.SeqAct_AttachToEvent
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_AttachToEvent : public USequenceAction
{
public:
	unsigned long                                      bPreferController : 1;                                    // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AttachToEvent");
		return ptr;
	}

};


// Class Engine.SeqAct_CameraFade
// 0x0028 (0x0124 - 0x00FC)
class USeqAct_CameraFade : public USequenceAction
{
public:
	struct FColor                                      FadeColor;                                                // 0x00FC(0x0004) (Edit)
	struct FVector2D                                   FadeAlpha;                                                // 0x0100(0x0008) (Deprecated)
	float                                              FadeOpacity;                                              // 0x0108(0x0004) (Edit)
	float                                              FadeTime;                                                 // 0x010C(0x0004) (Edit)
	unsigned long                                      bPersistFade : 1;                                         // 0x0110(0x0004) (Edit)
	unsigned long                                      bFadeAudio : 1;                                           // 0x0110(0x0004) (Edit)
	float                                              FadeTimeRemaining;                                        // 0x0114(0x0004)
	TArray<class APlayerController*>                   CachedPCs;                                                // 0x0118(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CameraFade");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_CameraLookAt
// 0x0034 (0x0130 - 0x00FC)
class USeqAct_CameraLookAt : public USequenceAction
{
public:
	unsigned long                                      bAffectCamera : 1;                                        // 0x00FC(0x0004) (Edit)
	unsigned long                                      bAlwaysFocus : 1;                                         // 0x00FC(0x0004) (Edit)
	unsigned long                                      bAdjustCamera : 1;                                        // 0x00FC(0x0004) (Deprecated)
	unsigned long                                      bTurnInPlace : 1;                                         // 0x00FC(0x0004) (Edit)
	unsigned long                                      bIgnoreTrace : 1;                                         // 0x00FC(0x0004) (Edit)
	unsigned long                                      bAffectHead : 1;                                          // 0x00FC(0x0004) (Edit)
	unsigned long                                      bRotatePlayerWithCamera : 1;                              // 0x00FC(0x0004) (Edit)
	unsigned long                                      bToggleGodMode : 1;                                       // 0x00FC(0x0004) (Edit)
	unsigned long                                      bLeaveCameraRotation : 1;                                 // 0x00FC(0x0004) (Edit)
	unsigned long                                      bDisableInput : 1;                                        // 0x00FC(0x0004) (Edit)
	unsigned long                                      bUsedTimer : 1;                                           // 0x00FC(0x0004)
	unsigned long                                      bCheckLineOfSight : 1;                                    // 0x00FC(0x0004) (Edit)
	struct FVector2D                                   InterpSpeedRange;                                         // 0x0100(0x0008) (Edit)
	struct FVector2D                                   InFocusFOV;                                               // 0x0108(0x0008) (Edit)
	struct FName                                       FocusBoneName;                                            // 0x0110(0x0008) (Edit)
	struct FString                                     TextDisplay;                                              // 0x0118(0x000C) (Edit, NeedCtorLink)
	float                                              TotalTime;                                                // 0x0124(0x0004) (Edit)
	float                                              CameraFOV;                                                // 0x0128(0x0004) (Edit)
	float                                              RemainingTime;                                            // 0x012C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CameraLookAt");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_CameraShake
// 0x0020 (0x011C - 0x00FC)
class USeqAct_CameraShake : public USequenceAction
{
public:
	class UCameraShake*                                Shake;                                                    // 0x00FC(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	float                                              ShakeScale;                                               // 0x0100(0x0004) (Edit)
	unsigned long                                      bDoControllerVibration : 1;                               // 0x0104(0x0004) (Edit)
	unsigned long                                      bRadialShake : 1;                                         // 0x0104(0x0004) (Edit)
	unsigned long                                      bOrientTowardRadialEpicenter : 1;                         // 0x0104(0x0004) (Edit)
	float                                              RadialShake_InnerRadius;                                  // 0x0108(0x0004) (Edit)
	float                                              RadialShake_OuterRadius;                                  // 0x010C(0x0004) (Edit)
	float                                              RadialShake_Falloff;                                      // 0x0110(0x0004) (Edit)
	TEnumAsByte<ECameraAnimPlaySpace>                  PlaySpace;                                                // 0x0114(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0115(0x0003) MISSED OFFSET
	class AActor*                                      LocationActor;                                            // 0x0118(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CameraShake");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_ChangeCollision
// 0x0005 (0x0101 - 0x00FC)
class USeqAct_ChangeCollision : public USequenceAction
{
public:
	unsigned long                                      bCollideActors : 1;                                       // 0x00FC(0x0004) (Edit, Const, EditConst)
	unsigned long                                      bBlockActors : 1;                                         // 0x00FC(0x0004) (Edit, Const, EditConst)
	unsigned long                                      bIgnoreEncroachers : 1;                                   // 0x00FC(0x0004) (Edit, Const, EditConst)
	TEnumAsByte<ECollisionType>                        CollisionType;                                            // 0x0100(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ChangeCollision");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_CommitMapChange
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_CommitMapChange : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CommitMapChange");
		return ptr;
	}

};


// Class Engine.SeqAct_ConvertToString
// 0x0014 (0x0110 - 0x00FC)
class USeqAct_ConvertToString : public USequenceAction
{
public:
	unsigned long                                      bIncludeVarComment : 1;                                   // 0x00FC(0x0004) (Edit)
	struct FString                                     VarSeparator;                                             // 0x0100(0x000C) (Edit, NeedCtorLink)
	int                                                NumberOfInputs;                                           // 0x010C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ConvertToString");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_DrawText
// 0x003C (0x0138 - 0x00FC)
class USeqAct_DrawText : public USequenceAction
{
public:
	float                                              DisplayTimeSeconds;                                       // 0x00FC(0x0004) (Edit)
	unsigned long                                      bDisplayOnObject : 1;                                     // 0x0100(0x0004) (Edit)
	struct FKismetDrawTextInfo                         DrawTextInfo;                                             // 0x0104(0x0034) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_DrawText");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_FinishSequence
// 0x000C (0x0108 - 0x00FC)
class USeqAct_FinishSequence : public USequenceAction
{
public:
	struct FString                                     OutputLabel;                                              // 0x00FC(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_FinishSequence");
		return ptr;
	}

};


// Class Engine.SeqAct_Gate
// 0x000C (0x0108 - 0x00FC)
class USeqAct_Gate : public USequenceAction
{
public:
	unsigned long                                      bOpen : 1;                                                // 0x00FC(0x0004) (Edit)
	int                                                AutoCloseCount;                                           // 0x0100(0x0004) (Edit)
	int                                                CurrentCloseCount;                                        // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Gate");
		return ptr;
	}

};


// Class Engine.SeqAct_GetDistance
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_GetDistance : public USequenceAction
{
public:
	float                                              Distance;                                                 // 0x00FC(0x0004) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GetDistance");
		return ptr;
	}

};


// Class Engine.SeqAct_GetLocationAndRotation
// 0x002C (0x0128 - 0x00FC)
class USeqAct_GetLocationAndRotation : public USequenceAction
{
public:
	struct FVector                                     Location;                                                 // 0x00FC(0x000C) (Edit, EditConst)
	struct FVector                                     RotationVector;                                           // 0x0108(0x000C) (Edit, EditConst)
	struct FVector                                     Rotation;                                                 // 0x0114(0x000C) (Edit, EditConst)
	struct FName                                       SocketOrBoneName;                                         // 0x0120(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GetLocationAndRotation");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_GetProperty
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_GetProperty : public USequenceAction
{
public:
	struct FName                                       PropertyName;                                             // 0x00FC(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GetProperty");
		return ptr;
	}

};


// Class Engine.SeqAct_GetVectorComponents
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_GetVectorComponents : public USequenceAction
{
public:
	struct FVector                                     InVector;                                                 // 0x00FC(0x000C)
	float                                              X;                                                        // 0x0108(0x0004)
	float                                              Y;                                                        // 0x010C(0x0004)
	float                                              Z;                                                        // 0x0110(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GetVectorComponents");
		return ptr;
	}

};


// Class Engine.SeqAct_GetVelocity
// 0x0010 (0x010C - 0x00FC)
class USeqAct_GetVelocity : public USequenceAction
{
public:
	float                                              VelocityMag;                                              // 0x00FC(0x0004) (Edit, EditConst)
	struct FVector                                     VelocityVect;                                             // 0x0100(0x000C) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GetVelocity");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_HeadTrackingControl
// 0x0080 (0x017C - 0x00FC)
class USeqAct_HeadTrackingControl : public USequenceAction
{
public:
	TArray<struct FName>                               TrackControllerName;                                      // 0x00FC(0x000C) (Edit, NeedCtorLink)
	float                                              LookAtActorRadius;                                        // 0x0108(0x0004) (Edit)
	unsigned long                                      bDisableBeyondLimit : 1;                                  // 0x010C(0x0004) (Edit)
	unsigned long                                      bLookAtPawns : 1;                                         // 0x010C(0x0004) (Edit)
	float                                              MaxLookAtTime;                                            // 0x0110(0x0004) (Edit)
	float                                              MinLookAtTime;                                            // 0x0114(0x0004) (Edit)
	float                                              MaxInterestTime;                                          // 0x0118(0x0004) (Edit)
	TArray<class UClass*>                              ActorClassesToLookAt;                                     // 0x011C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               TargetBoneNames;                                          // 0x0128(0x000C) (Edit, NeedCtorLink)
	TArray<class UObject*>                             LookAtTargets;                                            // 0x0134(0x000C) (Edit, NeedCtorLink)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0140(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_HeadTrackingControl.ActorToComponentMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_HeadTrackingControl");
		return ptr;
	}


	void Activated();
	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_IsInObjectList
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_IsInObjectList : public USequenceAction
{
public:
	unsigned long                                      bCheckForAllObjects : 1;                                  // 0x00FC(0x0004) (Edit)
	unsigned long                                      bObjectFound : 1;                                         // 0x00FC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_IsInObjectList");
		return ptr;
	}

};


// Class Engine.SeqAct_Latent
// 0x0014 (0x0110 - 0x00FC)
class USeqAct_Latent : public USequenceAction
{
public:
	TArray<class AActor*>                              LatentActors;                                             // 0x00FC(0x000C) (NeedCtorLink)
	unsigned long                                      bAborted : 1;                                             // 0x0108(0x0004)
	float                                              LatentActivationTime;                                     // 0x010C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Latent");
		return ptr;
	}


	bool Update(float DeltaTime);
	void AbortFor(class AActor* latentActor);
};


// Class Engine.SeqAct_ActorFactory
// 0x0048 (0x0158 - 0x0110)
class USeqAct_ActorFactory : public USeqAct_Latent
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0110(0x0004) (Edit)
	unsigned long                                      bIsSpawning : 1;                                          // 0x0110(0x0004)
	unsigned long                                      bCheckSpawnCollision : 1;                                 // 0x0110(0x0004) (Edit)
	class UActorFactory*                               Factory;                                                  // 0x0114(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	TEnumAsByte<EPointSelection>                       PointSelection;                                           // 0x0118(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	TArray<class AActor*>                              SpawnPoints;                                              // 0x011C(0x000C) (Edit, NeedCtorLink)
	TArray<struct FVector>                             SpawnLocations;                                           // 0x0128(0x000C) (Edit, NeedCtorLink)
	TArray<struct FVector>                             SpawnOrientations;                                        // 0x0134(0x000C) (Edit, NeedCtorLink)
	int                                                SpawnCount;                                               // 0x0140(0x0004) (Edit)
	float                                              SpawnDelay;                                               // 0x0144(0x0004) (Edit)
	int                                                LastSpawnIdx;                                             // 0x0148(0x0004)
	int                                                CurrentSpawnIdx;                                          // 0x014C(0x0004)
	int                                                SpawnedCount;                                             // 0x0150(0x0004)
	float                                              RemainingDelay;                                           // 0x0154(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ActorFactory");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_ActorFactoryEx
// 0x0000 (0x0158 - 0x0158)
class USeqAct_ActorFactoryEx : public USeqAct_ActorFactory
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ActorFactoryEx");
		return ptr;
	}

};


// Class Engine.SeqAct_ProjectileFactory
// 0x0014 (0x016C - 0x0158)
class USeqAct_ProjectileFactory : public USeqAct_ActorFactory
{
public:
	class UParticleSystem*                             PSTemplate;                                               // 0x0158(0x0004) (Edit)
	struct FName                                       SocketName;                                               // 0x015C(0x0008) (Edit)
	struct FName                                       BoneName;                                                 // 0x0164(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ProjectileFactory");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_AIMoveToActor
// 0x001C (0x012C - 0x0110)
class USeqAct_AIMoveToActor : public USeqAct_Latent
{
public:
	unsigned long                                      bInterruptable : 1;                                       // 0x0110(0x0004) (Edit)
	unsigned long                                      bPickClosest : 1;                                         // 0x0110(0x0004) (Edit)
	TArray<class AActor*>                              Destination;                                              // 0x0114(0x000C) (Edit, NeedCtorLink)
	float                                              MovementSpeedModifier;                                    // 0x0120(0x0004) (Edit)
	class AActor*                                      LookAt;                                                   // 0x0124(0x0004) (Edit)
	int                                                LastDestinationChoice;                                    // 0x0128(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AIMoveToActor");
		return ptr;
	}


	class AActor* PickDestination(class AActor* Requestor);
	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_Delay
// 0x0014 (0x0124 - 0x0110)
class USeqAct_Delay : public USeqAct_Latent
{
public:
	unsigned long                                      bDelayActive : 1;                                         // 0x0110(0x0004) (Const)
	unsigned long                                      bStartWillRestart : 1;                                    // 0x0110(0x0004) (Edit)
	float                                              DefaultDuration;                                          // 0x0114(0x0004) (Const)
	float                                              Duration;                                                 // 0x0118(0x0004) (Edit)
	float                                              LastUpdateTime;                                           // 0x011C(0x0004) (Const)
	float                                              RemainingTime;                                            // 0x0120(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Delay");
		return ptr;
	}


	void ResetDelayActive();
	void Reset();
};


// Class Engine.SeqAct_DelaySwitch
// 0x0010 (0x0120 - 0x0110)
class USeqAct_DelaySwitch : public USeqAct_Latent
{
public:
	int                                                LinkCount;                                                // 0x0110(0x0004) (Edit)
	int                                                CurrentIdx;                                               // 0x0114(0x0004) (Transient)
	float                                              SwitchDelay;                                              // 0x0118(0x0004) (Transient)
	float                                              NextLinkTime;                                             // 0x011C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_DelaySwitch");
		return ptr;
	}

};


// Class Engine.SeqAct_ForceGarbageCollection
// 0x0000 (0x0110 - 0x0110)
class USeqAct_ForceGarbageCollection : public USeqAct_Latent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ForceGarbageCollection");
		return ptr;
	}

};


// Class Engine.SeqAct_Interp
// 0x00CC (0x01DC - 0x0110)
class USeqAct_Interp : public USeqAct_Latent
{
public:
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0110(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_Interp.SavedActorTransforms
	unsigned char                                      UnknownData01[0x3C];                                      // 0x014C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SeqAct_Interp.SavedActorVisibilities
	float                                              PlayRate;                                                 // 0x0188(0x0004) (Edit)
	float                                              Position;                                                 // 0x018C(0x0004)
	float                                              ForceStartPosition;                                       // 0x0190(0x0004) (Edit)
	unsigned long                                      bIsPlaying : 1;                                           // 0x0194(0x0004)
	unsigned long                                      bPaused : 1;                                              // 0x0194(0x0004)
	unsigned long                                      bIsBeingEdited : 1;                                       // 0x0194(0x0004) (Transient)
	unsigned long                                      bLooping : 1;                                             // 0x0194(0x0004) (Edit)
	unsigned long                                      bRewindOnPlay : 1;                                        // 0x0194(0x0004) (Edit)
	unsigned long                                      bNoResetOnRewind : 1;                                     // 0x0194(0x0004) (Edit)
	unsigned long                                      bRewindIfAlreadyPlaying : 1;                              // 0x0194(0x0004) (Edit)
	unsigned long                                      bReversePlayback : 1;                                     // 0x0194(0x0004)
	unsigned long                                      bInterpForPathBuilding : 1;                               // 0x0194(0x0004) (Edit)
	unsigned long                                      bForceStartPos : 1;                                       // 0x0194(0x0004) (Edit)
	unsigned long                                      bDisableRadioFilter : 1;                                  // 0x0194(0x0004) (Edit)
	unsigned long                                      bClientSideOnly : 1;                                      // 0x0194(0x0004) (Edit)
	unsigned long                                      bSkipUpdateIfNotVisible : 1;                              // 0x0194(0x0004) (Edit)
	unsigned long                                      bIsSkippable : 1;                                         // 0x0194(0x0004) (Edit)
	unsigned long                                      bShouldShowGore : 1;                                      // 0x0194(0x0004) (Transient)
	TArray<class ACoverLink*>                          LinkedCover;                                              // 0x0198(0x000C) (Edit, NeedCtorLink)
	class UInterpData*                                 InterpData;                                               // 0x01A4(0x0004) (ExportObject)
	TArray<class UInterpGroupInst*>                    GroupInst;                                                // 0x01A8(0x000C) (NeedCtorLink)
	class UClass*                                      ReplicatedActorClass;                                     // 0x01B4(0x0004) (Const)
	class AMatineeActor*                               ReplicatedActor;                                          // 0x01B8(0x0004) (Const, Transient)
	int                                                PreferredSplitScreenNum;                                  // 0x01BC(0x0004) (Edit)
	TArray<struct FCameraCutInfo>                      CameraCuts;                                               // 0x01C0(0x000C) (Transient, NeedCtorLink)
	float                                              TerminationTime;                                          // 0x01CC(0x0004)
	struct FRenderingPerformanceOverrides              RenderingOverrides;                                       // 0x01D0(0x0004) (Edit, Config, GlobalConfig)
	unsigned char                                      ConstantCameraAnim;                                       // 0x01D4(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x01D5(0x0003) MISSED OFFSET
	float                                              ConstantCameraAnimRate;                                   // 0x01D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Interp");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	void Reset();
	void AddPlayerToDirectorTracks(class APlayerController* PC);
	void Stop();
	void SetPosition(float NewPosition, bool bJump);
};


// Class Engine.SeqAct_LevelStreamingBase
// 0x0004 (0x0114 - 0x0110)
class USeqAct_LevelStreamingBase : public USeqAct_Latent
{
public:
	unsigned long                                      bMakeVisibleAfterLoad : 1;                                // 0x0110(0x0004) (Edit)
	unsigned long                                      bShouldBlockOnLoad : 1;                                   // 0x0110(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_LevelStreamingBase");
		return ptr;
	}

};


// Class Engine.SeqAct_LevelStreaming
// 0x0010 (0x0124 - 0x0114)
class USeqAct_LevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	class ULevelStreaming*                             Level;                                                    // 0x0114(0x0004) (Const)
	struct FName                                       LevelName;                                                // 0x0118(0x0008) (Edit, Const)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0120(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_LevelStreaming");
		return ptr;
	}

};


// Class Engine.SeqAct_MultiLevelStreaming
// 0x0010 (0x0124 - 0x0114)
class USeqAct_MultiLevelStreaming : public USeqAct_LevelStreamingBase
{
public:
	TArray<struct FLevelStreamingNameCombo>            Levels;                                                   // 0x0114(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bUnloadAllOtherLevels : 1;                                // 0x0120(0x0004) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0120(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_MultiLevelStreaming");
		return ptr;
	}

};


// Class Engine.SeqAct_LevelVisibility
// 0x0010 (0x0120 - 0x0110)
class USeqAct_LevelVisibility : public USeqAct_Latent
{
public:
	class ULevelStreaming*                             Level;                                                    // 0x0110(0x0004) (Edit)
	struct FName                                       LevelName;                                                // 0x0114(0x0008) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x011C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_LevelVisibility");
		return ptr;
	}

};


// Class Engine.SeqAct_PlaySound
// 0x0024 (0x0134 - 0x0110)
class USeqAct_PlaySound : public USeqAct_Latent
{
public:
	class USoundCue*                                   PlaySound;                                                // 0x0110(0x0004) (Edit)
	float                                              ExtraDelay;                                               // 0x0114(0x0004) (Edit)
	unsigned long                                      bDelayReached : 1;                                        // 0x0118(0x0004) (Transient)
	unsigned long                                      bSuppressSubtitles : 1;                                   // 0x0118(0x0004) (Edit)
	unsigned long                                      bStopped : 1;                                             // 0x0118(0x0004) (Transient)
	float                                              SoundDuration;                                            // 0x011C(0x0004) (Transient)
	float                                              FadeInTime;                                               // 0x0120(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x0124(0x0004) (Edit)
	float                                              VolumeMultiplier;                                         // 0x0128(0x0004) (Edit)
	float                                              PitchMultiplier;                                          // 0x012C(0x0004) (Edit)
	float                                              BeforeEndTime;                                            // 0x0130(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PlaySound");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_PrepareMapChange
// 0x0018 (0x0128 - 0x0110)
class USeqAct_PrepareMapChange : public USeqAct_Latent
{
public:
	struct FName                                       MainLevelName;                                            // 0x0110(0x0008) (Edit)
	TArray<struct FName>                               InitiallyLoadedSecondaryLevelNames;                       // 0x0118(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bIsHighPriority : 1;                                      // 0x0124(0x0004) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x0124(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PrepareMapChange");
		return ptr;
	}

};


// Class Engine.SeqAct_SetDOFParams
// 0x0058 (0x0168 - 0x0110)
class USeqAct_SetDOFParams : public USeqAct_Latent
{
public:
	float                                              FalloffExponent;                                          // 0x0110(0x0004) (Edit)
	float                                              BlurKernelSize;                                           // 0x0114(0x0004) (Edit)
	float                                              MaxNearBlurAmount;                                        // 0x0118(0x0004) (Edit)
	float                                              MinBlurAmount;                                            // 0x011C(0x0004) (Edit)
	float                                              MaxFarBlurAmount;                                         // 0x0120(0x0004) (Edit)
	float                                              FocusInnerRadius;                                         // 0x0124(0x0004) (Edit)
	float                                              FocusDistance;                                            // 0x0128(0x0004) (Edit)
	struct FVector                                     FocusPosition;                                            // 0x012C(0x000C) (Edit)
	float                                              InterpolateSeconds;                                       // 0x0138(0x0004) (Edit)
	float                                              InterpolateElapsed;                                       // 0x013C(0x0004)
	float                                              OldFalloffExponent;                                       // 0x0140(0x0004)
	float                                              OldBlurKernelSize;                                        // 0x0144(0x0004)
	float                                              OldMaxNearBlurAmount;                                     // 0x0148(0x0004)
	float                                              OldMinBlurAmount;                                         // 0x014C(0x0004)
	float                                              OldMaxFarBlurAmount;                                      // 0x0150(0x0004)
	float                                              OldFocusInnerRadius;                                      // 0x0154(0x0004)
	float                                              OldFocusDistance;                                         // 0x0158(0x0004)
	struct FVector                                     OldFocusPosition;                                         // 0x015C(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetDOFParams");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMotionBlurParams
// 0x0010 (0x0120 - 0x0110)
class USeqAct_SetMotionBlurParams : public USeqAct_Latent
{
public:
	float                                              MotionBlurAmount;                                         // 0x0110(0x0004) (Edit)
	float                                              InterpolateSeconds;                                       // 0x0114(0x0004) (Edit)
	float                                              InterpolateElapsed;                                       // 0x0118(0x0004)
	float                                              OldMotionBlurAmount;                                      // 0x011C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMotionBlurParams");
		return ptr;
	}

};


// Class Engine.SeqAct_StreamInTextures
// 0x0034 (0x0144 - 0x0110)
class USeqAct_StreamInTextures : public USeqAct_Latent
{
public:
	unsigned long                                      bLocationBased : 1;                                       // 0x0110(0x0004) (Deprecated)
	unsigned long                                      bStreamingActive : 1;                                     // 0x0110(0x0004) (Const)
	unsigned long                                      bHasTriggeredAllLoaded : 1;                               // 0x0110(0x0004) (Const)
	float                                              Seconds;                                                  // 0x0114(0x0004) (Edit)
	float                                              StreamingDistanceMultiplier;                              // 0x0118(0x0004) (Edit)
	int                                                NumWantingResourcesID;                                    // 0x011C(0x0004) (Const)
	float                                              StopTimestamp;                                            // 0x0120(0x0004) (Const)
	TArray<class UObject*>                             LocationActors;                                           // 0x0124(0x000C) (Edit, NeedCtorLink)
	TArray<class UMaterialInterface*>                  ForceMaterials;                                           // 0x0130(0x000C) (Edit, NeedCtorLink)
	struct FTextureGroupContainer                      CinematicTextureGroups;                                   // 0x013C(0x0004) (Edit, Const)
	int                                                SelectedCinematicTextureGroups;                           // 0x0140(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_StreamInTextures");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_WaitForLevelsVisible
// 0x0010 (0x0120 - 0x0110)
class USeqAct_WaitForLevelsVisible : public USeqAct_Latent
{
public:
	TArray<struct FName>                               LevelNames;                                               // 0x0110(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bShouldBlockOnLoad : 1;                                   // 0x011C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_WaitForLevelsVisible");
		return ptr;
	}


	void Activated();
	bool CheckLevelsVisible();
};


// Class Engine.SeqAct_Log
// 0x0020 (0x011C - 0x00FC)
class USeqAct_Log : public USequenceAction
{
public:
	unsigned long                                      bOutputToScreen : 1;                                      // 0x00FC(0x0004) (Edit)
	unsigned long                                      bIncludeObjComment : 1;                                   // 0x00FC(0x0004) (Edit)
	float                                              TargetDuration;                                           // 0x0100(0x0004) (Edit)
	struct FVector                                     TargetOffset;                                             // 0x0104(0x000C) (Edit)
	struct FString                                     LogMessage;                                               // 0x0110(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Log");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_FeatureTest
// 0x0020 (0x013C - 0x011C)
class USeqAct_FeatureTest : public USeqAct_Log
{
public:
	struct FString                                     FreezeAtParameters;                                       // 0x011C(0x000C) (Edit, NeedCtorLink)
	float                                              ScreenShotDelay;                                          // 0x0128(0x0004) (Edit)
	struct FString                                     ScreenShotName;                                           // 0x012C(0x000C) (Edit, NeedCtorLink)
	float                                              RemainingScreenShotDelay;                                 // 0x0138(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_FeatureTest");
		return ptr;
	}

};


// Class Engine.SeqAct_ModifyCover
// 0x0014 (0x0110 - 0x00FC)
class USeqAct_ModifyCover : public USequenceAction
{
public:
	TArray<int>                                        Slots;                                                    // 0x00FC(0x000C) (Edit, NeedCtorLink)
	TEnumAsByte<ECoverType>                            ManualCoverType;                                          // 0x0108(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0109(0x0003) MISSED OFFSET
	unsigned long                                      bManualAdjustPlayersOnly : 1;                             // 0x010C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ModifyCover");
		return ptr;
	}

};


// Class Engine.SeqAct_ModifyHealth
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_ModifyHealth : public USequenceAction
{
public:
	class UClass*                                      DamageType;                                               // 0x00FC(0x0004) (Edit)
	float                                              Momentum;                                                 // 0x0100(0x0004) (Edit)
	float                                              Amount;                                                   // 0x0104(0x0004) (Edit)
	float                                              Radius;                                                   // 0x0108(0x0004) (Edit)
	unsigned long                                      bHeal : 1;                                                // 0x010C(0x0004) (Edit)
	unsigned long                                      bRadial : 1;                                              // 0x010C(0x0004) (Edit)
	unsigned long                                      bFalloff : 1;                                             // 0x010C(0x0004) (Edit)
	class AActor*                                      Instigator;                                               // 0x0110(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ModifyHealth");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_ParticleEventGenerator
// 0x0048 (0x0144 - 0x00FC)
class USeqAct_ParticleEventGenerator : public USequenceAction
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x00FC(0x0004) (Edit)
	unsigned long                                      bUseEmitterLocation : 1;                                  // 0x00FC(0x0004) (Edit)
	class AActor*                                      Instigator;                                               // 0x0100(0x0004)
	TArray<struct FString>                             EventNames;                                               // 0x0104(0x000C) (NeedCtorLink)
	float                                              EventTime;                                                // 0x0110(0x0004)
	struct FVector                                     EventLocation;                                            // 0x0114(0x000C)
	struct FVector                                     EventDirection;                                           // 0x0120(0x000C)
	struct FVector                                     EventVelocity;                                            // 0x012C(0x000C)
	struct FVector                                     EventNormal;                                              // 0x0138(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ParticleEventGenerator");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_PhysXSwitch
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_PhysXSwitch : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PhysXSwitch");
		return ptr;
	}

};


// Class Engine.SeqAct_PlayCameraAnim
// 0x0020 (0x011C - 0x00FC)
class USeqAct_PlayCameraAnim : public USequenceAction
{
public:
	class UCameraAnim*                                 CameraAnim;                                               // 0x00FC(0x0004) (Edit)
	unsigned long                                      bLoop : 1;                                                // 0x0100(0x0004) (Edit)
	unsigned long                                      bRandomStartTime : 1;                                     // 0x0100(0x0004) (Edit)
	float                                              BlendInTime;                                              // 0x0104(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x0108(0x0004) (Edit)
	float                                              Rate;                                                     // 0x010C(0x0004) (Edit)
	float                                              IntensityScale;                                           // 0x0110(0x0004) (Edit)
	TEnumAsByte<ECameraAnimPlaySpace>                  PlaySpace;                                                // 0x0114(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0115(0x0003) MISSED OFFSET
	class AActor*                                      UserDefinedSpaceActor;                                    // 0x0118(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PlayCameraAnim");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_PlayFaceFXAnim
// 0x0020 (0x011C - 0x00FC)
class USeqAct_PlayFaceFXAnim : public USequenceAction
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                         // 0x00FC(0x0004) (Edit)
	struct FString                                     FaceFXGroupName;                                          // 0x0100(0x000C) (Edit, NeedCtorLink)
	struct FString                                     FaceFXAnimName;                                           // 0x010C(0x000C) (Edit, NeedCtorLink)
	class USoundCue*                                   SoundCueToPlay;                                           // 0x0118(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PlayFaceFXAnim");
		return ptr;
	}

};


// Class Engine.SeqAct_PlayMusicTrack
// 0x0024 (0x0120 - 0x00FC)
class USeqAct_PlayMusicTrack : public USequenceAction
{
public:
	struct FMusicTrackStruct                           MusicTrack;                                               // 0x00FC(0x0024) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_PlayMusicTrack");
		return ptr;
	}

};


// Class Engine.SeqAct_Possess
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_Possess : public USequenceAction
{
public:
	class APawn*                                       PawnToPossess;                                            // 0x00FC(0x0004) (Transient)
	unsigned long                                      bKillOldPawn : 1;                                         // 0x0100(0x0004) (Edit)
	unsigned long                                      bTryToLeaveVehicle : 1;                                   // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Possess");
		return ptr;
	}

};


// Class Engine.SeqAct_RangeSwitch
// 0x000C (0x0108 - 0x00FC)
class USeqAct_RangeSwitch : public USequenceAction
{
public:
	TArray<struct FSwitchRange>                        Ranges;                                                   // 0x00FC(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_RangeSwitch");
		return ptr;
	}

};


// Class Engine.SeqAct_SetActiveAnimChild
// 0x0010 (0x010C - 0x00FC)
class USeqAct_SetActiveAnimChild : public USequenceAction
{
public:
	struct FName                                       NodeName;                                                 // 0x00FC(0x0008) (Edit)
	int                                                ChildIndex;                                               // 0x0104(0x0004) (Edit)
	float                                              BlendTime;                                                // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetActiveAnimChild");
		return ptr;
	}

};


// Class Engine.SeqAct_SetApexClothingParam
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_SetApexClothingParam : public USequenceAction
{
public:
	unsigned long                                      bEnableApexClothingSimulation : 1;                        // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetApexClothingParam");
		return ptr;
	}

};


// Class Engine.SeqAct_SetBlockRigidBody
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_SetBlockRigidBody : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetBlockRigidBody");
		return ptr;
	}

};


// Class Engine.SeqAct_SetCameraTarget
// 0x0014 (0x0110 - 0x00FC)
class USeqAct_SetCameraTarget : public USequenceAction
{
public:
	class AActor*                                      CameraTarget;                                             // 0x00FC(0x0004) (Transient)
	struct FViewTargetTransitionParams                 TransitionParams;                                         // 0x0100(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetCameraTarget");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_SetMaterial
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_SetMaterial : public USequenceAction
{
public:
	class UMaterialInterface*                          NewMaterial;                                              // 0x00FC(0x0004) (Edit)
	int                                                MaterialIndex;                                            // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMaterial");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMatInstScalarParam
// 0x0010 (0x010C - 0x00FC)
class USeqAct_SetMatInstScalarParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                                  // 0x00FC(0x0004) (Edit)
	struct FName                                       ParamName;                                                // 0x0100(0x0008) (Edit)
	float                                              ScalarValue;                                              // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMatInstScalarParam");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMesh
// 0x0010 (0x010C - 0x00FC)
class USeqAct_SetMesh : public USequenceAction
{
public:
	class USkeletalMesh*                               NewSkeletalMesh;                                          // 0x00FC(0x0004) (Edit)
	class UStaticMesh*                                 NewStaticMesh;                                            // 0x0100(0x0004) (Edit)
	TEnumAsByte<EMeshType>                             MeshType;                                                 // 0x0104(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0105(0x0003) MISSED OFFSET
	unsigned long                                      bIsAllowedToMove : 1;                                     // 0x0108(0x0004) (Edit)
	unsigned long                                      bAllowDecalsToReattach : 1;                               // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMesh");
		return ptr;
	}

};


// Class Engine.SeqAct_SetPhysics
// 0x0001 (0x00FD - 0x00FC)
class USeqAct_SetPhysics : public USequenceAction
{
public:
	TEnumAsByte<EPhysics>                              newPhysics;                                               // 0x00FC(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetPhysics");
		return ptr;
	}

};


// Class Engine.SeqAct_SetRigidBodyIgnoreVehicles
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_SetRigidBodyIgnoreVehicles : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetRigidBodyIgnoreVehicles");
		return ptr;
	}

};


// Class Engine.SeqAct_SetSequenceVariable
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_SetSequenceVariable : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetSequenceVariable");
		return ptr;
	}

};


// Class Engine.SeqAct_AccessObjectList
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_AccessObjectList : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     OutputObject;                                             // 0x00FC(0x0004) (Edit, EditConst)
	int                                                ObjectIndex;                                              // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AccessObjectList");
		return ptr;
	}

};


// Class Engine.SeqAct_AddFloat
// 0x0010 (0x010C - 0x00FC)
class USeqAct_AddFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                                   // 0x00FC(0x0004) (Edit)
	float                                              ValueB;                                                   // 0x0100(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x0104(0x0004)
	int                                                IntResult;                                                // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AddFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_AddInt
// 0x0010 (0x010C - 0x00FC)
class USeqAct_AddInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                                   // 0x00FC(0x0004) (Edit)
	int                                                ValueB;                                                   // 0x0100(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x0104(0x0004)
	int                                                IntResult;                                                // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AddInt");
		return ptr;
	}

};


// Class Engine.SeqAct_CastToFloat
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_CastToFloat : public USeqAct_SetSequenceVariable
{
public:
	int                                                Value;                                                    // 0x00FC(0x0004)
	float                                              FloatResult;                                              // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CastToFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_CastToInt
// 0x000C (0x0108 - 0x00FC)
class USeqAct_CastToInt : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      bTruncate : 1;                                            // 0x00FC(0x0004) (Edit)
	float                                              Value;                                                    // 0x0100(0x0004)
	int                                                IntResult;                                                // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_CastToInt");
		return ptr;
	}

};


// Class Engine.SeqAct_DivideFloat
// 0x0010 (0x010C - 0x00FC)
class USeqAct_DivideFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                                   // 0x00FC(0x0004) (Edit)
	float                                              ValueB;                                                   // 0x0100(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x0104(0x0004)
	int                                                IntResult;                                                // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_DivideFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_DivideInt
// 0x0010 (0x010C - 0x00FC)
class USeqAct_DivideInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                                   // 0x00FC(0x0004) (Edit)
	int                                                ValueB;                                                   // 0x0100(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x0104(0x0004)
	int                                                IntResult;                                                // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_DivideInt");
		return ptr;
	}

};


// Class Engine.SeqAct_ModifyObjectList
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_ModifyObjectList : public USeqAct_SetSequenceVariable
{
public:
	int                                                ListEntriesCount;                                         // 0x00FC(0x0004) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ModifyObjectList");
		return ptr;
	}

};


// Class Engine.SeqAct_MultiplyFloat
// 0x0010 (0x010C - 0x00FC)
class USeqAct_MultiplyFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                                   // 0x00FC(0x0004) (Edit)
	float                                              ValueB;                                                   // 0x0100(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x0104(0x0004)
	int                                                IntResult;                                                // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_MultiplyFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_MultiplyInt
// 0x0010 (0x010C - 0x00FC)
class USeqAct_MultiplyInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                                   // 0x00FC(0x0004) (Edit)
	int                                                ValueB;                                                   // 0x0100(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x0104(0x0004)
	int                                                IntResult;                                                // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_MultiplyInt");
		return ptr;
	}

};


// Class Engine.SeqAct_SetBool
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_SetBool : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      DefaultValue : 1;                                         // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetBool");
		return ptr;
	}

};


// Class Engine.SeqAct_SetFloat
// 0x0010 (0x010C - 0x00FC)
class USeqAct_SetFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              Target;                                                   // 0x00FC(0x0004)
	TArray<float>                                      Value;                                                    // 0x0100(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetFloat");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_SetInt
// 0x0010 (0x010C - 0x00FC)
class USeqAct_SetInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                Target;                                                   // 0x00FC(0x0004)
	TArray<int>                                        Value;                                                    // 0x0100(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetInt");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_SetLocation
// 0x0020 (0x011C - 0x00FC)
class USeqAct_SetLocation : public USeqAct_SetSequenceVariable
{
public:
	unsigned long                                      bSetLocation : 1;                                         // 0x00FC(0x0004) (Edit)
	unsigned long                                      bSetRotation : 1;                                         // 0x00FC(0x0004) (Edit)
	unsigned long                                      bReplicated : 1;                                          // 0x00FC(0x0004) (Edit)
	struct FVector                                     LocationValue;                                            // 0x0100(0x000C) (Edit)
	struct FRotator                                    RotationValue;                                            // 0x010C(0x000C) (Edit)
	class UObject*                                     Target;                                                   // 0x0118(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetLocation");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_SetObject
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_SetObject : public USeqAct_SetSequenceVariable
{
public:
	class UObject*                                     DefaultValue;                                             // 0x00FC(0x0004) (Edit)
	class UObject*                                     Value;                                                    // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetObject");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_SetString
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_SetString : public USeqAct_SetSequenceVariable
{
public:
	struct FString                                     Target;                                                   // 0x00FC(0x000C) (NeedCtorLink)
	struct FString                                     Value;                                                    // 0x0108(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetString");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_SubtractFloat
// 0x0010 (0x010C - 0x00FC)
class USeqAct_SubtractFloat : public USeqAct_SetSequenceVariable
{
public:
	float                                              ValueA;                                                   // 0x00FC(0x0004) (Edit)
	float                                              ValueB;                                                   // 0x0100(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x0104(0x0004)
	int                                                IntResult;                                                // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SubtractFloat");
		return ptr;
	}

};


// Class Engine.SeqAct_SubtractInt
// 0x0010 (0x010C - 0x00FC)
class USeqAct_SubtractInt : public USeqAct_SetSequenceVariable
{
public:
	int                                                ValueA;                                                   // 0x00FC(0x0004) (Edit)
	int                                                ValueB;                                                   // 0x0100(0x0004) (Edit)
	float                                              FloatResult;                                              // 0x0104(0x0004)
	int                                                IntResult;                                                // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SubtractInt");
		return ptr;
	}

};


// Class Engine.SeqAct_SetVectorComponents
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_SetVectorComponents : public USequenceAction
{
public:
	struct FVector                                     OutVector;                                                // 0x00FC(0x000C)
	float                                              X;                                                        // 0x0108(0x0004)
	float                                              Y;                                                        // 0x010C(0x0004)
	float                                              Z;                                                        // 0x0110(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetVectorComponents");
		return ptr;
	}

};


// Class Engine.SeqAct_SetWorldAttractorParam
// 0x0068 (0x0164 - 0x00FC)
class USeqAct_SetWorldAttractorParam : public USequenceAction
{
public:
	TArray<class AWorldAttractor*>                     Attractor;                                                // 0x00FC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bEnabledField : 1;                                        // 0x0108(0x0004)
	unsigned long                                      bFalloffTypeField : 1;                                    // 0x0108(0x0004)
	unsigned long                                      bFalloffExponentField : 1;                                // 0x0108(0x0004)
	unsigned long                                      bRangeField : 1;                                          // 0x0108(0x0004)
	unsigned long                                      bStrengthField : 1;                                       // 0x0108(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x0108(0x0004) (Edit)
	TEnumAsByte<EWorldAttractorFalloffType>            FalloffType;                                              // 0x010C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x010D(0x0003) MISSED OFFSET
	struct FRawDistributionFloat                       FalloffExponent;                                          // 0x0110(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Range;                                                    // 0x012C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Strength;                                                 // 0x0148(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetWorldAttractorParam");
		return ptr;
	}

};


// Class Engine.SeqAct_Switch
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_Switch : public USequenceAction
{
public:
	int                                                LinkCount;                                                // 0x00FC(0x0004) (Edit)
	int                                                IncrementAmount;                                          // 0x0100(0x0004) (Edit)
	unsigned long                                      bLooping : 1;                                             // 0x0104(0x0004) (Edit)
	unsigned long                                      bAutoDisableLinks : 1;                                    // 0x0104(0x0004) (Edit)
	TArray<int>                                        Indices;                                                  // 0x0108(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Switch");
		return ptr;
	}

};


// Class Engine.SeqAct_RandomSwitch
// 0x000C (0x0120 - 0x0114)
class USeqAct_RandomSwitch : public USeqAct_Switch
{
public:
	TArray<int>                                        AutoDisabledIndices;                                      // 0x0114(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_RandomSwitch");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_Timer
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_Timer : public USequenceAction
{
public:
	float                                              ActivationTime;                                           // 0x00FC(0x0004) (Transient)
	float                                              Time;                                                     // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Timer");
		return ptr;
	}

};


// Class Engine.SeqAct_Toggle
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_Toggle : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Toggle");
		return ptr;
	}

};


// Class Engine.SeqAct_Trace
// 0x0054 (0x0150 - 0x00FC)
class USeqAct_Trace : public USequenceAction
{
public:
	unsigned long                                      bTraceActors : 1;                                         // 0x00FC(0x0004) (Edit)
	unsigned long                                      bTraceWorld : 1;                                          // 0x00FC(0x0004) (Edit)
	unsigned long                                      bOffsetInWorldSpace : 1;                                  // 0x00FC(0x0004) (Edit)
	struct FVector                                     TraceExtent;                                              // 0x0100(0x000C) (Edit)
	struct FVector                                     StartOffset;                                              // 0x010C(0x000C) (Edit)
	struct FVector                                     EndOffset;                                                // 0x0118(0x000C) (Edit)
	class UObject*                                     HitObject;                                                // 0x0124(0x0004) (Edit, EditConst)
	float                                              Distance;                                                 // 0x0128(0x0004) (Edit, EditConst)
	struct FVector                                     HitLocation;                                              // 0x012C(0x000C) (Edit, EditConst)
	struct FVector                                     HitNormal;                                                // 0x0138(0x000C) (Edit, EditConst)
	struct FVector                                     HitNormalRotation;                                        // 0x0144(0x000C) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Trace");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SequenceCondition
// 0x0000 (0x00E4 - 0x00E4)
class USequenceCondition : public USequenceOp
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceCondition");
		return ptr;
	}

};


// Class Engine.SeqCond_CompareBool
// 0x0004 (0x00E8 - 0x00E4)
class USeqCond_CompareBool : public USequenceCondition
{
public:
	unsigned long                                      bResult : 1;                                              // 0x00E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_CompareBool");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqCond_CompareFloat
// 0x0008 (0x00EC - 0x00E4)
class USeqCond_CompareFloat : public USequenceCondition
{
public:
	float                                              ValueA;                                                   // 0x00E4(0x0004) (Edit)
	float                                              ValueB;                                                   // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_CompareFloat");
		return ptr;
	}

};


// Class Engine.SeqCond_CompareInt
// 0x0008 (0x00EC - 0x00E4)
class USeqCond_CompareInt : public USequenceCondition
{
public:
	int                                                ValueA;                                                   // 0x00E4(0x0004) (Edit)
	int                                                ValueB;                                                   // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_CompareInt");
		return ptr;
	}

};


// Class Engine.SeqCond_CompareObject
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_CompareObject : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_CompareObject");
		return ptr;
	}

};


// Class Engine.SeqCond_GetServerType
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_GetServerType : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_GetServerType");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqCond_Increment
// 0x000C (0x00F0 - 0x00E4)
class USeqCond_Increment : public USequenceCondition
{
public:
	int                                                IncrementAmount;                                          // 0x00E4(0x0004) (Edit)
	int                                                ValueA;                                                   // 0x00E8(0x0004) (Edit)
	int                                                ValueB;                                                   // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_Increment");
		return ptr;
	}

};


// Class Engine.SeqCond_IncrementFloat
// 0x000C (0x00F0 - 0x00E4)
class USeqCond_IncrementFloat : public USequenceCondition
{
public:
	float                                              IncrementAmount;                                          // 0x00E4(0x0004) (Edit)
	float                                              ValueA;                                                   // 0x00E8(0x0004) (Edit)
	float                                              ValueB;                                                   // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IncrementFloat");
		return ptr;
	}

};


// Class Engine.SeqCond_IsAlive
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_IsAlive : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsAlive");
		return ptr;
	}

};


// Class Engine.SeqCond_IsBenchmarking
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_IsBenchmarking : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsBenchmarking");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqCond_IsConsole
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_IsConsole : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsConsole");
		return ptr;
	}

};


// Class Engine.SeqCond_IsInCombat
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_IsInCombat : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsInCombat");
		return ptr;
	}

};


// Class Engine.SeqCond_IsLoggedIn
// 0x0004 (0x00E8 - 0x00E4)
class USeqCond_IsLoggedIn : public USequenceCondition
{
public:
	int                                                NumNeededLoggedIn;                                        // 0x00E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsLoggedIn");
		return ptr;
	}


	bool CheckLogins();
};


// Class Engine.SeqCond_IsPIE
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_IsPIE : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsPIE");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqCond_IsSameTeam
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_IsSameTeam : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_IsSameTeam");
		return ptr;
	}

};


// Class Engine.SeqCond_MatureLanguage
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_MatureLanguage : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_MatureLanguage");
		return ptr;
	}

};


// Class Engine.SeqCond_ShowGore
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_ShowGore : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_ShowGore");
		return ptr;
	}

};


// Class Engine.SeqCond_SwitchBase
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_SwitchBase : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_SwitchBase");
		return ptr;
	}


	void RemoveValueEntry(int RemoveIndex);
	void InsertValueEntry(int InsertIndex);
	bool IsFallThruEnabled(int ValueIndex);
	void VerifyDefaultCaseValue();
};


// Class Engine.SeqCond_SwitchClass
// 0x000C (0x00F0 - 0x00E4)
class USeqCond_SwitchClass : public USeqCond_SwitchBase
{
public:
	TArray<struct FSwitchClassInfo>                    ClassArray;                                               // 0x00E4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_SwitchClass");
		return ptr;
	}


	void RemoveValueEntry(int RemoveIndex);
	void InsertValueEntry(int InsertIndex);
	bool IsFallThruEnabled(int ValueIndex);
	void VerifyDefaultCaseValue();
};


// Class Engine.SeqCond_SwitchObject
// 0x000C (0x00F0 - 0x00E4)
class USeqCond_SwitchObject : public USeqCond_SwitchBase
{
public:
	TArray<struct FSwitchObjectCase>                   SupportedValues;                                          // 0x00E4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_SwitchObject");
		return ptr;
	}


	void RemoveValueEntry(int RemoveIndex);
	void InsertValueEntry(int InsertIndex);
	bool IsFallThruEnabled(int ValueIndex);
	void VerifyDefaultCaseValue();
};


// Class Engine.SeqCond_SwitchPlatform
// 0x0000 (0x00E4 - 0x00E4)
class USeqCond_SwitchPlatform : public USequenceCondition
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqCond_SwitchPlatform");
		return ptr;
	}

};


// Class Engine.SequenceEvent
// 0x0030 (0x0114 - 0x00E4)
class USequenceEvent : public USequenceOp
{
public:
	TArray<class USequenceEvent*>                      DuplicateEvts;                                            // 0x00E4(0x000C) (NeedCtorLink)
	class AActor*                                      Originator;                                               // 0x00F0(0x0004)
	class AActor*                                      Instigator;                                               // 0x00F4(0x0004)
	float                                              ActivationTime;                                           // 0x00F8(0x0004)
	int                                                TriggerCount;                                             // 0x00FC(0x0004)
	int                                                MaxTriggerCount;                                          // 0x0100(0x0004) (Edit)
	float                                              ReTriggerDelay;                                           // 0x0104(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x0108(0x0004) (Edit)
	unsigned long                                      bPlayerOnly : 1;                                          // 0x0108(0x0004) (Edit)
	unsigned long                                      bRegistered : 1;                                          // 0x0108(0x0004) (Transient)
	unsigned long                                      bClientSideOnly : 1;                                      // 0x0108(0x0004) (Edit, Const)
	unsigned char                                      Priority;                                                 // 0x010C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x010D(0x0003) MISSED OFFSET
	int                                                MaxWidth;                                                 // 0x0110(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceEvent");
		return ptr;
	}


	void Toggled();
	void Reset();
	bool CheckActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest, bool bPushTop, TArray<int>* ActivateIndices);
	void RegisterEvent();
};


// Class Engine.SeqEvent_AISeeEnemy
// 0x0004 (0x0118 - 0x0114)
class USeqEvent_AISeeEnemy : public USequenceEvent
{
public:
	float                                              MaxSightDistance;                                         // 0x0114(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_AISeeEnemy");
		return ptr;
	}

};


// Class Engine.SeqEvent_AnalogInput
// 0x0014 (0x0128 - 0x0114)
class USeqEvent_AnalogInput : public USequenceEvent
{
public:
	unsigned long                                      bTrapInput : 1;                                           // 0x0114(0x0004) (Edit)
	int                                                AllowedPlayerIndex;                                       // 0x0118(0x0004) (Edit)
	TArray<struct FName>                               InputNames;                                               // 0x011C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_AnalogInput");
		return ptr;
	}

};


// Class Engine.SeqEvent_AnimNotify
// 0x0008 (0x011C - 0x0114)
class USeqEvent_AnimNotify : public USequenceEvent
{
public:
	struct FName                                       NotifyName;                                               // 0x0114(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_AnimNotify");
		return ptr;
	}

};


// Class Engine.SeqEvent_Console
// 0x0014 (0x0128 - 0x0114)
class USeqEvent_Console : public USequenceEvent
{
public:
	struct FName                                       ConsoleEventName;                                         // 0x0114(0x0008) (Edit)
	struct FString                                     EventDesc;                                                // 0x011C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Console");
		return ptr;
	}

};


// Class Engine.SeqEvent_ConstraintBroken
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_ConstraintBroken : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_ConstraintBroken");
		return ptr;
	}

};


// Class Engine.SeqEvent_Destroyed
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_Destroyed : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Destroyed");
		return ptr;
	}

};


// Class Engine.SeqEvent_GetInventory
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_GetInventory : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_GetInventory");
		return ptr;
	}

};


// Class Engine.SeqEvent_Input
// 0x0014 (0x0128 - 0x0114)
class USeqEvent_Input : public USequenceEvent
{
public:
	unsigned long                                      bTrapInput : 1;                                           // 0x0114(0x0004) (Edit)
	int                                                AllowedPlayerIndex;                                       // 0x0118(0x0004) (Edit)
	TArray<struct FName>                               InputNames;                                               // 0x011C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Input");
		return ptr;
	}

};


// Class Engine.SeqEvent_LevelBeginning
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_LevelBeginning : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_LevelBeginning");
		return ptr;
	}

};


// Class Engine.SeqEvent_LevelLoaded
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_LevelLoaded : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_LevelLoaded");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqEvent_LevelStartup
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_LevelStartup : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_LevelStartup");
		return ptr;
	}

};


// Class Engine.SeqEvent_Mover
// 0x0004 (0x0118 - 0x0114)
class USeqEvent_Mover : public USequenceEvent
{
public:
	float                                              StayOpenTime;                                             // 0x0114(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Mover");
		return ptr;
	}


	void NotifyFinishedOpen();
	void NotifyDetached(class AActor* Other);
	void NotifyAttached(class AActor* Other);
	void NotifyEncroachingOn(class AActor* Hit);
	void RegisterEvent();
};


// Class Engine.SeqEvent_ParticleEvent
// 0x0034 (0x0148 - 0x0114)
class USeqEvent_ParticleEvent : public USequenceEvent
{
public:
	TEnumAsByte<EParticleEventOutputType>              EventType;                                                // 0x0114(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0115(0x0003) MISSED OFFSET
	struct FVector                                     EventPosition;                                            // 0x0118(0x000C)
	float                                              EventEmitterTime;                                         // 0x0124(0x0004)
	struct FVector                                     EventVelocity;                                            // 0x0128(0x000C)
	float                                              EventParticleTime;                                        // 0x0134(0x0004)
	struct FVector                                     EventNormal;                                              // 0x0138(0x000C)
	unsigned long                                      UseRelfectedImpactVector : 1;                             // 0x0144(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_ParticleEvent");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqEvent_ProjectileLanded
// 0x0004 (0x0118 - 0x0114)
class USeqEvent_ProjectileLanded : public USequenceEvent
{
public:
	float                                              MaxDistance;                                              // 0x0114(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_ProjectileLanded");
		return ptr;
	}

};


// Class Engine.SeqEvent_RemoteEvent
// 0x000C (0x0120 - 0x0114)
class USeqEvent_RemoteEvent : public USequenceEvent
{
public:
	struct FName                                       EventName;                                                // 0x0114(0x0008) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x011C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_RemoteEvent");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqEvent_RigidBodyCollision
// 0x0004 (0x0118 - 0x0114)
class USeqEvent_RigidBodyCollision : public USequenceEvent
{
public:
	float                                              MinCollisionVelocity;                                     // 0x0114(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_RigidBodyCollision");
		return ptr;
	}

};


// Class Engine.SeqEvent_SeeDeath
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_SeeDeath : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_SeeDeath");
		return ptr;
	}

};


// Class Engine.SeqEvent_SequenceActivated
// 0x000C (0x0120 - 0x0114)
class USeqEvent_SequenceActivated : public USequenceEvent
{
public:
	struct FString                                     InputLabel;                                               // 0x0114(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_SequenceActivated");
		return ptr;
	}

};


// Class Engine.SeqEvent_TakeDamage
// 0x0028 (0x013C - 0x0114)
class USeqEvent_TakeDamage : public USequenceEvent
{
public:
	float                                              MinDamageAmount;                                          // 0x0114(0x0004) (Edit)
	float                                              DamageThreshold;                                          // 0x0118(0x0004) (Edit)
	TArray<class UClass*>                              DamageTypes;                                              // 0x011C(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              IgnoreDamageTypes;                                        // 0x0128(0x000C) (Edit, NeedCtorLink)
	float                                              CurrentDamage;                                            // 0x0134(0x0004)
	unsigned long                                      bResetDamageOnToggle : 1;                                 // 0x0138(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_TakeDamage");
		return ptr;
	}


	void Toggled();
	int STATIC_GetObjClassVersion();
	void Reset();
	void HandleDamage(class AActor* InOriginator, class AActor* InInstigator, class UClass* inDamageType, float inAmount);
	bool IsValidDamageType(class UClass* inDamageType);
};


// Class Engine.SeqEvent_Touch
// 0x0028 (0x013C - 0x0114)
class USeqEvent_Touch : public USequenceEvent
{
public:
	TArray<class UClass*>                              ClassProximityTypes;                                      // 0x0114(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              IgnoredClassProximityTypes;                               // 0x0120(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bForceOverlapping : 1;                                    // 0x012C(0x0004) (Edit)
	unsigned long                                      bUseInstigator : 1;                                       // 0x012C(0x0004) (Edit)
	unsigned long                                      bAllowDeadPawns : 1;                                      // 0x012C(0x0004) (Edit)
	TArray<class AActor*>                              TouchedList;                                              // 0x0130(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Touch");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	void NotifyTouchingPawnDied(class APawn* P);
	void Toggled();
	bool CheckUnTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest);
	bool CheckTouchActivate(class AActor* InOriginator, class AActor* InInstigator, bool bTest);
};


// Class Engine.SeqEvent_TouchInput
// 0x0010 (0x0124 - 0x0114)
class USeqEvent_TouchInput : public USequenceEvent
{
public:
	unsigned long                                      bTrapInput : 1;                                           // 0x0114(0x0004) (Edit)
	int                                                AllowedPlayerIndex;                                       // 0x0118(0x0004) (Edit)
	int                                                AllowedTouchIndex;                                        // 0x011C(0x0004) (Edit)
	int                                                AllowedTouchpadIndex;                                     // 0x0120(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_TouchInput");
		return ptr;
	}

};


// Class Engine.SeqEvent_Used
// 0x0030 (0x0144 - 0x0114)
class USeqEvent_Used : public USequenceEvent
{
public:
	unsigned long                                      bAimToInteract : 1;                                       // 0x0114(0x0004) (Edit)
	float                                              InteractDistance;                                         // 0x0118(0x0004) (Edit)
	struct FString                                     InteractText;                                             // 0x011C(0x000C) (Edit, NeedCtorLink)
	class UTexture2D*                                  InteractIcon;                                             // 0x0128(0x0004) (Edit)
	TArray<class UClass*>                              ClassProximityTypes;                                      // 0x012C(0x000C) (Edit, NeedCtorLink)
	TArray<class UClass*>                              IgnoredClassProximityTypes;                               // 0x0138(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Used");
		return ptr;
	}

};


// Class Engine.SequenceVariable
// 0x0008 (0x0098 - 0x0090)
class USequenceVariable : public USequenceObject
{
public:
	struct FName                                       VarName;                                                  // 0x0090(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SequenceVariable");
		return ptr;
	}

};


// Class Engine.InterpData
// 0x0050 (0x00E8 - 0x0098)
class UInterpData : public USequenceVariable
{
public:
	float                                              InterpLength;                                             // 0x0098(0x0004)
	float                                              PathBuildTime;                                            // 0x009C(0x0004)
	TArray<class UInterpGroup*>                        InterpGroups;                                             // 0x00A0(0x000C) (ExportObject, NeedCtorLink)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x00AC(0x0004) (ExportObject)
	TArray<class UInterpFilter*>                       InterpFilters;                                            // 0x00B0(0x000C) (NeedCtorLink)
	class UInterpFilter*                               SelectedFilter;                                           // 0x00BC(0x0004)
	TArray<class UInterpFilter*>                       DefaultFilters;                                           // 0x00C0(0x000C) (Transient, NeedCtorLink)
	float                                              EdSectionStart;                                           // 0x00CC(0x0004)
	float                                              EdSectionEnd;                                             // 0x00D0(0x0004)
	unsigned long                                      bShouldBakeAndPrune : 1;                                  // 0x00D4(0x0004) (Edit)
	TArray<struct FAnimSetBakeAndPruneStatus>          BakeAndPruneStatus;                                       // 0x00D8(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	class UInterpGroupDirector*                        CachedDirectorGroup;                                      // 0x00E4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpData");
		return ptr;
	}

};


// Class Engine.SeqVar_Bool
// 0x0004 (0x009C - 0x0098)
class USeqVar_Bool : public USequenceVariable
{
public:
	int                                                bValue;                                                   // 0x0098(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Bool");
		return ptr;
	}

};


// Class Engine.SeqVar_External
// 0x0010 (0x00A8 - 0x0098)
class USeqVar_External : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                             // 0x0098(0x0004) (Edit)
	struct FString                                     VariableLabel;                                            // 0x009C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_External");
		return ptr;
	}

};


// Class Engine.SeqVar_Float
// 0x0004 (0x009C - 0x0098)
class USeqVar_Float : public USequenceVariable
{
public:
	float                                              FloatValue;                                               // 0x0098(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Float");
		return ptr;
	}

};


// Class Engine.SeqVar_RandomFloat
// 0x0008 (0x00A4 - 0x009C)
class USeqVar_RandomFloat : public USeqVar_Float
{
public:
	float                                              Min;                                                      // 0x009C(0x0004) (Edit)
	float                                              Max;                                                      // 0x00A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_RandomFloat");
		return ptr;
	}

};


// Class Engine.SeqVar_Int
// 0x0004 (0x009C - 0x0098)
class USeqVar_Int : public USequenceVariable
{
public:
	int                                                IntValue;                                                 // 0x0098(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Int");
		return ptr;
	}

};


// Class Engine.SeqVar_RandomInt
// 0x0008 (0x00A4 - 0x009C)
class USeqVar_RandomInt : public USeqVar_Int
{
public:
	int                                                Min;                                                      // 0x009C(0x0004) (Edit)
	int                                                Max;                                                      // 0x00A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_RandomInt");
		return ptr;
	}

};


// Class Engine.SeqVar_Named
// 0x0010 (0x00A8 - 0x0098)
class USeqVar_Named : public USequenceVariable
{
public:
	class UClass*                                      ExpectedType;                                             // 0x0098(0x0004) (Edit)
	struct FName                                       FindVarName;                                              // 0x009C(0x0008) (Edit)
	unsigned long                                      bStatusIsOk : 1;                                          // 0x00A4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Named");
		return ptr;
	}

};


// Class Engine.SeqVar_Object
// 0x001C (0x00B4 - 0x0098)
class USeqVar_Object : public USequenceVariable
{
public:
	class UObject*                                     ObjValue;                                                 // 0x0098(0x0004) (Edit)
	struct FVector                                     ActorLocation;                                            // 0x009C(0x000C) (Transient)
	TArray<class UClass*>                              SupportedClasses;                                         // 0x00A8(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Object");
		return ptr;
	}


	void SetObjectValue(class UObject* NewValue);
	class UObject* GetObjectValue();
};


// Class Engine.SeqVar_Character
// 0x0004 (0x00B8 - 0x00B4)
class USeqVar_Character : public USeqVar_Object
{
public:
	class UClass*                                      PawnClass;                                                // 0x00B4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Character");
		return ptr;
	}

};


// Class Engine.SeqVar_Group
// 0x0018 (0x00CC - 0x00B4)
class USeqVar_Group : public USeqVar_Object
{
public:
	struct FName                                       GroupName;                                                // 0x00B4(0x0008) (Edit)
	unsigned long                                      bCachedList : 1;                                          // 0x00BC(0x0004) (Transient)
	TArray<class UObject*>                             Actors;                                                   // 0x00C0(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Group");
		return ptr;
	}

};


// Class Engine.SeqVar_ObjectList
// 0x000C (0x00C0 - 0x00B4)
class USeqVar_ObjectList : public USeqVar_Object
{
public:
	TArray<class UObject*>                             ObjList;                                                  // 0x00B4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_ObjectList");
		return ptr;
	}


	void SetObjectValue(class UObject* NewValue);
	class UObject* GetObjectValue();
};


// Class Engine.SeqVar_ObjectVolume
// 0x0020 (0x00D4 - 0x00B4)
class USeqVar_ObjectVolume : public USeqVar_Object
{
public:
	float                                              LastUpdateTime;                                           // 0x00B4(0x0004)
	TArray<class UObject*>                             ContainedObjects;                                         // 0x00B8(0x000C) (NeedCtorLink)
	TArray<class UClass*>                              ExcludeClassList;                                         // 0x00C4(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bCollidingOnly : 1;                                       // 0x00D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_ObjectVolume");
		return ptr;
	}

};


// Class Engine.SeqVar_Player
// 0x0014 (0x00C8 - 0x00B4)
class USeqVar_Player : public USeqVar_Object
{
public:
	TArray<class UObject*>                             Players;                                                  // 0x00B4(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bAllPlayers : 1;                                          // 0x00C0(0x0004) (Edit)
	int                                                PlayerIdx;                                                // 0x00C4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Player");
		return ptr;
	}


	class UObject* GetObjectValue();
	void UpdatePlayersList();
};


// Class Engine.SeqVar_String
// 0x000C (0x00A4 - 0x0098)
class USeqVar_String : public USequenceVariable
{
public:
	struct FString                                     StrValue;                                                 // 0x0098(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_String");
		return ptr;
	}

};


// Class Engine.SeqVar_Vector
// 0x000C (0x00A4 - 0x0098)
class USeqVar_Vector : public USequenceVariable
{
public:
	struct FVector                                     VectValue;                                                // 0x0098(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Vector");
		return ptr;
	}

};


// Class Engine.AmbientSound
// 0x0008 (0x01E0 - 0x01D8)
class AAmbientSound : public AKeypoint
{
public:
	unsigned long                                      bAutoPlay : 1;                                            // 0x01D8(0x0004) (Edit)
	unsigned long                                      bIsPlaying : 1;                                           // 0x01D8(0x0004)
	class UAudioComponent*                             AudioComponent;                                           // 0x01DC(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSound");
		return ptr;
	}

};


// Class Engine.AmbientSoundMovable
// 0x0000 (0x01E0 - 0x01E0)
class AAmbientSoundMovable : public AAmbientSound
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundMovable");
		return ptr;
	}

};


// Class Engine.AmbientSoundSimple
// 0x000C (0x01EC - 0x01E0)
class AAmbientSoundSimple : public AAmbientSound
{
public:
	class USoundNodeAmbient*                           AmbientProperties;                                        // 0x01E0(0x0004) (Edit, EditConst, EditInline)
	class USoundCue*                                   SoundCueInstance;                                         // 0x01E4(0x0004) (Const, ExportObject, NeedCtorLink, EditInline)
	class USoundNodeAmbient*                           SoundNodeInstance;                                        // 0x01E8(0x0004) (Const, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundSimple");
		return ptr;
	}

};


// Class Engine.AmbientSoundNonLoop
// 0x0000 (0x01EC - 0x01EC)
class AAmbientSoundNonLoop : public AAmbientSoundSimple
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundNonLoop");
		return ptr;
	}

};


// Class Engine.AmbientSoundSimpleToggleable
// 0x0014 (0x0200 - 0x01EC)
class AAmbientSoundSimpleToggleable : public AAmbientSoundSimple
{
public:
	unsigned long                                      bCurrentlyPlaying : 1;                                    // 0x01EC(0x0004) (Net)
	unsigned long                                      bFadeOnToggle : 1;                                        // 0x01EC(0x0004) (Edit)
	unsigned long                                      bIgnoreAutoPlay : 1;                                      // 0x01EC(0x0004) (Transient)
	float                                              FadeInDuration;                                           // 0x01F0(0x0004) (Edit)
	float                                              FadeInVolumeLevel;                                        // 0x01F4(0x0004) (Edit)
	float                                              FadeOutDuration;                                          // 0x01F8(0x0004) (Edit)
	float                                              FadeOutVolumeLevel;                                       // 0x01FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundSimpleToggleable");
		return ptr;
	}


	void ApplyCheckpointRecord(struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct AAmbientSoundSimpleToggleable_FCheckpointRecord* Record);
	void OnToggle(class USeqAct_Toggle* Action);
	void StopPlaying();
	void StartPlaying();
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class Engine.AmbientSoundNonLoopingToggleable
// 0x0000 (0x0200 - 0x0200)
class AAmbientSoundNonLoopingToggleable : public AAmbientSoundSimpleToggleable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundNonLoopingToggleable");
		return ptr;
	}

};


// Class Engine.AmbientSoundSpline
// 0x0014 (0x01F4 - 0x01E0)
class AAmbientSoundSpline : public AAmbientSound
{
public:
	float                                              DistanceBetweenPoints;                                    // 0x01E0(0x0004) (Edit)
	class USplineComponent*                            SplineComponent;                                          // 0x01E4(0x0004) (Edit, ExportObject, Component, EditInline)
	struct FVector                                     TestPoint;                                                // 0x01E8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundSpline");
		return ptr;
	}

};


// Class Engine.AmbientSoundSimpleSpline
// 0x0004 (0x01F8 - 0x01F4)
class AAmbientSoundSimpleSpline : public AAmbientSoundSpline
{
public:
	int                                                EditedSlot;                                               // 0x01F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundSimpleSpline");
		return ptr;
	}

};


// Class Engine.AmbientSoundSplineMultiCue
// 0x0004 (0x01F8 - 0x01F4)
class AAmbientSoundSplineMultiCue : public AAmbientSoundSpline
{
public:
	int                                                EditedSlot;                                               // 0x01F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundSplineMultiCue");
		return ptr;
	}

};


// Class Engine.DistributionFloatSoundParameter
// 0x0003 (0x0070 - 0x006D)
class UDistributionFloatSoundParameter : public UDistributionFloatParameterBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x006D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistributionFloatSoundParameter");
		return ptr;
	}

};


// Class Engine.SoundNode
// 0x0010 (0x004C - 0x003C)
class USoundNode : public UObject
{
public:
	int                                                NodeUpdateHint;                                           // 0x003C(0x0004) (Const, Native)
	TArray<class USoundNode*>                          ChildNodes;                                               // 0x0040(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNode");
		return ptr;
	}

};


// Class Engine.ForcedLoopSoundNode
// 0x0000 (0x004C - 0x004C)
class UForcedLoopSoundNode : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ForcedLoopSoundNode");
		return ptr;
	}

};


// Class Engine.SoundNodeAmbient
// 0x0038 (0x0084 - 0x004C)
class USoundNodeAmbient : public USoundNode
{
public:
	unsigned long                                      bAttenuate : 1;                                           // 0x004C(0x0004) (Edit)
	unsigned long                                      bSpatialize : 1;                                          // 0x004C(0x0004) (Edit)
	unsigned long                                      bAttenuateWithLPF : 1;                                    // 0x004C(0x0004) (Edit)
	float                                              dBAttenuationAtMax;                                       // 0x0050(0x0004) (Edit)
	TEnumAsByte<ESoundDistanceModel>                   DistanceModel;                                            // 0x0054(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	float                                              RadiusMin;                                                // 0x0058(0x0004) (Edit)
	float                                              RadiusMax;                                                // 0x005C(0x0004) (Edit)
	float                                              LPFRadiusMin;                                             // 0x0060(0x0004) (Edit)
	float                                              LPFRadiusMax;                                             // 0x0064(0x0004) (Edit)
	float                                              PitchMin;                                                 // 0x0068(0x0004) (Edit)
	float                                              PitchMax;                                                 // 0x006C(0x0004) (Edit)
	float                                              VolumeMin;                                                // 0x0070(0x0004) (Edit)
	float                                              VolumeMax;                                                // 0x0074(0x0004) (Edit)
	TArray<struct FAmbientSoundSlot>                   SoundSlots;                                               // 0x0078(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAmbient");
		return ptr;
	}

};


// Class Engine.SoundNodeAmbientNonLoop
// 0x0024 (0x00A8 - 0x0084)
class USoundNodeAmbientNonLoop : public USoundNodeAmbient
{
public:
	float                                              DelayMin;                                                 // 0x0084(0x0004) (Edit)
	float                                              DelayMax;                                                 // 0x0088(0x0004) (Edit)
	struct FRawDistributionFloat                       DelayTime;                                                // 0x008C(0x001C) (Component, NeedCtorLink, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAmbientNonLoop");
		return ptr;
	}

};


// Class Engine.SoundNodeAmbientNonLoopToggle
// 0x0000 (0x00A8 - 0x00A8)
class USoundNodeAmbientNonLoopToggle : public USoundNodeAmbientNonLoop
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAmbientNonLoopToggle");
		return ptr;
	}

};


// Class Engine.SoundNodeAttenuation
// 0x0020 (0x006C - 0x004C)
class USoundNodeAttenuation : public USoundNode
{
public:
	unsigned long                                      bAttenuate : 1;                                           // 0x004C(0x0004) (Edit)
	unsigned long                                      bSpatialize : 1;                                          // 0x004C(0x0004) (Edit)
	unsigned long                                      bAttenuateWithLPF : 1;                                    // 0x004C(0x0004) (Edit)
	float                                              dBAttenuationAtMax;                                       // 0x0050(0x0004) (Edit)
	float                                              OmniRadius;                                               // 0x0054(0x0004) (Edit)
	TEnumAsByte<ESoundDistanceModel>                   DistanceAlgorithm;                                        // 0x0058(0x0001) (Edit)
	TEnumAsByte<ESoundDistanceCalc>                    DistanceType;                                             // 0x0059(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x005A(0x0002) MISSED OFFSET
	float                                              RadiusMin;                                                // 0x005C(0x0004) (Edit)
	float                                              RadiusMax;                                                // 0x0060(0x0004) (Edit)
	float                                              LPFRadiusMin;                                             // 0x0064(0x0004) (Edit)
	float                                              LPFRadiusMax;                                             // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAttenuation");
		return ptr;
	}

};


// Class Engine.SoundNodeAttenuationAndGain
// 0x0030 (0x007C - 0x004C)
class USoundNodeAttenuationAndGain : public USoundNode
{
public:
	unsigned long                                      bAttenuate : 1;                                           // 0x004C(0x0004) (Edit)
	unsigned long                                      bSpatialize : 1;                                          // 0x004C(0x0004) (Edit)
	unsigned long                                      bAttenuateWithLPF : 1;                                    // 0x004C(0x0004) (Edit)
	float                                              dBAttenuationAtMax;                                       // 0x0050(0x0004) (Edit)
	float                                              OmniRadius;                                               // 0x0054(0x0004) (Edit)
	TEnumAsByte<ESoundDistanceModel>                   GainDistanceAlgorithm;                                    // 0x0058(0x0001) (Edit)
	TEnumAsByte<ESoundDistanceModel>                   AttenuateDistanceAlgorithm;                               // 0x0059(0x0001) (Edit)
	TEnumAsByte<ESoundDistanceCalc>                    DistanceType;                                             // 0x005A(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x005B(0x0001) MISSED OFFSET
	float                                              MinimalVolume;                                            // 0x005C(0x0004) (Edit)
	float                                              RadiusMin;                                                // 0x0060(0x0004) (Edit)
	float                                              RadiusPeak;                                               // 0x0064(0x0004) (Edit)
	float                                              RadiusMax;                                                // 0x0068(0x0004) (Edit)
	float                                              LPFMinimal;                                               // 0x006C(0x0004) (Edit)
	float                                              LPFRadiusMin;                                             // 0x0070(0x0004) (Edit)
	float                                              LPFRadiusPeak;                                            // 0x0074(0x0004) (Edit)
	float                                              LPFRadiusMax;                                             // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeAttenuationAndGain");
		return ptr;
	}

};


// Class Engine.SoundNodeConcatenator
// 0x000C (0x0058 - 0x004C)
class USoundNodeConcatenator : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x004C(0x000C) (Edit, ExportObject, EditFixedSize, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeConcatenator");
		return ptr;
	}

};


// Class Engine.SoundNodeConcatenatorRadio
// 0x0000 (0x004C - 0x004C)
class USoundNodeConcatenatorRadio : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeConcatenatorRadio");
		return ptr;
	}

};


// Class Engine.SoundNodeDelay
// 0x0024 (0x0070 - 0x004C)
class USoundNodeDelay : public USoundNode
{
public:
	float                                              DelayMin;                                                 // 0x004C(0x0004) (Edit)
	float                                              DelayMax;                                                 // 0x0050(0x0004) (Edit)
	struct FRawDistributionFloat                       DelayDuration;                                            // 0x0054(0x001C) (Component, NeedCtorLink, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDelay");
		return ptr;
	}

};


// Class Engine.SoundNodeDistanceCrossFade
// 0x000C (0x0058 - 0x004C)
class USoundNodeDistanceCrossFade : public USoundNode
{
public:
	TArray<struct FDistanceDatum>                      CrossFadeInput;                                           // 0x004C(0x000C) (Edit, ExportObject, EditFixedSize, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDistanceCrossFade");
		return ptr;
	}

};


// Class Engine.SoundNodeDoppler
// 0x0004 (0x0050 - 0x004C)
class USoundNodeDoppler : public USoundNode
{
public:
	float                                              DopplerIntensity;                                         // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeDoppler");
		return ptr;
	}

};


// Class Engine.SoundNodeEnveloper
// 0x004C (0x0098 - 0x004C)
class USoundNodeEnveloper : public USoundNode
{
public:
	float                                              LoopStart;                                                // 0x004C(0x0004) (Edit)
	float                                              LoopEnd;                                                  // 0x0050(0x0004) (Edit)
	float                                              DurationAfterLoop;                                        // 0x0054(0x0004) (Edit)
	int                                                LoopCount;                                                // 0x0058(0x0004) (Edit)
	unsigned long                                      bLoopIndefinitely : 1;                                    // 0x005C(0x0004) (Edit)
	unsigned long                                      bLoop : 1;                                                // 0x005C(0x0004) (Edit)
	struct FRawDistributionFloat                       VolumeInterpCurve;                                        // 0x0060(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       PitchInterpCurve;                                         // 0x007C(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeEnveloper");
		return ptr;
	}

};


// Class Engine.SoundNodeLooping
// 0x0028 (0x0074 - 0x004C)
class USoundNodeLooping : public USoundNode
{
public:
	unsigned long                                      bLoopIndefinitely : 1;                                    // 0x004C(0x0004) (Edit)
	float                                              LoopCountMin;                                             // 0x0050(0x0004) (Edit)
	float                                              LoopCountMax;                                             // 0x0054(0x0004) (Edit)
	struct FRawDistributionFloat                       LoopCount;                                                // 0x0058(0x001C) (Component, NeedCtorLink, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeLooping");
		return ptr;
	}

};


// Class Engine.SoundNodeMature
// 0x0000 (0x004C - 0x004C)
class USoundNodeMature : public USoundNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeMature");
		return ptr;
	}

};


// Class Engine.SoundNodeMixer
// 0x000C (0x0058 - 0x004C)
class USoundNodeMixer : public USoundNode
{
public:
	TArray<float>                                      InputVolume;                                              // 0x004C(0x000C) (Edit, ExportObject, EditFixedSize, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeMixer");
		return ptr;
	}

};


// Class Engine.SoundNodeModulator
// 0x0048 (0x0094 - 0x004C)
class USoundNodeModulator : public USoundNode
{
public:
	float                                              PitchMin;                                                 // 0x004C(0x0004) (Edit)
	float                                              PitchMax;                                                 // 0x0050(0x0004) (Edit)
	float                                              VolumeMin;                                                // 0x0054(0x0004) (Edit)
	float                                              VolumeMax;                                                // 0x0058(0x0004) (Edit)
	struct FRawDistributionFloat                       PitchModulation;                                          // 0x005C(0x001C) (Component, NeedCtorLink, Deprecated)
	struct FRawDistributionFloat                       VolumeModulation;                                         // 0x0078(0x001C) (Component, NeedCtorLink, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeModulator");
		return ptr;
	}

};


// Class Engine.SoundNodeModulatorContinuous
// 0x0038 (0x0084 - 0x004C)
class USoundNodeModulatorContinuous : public USoundNode
{
public:
	struct FRawDistributionFloat                       PitchModulation;                                          // 0x004C(0x001C) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       VolumeModulation;                                         // 0x0068(0x001C) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeModulatorContinuous");
		return ptr;
	}

};


// Class Engine.SoundNodeOscillator
// 0x0094 (0x00E0 - 0x004C)
class USoundNodeOscillator : public USoundNode
{
public:
	unsigned long                                      bModulateVolume : 1;                                      // 0x004C(0x0004) (Edit)
	unsigned long                                      bModulatePitch : 1;                                       // 0x004C(0x0004) (Edit)
	float                                              AmplitudeMin;                                             // 0x0050(0x0004) (Edit)
	float                                              AmplitudeMax;                                             // 0x0054(0x0004) (Edit)
	float                                              FrequencyMin;                                             // 0x0058(0x0004) (Edit)
	float                                              FrequencyMax;                                             // 0x005C(0x0004) (Edit)
	float                                              OffsetMin;                                                // 0x0060(0x0004) (Edit)
	float                                              OffsetMax;                                                // 0x0064(0x0004) (Edit)
	float                                              CenterMin;                                                // 0x0068(0x0004) (Edit)
	float                                              CenterMax;                                                // 0x006C(0x0004) (Edit)
	struct FRawDistributionFloat                       Amplitude;                                                // 0x0070(0x001C) (Component, NeedCtorLink, Deprecated)
	struct FRawDistributionFloat                       Frequency;                                                // 0x008C(0x001C) (Component, NeedCtorLink, Deprecated)
	struct FRawDistributionFloat                       offset;                                                   // 0x00A8(0x001C) (Component, NeedCtorLink, Deprecated)
	struct FRawDistributionFloat                       Center;                                                   // 0x00C4(0x001C) (Component, NeedCtorLink, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeOscillator");
		return ptr;
	}

};


// Class Engine.SoundNodeRandom
// 0x0024 (0x0070 - 0x004C)
class USoundNodeRandom : public USoundNode
{
public:
	TArray<float>                                      Weights;                                                  // 0x004C(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	int                                                PreselectAtLevelLoad;                                     // 0x0058(0x0004) (Edit)
	unsigned long                                      bRandomizeWithoutReplacement : 1;                         // 0x005C(0x0004) (Edit)
	TArray<unsigned long>                              HasBeenUsed;                                              // 0x0060(0x000C) (Transient, NeedCtorLink)
	int                                                NumRandomUsed;                                            // 0x006C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeRandom");
		return ptr;
	}

};


// Class Engine.SoundNodeWave
// 0x0204 (0x0250 - 0x004C)
class USoundNodeWave : public USoundNode
{
public:
	int                                                CompressionQuality;                                       // 0x004C(0x0004) (Edit)
	unsigned long                                      bForceRealTimeDecompression : 1;                          // 0x0050(0x0004) (Edit)
	unsigned long                                      bLoopingSound : 1;                                        // 0x0050(0x0004) (Edit)
	unsigned long                                      bDynamicResource : 1;                                     // 0x0050(0x0004) (Const, Transient)
	unsigned long                                      bUseTTS : 1;                                              // 0x0050(0x0004) (Edit)
	unsigned long                                      bProcedural : 1;                                          // 0x0050(0x0004) (Transient)
	unsigned long                                      bMature : 1;                                              // 0x0050(0x0004) (Edit, Const, Localized)
	unsigned long                                      bManualWordWrap : 1;                                      // 0x0050(0x0004) (Edit, Const, Localized)
	unsigned long                                      bSingleLine : 1;                                          // 0x0050(0x0004) (Edit, Const, Localized)
	TEnumAsByte<ETTSSpeaker>                           TTSSpeaker;                                               // 0x0054(0x0001) (Edit)
	TEnumAsByte<EForcedWavePriority>                   PriorityOverride;                                         // 0x0055(0x0001) (Edit, Const)
	TEnumAsByte<EDecompressionType>                    DecompressionType;                                        // 0x0056(0x0001) (Const, Transient)
	TEnumAsByte<EDetailMode>                           MobileDetailMode;                                         // 0x0057(0x0001) (Edit, Const)
	struct FString                                     SpokenText;                                               // 0x0058(0x000C) (Edit, Const, Localized, NeedCtorLink)
	float                                              Volume;                                                   // 0x0064(0x0004) (Edit, Const, EditConst)
	float                                              Pitch;                                                    // 0x0068(0x0004) (Edit, Const, EditConst)
	float                                              Duration;                                                 // 0x006C(0x0004) (Edit, Const, EditConst)
	int                                                NumChannels;                                              // 0x0070(0x0004) (Edit, Const, EditConst)
	int                                                SampleRate;                                               // 0x0074(0x0004) (Edit, Const, EditConst)
	TArray<int>                                        ChannelOffsets;                                           // 0x0078(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        ChannelSizes;                                             // 0x0084(0x000C) (Const, NeedCtorLink)
	struct FUntypedBulkData_Mirror                     RawData;                                                  // 0x0090(0x0034) (Const, Native)
	struct FPointer                                    VorbisDecompressor;                                       // 0x00C4(0x0004) (Const, Native)
	struct FPointer                                    RawPCMData;                                               // 0x00C8(0x0004) (Const, Native)
	int                                                RawPCMDataSize;                                           // 0x00CC(0x0004) (Const)
	struct FUntypedBulkData_Mirror                     CompressedPCData;                                         // 0x00D0(0x0034) (Const, Native)
	struct FUntypedBulkData_Mirror                     CompressedXbox360Data;                                    // 0x0104(0x0034) (Const, Native)
	struct FUntypedBulkData_Mirror                     CompressedPS3Data;                                        // 0x0138(0x0034) (Const, Native)
	struct FUntypedBulkData_Mirror                     CompressedWiiUData;                                       // 0x016C(0x0034) (Const, Native)
	struct FUntypedBulkData_Mirror                     CompressedIPhoneData;                                     // 0x01A0(0x0034) (Const, Native)
	struct FUntypedBulkData_Mirror                     CompressedFlashData;                                      // 0x01D4(0x0034) (Const, Native)
	int                                                ResourceID;                                               // 0x0208(0x0004) (Const, Transient)
	int                                                ResourceSize;                                             // 0x020C(0x0004) (Const, Transient)
	struct FPointer                                    ResourceData;                                             // 0x0210(0x0004) (Const, Native)
	TArray<struct FSubtitleCue>                        Subtitles;                                                // 0x0214(0x000C) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     Comment;                                                  // 0x0220(0x000C) (Edit, Const, Localized, NeedCtorLink)
	TArray<struct FLocalizedSubtitle>                  LocalizedSubtitles;                                       // 0x022C(0x000C) (NeedCtorLink)
	struct FString                                     SourceFilePath;                                           // 0x0238(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	struct FString                                     SourceFileTimestamp;                                      // 0x0244(0x000C) (Edit, Const, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeWave");
		return ptr;
	}


	void GeneratePCMData(int SamplesNeeded, TArray<unsigned char>* Buffer);
};


// Class Engine.SoundNodeWaveStreaming
// 0x0010 (0x0260 - 0x0250)
class USoundNodeWaveStreaming : public USoundNodeWave
{
public:
	TArray<unsigned char>                              QueuedAudio;                                              // 0x0250(0x000C) (NeedCtorLink)
	float                                              InactiveDuration;                                         // 0x025C(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeWaveStreaming");
		return ptr;
	}


	void GeneratePCMData(int SamplesNeeded, TArray<unsigned char>* Buffer);
	int AvailableAudioBytes();
	void ResetAudio();
	void QueueSilence(float Seconds);
	void QueueAudio(TArray<unsigned char> Data);
};


// Class Engine.SoundNodeWaveParam
// 0x0008 (0x0054 - 0x004C)
class USoundNodeWaveParam : public USoundNode
{
public:
	struct FName                                       WaveParameterName;                                        // 0x004C(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundNodeWaveParam");
		return ptr;
	}

};


// Class Engine.LandscapeProxy
// 0x00FC (0x02D0 - 0x01D4)
class ALandscapeProxy : public AInfo
{
public:
	struct FGuid                                       LandscapeGuid;                                            // 0x01D4(0x0010) (Const)
	int                                                MaxLODLevel;                                              // 0x01E4(0x0004) (Edit)
	class UPhysicalMaterial*                           DefaultPhysMaterial;                                      // 0x01E8(0x0004) (Edit)
	float                                              StreamingDistanceMultiplier;                              // 0x01EC(0x0004) (Edit, Const)
	class UMaterialInterface*                          LandscapeMaterial;                                        // 0x01F0(0x0004) (Edit)
	float                                              LODDistanceFactor;                                        // 0x01F4(0x0004) (Edit)
	TArray<class ULandscapeComponent*>                 LandscapeComponents;                                      // 0x01F8(0x000C) (Const, ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class ULandscapeHeightfieldCollisionComponent*> CollisionComponents;                                      // 0x0204(0x000C) (Const, ExportObject, Component, NeedCtorLink, EditInline)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0210(0x003C) UNKNOWN PROPERTY: MapProperty Engine.LandscapeProxy.MaterialInstanceConstantMap
	unsigned char                                      UnknownData01[0x3C];                                      // 0x024C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.LandscapeProxy.WeightmapUsageMap
	float                                              StaticLightingResolution;                                 // 0x0288(0x0004) (Edit)
	class ALandscape*                                  LandscapeActor;                                           // 0x028C(0x0004) (Edit, Transient)
	unsigned long                                      bIsProxy : 1;                                             // 0x0290(0x0004) (Const)
	unsigned long                                      bIsSetup : 1;                                             // 0x0290(0x0004) (Transient)
	unsigned long                                      bResetup : 1;                                             // 0x0290(0x0004) (Transient)
	unsigned long                                      bIsMovingToLevel : 1;                                     // 0x0290(0x0004) (Transient)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x0294(0x001C) (Edit)
	int                                                CollisionMipLevel;                                        // 0x02B0(0x0004) (Edit)
	int                                                MobileLODBias;                                            // 0x02B4(0x0004) (Edit)
	TArray<struct FLandscapeLayerStruct>               LayerInfoObjs;                                            // 0x02B8(0x000C) (NeedCtorLink)
	int                                                ComponentSizeQuads;                                       // 0x02C4(0x0004) (Const)
	int                                                SubsectionSizeQuads;                                      // 0x02C8(0x0004) (Const)
	int                                                NumSubsections;                                           // 0x02CC(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LandscapeProxy");
		return ptr;
	}

};


// Class Engine.Landscape
// 0x0018 (0x02E8 - 0x02D0)
class ALandscape : public ALandscapeProxy
{
public:
	TArray<struct FName>                               LayerNames;                                               // 0x02D0(0x000C) (NeedCtorLink, Deprecated)
	TArray<struct FLandscapeLayerInfo>                 LayerInfos;                                               // 0x02DC(0x000C) (NeedCtorLink, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Landscape");
		return ptr;
	}

};


// Class Engine.Terrain
// 0x0100 (0x02D4 - 0x01D4)
class ATerrain : public AInfo
{
public:
	TArray<struct FTerrainHeight>                      Heights;                                                  // 0x01D4(0x000C) (Const, Native)
	TArray<struct FTerrainInfoData>                    InfoData;                                                 // 0x01E0(0x000C) (Const, Native)
	TArray<struct FTerrainLayer>                       Layers;                                                   // 0x01EC(0x000C) (Edit, Const, NeedCtorLink)
	int                                                NormalMapLayer;                                           // 0x01F8(0x0004) (Edit)
	TArray<struct FTerrainDecoLayer>                   DecoLayers;                                               // 0x01FC(0x000C) (Edit, Const, Component, NeedCtorLink)
	TArray<struct FAlphaMap>                           AlphaMaps;                                                // 0x0208(0x000C) (Const, Native)
	TArray<class UTerrainComponent*>                   TerrainComponents;                                        // 0x0214(0x000C) (Const, ExportObject, Component, NeedCtorLink, EditInline)
	int                                                NumSectionsX;                                             // 0x0220(0x0004) (Const)
	int                                                NumSectionsY;                                             // 0x0224(0x0004) (Const)
	TArray<struct ATerrain_FTerrainWeightedMaterial>   WeightedMaterials;                                        // 0x0228(0x000C) (Const, Native)
	TArray<class UTerrainWeightMapTexture*>            WeightedTextureMaps;                                      // 0x0234(0x000C) (Const, Native)
	int                                                MaxTesselationLevel;                                      // 0x0240(0x0004) (Edit)
	int                                                MinTessellationLevel;                                     // 0x0244(0x0004) (Edit)
	float                                              TesselationDistanceScale;                                 // 0x0248(0x0004) (Edit)
	float                                              TessellationCheckDistance;                                // 0x024C(0x0004) (Edit)
	int                                                CollisionTesselationLevel;                                // 0x0250(0x0004) (Edit)
	struct FCachedTerrainMaterialArray                 CachedTerrainMaterials[0x2];                              // 0x0254(0x000C) (Const, Native)
	int                                                NumVerticesX;                                             // 0x026C(0x0004) (Const)
	int                                                NumVerticesY;                                             // 0x0270(0x0004) (Const)
	int                                                NumPatchesX;                                              // 0x0274(0x0004) (Edit)
	int                                                NumPatchesY;                                              // 0x0278(0x0004) (Edit)
	int                                                MaxComponentSize;                                         // 0x027C(0x0004) (Edit)
	int                                                StaticLightingResolution;                                 // 0x0280(0x0004) (Edit)
	unsigned long                                      bIsOverridingLightResolution : 1;                         // 0x0284(0x0004) (Edit)
	unsigned long                                      bBilinearFilterLightmapGeneration : 1;                    // 0x0284(0x0004) (Edit)
	unsigned long                                      bCastShadow : 1;                                          // 0x0284(0x0004) (Edit)
	unsigned long                                      bForceDirectLightMap : 1;                                 // 0x0284(0x0004) (Edit, Const)
	unsigned long                                      bCastDynamicShadow : 1;                                   // 0x0284(0x0004) (Edit, Const)
	unsigned long                                      bEnableSpecular : 1;                                      // 0x0284(0x0004) (Edit)
	unsigned long                                      bBlockRigidBody : 1;                                      // 0x0284(0x0004) (Edit, Const)
	unsigned long                                      bAllowRigidBodyUnderneath : 1;                            // 0x0284(0x0004) (Edit, Const)
	unsigned long                                      bAcceptsDynamicLights : 1;                                // 0x0284(0x0004) (Edit, Const)
	unsigned long                                      bMorphingEnabled : 1;                                     // 0x0284(0x0004) (Edit)
	unsigned long                                      bMorphingGradientsEnabled : 1;                            // 0x0284(0x0004) (Edit)
	unsigned long                                      bLocked : 1;                                              // 0x0284(0x0004)
	unsigned long                                      bHeightmapLocked : 1;                                     // 0x0284(0x0004)
	unsigned long                                      bShowingCollision : 1;                                    // 0x0284(0x0004)
	unsigned long                                      bUseWorldOriginTextureUVs : 1;                            // 0x0284(0x0004) (Edit)
	unsigned long                                      bShowWireframe : 1;                                       // 0x0284(0x0004) (Edit)
	class UPhysicalMaterial*                           TerrainPhysMaterialOverride;                              // 0x0288(0x0004) (Edit, Const)
	struct FLightingChannelContainer                   LightingChannels;                                         // 0x028C(0x0004) (Edit, Const)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x0290(0x001C) (Edit)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x02AC(0x0004) (Const, Native)
	int                                                EditorTessellationLevel;                                  // 0x02B0(0x0004) (Edit, Transient)
	TArray<struct FSelectedTerrainVertex>              SelectedVertices;                                         // 0x02B4(0x000C) (Transient, NeedCtorLink)
	struct FColor                                      WireframeColor;                                           // 0x02C0(0x0004) (Edit)
	struct FGuid                                       LightingGuid;                                             // 0x02C4(0x0010) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Terrain");
		return ptr;
	}


	void PostBeginPlay();
	void CalcLayerBounds();
};


// Class Engine.LandscapeGizmoActor
// 0x001C (0x01F0 - 0x01D4)
class ALandscapeGizmoActor : public AActor
{
public:
	float                                              Width;                                                    // 0x01D4(0x0004) (Edit)
	float                                              Height;                                                   // 0x01D8(0x0004) (Edit)
	float                                              LengthZ;                                                  // 0x01DC(0x0004) (Edit)
	float                                              MarginZ;                                                  // 0x01E0(0x0004) (Edit)
	float                                              MinRelativeZ;                                             // 0x01E4(0x0004) (Edit)
	float                                              RelativeScaleZ;                                           // 0x01E8(0x0004) (Edit)
	class ULandscapeInfo*                              TargetLandscapeInfo;                                      // 0x01EC(0x0004) (Edit, Transient, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LandscapeGizmoActor");
		return ptr;
	}

};


// Class Engine.LandscapeGizmoActiveActor
// 0x00F4 (0x02E4 - 0x01F0)
class ALandscapeGizmoActiveActor : public ALandscapeGizmoActor
{
public:
	TEnumAsByte<ELandscapeGizmoType>                   DataType;                                                 // 0x01F0(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01F1(0x0003) MISSED OFFSET
	unsigned char                                      UnknownData01[0x3C];                                      // 0x01F1(0x003C) UNKNOWN PROPERTY: MapProperty Engine.LandscapeGizmoActiveActor.SelectedData
	class UTexture2D*                                  GizmoTexture;                                             // 0x0230(0x0004)
	struct FVector2D                                   TextureScale;                                             // 0x0234(0x0008)
	TArray<struct FVector>                             SampledHeight;                                            // 0x023C(0x000C) (NeedCtorLink)
	TArray<struct FVector>                             SampledNormal;                                            // 0x0248(0x000C) (NeedCtorLink)
	int                                                SampleSizeX;                                              // 0x0254(0x0004)
	int                                                SampleSizeY;                                              // 0x0258(0x0004)
	float                                              CachedWidth;                                              // 0x025C(0x0004)
	float                                              CachedHeight;                                             // 0x0260(0x0004)
	float                                              CachedScaleXY;                                            // 0x0264(0x0004)
	struct FVector                                     FrustumVerts[0x8];                                        // 0x0268(0x000C) (Transient)
	class UMaterial*                                   GizmoMaterial;                                            // 0x02C8(0x0004)
	class UMaterialInstance*                           GizmoDataMaterial;                                        // 0x02CC(0x0004)
	class UMaterial*                                   GizmoMeshMaterial;                                        // 0x02D0(0x0004)
	class UMaterial*                                   GizmoMeshMaterial2;                                       // 0x02D4(0x0004)
	TArray<struct FName>                               LayerNames;                                               // 0x02D8(0x000C) (Edit, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LandscapeGizmoActiveActor");
		return ptr;
	}

};


// Class Engine.LandscapeComponent
// 0x00FC (0x02D4 - 0x01D8)
class ULandscapeComponent : public UPrimitiveComponent
{
public:
	int                                                SectionBaseX;                                             // 0x01D8(0x0004) (Edit, Const, EditConst)
	int                                                SectionBaseY;                                             // 0x01DC(0x0004) (Edit, Const, EditConst)
	int                                                ComponentSizeQuads;                                       // 0x01E0(0x0004) (Const)
	int                                                SubsectionSizeQuads;                                      // 0x01E4(0x0004) (Const)
	int                                                NumSubsections;                                           // 0x01E8(0x0004) (Const)
	class UMaterialInterface*                          OverrideMaterial;                                         // 0x01EC(0x0004) (Edit)
	class UMaterialInstanceConstant*                   MaterialInstance;                                         // 0x01F0(0x0004)
	TArray<struct FWeightmapLayerAllocationInfo>       WeightmapLayerAllocations;                                // 0x01F4(0x000C) (Const, NeedCtorLink)
	TArray<class UTexture2D*>                          WeightmapTextures;                                        // 0x0200(0x000C) (Const, NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                                       // 0x020C(0x0004) MISSED OFFSET
	struct FVector4                                    WeightmapScaleBias;                                       // 0x0210(0x0010)
	float                                              WeightmapSubsectionOffset;                                // 0x0220(0x0004)
	unsigned char                                      UnknownData01[0xC];                                       // 0x0224(0x000C) MISSED OFFSET
	struct FVector4                                    HeightmapScaleBias;                                       // 0x0230(0x0010)
	class UTexture2D*                                  HeightmapTexture;                                         // 0x0240(0x0004) (Const)
	struct FBoxSphereBounds                            CachedBoxSphereBounds;                                    // 0x0244(0x001C) (Const)
	struct FBox                                        CachedLocalBox;                                           // 0x0260(0x001C) (Const)
	struct FGuid                                       LightingGuid;                                             // 0x027C(0x0010) (Const)
	TArray<class UShadowMap2D*>                        ShadowMaps;                                               // 0x028C(0x000C) (Const, NeedCtorLink)
	TArray<struct FGuid>                               IrrelevantLights;                                         // 0x0298(0x000C) (Const, NeedCtorLink)
	struct FLightMapRef                                LightMap;                                                 // 0x02A4(0x0004) (Const, Native)
	struct FPointer                                    EditToolRenderData;                                       // 0x02A8(0x0004) (Native)
	int                                                CollisionMipLevel;                                        // 0x02AC(0x0004)
	struct FPointer                                    PlatformData;                                             // 0x02B0(0x0004) (Native)
	int                                                PlatformDataSize;                                         // 0x02B4(0x0004) (Const, Native)
	unsigned long                                      bNeedPostUndo : 1;                                        // 0x02B8(0x0004) (Transient)
	int                                                ForcedLOD;                                                // 0x02BC(0x0004) (Edit)
	unsigned char                                      NeighborLOD[0x8];                                         // 0x02C0(0x0001)
	unsigned char                                      NeighborLODBias[0x8];                                     // 0x02C8(0x0001)
	int                                                LODBias;                                                  // 0x02D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LandscapeComponent");
		return ptr;
	}

};


// Class Engine.LandscapeGizmoRenderComponent
// 0x0000 (0x01D8 - 0x01D8)
class ULandscapeGizmoRenderComponent : public UPrimitiveComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LandscapeGizmoRenderComponent");
		return ptr;
	}

};


// Class Engine.LandscapeHeightfieldCollisionComponent
// 0x00C0 (0x0298 - 0x01D8)
class ULandscapeHeightfieldCollisionComponent : public UPrimitiveComponent
{
public:
	struct FUntypedBulkData_Mirror                     CollisionHeightData;                                      // 0x01D8(0x0034) (Const, Native)
	TArray<struct FName>                               ComponentLayers;                                          // 0x020C(0x000C) (Const, NeedCtorLink)
	struct FUntypedBulkData_Mirror                     DominantLayerData;                                        // 0x0218(0x0034) (Const, Native)
	int                                                SectionBaseX;                                             // 0x024C(0x0004) (Const)
	int                                                SectionBaseY;                                             // 0x0250(0x0004) (Const)
	int                                                CollisionSizeQuads;                                       // 0x0254(0x0004)
	float                                              CollisionScale;                                           // 0x0258(0x0004)
	TArray<unsigned char>                              CollisionQuadFlags;                                       // 0x025C(0x000C) (Const, NeedCtorLink)
	TArray<class UPhysicalMaterial*>                   PhysicalMaterials;                                        // 0x0268(0x000C) (Const, NeedCtorLink)
	struct FPointer                                    RBHeightfield;                                            // 0x0274(0x0004) (Const, Native)
	struct FBoxSphereBounds                            CachedBoxSphereBounds;                                    // 0x0278(0x001C) (Const)
	unsigned long                                      bIncludeHoles : 1;                                        // 0x0294(0x0004)
	unsigned long                                      bHeightFieldDataHasHole : 1;                              // 0x0294(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LandscapeHeightfieldCollisionComponent");
		return ptr;
	}

};


// Class Engine.TerrainComponent
// 0x0074 (0x024C - 0x01D8)
class UTerrainComponent : public UPrimitiveComponent
{
public:
	TArray<class UShadowMap2D*>                        ShadowMaps;                                               // 0x01D8(0x000C) (Const, NeedCtorLink)
	TArray<struct FGuid>                               IrrelevantLights;                                         // 0x01E4(0x000C) (Const, NeedCtorLink)
	struct FPointer                                    TerrainObject;                                            // 0x01F0(0x0004) (Const, Native, Transient)
	int                                                SectionBaseX;                                             // 0x01F4(0x0004) (Const)
	int                                                SectionBaseY;                                             // 0x01F8(0x0004) (Const)
	int                                                SectionSizeX;                                             // 0x01FC(0x0004) (Const)
	int                                                SectionSizeY;                                             // 0x0200(0x0004) (Const)
	int                                                TrueSectionSizeX;                                         // 0x0204(0x0004) (Const)
	int                                                TrueSectionSizeY;                                         // 0x0208(0x0004) (Const)
	struct FLightMapRef                                LightMap;                                                 // 0x020C(0x0004) (Const, Native)
	TArray<struct FTerrainPatchBounds>                 PatchBounds;                                              // 0x0210(0x000C) (Const, Native, Transient)
	TArray<struct FTerrainMaterialMask>                BatchMaterials;                                           // 0x021C(0x000C) (Const, Native, Transient)
	int                                                FullBatch;                                                // 0x0228(0x0004) (Const, Native, Transient)
	struct FTerrainBVTree                              BVTree;                                                   // 0x022C(0x000C) (Const, Native, Transient)
	TArray<struct FVector>                             CollisionVertices;                                        // 0x0238(0x000C) (Const, Native, Transient)
	struct FPointer                                    RBHeightfield;                                            // 0x0244(0x0004) (Const, Native)
	unsigned long                                      bDisplayCollisionLevel : 1;                               // 0x0248(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainComponent");
		return ptr;
	}

};


// Class Engine.LandscapeInfo
// 0x0244 (0x0280 - 0x003C)
class ULandscapeInfo : public UObject
{
public:
	struct FGuid                                       LandscapeGuid;                                            // 0x003C(0x0010) (Const)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x004C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.LandscapeInfo.LayerInfoMap
	struct FPointer                                    DataInterface;                                            // 0x0088(0x0004) (Const, Native)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x008C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.LandscapeInfo.XYtoComponentMap
	unsigned char                                      UnknownData02[0x3C];                                      // 0x00C8(0x003C) UNKNOWN PROPERTY: MapProperty Engine.LandscapeInfo.XYtoCollisionComponentMap
	class ALandscapeProxy*                             LandscapeProxy;                                           // 0x0104(0x0004) (Const)
	unsigned char                                      UnknownData03[0x3C];                                      // 0x0108(0x003C) UNKNOWN PROPERTY: MapProperty Engine.LandscapeInfo.XYtoAddCollisionMap
	struct FSet_Mirror                                 Proxies;                                                  // 0x0144(0x003C) (Const, Native, Transient)
	struct FSet_Mirror                                 SelectedComponents;                                       // 0x0180(0x003C) (Const, Native)
	struct FSet_Mirror                                 SelectedCollisionComponents;                              // 0x01BC(0x003C) (Const, Native)
	struct FSet_Mirror                                 SelectedRegionComponents;                                 // 0x01F8(0x003C) (Const, Native)
	unsigned char                                      UnknownData04[0x3C];                                      // 0x0234(0x003C) UNKNOWN PROPERTY: MapProperty Engine.LandscapeInfo.SelectedRegion
	struct FString                                     HeightmapFilePath;                                        // 0x0270(0x000C) (NeedCtorLink)
	unsigned long                                      bIsValid : 1;                                             // 0x027C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LandscapeInfo");
		return ptr;
	}

};


// Class Engine.LandscapeLayerInfoObject
// 0x0014 (0x0050 - 0x003C)
class ULandscapeLayerInfoObject : public UObject
{
public:
	struct FName                                       LayerName;                                                // 0x003C(0x0008) (Edit)
	class UPhysicalMaterial*                           PhysMaterial;                                             // 0x0044(0x0004) (Edit)
	float                                              Hardness;                                                 // 0x0048(0x0004) (Edit)
	unsigned long                                      bNoWeightBlend : 1;                                       // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LandscapeLayerInfoObject");
		return ptr;
	}

};


// Class Engine.TerrainWeightMapTexture
// 0x0010 (0x01D8 - 0x01C8)
class UTerrainWeightMapTexture : public UTexture2D
{
public:
	class ATerrain*                                    ParentTerrain;                                            // 0x01C8(0x0004) (Const)
	TArray<struct FPointer>                            WeightedMaterials;                                        // 0x01CC(0x000C) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainWeightMapTexture");
		return ptr;
	}

};


// Class Engine.TerrainLayerSetup
// 0x000C (0x0048 - 0x003C)
class UTerrainLayerSetup : public UObject
{
public:
	TArray<struct FTerrainFilteredMaterial>            Materials;                                                // 0x003C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainLayerSetup");
		return ptr;
	}


	void PostBeginPlay();
};


// Class Engine.TerrainMaterial
// 0x0064 (0x00A0 - 0x003C)
class UTerrainMaterial : public UObject
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x003C(0x0004) MISSED OFFSET
	struct FMatrix                                     LocalToMapping;                                           // 0x0040(0x0040)
	TEnumAsByte<ETerrainMappingType>                   MappingType;                                              // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	float                                              MappingScale;                                             // 0x0084(0x0004) (Edit)
	float                                              MappingRotation;                                          // 0x0088(0x0004) (Edit)
	float                                              MappingPanU;                                              // 0x008C(0x0004) (Edit)
	float                                              MappingPanV;                                              // 0x0090(0x0004) (Edit)
	class UMaterialInterface*                          Material;                                                 // 0x0094(0x0004) (Edit)
	class UTexture2D*                                  DisplacementMap;                                          // 0x0098(0x0004) (Edit)
	float                                              DisplacementScale;                                        // 0x009C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainMaterial");
		return ptr;
	}

};


// Class Engine.DataStoreClient
// 0x003C (0x0084 - 0x0048)
class UDataStoreClient : public UUIRoot
{
public:
	TArray<struct FString>                             GlobalDataStoreClasses;                                   // 0x0048(0x000C) (Config, NeedCtorLink)
	TArray<class UUIDataStore*>                        GlobalDataStores;                                         // 0x0054(0x000C) (Const, NeedCtorLink)
	TArray<struct FString>                             PlayerDataStoreClassNames;                                // 0x0060(0x000C) (Config, NeedCtorLink)
	TArray<class UClass*>                              PlayerDataStoreClasses;                                   // 0x006C(0x000C) (Const, NeedCtorLink)
	TArray<struct FPlayerDataStoreGroup>               PlayerDataStores;                                         // 0x0078(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DataStoreClient");
		return ptr;
	}


	void DebugDumpDataStoreInfo(bool bVerbose);
	void NotifyGameSessionEnded();
	class UClass* FindDataStoreClass(class UClass* RequiredMetaClass);
	void GetPlayerDataStoreClasses(TArray<class UClass*>* out_DataStoreClasses);
	int FindPlayerDataStoreIndex(class ULocalPlayer* PlayerOwner);
	bool UnregisterDataStore(class UUIDataStore* DataStore);
	bool RegisterDataStore(class UUIDataStore* DataStore, class ULocalPlayer* PlayerOwner);
	class UUIDataStore* CreateDataStore(class UClass* DataStoreClass);
	class UUIDataStore* FindDataStore(const struct FName& DataStoreTag, class ULocalPlayer* PlayerOwner);
};


// Class Engine.Console
// 0x016C (0x01E4 - 0x0078)
class UConsole : public UInteraction
{
public:
	class ULocalPlayer*                                ConsoleTargetPlayer;                                      // 0x0078(0x0004)
	class UTexture2D*                                  DefaultTexture_Black;                                     // 0x007C(0x0004)
	class UTexture2D*                                  DefaultTexture_White;                                     // 0x0080(0x0004)
	struct FName                                       ConsoleKey;                                               // 0x0084(0x0008) (Config, GlobalConfig)
	struct FName                                       TypeKey;                                                  // 0x008C(0x0008) (Config, GlobalConfig)
	struct FName                                       AutoCompleteKey;                                          // 0x0094(0x0008) (Config, GlobalConfig)
	TArray<struct FString>                             AllowedCommands;                                          // 0x009C(0x000C) (NeedCtorLink)
	int                                                MaxScrollbackSize;                                        // 0x00A8(0x0004) (Config, GlobalConfig)
	TArray<struct FString>                             Scrollback;                                               // 0x00AC(0x000C) (NeedCtorLink)
	int                                                SBHead;                                                   // 0x00B8(0x0004)
	int                                                SBPos;                                                    // 0x00BC(0x0004)
	int                                                HistoryTop;                                               // 0x00C0(0x0004) (Config)
	int                                                HistoryBot;                                               // 0x00C4(0x0004) (Config)
	int                                                HistoryCur;                                               // 0x00C8(0x0004) (Config)
	struct FString                                     History[0x10];                                            // 0x00CC(0x000C) (Config, NeedCtorLink)
	unsigned long                                      bNavigatingHistory : 1;                                   // 0x018C(0x0004) (Transient)
	unsigned long                                      bCaptureKeyInput : 1;                                     // 0x018C(0x0004) (Transient)
	unsigned long                                      bCtrl : 1;                                                // 0x018C(0x0004)
	unsigned long                                      bEnableUI : 1;                                            // 0x018C(0x0004) (Config)
	unsigned long                                      bPressedEnter : 1;                                        // 0x018C(0x0004) (Transient)
	unsigned long                                      bAutoCompleteLocked : 1;                                  // 0x018C(0x0004) (Transient)
	unsigned long                                      bRequireCtrlToNavigateAutoComplete : 1;                   // 0x018C(0x0004) (Config)
	unsigned long                                      bIsRuntimeAutoCompleteUpToDate : 1;                       // 0x018C(0x0004) (Transient)
	struct FString                                     TypedStr;                                                 // 0x0190(0x000C) (NeedCtorLink)
	int                                                TypedStrPos;                                              // 0x019C(0x0004)
	TArray<struct FAutoCompleteCommand>                ManualAutoCompleteList;                                   // 0x01A0(0x000C) (Config, NeedCtorLink)
	TArray<struct FAutoCompleteCommand>                AutoCompleteList;                                         // 0x01AC(0x000C) (Transient, NeedCtorLink)
	int                                                AutoCompleteIndex;                                        // 0x01B8(0x0004) (Transient)
	struct FAutoCompleteNode                           AutoCompleteTree;                                         // 0x01BC(0x001C) (Native, Transient)
	TArray<int>                                        AutoCompleteIndices;                                      // 0x01D8(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Console");
		return ptr;
	}


	void UpdateCompleteIndices();
	void BuildRuntimeAutoCompleteList(bool bForce);
	void AppendInputText(const struct FString& Text);
	bool ProcessControlKey(const struct FName& Key, TEnumAsByte<EInputEvent> Event);
	void FlushPlayerInput();
	bool InputChar(int ControllerId, const struct FString& Unicode);
	bool InputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> Event, float AmountDepressed, bool bGamepad);
	void PostRender_Console(class UCanvas* Canvas);
	void StartTyping(const struct FString& Text);
	void OutputText(const struct FString& Text);
	void OutputTextLine(const struct FString& Text);
	void ClearOutput();
	void ConsoleCommand(const struct FString& Command);
	bool IsCommandAllowed(const struct FString& Command);
	void PurgeCommandFromHistory(const struct FString& Command);
	void SetCursorPos(int Position);
	void SetInputText(const struct FString& Text);
	void Initialized();
};


// Class Engine.Input
// 0x00A0 (0x0118 - 0x0078)
class UInput : public UInteraction
{
public:
	TArray<struct FKeyBind>                            Bindings;                                                 // 0x0078(0x000C) (Config, NeedCtorLink)
	TArray<struct FName>                               PressedKeys;                                              // 0x0084(0x000C) (NeedCtorLink)
	int                                                CurrentControllerId;                                      // 0x0090(0x0004) (Const)
	TEnumAsByte<EInputEvent>                           CurrentEvent;                                             // 0x0094(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	float                                              CurrentDelta;                                             // 0x0098(0x0004) (Const)
	float                                              CurrentDeltaTime;                                         // 0x009C(0x0004) (Const)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x00A0(0x003C) UNKNOWN PROPERTY: MapProperty Engine.Input.NameToPtr
	TArray<struct FPointer>                            AxisArray;                                                // 0x00DC(0x000C) (Const, Native, AlwaysInit)
	TArray<class USeqEvent_Input*>                     CachedInputEvents;                                        // 0x00E8(0x000C) (Const, NeedCtorLink)
	TArray<class USeqEvent_AnalogInput*>               CachedAnalogInputEvents;                                  // 0x00F4(0x000C) (Const, NeedCtorLink)
	TArray<class USeqEvent_TouchInput*>                CachedTouchInputEvents;                                   // 0x0100(0x000C) (Const, NeedCtorLink)
	TArray<struct FTouchTracker>                       CurrentTouches;                                           // 0x010C(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Input");
		return ptr;
	}


	void SetBind(const struct FString& Command, struct FName* BindName);
	struct FString GetBind(struct FName* Key);
	void ResetInput();
};


// Class Engine.PlayerInput
// 0x0150 (0x0268 - 0x0118)
class UPlayerInput : public UInput
{
public:
	unsigned long                                      bUsingGamepad : 1;                                        // 0x0118(0x0004) (Const)
	unsigned long                                      bInvertMouse : 1;                                         // 0x0118(0x0004) (Config, GlobalConfig)
	unsigned long                                      bInvertTurn : 1;                                          // 0x0118(0x0004) (Config, GlobalConfig)
	unsigned long                                      bWasForward : 1;                                          // 0x0118(0x0004)
	unsigned long                                      bWasBack : 1;                                             // 0x0118(0x0004)
	unsigned long                                      bWasLeft : 1;                                             // 0x0118(0x0004)
	unsigned long                                      bWasRight : 1;                                            // 0x0118(0x0004)
	unsigned long                                      bEdgeForward : 1;                                         // 0x0118(0x0004)
	unsigned long                                      bEdgeBack : 1;                                            // 0x0118(0x0004)
	unsigned long                                      bEdgeLeft : 1;                                            // 0x0118(0x0004)
	unsigned long                                      bEdgeRight : 1;                                           // 0x0118(0x0004)
	unsigned long                                      bEnableMouseSmoothing : 1;                                // 0x0118(0x0004) (Config, GlobalConfig)
	unsigned long                                      bEnableFOVScaling : 1;                                    // 0x0118(0x0004)
	unsigned long                                      bLockTurnUntilRelease : 1;                                // 0x0118(0x0004) (Transient)
	struct FName                                       LastAxisKeyName;                                          // 0x011C(0x0008) (Const)
	float                                              DoubleClickTimer;                                         // 0x0124(0x0004)
	float                                              DoubleClickTime;                                          // 0x0128(0x0004) (Config, GlobalConfig)
	float                                              MouseSensitivity;                                         // 0x012C(0x0004) (Config, GlobalConfig)
	float                                              aBaseX;                                                   // 0x0130(0x0004) (Input)
	float                                              aBaseY;                                                   // 0x0134(0x0004) (Input)
	float                                              aBaseZ;                                                   // 0x0138(0x0004) (Input)
	float                                              aMouseX;                                                  // 0x013C(0x0004) (Input)
	float                                              aMouseY;                                                  // 0x0140(0x0004) (Input)
	float                                              aForward;                                                 // 0x0144(0x0004) (Input)
	float                                              aTurn;                                                    // 0x0148(0x0004) (Input)
	float                                              aStrafe;                                                  // 0x014C(0x0004) (Input)
	float                                              aUp;                                                      // 0x0150(0x0004) (Input)
	float                                              aLookUp;                                                  // 0x0154(0x0004) (Input)
	float                                              aMouseAimX;                                               // 0x0158(0x0004) (Input)
	float                                              aMouseAimY;                                               // 0x015C(0x0004) (Input)
	float                                              aRightAnalogTrigger;                                      // 0x0160(0x0004) (Input)
	float                                              aLeftAnalogTrigger;                                       // 0x0164(0x0004) (Input)
	float                                              aPS3AccelX;                                               // 0x0168(0x0004) (Input)
	float                                              aPS3AccelY;                                               // 0x016C(0x0004) (Input)
	float                                              aPS3AccelZ;                                               // 0x0170(0x0004) (Input)
	float                                              aPS3Gyro;                                                 // 0x0174(0x0004) (Input)
	float                                              aWiiUPointerX;                                            // 0x0178(0x0004) (Input)
	float                                              aWiiUPointerY;                                            // 0x017C(0x0004) (Input)
	struct FVector                                     aTilt;                                                    // 0x0180(0x000C) (Input)
	struct FVector                                     aRotationRate;                                            // 0x018C(0x000C) (Input)
	struct FVector                                     aGravity;                                                 // 0x0198(0x000C) (Input)
	struct FVector                                     aAcceleration;                                            // 0x01A4(0x000C) (Input)
	struct FVector                                     aTouch[0x5];                                              // 0x01B0(0x000C) (Input)
	struct FVector                                     aBackTouch[0x5];                                          // 0x01EC(0x000C) (Input)
	float                                              RawJoyUp;                                                 // 0x0228(0x0004) (Transient)
	float                                              RawJoyRight;                                              // 0x022C(0x0004) (Transient)
	float                                              RawJoyLookRight;                                          // 0x0230(0x0004) (Transient)
	float                                              RawJoyLookUp;                                             // 0x0234(0x0004) (Transient)
	float                                              MoveForwardSpeed;                                         // 0x0238(0x0004) (Edit, Config)
	float                                              MoveStrafeSpeed;                                          // 0x023C(0x0004) (Edit, Config)
	float                                              LookRightScale;                                           // 0x0240(0x0004) (Edit, Config)
	float                                              LookUpScale;                                              // 0x0244(0x0004) (Edit, Config)
	unsigned char                                      bStrafe;                                                  // 0x0248(0x0001) (Input)
	unsigned char                                      bXAxis;                                                   // 0x0249(0x0001) (Input)
	unsigned char                                      bYAxis;                                                   // 0x024A(0x0001) (Input)
	unsigned char                                      UnknownData00[0x1];                                       // 0x024B(0x0001) MISSED OFFSET
	float                                              ZeroTime[0x2];                                            // 0x024C(0x0004)
	float                                              SmoothedMouse[0x2];                                       // 0x0254(0x0004)
	int                                                MouseSamples;                                             // 0x025C(0x0004)
	float                                              MouseSamplingTotal;                                       // 0x0260(0x0004)
	float                                              AutoUnlockTurnTime;                                       // 0x0264(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerInput");
		return ptr;
	}


	bool KeyInput(int ControllerId, const struct FName& KeyName, TEnumAsByte<EInputEvent> IEvent, float AmountDepressed, bool bGamepad);
	void PreClientTravel(const struct FString& PendingURL, TEnumAsByte<ETravelType> TravelType, bool bIsSeamlessTravel);
	void ClientInitInputSystem();
	void InitInputSystem();
	float SmoothMouse(float aMouse, float DeltaTime, int Index, unsigned char* SampleCount);
	void ClearSmoothing();
	void SmartJump();
	void Jump();
	void ProcessInputMatching(float DeltaTime);
	TEnumAsByte<EDoubleClickDir> CheckForDoubleClickMove(float DeltaTime);
	void CatchDoubleClickInput();
	void ClearMouseAim();
	void PlayerInput(float DeltaTime);
	void AdjustMouseSensitivity(float FOVScale);
	void PostProcessInput(float DeltaTime);
	void PreProcessInput(float DeltaTime);
	void DrawHUD(class AHUD* H);
	void SetSensitivity(float F);
	bool InvertTurn();
	bool InvertMouse();
	void CancelMobileInput();
};


// Class Engine.PlayerManagerInteraction
// 0x0000 (0x0078 - 0x0078)
class UPlayerManagerInteraction : public UInteraction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerManagerInteraction");
		return ptr;
	}

};


// Class Engine.UISceneClient
// 0x00A0 (0x00E8 - 0x0048)
class UUISceneClient : public UUIRoot
{
public:
	struct FPointer                                    VfTable_FExec;                                            // 0x0048(0x0004) (Const, Native, NoExport)
	struct FPointer                                    RenderViewport;                                           // 0x004C(0x0004) (Const, Native, Transient)
	struct FIntPoint                                   MousePosition;                                            // 0x0050(0x0008) (Const, Transient)
	class UDataStoreClient*                            DataStoreManager;                                         // 0x0058(0x0004) (Const, Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x005C(0x0004) MISSED OFFSET
	struct FMatrix                                     CanvasToScreen;                                           // 0x0060(0x0040) (Const, Transient)
	struct FMatrix                                     InvCanvasToScreen;                                        // 0x00A0(0x0040) (Const, Transient)
	class UPostProcessChain*                           UIScenePostProcess;                                       // 0x00E0(0x0004) (Transient)
	unsigned long                                      bEnablePostProcess : 1;                                   // 0x00E4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISceneClient");
		return ptr;
	}


	void InitializeSceneClient();
	struct FMatrix GetInverseCanvasToScreen();
	struct FMatrix GetCanvasToScreen();
	bool IsUIActive(int Flags);
};


// Class Engine.UISoundTheme
// 0x000C (0x0048 - 0x003C)
class UUISoundTheme : public UObject
{
public:
	TArray<struct FSoundEventMapping>                  SoundEventBindings;                                       // 0x003C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UISoundTheme");
		return ptr;
	}


	void ProcessSoundEvent(const struct FName& SoundEventName, class APlayerController* SoundOwner);
};


// Class Engine.UIDataStoreSubscriber
// 0x0000 (0x003C - 0x003C)
class UUIDataStoreSubscriber : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStoreSubscriber");
		return ptr;
	}


	void ClearBoundDataStores();
	void GetBoundDataStores(TArray<class UUIDataStore*>* out_BoundDataStores);
	void NotifyDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool RefreshSubscriberValue(int BindingIndex);
	struct FString GetDataStoreBinding(int BindingIndex);
	void SetDataStoreBinding(const struct FString& MarkupText, int BindingIndex);
};


// Class Engine.UIDataStorePublisher
// 0x0000 (0x003C - 0x003C)
class UUIDataStorePublisher : public UUIDataStoreSubscriber
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStorePublisher");
		return ptr;
	}


	bool SaveSubscriberValue(int BindingIndex, TArray<class UUIDataStore*>* out_BoundDataStores);
};


// Class Engine.UIDataProvider
// 0x0000 (0x0048 - 0x0048)
class UUIDataProvider : public UUIRoot
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider");
		return ptr;
	}

};


// Class Engine.UIDataProvider_OnlinePlayerDataBase
// 0x0004 (0x004C - 0x0048)
class UUIDataProvider_OnlinePlayerDataBase : public UUIDataProvider
{
public:
	int                                                PlayerControllerId;                                       // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlinePlayerDataBase");
		return ptr;
	}


	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class Engine.UIDataProvider_OnlineFriendMessages
// 0x0054 (0x00A0 - 0x004C)
class UUIDataProvider_OnlineFriendMessages : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	TArray<struct FOnlineFriendMessage>                Messages;                                                 // 0x004C(0x000C) (NeedCtorLink)
	struct FString                                     SendingPlayerNameCol;                                     // 0x0058(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bIsFriendInviteCol;                                       // 0x0064(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bWasAcceptedCol;                                          // 0x0070(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bWasDeniedCol;                                            // 0x007C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MessageCol;                                               // 0x0088(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LastInviteFrom;                                           // 0x0094(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlineFriendMessages");
		return ptr;
	}


	void OnGameInviteReceived(unsigned char LocalUserNum, const struct FString& InviterName);
	void OnLoginChange(unsigned char LocalUserNum);
	void OnFriendMessageReceived(unsigned char LocalUserNum, const struct FUniqueNetId& SendingPlayer, const struct FString& SendingNick, const struct FString& Message);
	void OnFriendInviteReceived(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const struct FString& RequestingNick, const struct FString& Message);
	void ReadMessages();
	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class Engine.UIDataProvider_OnlineFriends
// 0x00B4 (0x0100 - 0x004C)
class UUIDataProvider_OnlineFriends : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	TArray<struct FOnlineFriend>                       FriendsList;                                              // 0x004C(0x000C) (NeedCtorLink)
	struct FString                                     NickNameCol;                                              // 0x0058(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     PresenceInfoCol;                                          // 0x0064(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FriendStateCol;                                           // 0x0070(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bIsOnlineCol;                                             // 0x007C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bIsPlayingCol;                                            // 0x0088(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bIsPlayingThisGameCol;                                    // 0x0094(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bIsJoinableCol;                                           // 0x00A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bHasVoiceSupportCol;                                      // 0x00AC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bHaveInvitedCol;                                          // 0x00B8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     bHasInvitedYouCol;                                        // 0x00C4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     OfflineText;                                              // 0x00D0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     OnlineText;                                               // 0x00DC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     AwayText;                                                 // 0x00E8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BusyText;                                                 // 0x00F4(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlineFriends");
		return ptr;
	}


	void RefreshFriendsList();
	void OnLoginChange(unsigned char LocalUserNum);
	void OnFriendsReadComplete(bool bWasSuccessful);
	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class Engine.UIDataProvider_OnlinePartyChatList
// 0x006C (0x00B8 - 0x004C)
class UUIDataProvider_OnlinePartyChatList : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	TArray<struct FOnlinePartyMember>                  PartyMembersList;                                         // 0x004C(0x000C) (NeedCtorLink)
	TArray<struct FString>                             NatTypes;                                                 // 0x0058(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NickNameCol;                                              // 0x0064(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NatTypeCol;                                               // 0x0070(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IsLocalCol;                                               // 0x007C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IsInPartyVoiceCol;                                        // 0x0088(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IsTalkingCol;                                             // 0x0094(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IsInGameSessionCol;                                       // 0x00A0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IsPlayingThisGameCol;                                     // 0x00AC(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlinePartyChatList");
		return ptr;
	}


	void RefreshMembersList();
	void OnLoginChange(unsigned char LocalUserNum);
	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class Engine.UIDataProvider_OnlinePlayerStorage
// 0x0020 (0x006C - 0x004C)
class UUIDataProvider_OnlinePlayerStorage : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	class UOnlinePlayerStorage*                        Profile;                                                  // 0x004C(0x0004)
	struct FName                                       ProviderName;                                             // 0x0050(0x0008) (Const)
	unsigned long                                      bWasErrorLastRead : 1;                                    // 0x0058(0x0004)
	unsigned long                                      bIsExternalUIOpen : 1;                                    // 0x0058(0x0004)
	unsigned long                                      bNeedsDeferredRefresh : 1;                                // 0x0058(0x0004)
	TArray<struct FPlayerStorageArrayProvider>         PlayerStorageArrayProviders;                              // 0x005C(0x000C) (NeedCtorLink)
	int                                                DeviceStorageSizeNeeded;                                  // 0x0068(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlinePlayerStorage");
		return ptr;
	}


	void OnExternalUIChange(bool bIsOpening);
	void OnStorageDeviceChange();
	void OnDeviceSelectionComplete(bool bWasSuccessful);
	void ShowDeviceSelection();
	void RefreshStorageData();
	void OnLoginChange(unsigned char LocalUserNum);
	void OnReadStorageComplete(unsigned char LocalUserNum, bool bWasSuccessful);
	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
	void ClearReadCompleteDelegate(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum);
	void AddReadCompleteDelegate(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum);
	bool GetData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum);
	bool WriteData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage);
	bool ReadData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage);
};


// Class Engine.UIDataProvider_OnlineProfileSettings
// 0x0000 (0x006C - 0x006C)
class UUIDataProvider_OnlineProfileSettings : public UUIDataProvider_OnlinePlayerStorage
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlineProfileSettings");
		return ptr;
	}


	void OnStorageDeviceChange();
	void RefreshStorageData();
	void ClearReadCompleteDelegate(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum);
	void AddReadCompleteDelegate(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum);
	bool GetData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum);
	bool WriteData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage);
	bool ReadData(const TScriptInterface<class UOnlinePlayerInterface>& PlayerInterface, unsigned char LocalUserNum, int DeviceID, class UOnlinePlayerStorage* PlayerStorage);
};


// Class Engine.UIDataProvider_PlayerAchievements
// 0x000C (0x0058 - 0x004C)
class UUIDataProvider_PlayerAchievements : public UUIDataProvider_OnlinePlayerDataBase
{
public:
	TArray<struct FAchievementDetails>                 Achievements;                                             // 0x004C(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_PlayerAchievements");
		return ptr;
	}


	void UpdateAchievements();
	void OnLoginChange(unsigned char LocalUserNum);
	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
	void OnPlayerAchievementUnlocked(bool bWasSuccessful);
	void OnPlayerAchievementsChanged(int TitleId);
	void GetAchievementDetails(int AchievementId, struct FAchievementDetails* OutAchievementDetails);
	struct FString GetAchievementIconPathName(int AchievementId, bool bReturnLockedIcon);
	void PopulateAchievementIcons();
	int GetMaxTotalGamerScore();
	int GetTotalGamerScore();
};


// Class Engine.UIDataProvider_OnlinePlayerStorageArray
// 0x0020 (0x0068 - 0x0048)
class UUIDataProvider_OnlinePlayerStorageArray : public UUIDataProvider
{
public:
	class UOnlinePlayerStorage*                        PlayerStorage;                                            // 0x0048(0x0004)
	int                                                PlayerStorageId;                                          // 0x004C(0x0004)
	struct FString                                     ColumnHeaderText;                                         // 0x0050(0x000C) (Const, NeedCtorLink)
	TArray<struct FName>                               Values;                                                   // 0x005C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_OnlinePlayerStorageArray");
		return ptr;
	}

};


// Class Engine.UIDataProvider_SettingsArray
// 0x0028 (0x0070 - 0x0048)
class UUIDataProvider_SettingsArray : public UUIDataProvider
{
public:
	class USettings*                                   Settings;                                                 // 0x0048(0x0004)
	int                                                SettingsId;                                               // 0x004C(0x0004)
	struct FName                                       SettingsName;                                             // 0x0050(0x0008)
	struct FString                                     ColumnHeaderText;                                         // 0x0058(0x000C) (Const, NeedCtorLink)
	TArray<struct FIdToStringMapping>                  Values;                                                   // 0x0064(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_SettingsArray");
		return ptr;
	}

};


// Class Engine.UIDataStore
// 0x0020 (0x0068 - 0x0048)
class UUIDataStore : public UUIDataProvider
{
public:
	struct FName                                       Tag;                                                      // 0x0048(0x0008)
	TArray<struct FScriptDelegate>                     RefreshSubscriberNotifies;                                // 0x0050(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnDataStoreValueUpdated__Delegate;                      // 0x005C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore");
		return ptr;
	}


	class UDataStoreClient* GetDataStoreClient();
	void RefreshSubscribers(const struct FName& PropertyTag, bool bInvalidateValues, class UUIDataProvider* SourceProvider, int ArrayIndex);
	bool NotifyGameSessionEnded();
	void SubscriberDetached(const TScriptInterface<class UUIDataStoreSubscriber>& Subscriber);
	void SubscriberAttached(const TScriptInterface<class UUIDataStoreSubscriber>& Subscriber);
	void Unregistered(class ULocalPlayer* PlayerOwner);
	void Registered(class ULocalPlayer* PlayerOwner);
	void OnDataStoreValueUpdated(class UUIDataStore* SourceDataStore, bool bValuesInvalidated, const struct FName& PropertyTag, class UUIDataProvider* SourceProvider, int ArrayIndex);
};


// Class Engine.UIDataStore_DynamicResource
// 0x0050 (0x00B8 - 0x0068)
class UUIDataStore_DynamicResource : public UUIDataStore
{
public:
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                          // 0x0068(0x0004) (Transient)
	class UUIDataStore_GameResource*                   GameResourceDataStore;                                    // 0x006C(0x0004) (Transient)
	TArray<struct FDynamicResourceProviderDefinition>  ResourceProviderDefinitions;                              // 0x0070(0x000C) (Config, NeedCtorLink)
	struct FMultiMap_Mirror                            ResourceProviders;                                        // 0x007C(0x003C) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_DynamicResource");
		return ptr;
	}


	void Unregistered(class ULocalPlayer* PlayerOwner);
	void Registered(class ULocalPlayer* PlayerOwner);
	void OnLoginChange(unsigned char LocalUserNum);
	bool GetResourceProviders(const struct FName& ProviderTag, TArray<class UUIResourceCombinationProvider*>* out_Providers);
	int FindProviderTypeIndex(const struct FName& ProviderTag);
};


// Class Engine.UIDataStore_Fonts
// 0x0000 (0x0068 - 0x0068)
class UUIDataStore_Fonts : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Fonts");
		return ptr;
	}

};


// Class Engine.UIDataStore_GameResource
// 0x0048 (0x00B0 - 0x0068)
class UUIDataStore_GameResource : public UUIDataStore
{
public:
	TArray<struct FGameResourceDataProvider>           ElementProviderTypes;                                     // 0x0068(0x000C) (Config, NeedCtorLink)
	struct FMultiMap_Mirror                            ListElementProviders;                                     // 0x0074(0x003C) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_GameResource");
		return ptr;
	}


	bool GetResourceProviders(const struct FName& ProviderTag, TArray<class UUIResourceDataProvider*>* out_Providers);
	int FindProviderTypeIndex(const struct FName& ProviderTag);
};


// Class Engine.UIDataStore_MenuItems
// 0x0050 (0x0100 - 0x00B0)
class UUIDataStore_MenuItems : public UUIDataStore_GameResource
{
public:
	struct FName                                       CurrentGameSettingsTag;                                   // 0x00B0(0x0008) (Const)
	struct FMultiMap_Mirror                            OptionProviders;                                          // 0x00B8(0x003C) (Const, Native, Transient)
	TArray<class UUIDataProvider_MenuItem*>            DynamicProviders;                                         // 0x00F4(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_MenuItems");
		return ptr;
	}


	void Unregistered(class ULocalPlayer* PlayerOwner);
	void Registered(class ULocalPlayer* PlayerOwner);
	void OnGameSettingsChanged(class UUIDataProvider* SourceProvider, const struct FName& PropTag);
};


// Class Engine.UIDataStore_GameState
// 0x000C (0x0074 - 0x0068)
class UUIDataStore_GameState : public UUIDataStore
{
public:
	struct FScriptDelegate                             __OnRefreshDataFieldValue__Delegate;                      // 0x0068(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_GameState");
		return ptr;
	}


	bool NotifyGameSessionEnded();
	void OnRefreshDataFieldValue();
};


// Class Engine.UIDataStore_Registry
// 0x000C (0x0074 - 0x0068)
class UUIDataStore_Registry : public UUIDataStore
{
public:
	TArray<struct FRegistryKeyValuePair>               RegistryData;                                             // 0x0068(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Registry");
		return ptr;
	}


	void SetData(const struct FString& Key, const struct FString& Value);
	bool GetData(const struct FString& Key, struct FString* out_Data);
};


// Class Engine.UIDataStore_Remote
// 0x0000 (0x0068 - 0x0068)
class UUIDataStore_Remote : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Remote");
		return ptr;
	}

};


// Class Engine.UIDataStore_OnlineGameSearch
// 0x0028 (0x0090 - 0x0068)
class UUIDataStore_OnlineGameSearch : public UUIDataStore_Remote
{
public:
	struct FName                                       SearchResultsName;                                        // 0x0068(0x0008) (Const)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x0070(0x0004)
	TScriptInterface<class UOnlineGameInterface>       GameInterface;                                            // 0x0074(0x0008)
	TArray<struct FGameSearchCfg>                      GameSearchCfgList;                                        // 0x007C(0x000C) (Const, NeedCtorLink)
	int                                                SelectedIndex;                                            // 0x0088(0x0004)
	int                                                ActiveSearchIndex;                                        // 0x008C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_OnlineGameSearch");
		return ptr;
	}


	void ClearAllSearchResults();
	void MoveToPrevious(bool bInvalidateExistingSearchResults);
	void MoveToNext(bool bInvalidateExistingSearchResults);
	void SetCurrentByName(const struct FName& SearchName, bool bInvalidateExistingSearchResults);
	void SetCurrentByIndex(int NewIndex, bool bInvalidateExistingSearchResults);
	int FindSearchConfigurationIndex(const struct FName& SearchTag);
	class UOnlineGameSearch* GetActiveGameSearch();
	class UOnlineGameSearch* GetCurrentGameSearch();
	bool ShowHostGamercard(unsigned char ControllerIndex, int ListIndex);
	bool GetSearchResultFromIndex(int ListIndex, struct FOnlineGameSearchResult* Result);
	void OnSearchComplete(bool bWasSuccessful);
	bool OverrideQuerySubmission(unsigned char ControllerId, class UOnlineGameSearch* Search);
	bool SubmitGameSearch(unsigned char ControllerIndex, bool bInvalidateExistingSearchResults);
	bool InvalidateCurrentSearchResults();
	void Init();
};


// Class Engine.UIDataStore_OnlinePlayerData
// 0x00A8 (0x0110 - 0x0068)
class UUIDataStore_OnlinePlayerData : public UUIDataStore_Remote
{
public:
	class UUIDataProvider_OnlineFriends*               FriendsProvider;                                          // 0x0068(0x0004)
	int                                                PlayerControllerId;                                       // 0x006C(0x0004)
	struct FString                                     PlayerNick;                                               // 0x0070(0x000C) (NeedCtorLink)
	struct FString                                     ProfileSettingsClassName;                                 // 0x007C(0x000C) (Config, NeedCtorLink)
	class UClass*                                      ProfileSettingsClass;                                     // 0x0088(0x0004)
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                          // 0x008C(0x0004)
	struct FString                                     ProfileProviderClassName;                                 // 0x0090(0x000C) (Config, NeedCtorLink)
	class UClass*                                      ProfileProviderClass;                                     // 0x009C(0x0004)
	struct FString                                     PlayerStorageClassName;                                   // 0x00A0(0x000C) (Config, NeedCtorLink)
	class UClass*                                      PlayerStorageClass;                                       // 0x00AC(0x0004)
	class UUIDataProvider_OnlinePlayerStorage*         StorageProvider;                                          // 0x00B0(0x0004)
	struct FString                                     StorageProviderClassName;                                 // 0x00B4(0x000C) (Config, NeedCtorLink)
	class UClass*                                      StorageProviderClass;                                     // 0x00C0(0x0004)
	class UUIDataProvider_OnlineFriendMessages*        FriendMessagesProvider;                                   // 0x00C4(0x0004)
	class UUIDataProvider_PlayerAchievements*          AchievementsProvider;                                     // 0x00C8(0x0004)
	struct FString                                     FriendsProviderClassName;                                 // 0x00CC(0x000C) (Config, NeedCtorLink)
	class UClass*                                      FriendsProviderClass;                                     // 0x00D8(0x0004)
	struct FString                                     FriendMessagesProviderClassName;                          // 0x00DC(0x000C) (Config, NeedCtorLink)
	class UClass*                                      FriendMessagesProviderClass;                              // 0x00E8(0x0004)
	struct FString                                     AchievementsProviderClassName;                            // 0x00EC(0x000C) (Config, NeedCtorLink)
	class UClass*                                      AchievementsProviderClass;                                // 0x00F8(0x0004)
	struct FString                                     PartyChatProviderClassName;                               // 0x00FC(0x000C) (Config, NeedCtorLink)
	class UClass*                                      PartyChatProviderClass;                                   // 0x0108(0x0004)
	class UUIDataProvider_OnlinePartyChatList*         PartyChatProvider;                                        // 0x010C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_OnlinePlayerData");
		return ptr;
	}


	class UOnlinePlayerStorage* GetCachedPlayerStorage(int ControllerId);
	class UOnlineProfileSettings* GetCachedPlayerProfile(int ControllerId);
	void ClearDelegates();
	void RegisterDelegates();
	void OnPlayerDataChange();
	void OnLoginChange(unsigned char LocalUserNum);
	void OnUnregister();
	void OnRegister(class ULocalPlayer* InPlayer);
};


// Class Engine.UIDataStore_OnlineStats
// 0x0068 (0x00D0 - 0x0068)
class UUIDataStore_OnlineStats : public UUIDataStore_Remote
{
public:
	TArray<class UClass*>                              StatsReadClasses;                                         // 0x0068(0x000C) (NeedCtorLink)
	struct FName                                       StatsReadName;                                            // 0x0074(0x0008) (Const)
	struct FPlayerNickMetaData                         PlayerNickData;                                           // 0x007C(0x0014) (Const, NeedCtorLink)
	struct FRankMetaData                               RankNameMetaData;                                         // 0x0090(0x0014) (Const, NeedCtorLink)
	struct FName                                       TotalRowsName;                                            // 0x00A4(0x0008) (Const)
	TArray<class UOnlineStatsRead*>                    StatsReadObjects;                                         // 0x00AC(0x000C) (NeedCtorLink)
	class UOnlineStatsRead*                            StatsRead;                                                // 0x00B8(0x0004)
	TEnumAsByte<EStatsFetchType>                       CurrentReadType;                                          // 0x00BC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00BD(0x0003) MISSED OFFSET
	TScriptInterface<class UOnlineStatsInterface>      StatsInterface;                                           // 0x00C0(0x0008)
	TScriptInterface<class UOnlinePlayerInterface>     PlayerInterface;                                          // 0x00C8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_OnlineStats");
		return ptr;
	}


	void STATIC_SortResultsByRank(class UOnlineStatsRead* StatsToSort);
	void OnReadComplete(bool bWasSuccessful);
	bool ShowGamercard(unsigned char ConrollerIndex, int ListIndex);
	bool RefreshStats(unsigned char ControllerIndex);
	void SetStatsReadInfo();
	void Init();
};


// Class Engine.UIDataStore_Settings
// 0x0000 (0x0068 - 0x0068)
class UUIDataStore_Settings : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_Settings");
		return ptr;
	}

};


// Class Engine.UIDataStore_OnlineGameSettings
// 0x0014 (0x007C - 0x0068)
class UUIDataStore_OnlineGameSettings : public UUIDataStore_Settings
{
public:
	TArray<struct FGameSettingsCfg>                    GameSettingsCfgList;                                      // 0x0068(0x000C) (Const, NeedCtorLink)
	class UClass*                                      SettingsProviderClass;                                    // 0x0074(0x0004) (Const)
	int                                                SelectedIndex;                                            // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_OnlineGameSettings");
		return ptr;
	}


	void Unregistered(class ULocalPlayer* PlayerOwner);
	void Registered(class ULocalPlayer* PlayerOwner);
	void MoveToPrevious();
	void MoveToNext();
	void SetCurrentByName(const struct FName& SettingsName);
	void SetCurrentByIndex(int NewIndex);
	class UUIDataProvider_Settings* GetCurrentProvider();
	class UOnlineGameSettings* GetCurrentGameSettings();
	bool CreateGame(unsigned char ControllerIndex);
};


// Class Engine.UIDataStore_StringBase
// 0x0000 (0x0068 - 0x0068)
class UUIDataStore_StringBase : public UUIDataStore
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_StringBase");
		return ptr;
	}

};


// Class Engine.UIDataStore_InputAlias
// 0x0048 (0x00B0 - 0x0068)
class UUIDataStore_InputAlias : public UUIDataStore_StringBase
{
public:
	TArray<struct FUIDataStoreInputAlias>              InputAliases;                                             // 0x0068(0x000C) (Config, NeedCtorLink)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0074(0x003C) UNKNOWN PROPERTY: MapProperty Engine.UIDataStore_InputAlias.InputAliasLookupMap

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_InputAlias");
		return ptr;
	}


	bool HasAliasMappingForPlatform(const struct FName& DesiredAlias, TEnumAsByte<EInputPlatformType> DesiredPlatform);
	int FindInputAliasIndex(const struct FName& DesiredAlias);
	bool GetAliasInputKeyDataByIndex(int AliasIndex, TEnumAsByte<EInputPlatformType> OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData);
	bool GetAliasInputKeyData(const struct FName& DesiredAlias, TEnumAsByte<EInputPlatformType> OverridePlatform, struct FRawInputKeyEventData* out_InputKeyData);
	struct FName GetAliasInputKeyNameByIndex(int AliasIndex, TEnumAsByte<EInputPlatformType> OverridePlatform);
	struct FName GetAliasInputKeyName(const struct FName& DesiredAlias, TEnumAsByte<EInputPlatformType> OverridePlatform);
	struct FString GetAliasFontMarkupByIndex(int AliasIndex, TEnumAsByte<EInputPlatformType> OverridePlatform);
	struct FString GetAliasFontMarkup(const struct FName& DesiredAlias, TEnumAsByte<EInputPlatformType> OverridePlatform);
};


// Class Engine.UIDataStore_StringAliasMap
// 0x004C (0x00B4 - 0x0068)
class UUIDataStore_StringAliasMap : public UUIDataStore_StringBase
{
public:
	TArray<struct FUIMenuInputMap>                     MenuInputMapArray;                                        // 0x0068(0x000C) (Config, NeedCtorLink)
	struct FMap_Mirror                                 MenuInputSets;                                            // 0x0074(0x003C) (Const, Native, Transient)
	int                                                PlayerIndex;                                              // 0x00B0(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataStore_StringAliasMap");
		return ptr;
	}


	int GetStringWithFieldName(const struct FString& FieldName, struct FString* MappedString);
	int FindMappingWithFieldName(const struct FString& FieldName, const struct FString& SetName);
	class ULocalPlayer* GetPlayerOwner();
};


// Class Engine.UIPropertyDataProvider
// 0x0018 (0x0060 - 0x0048)
class UUIPropertyDataProvider : public UUIDataProvider
{
public:
	TArray<class UClass*>                              ComplexPropertyTypes;                                     // 0x0048(0x000C) (Const, NeedCtorLink)
	struct FScriptDelegate                             __CanSupportComplexPropertyType__Delegate;                // 0x0054(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIPropertyDataProvider");
		return ptr;
	}


	bool CanSupportComplexPropertyType(class UProperty* UnsupportedProperty);
};


// Class Engine.UIDataProvider_Settings
// 0x0008 (0x0068 - 0x0060)
class UUIDataProvider_Settings : public UUIPropertyDataProvider
{
public:
	class USettings*                                   Settings;                                                 // 0x0060(0x0004)
	unsigned long                                      bIsAListRow : 1;                                          // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_Settings");
		return ptr;
	}

};


// Class Engine.UIResourceDataProvider
// 0x0004 (0x0064 - 0x0060)
class UUIResourceDataProvider : public UUIPropertyDataProvider
{
public:
	unsigned long                                      bSkipDuringEnumeration : 1;                               // 0x0060(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIResourceDataProvider");
		return ptr;
	}


	void InitializeProvider(bool bIsEditor);
};


// Class Engine.UIDataProvider_MenuItem
// 0x0088 (0x00EC - 0x0064)
class UUIDataProvider_MenuItem : public UUIResourceDataProvider
{
public:
	TEnumAsByte<EMenuOptionType>                       OptionType;                                               // 0x0064(0x0001) (Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0065(0x0003) MISSED OFFSET
	TArray<struct FName>                               OptionSet;                                                // 0x0068(0x000C) (Config, NeedCtorLink)
	struct FString                                     DataStoreMarkup;                                          // 0x0074(0x000C) (Config, NeedCtorLink)
	struct FString                                     DescriptionMarkup;                                        // 0x0080(0x000C) (Config, NeedCtorLink)
	struct FName                                       RequiredGameMode;                                         // 0x008C(0x0008) (Config)
	struct FString                                     FriendlyName;                                             // 0x0094(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     CustomFriendlyName;                                       // 0x00A0(0x000C) (NeedCtorLink)
	struct FString                                     Description;                                              // 0x00AC(0x000C) (Const, Config, Localized, NeedCtorLink)
	unsigned long                                      bEditableCombo : 1;                                       // 0x00B8(0x0004) (Config)
	unsigned long                                      bNumericCombo : 1;                                        // 0x00B8(0x0004) (Config)
	unsigned long                                      bKeyboardOrMouseOption : 1;                               // 0x00B8(0x0004) (Config)
	unsigned long                                      bOnlineOnly : 1;                                          // 0x00B8(0x0004) (Config)
	unsigned long                                      bOfflineOnly : 1;                                         // 0x00B8(0x0004) (Config)
	unsigned long                                      bSearchAllInis : 1;                                       // 0x00B8(0x0004) (Edit)
	unsigned long                                      bRemoveOn360 : 1;                                         // 0x00B8(0x0004) (Config)
	unsigned long                                      bRemoveOnPC : 1;                                          // 0x00B8(0x0004) (Config)
	unsigned long                                      bRemoveOnPS3 : 1;                                         // 0x00B8(0x0004) (Config)
	int                                                EditBoxMaxLength;                                         // 0x00BC(0x0004) (Config)
	struct FUIRangeData                                RangeData;                                                // 0x00C0(0x0014) (Config)
	TArray<struct FName>                               SchemaCellFields;                                         // 0x00D4(0x000C) (Config, NeedCtorLink)
	struct FString                                     IniName;                                                  // 0x00E0(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIDataProvider_MenuItem");
		return ptr;
	}

};


// Class Engine.UIResourceCombinationProvider
// 0x0008 (0x0050 - 0x0048)
class UUIResourceCombinationProvider : public UUIDataProvider
{
public:
	class UUIResourceDataProvider*                     StaticDataProvider;                                       // 0x0048(0x0004) (Transient)
	class UUIDataProvider_OnlineProfileSettings*       ProfileProvider;                                          // 0x004C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIResourceCombinationProvider");
		return ptr;
	}


	void ClearProviderReferences();
	void InitializeProvider(bool bIsEditor, class UUIResourceDataProvider* InStaticResourceProvider, class UUIDataProvider_OnlineProfileSettings* InProfileProvider);
};


// Class Engine.GameUISceneClient
// 0x006C (0x0154 - 0x00E8)
class UGameUISceneClient : public UUISceneClient
{
public:
	float                                              LatestDeltaTime;                                          // 0x00E8(0x0004) (Const, Transient)
	struct FDouble                                     DoubleClickStartTime;                                     // 0x00EC(0x0008) (Const, Transient)
	struct FIntPoint                                   DoubleClickStartPosition;                                 // 0x00F4(0x0008) (Const, Transient)
	struct FMap_Mirror                                 InitialPressedKeys;                                       // 0x00FC(0x003C) (Const, Native, Transient)
	unsigned long                                      bUpdateInputProcessingStatus : 1;                         // 0x0138(0x0004) (Const, Transient)
	unsigned long                                      bUpdateSceneViewportSizes : 1;                            // 0x0138(0x0004) (Transient)
	unsigned long                                      bEnableDebugInput : 1;                                    // 0x0138(0x0004) (Config)
	unsigned long                                      bRenderDebugInfo : 1;                                     // 0x0138(0x0004) (Config)
	unsigned long                                      bCaptureUnprocessedInput : 1;                             // 0x0138(0x0004) (Const, Config)
	TArray<struct FName>                               NavAliases;                                               // 0x013C(0x000C) (Const, Transient, NeedCtorLink)
	TArray<struct FName>                               AxisInputKeys;                                            // 0x0148(0x000C) (Const, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameUISceneClient");
		return ptr;
	}


	int FindLocalPlayerIndex(class UPlayer* P);
	void NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void NotifyPlayerAdded(int PlayerIndex, class ULocalPlayer* AddedPlayer);
	void NotifyGameSessionEnded();
	void NotifyClientTravel(class APlayerController* TravellingPlayer, const struct FString& TravelURL, TEnumAsByte<ETravelType> TravelType, bool bIsSeamlessTravel);
	void PauseGame(bool bDesiredPauseState, int PlayerIndex);
	bool CanUnpauseInternalUI();
	void RequestInputProcessingUpdate();
	TEnumAsByte<ENetMode> STATIC_GetCurrentNetMode();
};


// Class Engine.Scene
// 0x0000 (0x003C - 0x003C)
class UScene : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Scene");
		return ptr;
	}

};


// Class Engine.InstancedFoliageActor
// 0x004C (0x0220 - 0x01D4)
class AInstancedFoliageActor : public AActor
{
public:
	struct FMap_Mirror                                 FoliageMeshes;                                            // 0x01D4(0x003C) (Const, Native)
	class UStaticMesh*                                 SelectedMesh;                                             // 0x0210(0x0004) (Const, Transient)
	TArray<class UInstancedStaticMeshComponent*>       InstancedStaticMeshComponents;                            // 0x0214(0x000C) (Const, ExportObject, Transient, Component, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InstancedFoliageActor");
		return ptr;
	}

};


// Class Engine.InteractiveFoliageActor
// 0x005B (0x0238 - 0x01DD)
class AInteractiveFoliageActor : public AStaticMeshActor
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x01DD(0x0003) MISSED OFFSET
	class UCylinderComponent*                          CylinderComponent;                                        // 0x01E0(0x0004) (ExportObject, Component, EditInline)
	struct FVector                                     TouchingActorEntryPosition;                               // 0x01E4(0x000C) (Transient)
	struct FVector                                     FoliageVelocity;                                          // 0x01F0(0x000C) (Transient)
	struct FVector                                     FoliageForce;                                             // 0x01FC(0x000C) (Transient)
	struct FVector                                     FoliagePosition;                                          // 0x0208(0x000C) (Transient)
	float                                              FoliageDamageImpulseScale;                                // 0x0214(0x0004) (Edit)
	float                                              FoliageTouchImpulseScale;                                 // 0x0218(0x0004) (Edit)
	float                                              FoliageStiffness;                                         // 0x021C(0x0004) (Edit)
	float                                              FoliageStiffnessQuadratic;                                // 0x0220(0x0004) (Edit)
	float                                              FoliageDamping;                                           // 0x0224(0x0004) (Edit)
	float                                              MaxDamageImpulse;                                         // 0x0228(0x0004) (Edit)
	float                                              MaxTouchImpulse;                                          // 0x022C(0x0004) (Edit)
	float                                              MaxForce;                                                 // 0x0230(0x0004) (Edit)
	float                                              Mass;                                                     // 0x0234(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InteractiveFoliageActor");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void TakeDamage(float Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
};


// Class Engine.InteractiveFoliageComponent
// 0x0004 (0x0258 - 0x0254)
class UInteractiveFoliageComponent : public UStaticMeshComponent
{
public:
	struct FPointer                                    FoliageSceneProxy;                                        // 0x0254(0x0004) (Const, Native, DuplicateTransient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InteractiveFoliageComponent");
		return ptr;
	}

};


// Class Engine.ActorFactoryInteractiveFoliage
// 0x0000 (0x0078 - 0x0078)
class UActorFactoryInteractiveFoliage : public UActorFactoryStaticMesh
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryInteractiveFoliage");
		return ptr;
	}

};


// Class Engine.FluidInfluenceActor
// 0x0010 (0x01E4 - 0x01D4)
class AFluidInfluenceActor : public AActor
{
public:
	class UArrowComponent*                             FlowDirection;                                            // 0x01D4(0x0004) (ExportObject, Component, EditInline)
	class USpriteComponent*                            Sprite;                                                   // 0x01D8(0x0004) (ExportObject, Component, EditInline)
	class UFluidInfluenceComponent*                    InfluenceComponent;                                       // 0x01DC(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bActive : 1;                                              // 0x01E0(0x0004) (Net)
	unsigned long                                      bToggled : 1;                                             // 0x01E0(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidInfluenceActor");
		return ptr;
	}


	void ReplicatedEvent(const struct FName& VarName);
	void OnToggle(class USeqAct_Toggle* inAction);
};


// Class Engine.FluidSurfaceActor
// 0x0008 (0x01DC - 0x01D4)
class AFluidSurfaceActor : public AActor
{
public:
	class UFluidSurfaceComponent*                      FluidComponent;                                           // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UParticleSystem*                             ProjectileEntryEffect;                                    // 0x01D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidSurfaceActor");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void TakeDamage(float Damage, class AController* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, const struct FTraceHitInfo& HitInfo, class AActor* DamageCauser);
};


// Class Engine.FluidSurfaceActorMovable
// 0x0000 (0x01DC - 0x01DC)
class AFluidSurfaceActorMovable : public AFluidSurfaceActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidSurfaceActorMovable");
		return ptr;
	}

};


// Class Engine.FluidInfluenceComponent
// 0x0060 (0x0238 - 0x01D8)
class UFluidInfluenceComponent : public UPrimitiveComponent
{
public:
	unsigned long                                      bActive : 1;                                              // 0x01D8(0x0004) (Edit)
	unsigned long                                      RaindropFillEntireFluid : 1;                              // 0x01D8(0x0004) (Edit)
	unsigned long                                      bIsToggleTriggered : 1;                                   // 0x01D8(0x0004) (Transient)
	class AFluidSurfaceActor*                          FluidActor;                                               // 0x01DC(0x0004) (Edit)
	TEnumAsByte<EInfluenceType>                        InfluenceType;                                            // 0x01E0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01E1(0x0003) MISSED OFFSET
	float                                              MaxDistance;                                              // 0x01E4(0x0004) (Edit)
	float                                              WaveStrength;                                             // 0x01E8(0x0004) (Edit)
	float                                              WaveFrequency;                                            // 0x01EC(0x0004) (Edit)
	float                                              WavePhase;                                                // 0x01F0(0x0004) (Edit)
	float                                              WaveRadius;                                               // 0x01F4(0x0004) (Edit)
	float                                              RaindropAreaRadius;                                       // 0x01F8(0x0004) (Edit)
	float                                              RaindropRadius;                                           // 0x01FC(0x0004) (Edit)
	float                                              RaindropStrength;                                         // 0x0200(0x0004) (Edit)
	float                                              RaindropRate;                                             // 0x0204(0x0004) (Edit)
	float                                              FlowSpeed;                                                // 0x0208(0x0004) (Edit)
	int                                                FlowNumRipples;                                           // 0x020C(0x0004) (Edit)
	float                                              FlowSideMotionRadius;                                     // 0x0210(0x0004) (Edit)
	float                                              FlowWaveRadius;                                           // 0x0214(0x0004) (Edit)
	float                                              FlowStrength;                                             // 0x0218(0x0004) (Edit)
	float                                              FlowFrequency;                                            // 0x021C(0x0004) (Edit)
	float                                              SphereOuterRadius;                                        // 0x0220(0x0004) (Edit)
	float                                              SphereInnerRadius;                                        // 0x0224(0x0004) (Edit)
	float                                              SphereStrength;                                           // 0x0228(0x0004) (Edit)
	float                                              CurrentAngle;                                             // 0x022C(0x0004) (Native, Transient)
	float                                              CurrentTimer;                                             // 0x0230(0x0004) (Native, Transient)
	class AFluidSurfaceActor*                          CurrentFluidActor;                                        // 0x0234(0x0004) (Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidInfluenceComponent");
		return ptr;
	}

};


// Class Engine.FluidSurfaceComponent
// 0x00E0 (0x02B8 - 0x01D8)
class UFluidSurfaceComponent : public UPrimitiveComponent
{
public:
	class UMaterialInterface*                          FluidMaterial;                                            // 0x01D8(0x0004) (Edit)
	int                                                LightMapResolution;                                       // 0x01DC(0x0004) (Edit)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x01E0(0x001C) (Edit)
	unsigned long                                      EnableSimulation : 1;                                     // 0x01FC(0x0004) (Edit)
	unsigned long                                      EnableDetail : 1;                                         // 0x01FC(0x0004) (Edit)
	unsigned long                                      bTiling : 1;                                              // 0x01FC(0x0004) (Edit)
	unsigned long                                      bPause : 1;                                               // 0x01FC(0x0004) (Edit, Transient)
	unsigned long                                      bShowSimulationNormals : 1;                               // 0x01FC(0x0004) (Edit, Transient)
	unsigned long                                      bShowSimulationPosition : 1;                              // 0x01FC(0x0004) (Edit)
	unsigned long                                      bShowDetailNormals : 1;                                   // 0x01FC(0x0004) (Edit)
	unsigned long                                      bShowDetailPosition : 1;                                  // 0x01FC(0x0004) (Edit)
	unsigned long                                      bShowFluidSimulation : 1;                                 // 0x01FC(0x0004) (Edit, Transient)
	unsigned long                                      bShowFluidDetail : 1;                                     // 0x01FC(0x0004) (Edit, Transient)
	unsigned long                                      bTestRipple : 1;                                          // 0x01FC(0x0004) (Edit)
	unsigned long                                      bTestRippleCenterOnDetail : 1;                            // 0x01FC(0x0004) (Edit)
	int                                                SimulationQuadsX;                                         // 0x0200(0x0004) (Edit)
	int                                                SimulationQuadsY;                                         // 0x0204(0x0004) (Edit)
	float                                              GridSpacing;                                              // 0x0208(0x0004) (Edit)
	float                                              GridSpacingLowRes;                                        // 0x020C(0x0004) (Edit)
	class AActor*                                      TargetSimulation;                                         // 0x0210(0x0004) (Edit)
	float                                              GPUTessellationFactor;                                    // 0x0214(0x0004) (Edit)
	float                                              FluidDamping;                                             // 0x0218(0x0004) (Edit)
	float                                              FluidTravelSpeed;                                         // 0x021C(0x0004) (Edit)
	float                                              FluidHeightScale;                                         // 0x0220(0x0004) (Edit)
	float                                              FluidUpdateRate;                                          // 0x0224(0x0004) (Edit)
	float                                              ForceImpact;                                              // 0x0228(0x0004) (Edit)
	float                                              ForceContinuous;                                          // 0x022C(0x0004) (Edit)
	float                                              LightingContrast;                                         // 0x0230(0x0004) (Edit)
	class AActor*                                      TargetDetail;                                             // 0x0234(0x0004) (Edit)
	float                                              DeactivationDistance;                                     // 0x0238(0x0004) (Edit)
	int                                                DetailResolution;                                         // 0x023C(0x0004) (Edit)
	float                                              DetailSize;                                               // 0x0240(0x0004) (Edit)
	float                                              DetailDamping;                                            // 0x0244(0x0004) (Edit)
	float                                              DetailTravelSpeed;                                        // 0x0248(0x0004) (Edit)
	float                                              DetailTransfer;                                           // 0x024C(0x0004) (Edit)
	float                                              DetailHeightScale;                                        // 0x0250(0x0004) (Edit)
	float                                              DetailUpdateRate;                                         // 0x0254(0x0004) (Edit)
	float                                              NormalLength;                                             // 0x0258(0x0004) (Edit)
	float                                              TestRippleSpeed;                                          // 0x025C(0x0004) (Edit)
	float                                              TestRippleFrequency;                                      // 0x0260(0x0004) (Edit)
	float                                              TestRippleRadius;                                         // 0x0264(0x0004) (Edit)
	float                                              FluidWidth;                                               // 0x0268(0x0004)
	float                                              FluidHeight;                                              // 0x026C(0x0004)
	float                                              TestRippleTime;                                           // 0x0270(0x0004) (Native, Transient)
	float                                              TestRippleAngle;                                          // 0x0274(0x0004) (Native, Transient)
	float                                              DeactivationTimer;                                        // 0x0278(0x0004) (Native, Transient)
	float                                              ViewDistance;                                             // 0x027C(0x0004) (Native, Transient)
	struct FVector                                     SimulationPosition;                                       // 0x0280(0x000C) (Native, Transient)
	struct FVector                                     DetailPosition;                                           // 0x028C(0x000C) (Native, Transient)
	TArray<unsigned char>                              ClampMap;                                                 // 0x0298(0x000C) (Const, NeedCtorLink)
	TArray<class UShadowMap2D*>                        ShadowMaps;                                               // 0x02A4(0x000C) (Const, NeedCtorLink)
	struct FLightMapRef                                LightMap;                                                 // 0x02B0(0x0004) (Const, Native)
	struct FPointer                                    FluidSimulation;                                          // 0x02B4(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidSurfaceComponent");
		return ptr;
	}


	void SetSimulationPosition(const struct FVector& WorldPos);
	void SetDetailPosition(const struct FVector& WorldPos);
	void ApplyForce(const struct FVector& WorldPos, float Strength, float Radius, bool bImpulse);
};


// Class Engine.SpeedTreeActor
// 0x0004 (0x01D8 - 0x01D4)
class ASpeedTreeActor : public AActor
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                                       // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTreeActor");
		return ptr;
	}

};


// Class Engine.SpeedTreeComponent
// 0x00B4 (0x028C - 0x01D8)
class USpeedTreeComponent : public UPrimitiveComponent
{
public:
	class USpeedTree*                                  SpeedTree;                                                // 0x01D8(0x0004) (Edit, Const)
	unsigned long                                      bUseLeafCards : 1;                                        // 0x01DC(0x0004) (Edit)
	unsigned long                                      bUseLeafMeshes : 1;                                       // 0x01DC(0x0004) (Edit)
	unsigned long                                      bUseBranches : 1;                                         // 0x01DC(0x0004) (Edit)
	unsigned long                                      bUseFronds : 1;                                           // 0x01DC(0x0004) (Edit)
	unsigned long                                      bUseBillboards : 1;                                       // 0x01DC(0x0004) (Edit)
	float                                              Lod3DStart;                                               // 0x01E0(0x0004) (Edit)
	float                                              Lod3DEnd;                                                 // 0x01E4(0x0004) (Edit)
	float                                              LodBillboardStart;                                        // 0x01E8(0x0004) (Edit)
	float                                              LodBillboardEnd;                                          // 0x01EC(0x0004) (Edit)
	float                                              LodLevelOverride;                                         // 0x01F0(0x0004) (Edit)
	class UMaterialInterface*                          Branch1Material;                                          // 0x01F4(0x0004) (Edit)
	class UMaterialInterface*                          Branch2Material;                                          // 0x01F8(0x0004) (Edit)
	class UMaterialInterface*                          FrondMaterial;                                            // 0x01FC(0x0004) (Edit)
	class UMaterialInterface*                          LeafCardMaterial;                                         // 0x0200(0x0004) (Edit)
	class UMaterialInterface*                          LeafMeshMaterial;                                         // 0x0204(0x0004) (Edit)
	class UMaterialInterface*                          BillboardMaterial;                                        // 0x0208(0x0004) (Edit)
	class UTexture2D*                                  SpeedTreeIcon;                                            // 0x020C(0x0004)
	TArray<struct FSpeedTreeStaticLight>               StaticLights;                                             // 0x0210(0x000C) (Const, NeedCtorLink)
	struct FLightMapRef                                BranchLightMap;                                           // 0x021C(0x0004) (Const, Native)
	struct FLightMapRef                                FrondLightMap;                                            // 0x0220(0x0004) (Const, Native)
	struct FLightMapRef                                LeafMeshLightMap;                                         // 0x0224(0x0004) (Const, Native)
	struct FLightMapRef                                LeafCardLightMap;                                         // 0x0228(0x0004) (Const, Native)
	struct FLightMapRef                                BillboardLightMap;                                        // 0x022C(0x0004) (Const, Native)
	struct FMatrix                                     RotationOnlyMatrix;                                       // 0x0230(0x0040) (Const, Native)
	struct FLightmassPrimitiveSettings                 LightmassSettings;                                        // 0x0270(0x001C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTreeComponent");
		return ptr;
	}


	void SetMaterial(TEnumAsByte<ESpeedTreeMeshType> MeshType, class UMaterialInterface* Material);
	class UMaterialInterface* GetMaterial(TEnumAsByte<ESpeedTreeMeshType> MeshType);
};


// Class Engine.SpeedTreeActorFactory
// 0x0004 (0x006C - 0x0068)
class USpeedTreeActorFactory : public UActorFactory
{
public:
	class USpeedTree*                                  SpeedTree;                                                // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTreeActorFactory");
		return ptr;
	}

};


// Class Engine.SpeedTreeComponentFactory
// 0x0004 (0x0044 - 0x0040)
class USpeedTreeComponentFactory : public UPrimitiveComponentFactory
{
public:
	class USpeedTreeComponent*                         SpeedTreeComponent;                                       // 0x0040(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTreeComponentFactory");
		return ptr;
	}

};


// Class Engine.SpeedTree
// 0x0044 (0x0080 - 0x003C)
class USpeedTree : public UObject
{
public:
	unsigned long                                      bLegacySpeedTree : 1;                                     // 0x003C(0x0004) (Const)
	struct FPointer                                    SRH;                                                      // 0x0040(0x0004) (Const, Native, DuplicateTransient)
	float                                              LeafStaticShadowOpacity;                                  // 0x0044(0x0004) (Edit)
	class UMaterialInterface*                          Branch1Material;                                          // 0x0048(0x0004) (Edit)
	class UMaterialInterface*                          Branch2Material;                                          // 0x004C(0x0004) (Edit)
	class UMaterialInterface*                          FrondMaterial;                                            // 0x0050(0x0004) (Edit)
	class UMaterialInterface*                          LeafCardMaterial;                                         // 0x0054(0x0004) (Edit)
	class UMaterialInterface*                          LeafMeshMaterial;                                         // 0x0058(0x0004) (Edit)
	class UMaterialInterface*                          BillboardMaterial;                                        // 0x005C(0x0004) (Edit)
	float                                              WindStrength;                                             // 0x0060(0x0004) (Edit)
	struct FVector                                     WindDirection;                                            // 0x0064(0x000C) (Edit)
	struct FGuid                                       LightingGuid;                                             // 0x0070(0x0010) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpeedTree");
		return ptr;
	}

};


// Class Engine.LensFlareSource
// 0x0008 (0x01DC - 0x01D4)
class ALensFlareSource : public AActor
{
public:
	class ULensFlareComponent*                         LensFlareComp;                                            // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bCurrentlyActive : 1;                                     // 0x01D8(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LensFlareSource");
		return ptr;
	}


	void SetActorParameter(const struct FName& ParameterName, class AActor* Param);
	void SetExtColorParameter(const struct FName& ParameterName, float Red, float Green, float Blue, float Alpha);
	void SetColorParameter(const struct FName& ParameterName, const struct FLinearColor& Param);
	void SetVectorParameter(const struct FName& ParameterName, const struct FVector& Param);
	void SetFloatParameter(const struct FName& ParameterName, float Param);
	void ReplicatedEvent(const struct FName& VarName);
	void OnToggle(class USeqAct_Toggle* Action);
	void PostBeginPlay();
	void SetTemplate(class ULensFlare* NewTemplate);
};


// Class Engine.LensFlareComponent
// 0x004C (0x0224 - 0x01D8)
class ULensFlareComponent : public UPrimitiveComponent
{
public:
	class ULensFlare*                                  Template;                                                 // 0x01D8(0x0004) (Edit, Const)
	class UDrawLightConeComponent*                     PreviewInnerCone;                                         // 0x01DC(0x0004) (Const, ExportObject, Component, EditInline)
	class UDrawLightConeComponent*                     PreviewOuterCone;                                         // 0x01E0(0x0004) (Const, ExportObject, Component, EditInline)
	class UDrawLightRadiusComponent*                   PreviewRadius;                                            // 0x01E4(0x0004) (Const, ExportObject, Component, EditInline)
	unsigned long                                      bAutoActivate : 1;                                        // 0x01E8(0x0004) (Edit)
	unsigned long                                      bIsActive : 1;                                            // 0x01E8(0x0004) (Transient)
	unsigned long                                      bHasTranslucency : 1;                                     // 0x01E8(0x0004) (Transient)
	unsigned long                                      bHasUnlitTranslucency : 1;                                // 0x01E8(0x0004) (Transient)
	unsigned long                                      bHasUnlitDistortion : 1;                                  // 0x01E8(0x0004) (Transient)
	unsigned long                                      bUsesSceneColor : 1;                                      // 0x01E8(0x0004) (Transient)
	unsigned long                                      bHasSeparateTranslucency : 1;                             // 0x01E8(0x0004) (Transient)
	unsigned long                                      bUseTrueConeCalculation : 1;                              // 0x01E8(0x0004) (Transient)
	unsigned long                                      bVisibleForMobile : 1;                                    // 0x01E8(0x0004)
	float                                              OuterCone;                                                // 0x01EC(0x0004) (Transient)
	float                                              InnerCone;                                                // 0x01F0(0x0004) (Transient)
	float                                              ConeFudgeFactor;                                          // 0x01F4(0x0004) (Transient)
	float                                              Radius;                                                   // 0x01F8(0x0004) (Transient)
	float                                              MinStrength;                                              // 0x01FC(0x0004) (Transient)
	struct FLinearColor                                SourceColor;                                              // 0x0200(0x0010) (Edit)
	TArray<struct FLensFlareElementMaterials>          Materials;                                                // 0x0210(0x000C) (Transient, NeedCtorLink)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x021C(0x0004) (Const, Native)
	float                                              NextTraceTime;                                            // 0x0220(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LensFlareComponent");
		return ptr;
	}


	class UMaterialInstanceConstant* CreateAndSetMaterialInstanceConstant(int ElementIndex);
	void SetMaterial(int ElementIndex, class UMaterialInterface* Material);
	class UMaterialInterface* GetMaterial(int ElementIndex);
	void SetIsActive(bool bInIsActive);
	void SetSourceColor(const struct FLinearColor& InSourceColor);
	void SetTemplate(class ULensFlare* NewTemplate, bool bForceSet);
};


// Class Engine.LensFlare
// 0x01C4 (0x0200 - 0x003C)
class ULensFlare : public UObject
{
public:
	struct FLensFlareElement                           SourceElement;                                            // 0x003C(0x0144) (ExportObject, Component, NeedCtorLink, EditInline)
	class UStaticMesh*                                 SourceMesh;                                               // 0x0180(0x0004) (Edit)
	TEnumAsByte<ESceneDepthPriorityGroup>              SourceDPG;                                                // 0x0184(0x0001) (Const)
	TEnumAsByte<ESceneDepthPriorityGroup>              ReflectionsDPG;                                           // 0x0185(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0186(0x0002) MISSED OFFSET
	TArray<struct FLensFlareElement>                   Reflections;                                              // 0x0188(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	float                                              OuterCone;                                                // 0x0194(0x0004) (Edit)
	float                                              InnerCone;                                                // 0x0198(0x0004) (Edit)
	float                                              ConeFudgeFactor;                                          // 0x019C(0x0004) (Edit)
	float                                              Radius;                                                   // 0x01A0(0x0004) (Edit)
	unsigned long                                      bUseTrueConeCalculation : 1;                              // 0x01A4(0x0004) (Edit)
	unsigned long                                      bUseFixedRelativeBoundingBox : 1;                         // 0x01A4(0x0004) (Edit)
	unsigned long                                      bRenderDebugLines : 1;                                    // 0x01A4(0x0004) (Edit)
	unsigned long                                      ThumbnailImageOutOfDate : 1;                              // 0x01A4(0x0004)
	float                                              MinStrength;                                              // 0x01A8(0x0004) (Edit)
	struct FRawDistributionFloat                       ScreenPercentageMap;                                      // 0x01AC(0x001C) (Edit, Component, NeedCtorLink)
	struct FBox                                        FixedRelativeBoundingBox;                                 // 0x01C8(0x001C) (Edit)
	class UInterpCurveEdSetup*                         CurveEdSetup;                                             // 0x01E4(0x0004) (ExportObject)
	int                                                ReflectionCount;                                          // 0x01E8(0x0004) (Transient)
	struct FRotator                                    ThumbnailAngle;                                           // 0x01EC(0x000C)
	float                                              ThumbnailDistance;                                        // 0x01F8(0x0004)
	class UTexture2D*                                  ThumbnailImage;                                           // 0x01FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LensFlare");
		return ptr;
	}

};


// Class Engine.TextureFlipBook
// 0x0040 (0x0208 - 0x01C8)
class UTextureFlipBook : public UTexture2D
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x01C8(0x0004) (Const, Native, NoExport)
	float                                              TimeIntoMovie;                                            // 0x01CC(0x0004) (Const, Transient)
	float                                              TimeSinceLastFrame;                                       // 0x01D0(0x0004) (Const, Transient)
	float                                              HorizontalScale;                                          // 0x01D4(0x0004) (Const, Transient)
	float                                              VerticalScale;                                            // 0x01D8(0x0004) (Const, Transient)
	unsigned long                                      bPaused : 1;                                              // 0x01DC(0x0004) (Const)
	unsigned long                                      bStopped : 1;                                             // 0x01DC(0x0004) (Const)
	unsigned long                                      bLooping : 1;                                             // 0x01DC(0x0004) (Edit)
	unsigned long                                      bAutoPlay : 1;                                            // 0x01DC(0x0004) (Edit)
	int                                                HorizontalImages;                                         // 0x01E0(0x0004) (Edit)
	int                                                VerticalImages;                                           // 0x01E4(0x0004) (Edit)
	TEnumAsByte<ETextureFlipBookMethod>                FBMethod;                                                 // 0x01E8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01E9(0x0003) MISSED OFFSET
	float                                              FrameRate;                                                // 0x01EC(0x0004) (Edit)
	float                                              FrameTime;                                                // 0x01F0(0x0004)
	int                                                CurrentRow;                                               // 0x01F4(0x0004) (Const, Transient)
	int                                                CurrentColumn;                                            // 0x01F8(0x0004) (Const, Transient)
	float                                              RenderOffsetU;                                            // 0x01FC(0x0004) (Const, Transient)
	float                                              RenderOffsetV;                                            // 0x0200(0x0004) (Const, Transient)
	struct FPointer                                    ReleaseResourcesFence;                                    // 0x0204(0x0004) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureFlipBook");
		return ptr;
	}


	void SetCurrentFrame(int Row, int Col);
	void Stop();
	void Pause();
	void Play();
};


// Class Engine.Texture2DComposite
// 0x0018 (0x0108 - 0x00F0)
class UTexture2DComposite : public UTexture
{
public:
	TArray<struct FSourceTexture2DRegion>              SourceRegions;                                            // 0x00F0(0x000C) (NeedCtorLink)
	int                                                MaxTextureSize;                                           // 0x00FC(0x0004)
	int                                                DestSizeX;                                                // 0x0100(0x0004)
	int                                                DestSizeY;                                                // 0x0104(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture2DComposite");
		return ptr;
	}


	void ResetSourceRegions();
	void UpdateCompositeTexture(int NumMipsToGenerate);
	bool SourceTexturesFullyStreamedIn();
};


// Class Engine.Texture2DDynamic
// 0x0014 (0x0104 - 0x00F0)
class UTexture2DDynamic : public UTexture
{
public:
	int                                                SizeX;                                                    // 0x00F0(0x0004) (Native, Transient)
	int                                                SizeY;                                                    // 0x00F4(0x0004) (Native, Transient)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00F8(0x0001) (Native, Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	int                                                NumMips;                                                  // 0x00FC(0x0004) (Native, Transient)
	unsigned long                                      bIsResolveTarget : 1;                                     // 0x0100(0x0004) (Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture2DDynamic");
		return ptr;
	}


	class UTexture2DDynamic* STATIC_Create(int InSizeX, int InSizeY, TEnumAsByte<EPixelFormat> InFormat, bool InIsResolveTarget);
	void UpdateMipFromJPEG(int MipIdx, TArray<unsigned char>* MipData);
	void UpdateMip(int MipIdx, TArray<unsigned char>* MipData);
	void Init(int InSizeX, int InSizeY, TEnumAsByte<EPixelFormat> InFormat, bool InIsResolveTarget);
};


// Class Engine.TextureCube
// 0x002C (0x011C - 0x00F0)
class UTextureCube : public UTexture
{
public:
	int                                                SizeX;                                                    // 0x00F0(0x0004) (Const, Transient)
	int                                                SizeY;                                                    // 0x00F4(0x0004) (Const, Transient)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00F8(0x0001) (Const, Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	int                                                NumMips;                                                  // 0x00FC(0x0004) (Const, Transient)
	unsigned long                                      bIsCubemapValid : 1;                                      // 0x0100(0x0004) (Const, Transient)
	class UTexture2D*                                  FacePosX;                                                 // 0x0104(0x0004) (Edit, Const)
	class UTexture2D*                                  FaceNegX;                                                 // 0x0108(0x0004) (Edit, Const)
	class UTexture2D*                                  FacePosY;                                                 // 0x010C(0x0004) (Edit, Const)
	class UTexture2D*                                  FaceNegY;                                                 // 0x0110(0x0004) (Edit, Const)
	class UTexture2D*                                  FacePosZ;                                                 // 0x0114(0x0004) (Edit, Const)
	class UTexture2D*                                  FaceNegZ;                                                 // 0x0118(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureCube");
		return ptr;
	}

};


// Class Engine.TextureMovie
// 0x005C (0x014C - 0x00F0)
class UTextureMovie : public UTexture
{
public:
	int                                                SizeX;                                                    // 0x00F0(0x0004) (Const)
	int                                                SizeY;                                                    // 0x00F4(0x0004) (Const)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00F8(0x0001) (Const)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x00F9(0x0001) (Edit)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x00FA(0x0001) (Edit)
	TEnumAsByte<EMovieStreamSource>                    MovieStreamSource;                                        // 0x00FB(0x0001) (Edit)
	class UClass*                                      DecoderClass;                                             // 0x00FC(0x0004) (Const)
	class UCodecMovie*                                 Decoder;                                                  // 0x0100(0x0004) (Const, Transient)
	unsigned long                                      Paused : 1;                                               // 0x0104(0x0004) (Const, Transient)
	unsigned long                                      Stopped : 1;                                              // 0x0104(0x0004) (Const, Transient)
	unsigned long                                      Looping : 1;                                              // 0x0104(0x0004) (Edit)
	unsigned long                                      ResetOnLastFrame : 1;                                     // 0x0104(0x0004) (Edit)
	unsigned long                                      AutoPlay : 1;                                             // 0x0104(0x0004) (Edit)
	struct FUntypedBulkData_Mirror                     Data;                                                     // 0x0108(0x0034) (Const, Native)
	struct FPointer                                    ReleaseCodecFence;                                        // 0x013C(0x0004) (Const, Native, Transient)
	struct FString                                     MovieStreamFilename;                                      // 0x0140(0x000C) (Edit, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureMovie");
		return ptr;
	}


	void Stop();
	void Pause();
	void Play();
};


// Class Engine.TextureRenderTarget
// 0x0008 (0x00F8 - 0x00F0)
class UTextureRenderTarget : public UTexture
{
public:
	unsigned long                                      bUpdateImmediate : 1;                                     // 0x00F0(0x0004) (Transient)
	unsigned long                                      bNeedsTwoCopies : 1;                                      // 0x00F0(0x0004) (Edit)
	unsigned long                                      bRenderOnce : 1;                                          // 0x00F0(0x0004) (Edit)
	float                                              TargetGamma;                                              // 0x00F4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTarget");
		return ptr;
	}

};


// Class Engine.TextureRenderTarget2D
// 0x0020 (0x0118 - 0x00F8)
class UTextureRenderTarget2D : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x00F8(0x0004) (Edit, Const)
	int                                                SizeY;                                                    // 0x00FC(0x0004) (Edit, Const)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x0100(0x0001) (Const)
	TEnumAsByte<ETextureAddress>                       AddressX;                                                 // 0x0101(0x0001) (Edit)
	TEnumAsByte<ETextureAddress>                       AddressY;                                                 // 0x0102(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0103(0x0001) MISSED OFFSET
	struct FLinearColor                                ClearColor;                                               // 0x0104(0x0010) (Const)
	unsigned long                                      bForceLinearGamma : 1;                                    // 0x0114(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTarget2D");
		return ptr;
	}


	class UTextureRenderTarget2D* STATIC_Create(int InSizeX, int InSizeY, TEnumAsByte<EPixelFormat> InFormat, const struct FLinearColor& InClearColor, bool bOnlyRenderOnce, bool bInForceLinearGamma);
};


// Class Engine.ScriptedTexture
// 0x0010 (0x0128 - 0x0118)
class UScriptedTexture : public UTextureRenderTarget2D
{
public:
	unsigned long                                      bNeedsUpdate : 1;                                         // 0x0118(0x0004) (Transient)
	unsigned long                                      bSkipNextClear : 1;                                       // 0x0118(0x0004) (Transient)
	struct FScriptDelegate                             __Render__Delegate;                                       // 0x011C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ScriptedTexture");
		return ptr;
	}


	void Render(class UCanvas* C);
};


// Class Engine.ViewportRenderTarget2D
// 0x000C (0x0124 - 0x0118)
class UViewportRenderTarget2D : public UTextureRenderTarget2D
{
public:
	TEnumAsByte<ECopyState>                            Status;                                                   // 0x0118(0x0001) (Native)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0119(0x0003) MISSED OFFSET
	struct FDouble                                     gLastTime;                                                // 0x011C(0x0008) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ViewportRenderTarget2D");
		return ptr;
	}

};


// Class Engine.TextureRenderTargetCube
// 0x0005 (0x00FD - 0x00F8)
class UTextureRenderTargetCube : public UTextureRenderTarget
{
public:
	int                                                SizeX;                                                    // 0x00F8(0x0004) (Edit)
	TEnumAsByte<EPixelFormat>                          Format;                                                   // 0x00FC(0x0001) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextureRenderTargetCube");
		return ptr;
	}

};


// Class Engine.AudioDevice
// 0x0284 (0x02C4 - 0x0040)
class UAudioDevice : public USubsystem
{
public:
	int                                                MaxChannels;                                              // 0x0040(0x0004) (Const, Config)
	int                                                CommonAudioPoolSize;                                      // 0x0044(0x0004) (Const, Config)
	float                                              LowPassFilterResonance;                                   // 0x0048(0x0004) (Const, Config)
	float                                              MinCompressedDurationEditor;                              // 0x004C(0x0004) (Const, Config)
	float                                              MinCompressedDurationGame;                                // 0x0050(0x0004) (Const, Config)
	struct FString                                     ChirpInSoundNodeWaveName;                                 // 0x0054(0x000C) (Const, Config, NeedCtorLink)
	class USoundNodeWave*                              ChirpInSoundNodeWave;                                     // 0x0060(0x0004) (Const)
	struct FString                                     ChirpOutSoundNodeWaveName;                                // 0x0064(0x000C) (Const, Config, NeedCtorLink)
	class USoundNodeWave*                              ChirpOutSoundNodeWave;                                    // 0x0070(0x0004) (Const)
	struct FPointer                                    CommonAudioPool;                                          // 0x0074(0x0004) (Const, Native)
	int                                                CommonAudioPoolFreeBytes;                                 // 0x0078(0x0004) (Const, Native)
	TArray<class UAudioComponent*>                     AudioComponents;                                          // 0x007C(0x000C) (Const, ExportObject, Transient, Component, NeedCtorLink, EditInline)
	TArray<struct FPointer>                            Sources;                                                  // 0x0088(0x000C) (Const, Native)
	TArray<struct FPointer>                            FreeSources;                                              // 0x0094(0x000C) (Const, Native)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x00A0(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.WaveInstanceSourceMap
	unsigned long                                      bGameWasTicking : 1;                                      // 0x00DC(0x0004) (Const, Native)
	unsigned long                                      bSoundSpawningEnabled : 1;                                // 0x00DC(0x0004) (Transient)
	TArray<struct FListener>                           Listeners;                                                // 0x00E0(0x000C) (Const, Native)
	struct FQWord                                      CurrentTick;                                              // 0x00EC(0x0008) (Const, Native)
	unsigned char                                      UnknownData01[0x3C];                                      // 0x00F4(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SoundClasses
	unsigned char                                      UnknownData02[0x3C];                                      // 0x0130(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SourceSoundClasses
	unsigned char                                      UnknownData03[0x3C];                                      // 0x016C(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.CurrentSoundClasses
	unsigned char                                      UnknownData04[0x3C];                                      // 0x01A8(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.DestinationSoundClasses
	unsigned char                                      UnknownData05[0x3C];                                      // 0x01E4(0x003C) UNKNOWN PROPERTY: MapProperty Engine.AudioDevice.SoundModes
	struct FPointer                                    Effects;                                                  // 0x0220(0x0004) (Const, Native)
	struct FName                                       BaseSoundModeName;                                        // 0x0224(0x0008) (Const, Native)
	class USoundMode*                                  CurrentMode;                                              // 0x022C(0x0004) (Const, Native)
	struct FDouble                                     SoundModeStartTime;                                       // 0x0230(0x0008) (Const, Native)
	struct FDouble                                     SoundModeFadeInStartTime;                                 // 0x0238(0x0008) (Const, Native)
	struct FDouble                                     SoundModeFadeInEndTime;                                   // 0x0240(0x0008) (Const, Native)
	struct FDouble                                     SoundModeEndTime;                                         // 0x0248(0x0008) (Const, Native)
	int                                                ListenerVolumeIndex;                                      // 0x0250(0x0004) (Const, Native)
	struct FInteriorSettings                           ListenerInteriorSettings;                                 // 0x0254(0x0024) (Const, Native)
	struct FDouble                                     InteriorStartTime;                                        // 0x0278(0x0008) (Const, Native)
	struct FDouble                                     InteriorEndTime;                                          // 0x0280(0x0008) (Const, Native)
	struct FDouble                                     ExteriorEndTime;                                          // 0x0288(0x0008) (Const, Native)
	struct FDouble                                     InteriorLPFEndTime;                                       // 0x0290(0x0008) (Const, Native)
	struct FDouble                                     ExteriorLPFEndTime;                                       // 0x0298(0x0008) (Const, Native)
	float                                              InteriorVolumeInterp;                                     // 0x02A0(0x0004) (Const, Native)
	float                                              InteriorLPFInterp;                                        // 0x02A4(0x0004) (Const, Native)
	float                                              ExteriorVolumeInterp;                                     // 0x02A8(0x0004) (Const, Native)
	float                                              ExteriorLPFInterp;                                        // 0x02AC(0x0004) (Const, Native)
	class UAudioComponent*                             TestAudioComponent;                                       // 0x02B0(0x0004) (Const, ExportObject, Component, EditInline)
	struct FPointer                                    TextToSpeech;                                             // 0x02B4(0x0004) (Const, Native)
	TEnumAsByte<EDebugState>                           DebugState;                                               // 0x02B8(0x0001) (Const, Native)
	unsigned char                                      UnknownData06[0x3];                                       // 0x02B9(0x0003) MISSED OFFSET
	float                                              TransientMasterVolume;                                    // 0x02BC(0x0004) (Transient)
	float                                              LastUpdateTime;                                           // 0x02C0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AudioDevice");
		return ptr;
	}


	struct FName GetCurrentSoundModeName();
	class USoundClass* FindSoundClass(const struct FName& SoundClassName);
	bool SetSoundMode(const struct FName& NewMode);
};


// Class Engine.SoundClass
// 0x0070 (0x00AC - 0x003C)
class USoundClass : public UObject
{
public:
	struct FSoundClassProperties                       Properties;                                               // 0x003C(0x0020) (Edit)
	TArray<struct FName>                               ChildClassNames;                                          // 0x005C(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bIsChild : 1;                                             // 0x0068(0x0004)
	int                                                MenuID;                                                   // 0x006C(0x0004)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x0070(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SoundClass.EditorData

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundClass");
		return ptr;
	}

};


// Class Engine.SoundMode
// 0x0044 (0x0080 - 0x003C)
class USoundMode : public UObject
{
public:
	unsigned long                                      bApplyEQ : 1;                                             // 0x003C(0x0004) (Edit)
	struct FAudioEQEffect                              EQSettings;                                               // 0x0040(0x0024) (Edit)
	TArray<struct FSoundClassAdjuster>                 SoundClassEffects;                                        // 0x0064(0x000C) (Edit, NeedCtorLink)
	float                                              InitialDelay;                                             // 0x0070(0x0004) (Edit)
	float                                              FadeInTime;                                               // 0x0074(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0078(0x0004) (Edit)
	float                                              FadeOutTime;                                              // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundMode");
		return ptr;
	}

};


// Class Engine.MatineePawn
// 0x0004 (0x0468 - 0x0464)
class AMatineePawn : public APawn
{
public:
	class USkeletalMesh*                               PreviewMesh;                                              // 0x0464(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatineePawn");
		return ptr;
	}

};


// Class Engine.Scout
// 0x008C (0x04F0 - 0x0464)
class AScout : public APawn
{
public:
	TArray<struct FPathSizeInfo>                       PathSizes;                                                // 0x0464(0x000C) (NeedCtorLink)
	float                                              TestJumpZ;                                                // 0x0470(0x0004)
	float                                              TestGroundSpeed;                                          // 0x0474(0x0004)
	float                                              TestMaxFallSpeed;                                         // 0x0478(0x0004)
	float                                              TestFallSpeed;                                            // 0x047C(0x0004)
	float                                              MaxLandingVelocity;                                       // 0x0480(0x0004) (Const)
	int                                                MinNumPlayerStarts;                                       // 0x0484(0x0004)
	class UClass*                                      DefaultReachSpecClass;                                    // 0x0488(0x0004)
	TArray<struct FColor>                              EdgePathColors;                                           // 0x048C(0x000C) (NeedCtorLink)
	float                                              NavMeshGen_StepSize;                                      // 0x0498(0x0004)
	float                                              NavMeshGen_EntityHalfHeight;                              // 0x049C(0x0004)
	float                                              NavMeshGen_StartingHeightOffset;                          // 0x04A0(0x0004)
	float                                              NavMeshGen_MaxDropHeight;                                 // 0x04A4(0x0004)
	float                                              NavMeshGen_MaxStepHeight;                                 // 0x04A8(0x0004)
	float                                              NavMeshGen_VertZDeltaSnapThresh;                          // 0x04AC(0x0004)
	float                                              NavMeshGen_MinPolyArea;                                   // 0x04B0(0x0004)
	float                                              NavMeshGen_BorderBackfill_CheckDist;                      // 0x04B4(0x0004)
	float                                              NavMeshGen_MinMergeDotAreaThreshold;                      // 0x04B8(0x0004)
	float                                              NavMeshGen_MinMergeDotSmallArea;                          // 0x04BC(0x0004)
	float                                              NavMeshGen_MinMergeDotLargeArea;                          // 0x04C0(0x0004)
	float                                              NavMeshGen_MaxPolyHeight;                                 // 0x04C4(0x0004)
	float                                              NavMeshGen_HeightMergeThreshold;                          // 0x04C8(0x0004)
	float                                              NavMeshGen_EdgeMaxDelta;                                  // 0x04CC(0x0004)
	float                                              NavMeshGen_MaxGroundCheckSize;                            // 0x04D0(0x0004)
	float                                              NavMeshGen_MinEdgeLength;                                 // 0x04D4(0x0004)
	unsigned long                                      NavMeshGen_ExpansionDoObstacleMeshSimplification : 1;     // 0x04D8(0x0004)
	unsigned long                                      bHightlightOneWayReachSpecs : 1;                          // 0x04D8(0x0004) (Edit)
	float                                              MinMantleFallDist;                                        // 0x04DC(0x0004)
	float                                              MaxMantleFallDist;                                        // 0x04E0(0x0004)
	float                                              MinMantleLateralDist;                                     // 0x04E4(0x0004)
	float                                              MaxMantleLateralDist;                                     // 0x04E8(0x0004)
	float                                              MaxMantleFallTime;                                        // 0x04EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Scout");
		return ptr;
	}


	void PreBeginPlay();
};


// Class Engine.Light
// 0x0008 (0x01DC - 0x01D4)
class ALight : public AActor
{
public:
	class ULightComponent*                             LightComponent;                                           // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bEnabled : 1;                                             // 0x01D8(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Light");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class Engine.DirectionalLight
// 0x0000 (0x01DC - 0x01DC)
class ADirectionalLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DirectionalLight");
		return ptr;
	}

};


// Class Engine.DirectionalLightToggleable
// 0x0000 (0x01DC - 0x01DC)
class ADirectionalLightToggleable : public ADirectionalLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DirectionalLightToggleable");
		return ptr;
	}

};


// Class Engine.DominantDirectionalLight
// 0x0000 (0x01DC - 0x01DC)
class ADominantDirectionalLight : public ADirectionalLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DominantDirectionalLight");
		return ptr;
	}


	void PostBeginPlay();
};


// Class Engine.DominantDirectionalLightMovable
// 0x0000 (0x01DC - 0x01DC)
class ADominantDirectionalLightMovable : public ADominantDirectionalLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DominantDirectionalLightMovable");
		return ptr;
	}

};


// Class Engine.PointLight
// 0x0000 (0x01DC - 0x01DC)
class APointLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLight");
		return ptr;
	}

};


// Class Engine.DominantPointLight
// 0x0000 (0x01DC - 0x01DC)
class ADominantPointLight : public APointLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DominantPointLight");
		return ptr;
	}

};


// Class Engine.PointLightMovable
// 0x0000 (0x01DC - 0x01DC)
class APointLightMovable : public APointLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLightMovable");
		return ptr;
	}

};


// Class Engine.PointLightToggleable
// 0x0000 (0x01DC - 0x01DC)
class APointLightToggleable : public APointLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLightToggleable");
		return ptr;
	}


	void ApplyCheckpointRecord(struct APointLightToggleable_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct APointLightToggleable_FCheckpointRecord* Record);
	bool ShouldSaveForCheckpoint();
};


// Class Engine.SkyLight
// 0x0000 (0x01DC - 0x01DC)
class ASkyLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyLight");
		return ptr;
	}

};


// Class Engine.SkyLightToggleable
// 0x0000 (0x01DC - 0x01DC)
class ASkyLightToggleable : public ASkyLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyLightToggleable");
		return ptr;
	}

};


// Class Engine.SpotLight
// 0x0000 (0x01DC - 0x01DC)
class ASpotLight : public ALight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLight");
		return ptr;
	}

};


// Class Engine.DominantSpotLight
// 0x0000 (0x01DC - 0x01DC)
class ADominantSpotLight : public ASpotLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DominantSpotLight");
		return ptr;
	}

};


// Class Engine.GeneratedMeshAreaLight
// 0x0000 (0x01DC - 0x01DC)
class AGeneratedMeshAreaLight : public ASpotLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GeneratedMeshAreaLight");
		return ptr;
	}

};


// Class Engine.SpotLightMovable
// 0x0000 (0x01DC - 0x01DC)
class ASpotLightMovable : public ASpotLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLightMovable");
		return ptr;
	}

};


// Class Engine.SpotLightToggleable
// 0x0000 (0x01DC - 0x01DC)
class ASpotLightToggleable : public ASpotLight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLightToggleable");
		return ptr;
	}


	void ApplyCheckpointRecord(struct ASpotLightToggleable_FCheckpointRecord* Record);
	void CreateCheckpointRecord(struct ASpotLightToggleable_FCheckpointRecord* Record);
	bool ShouldSaveForCheckpoint();
};


// Class Engine.StaticLightCollectionActor
// 0x0010 (0x01EC - 0x01DC)
class AStaticLightCollectionActor : public ALight
{
public:
	TArray<class ULightComponent*>                     LightComponents;                                          // 0x01DC(0x000C) (Const, ExportObject, Component, NeedCtorLink, EditInline)
	int                                                MaxLightComponents;                                       // 0x01E8(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticLightCollectionActor");
		return ptr;
	}

};


// Class Engine.DirectionalLightComponent
// 0x0020 (0x0188 - 0x0168)
class UDirectionalLightComponent : public ULightComponent
{
public:
	float                                              TraceDistance;                                            // 0x0168(0x0004) (Edit)
	float                                              WholeSceneDynamicShadowRadius;                            // 0x016C(0x0004) (Edit)
	int                                                NumWholeSceneDynamicShadowCascades;                       // 0x0170(0x0004) (Edit, Const)
	float                                              CascadeDistributionExponent;                              // 0x0174(0x0004) (Edit, Const)
	struct FLightmassDirectionalLightSettings          LightmassSettings;                                        // 0x0178(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DirectionalLightComponent");
		return ptr;
	}


	void OnUpdatePropertyBrightness();
	void OnUpdatePropertyLightColor();
};


// Class Engine.DominantDirectionalLightComponent
// 0x00C4 (0x024C - 0x0188)
class UDominantDirectionalLightComponent : public UDirectionalLightComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0188(0x0008) MISSED OFFSET
	struct FDominantShadowInfo                         DominantLightShadowInfo;                                  // 0x0190(0x00B0) (Const)
	struct FArray_Mirror                               DominantLightShadowMap;                                   // 0x0240(0x000C) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DominantDirectionalLightComponent");
		return ptr;
	}

};


// Class Engine.PointLightComponent
// 0x0090 (0x01F8 - 0x0168)
class UPointLightComponent : public ULightComponent
{
public:
	float                                              ShadowRadiusMultiplier;                                   // 0x0168(0x0004)
	float                                              Radius;                                                   // 0x016C(0x0004) (Edit)
	float                                              FalloffExponent;                                          // 0x0170(0x0004) (Edit)
	float                                              ShadowFalloffExponent;                                    // 0x0174(0x0004) (Edit)
	float                                              MinShadowFalloffRadius;                                   // 0x0178(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                                      // 0x0180(0x0040) (Const)
	struct FVector                                     Translation;                                              // 0x01C0(0x000C) (Edit, Const)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01CC(0x0004) MISSED OFFSET
	struct FPlane                                      ShadowPlane;                                              // 0x01D0(0x0010) (Const)
	class UDrawLightRadiusComponent*                   PreviewLightRadius;                                       // 0x01E0(0x0004) (Const, ExportObject, Component, EditInline)
	struct FLightmassPointLightSettings                LightmassSettings;                                        // 0x01E4(0x0010) (Edit)
	class UDrawLightRadiusComponent*                   PreviewLightSourceRadius;                                 // 0x01F4(0x0004) (Const, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PointLightComponent");
		return ptr;
	}


	void OnUpdatePropertyBrightness();
	void OnUpdatePropertyLightColor();
	void SetTranslation(const struct FVector& NewTranslation);
};


// Class Engine.DominantPointLightComponent
// 0x0000 (0x01F8 - 0x01F8)
class UDominantPointLightComponent : public UPointLightComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DominantPointLightComponent");
		return ptr;
	}

};


// Class Engine.SpotLightComponent
// 0x0020 (0x0218 - 0x01F8)
class USpotLightComponent : public UPointLightComponent
{
public:
	float                                              InnerConeAngle;                                           // 0x01F8(0x0004) (Edit)
	float                                              OuterConeAngle;                                           // 0x01FC(0x0004) (Edit)
	float                                              LightShaftConeAngle;                                      // 0x0200(0x0004) (Edit)
	class UDrawLightConeComponent*                     PreviewInnerCone;                                         // 0x0204(0x0004) (Const, ExportObject, Component, EditInline)
	class UDrawLightConeComponent*                     PreviewOuterCone;                                         // 0x0208(0x0004) (Const, ExportObject, Component, EditInline)
	struct FRotator                                    Rotation;                                                 // 0x020C(0x000C) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpotLightComponent");
		return ptr;
	}


	void SetRotation(const struct FRotator& NewRotation);
};


// Class Engine.DominantSpotLightComponent
// 0x00C4 (0x02DC - 0x0218)
class UDominantSpotLightComponent : public USpotLightComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0218(0x0008) MISSED OFFSET
	struct FDominantShadowInfo                         DominantLightShadowInfo;                                  // 0x0220(0x00B0) (Const)
	struct FArray_Mirror                               DominantLightShadowMap;                                   // 0x02D0(0x000C) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DominantSpotLightComponent");
		return ptr;
	}

};


// Class Engine.SkyLightComponent
// 0x0008 (0x0170 - 0x0168)
class USkyLightComponent : public ULightComponent
{
public:
	float                                              LowerBrightness;                                          // 0x0168(0x0004) (Edit, Const)
	struct FColor                                      LowerColor;                                               // 0x016C(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyLightComponent");
		return ptr;
	}

};


// Class Engine.SphericalHarmonicLightComponent
// 0x009C (0x0204 - 0x0168)
class USphericalHarmonicLightComponent : public ULightComponent
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0168(0x0008) MISSED OFFSET
	struct FSHVectorRGB                                WorldSpaceIncidentLighting;                               // 0x0170(0x0090) (Edit)
	unsigned long                                      bRenderBeforeModShadows : 1;                              // 0x0200(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SphericalHarmonicLightComponent");
		return ptr;
	}

};


// Class Engine.LightEnvironmentComponent
// 0x001B (0x0070 - 0x0055)
class ULightEnvironmentComponent : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0055(0x0003) MISSED OFFSET
	unsigned long                                      bEnabled : 1;                                             // 0x0058(0x0004) (Edit, Const)
	unsigned long                                      bForceNonCompositeDynamicLights : 1;                      // 0x0058(0x0004)
	unsigned long                                      bAllowDynamicShadowsOnTranslucency : 1;                   // 0x0058(0x0004)
	unsigned long                                      bAllowPreShadow : 1;                                      // 0x0058(0x0004) (Const, Transient)
	unsigned long                                      bTranslucencyShadowed : 1;                                // 0x0058(0x0004) (Const, Transient)
	float                                              DominantShadowFactor;                                     // 0x005C(0x0004) (Const, Transient)
	class ULightComponent*                             AffectingDominantLight;                                   // 0x0060(0x0004) (Const, ExportObject, Transient, Component, EditInline)
	TArray<class UPrimitiveComponent*>                 AffectedComponents;                                       // 0x0064(0x000C) (Const, ExportObject, Transient, Component, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightEnvironmentComponent");
		return ptr;
	}


	bool IsEnabled();
	void SetEnabled(bool bNewEnabled);
};


// Class Engine.DynamicLightEnvironmentComponent
// 0x00B8 (0x0128 - 0x0070)
class UDynamicLightEnvironmentComponent : public ULightEnvironmentComponent
{
public:
	struct FPointer                                    State;                                                    // 0x0070(0x0004) (Const, Native, Transient)
	float                                              InvisibleUpdateTime;                                      // 0x0074(0x0004) (Edit)
	float                                              MinTimeBetweenFullUpdates;                                // 0x0078(0x0004) (Edit)
	float                                              VelocityUpdateTimeScale;                                  // 0x007C(0x0004)
	float                                              ShadowInterpolationSpeed;                                 // 0x0080(0x0004)
	int                                                NumVolumeVisibilitySamples;                               // 0x0084(0x0004) (Edit)
	float                                              LightingBoundsScale;                                      // 0x0088(0x0004) (Edit)
	struct FLinearColor                                AmbientShadowColor;                                       // 0x008C(0x0010)
	struct FVector                                     AmbientShadowSourceDirection;                             // 0x009C(0x000C)
	struct FLinearColor                                AmbientGlow;                                              // 0x00A8(0x0010)
	float                                              LightDistance;                                            // 0x00B8(0x0004)
	float                                              ShadowDistance;                                           // 0x00BC(0x0004)
	unsigned long                                      bCastShadows : 1;                                         // 0x00C0(0x0004) (Edit)
	unsigned long                                      bCompositeShadowsFromDynamicLights : 1;                   // 0x00C0(0x0004)
	unsigned long                                      bForceCompositeAllLights : 1;                             // 0x00C0(0x0004)
	unsigned long                                      bAffectedBySmallDynamicLights : 1;                        // 0x00C0(0x0004)
	unsigned long                                      bUseBooleanEnvironmentShadowing : 1;                      // 0x00C0(0x0004) (Edit)
	unsigned long                                      bShadowFromEnvironment : 1;                               // 0x00C0(0x0004)
	unsigned long                                      bDynamic : 1;                                             // 0x00C0(0x0004) (Edit)
	unsigned long                                      bSynthesizeDirectionalLight : 1;                          // 0x00C0(0x0004)
	unsigned long                                      bSynthesizeSHLight : 1;                                   // 0x00C0(0x0004) (Edit)
	unsigned long                                      bRequiresNonLatentUpdates : 1;                            // 0x00C0(0x0004) (Edit)
	unsigned long                                      bTraceFromClosestBoundsPoint : 1;                         // 0x00C0(0x0004)
	unsigned long                                      bIsCharacterLightEnvironment : 1;                         // 0x00C0(0x0004) (Edit)
	unsigned long                                      bOverrideOwnerLightingChannels : 1;                       // 0x00C0(0x0004)
	unsigned long                                      bAlwaysInfluencedByDominantDirectionalLight : 1;          // 0x00C0(0x0004)
	float                                              ModShadowFadeoutTime;                                     // 0x00C4(0x0004)
	float                                              ModShadowFadeoutExponent;                                 // 0x00C8(0x0004)
	struct FLinearColor                                MaxModulatedShadowColor;                                  // 0x00CC(0x0010)
	struct FLinearColor                                MinModulatedShadowColor;                                  // 0x00DC(0x0010) (Edit)
	float                                              DominantShadowTransitionStartDistance;                    // 0x00EC(0x0004)
	float                                              DominantShadowTransitionEndDistance;                      // 0x00F0(0x0004)
	float                                              MinShadowAngle;                                           // 0x00F4(0x0004)
	TEnumAsByte<EDynamicLightEnvironmentBoundsMethod>  BoundsMethod;                                             // 0x00F8(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	struct FBoxSphereBounds                            OverriddenBounds;                                         // 0x00FC(0x001C)
	struct FLightingChannelContainer                   OverriddenLightingChannels;                               // 0x0118(0x0004)
	TArray<class ULightComponent*>                     OverriddenLightComponents;                                // 0x011C(0x000C) (Const, ExportObject, Component, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicLightEnvironmentComponent");
		return ptr;
	}


	void ResetEnvironment();
};


// Class Engine.ParticleLightEnvironmentComponent
// 0x0014 (0x013C - 0x0128)
class UParticleLightEnvironmentComponent : public UDynamicLightEnvironmentComponent
{
public:
	int                                                ReferenceCount;                                           // 0x0128(0x0004) (Const, Transient)
	int                                                NumPooledReuses;                                          // 0x012C(0x0004) (Const, Transient)
	class AActor*                                      SharedInstigator;                                         // 0x0130(0x0004) (Const, Transient)
	class UParticleSystem*                             SharedParticleSystem;                                     // 0x0134(0x0004) (Const, Transient)
	unsigned long                                      bAllowDLESharing : 1;                                     // 0x0138(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleLightEnvironmentComponent");
		return ptr;
	}

};


// Class Engine.DrawLightConeComponent
// 0x0000 (0x01E8 - 0x01E8)
class UDrawLightConeComponent : public UDrawConeComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawLightConeComponent");
		return ptr;
	}

};


// Class Engine.DrawLightRadiusComponent
// 0x0000 (0x01EC - 0x01EC)
class UDrawLightRadiusComponent : public UDrawSphereComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DrawLightRadiusComponent");
		return ptr;
	}

};


// Class Engine.LightFunction
// 0x0014 (0x0050 - 0x003C)
class ULightFunction : public UObject
{
public:
	class UMaterialInterface*                          SourceMaterial;                                           // 0x003C(0x0004) (Edit, Const)
	struct FVector                                     Scale;                                                    // 0x0040(0x000C) (Edit)
	float                                              DisabledBrightness;                                       // 0x004C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LightFunction");
		return ptr;
	}

};


// Class Engine.SkeletalMeshComponent
// 0x0438 (0x061C - 0x01E4)
class USkeletalMeshComponent : public UMeshComponent
{
public:
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x01E4(0x0004) (Edit)
	class USkeletalMeshComponent*                      AttachedToSkelComponent;                                  // 0x01E8(0x0004) (ExportObject, Component, EditInline)
	class UAnimTree*                                   AnimTreeTemplate;                                         // 0x01EC(0x0004) (Edit, Const)
	class UAnimNode*                                   Animations;                                               // 0x01F0(0x0004) (Edit, Const, ExportObject, NeedCtorLink, EditInline)
	TArray<class UAnimNode*>                           AnimTickArray;                                            // 0x01F4(0x000C) (Const, Transient, NeedCtorLink)
	TArray<class UAnimNode*>                           AnimAlwaysTickArray;                                      // 0x0200(0x000C) (Const, Transient, NeedCtorLink)
	TArray<int>                                        AnimTickRelevancyArray;                                   // 0x020C(0x000C) (Const, Transient, NeedCtorLink)
	TArray<float>                                      AnimTickWeightsArray;                                     // 0x0218(0x000C) (Const, Transient, NeedCtorLink)
	TArray<class USkelControlBase*>                    SkelControlTickArray;                                     // 0x0224(0x000C) (Const, Transient, NeedCtorLink)
	class UPhysicsAsset*                               PhysicsAsset;                                             // 0x0230(0x0004) (Edit, Const)
	class UPhysicsAssetInstance*                       PhysicsAssetInstance;                                     // 0x0234(0x0004) (Const, ExportObject, Transient, NeedCtorLink, EditInline)
	struct FPointer                                    ApexClothing;                                             // 0x0238(0x0004) (Const, Native, Transient)
	float                                              PhysicsWeight;                                            // 0x023C(0x0004) (Edit)
	float                                              GlobalAnimRateScale;                                      // 0x0240(0x0004) (Edit)
	float                                              StreamingDistanceMultiplier;                              // 0x0244(0x0004) (Edit)
	struct FPointer                                    MeshObject;                                               // 0x0248(0x0004) (Const, Native, Transient)
	struct FColor                                      WireframeColor;                                           // 0x024C(0x0004) (Edit)
	TArray<struct FBoneAtom>                           SpaceBases;                                               // 0x0250(0x000C) (Const, Native, Transient)
	TArray<struct FBoneAtom>                           LocalAtoms;                                               // 0x025C(0x000C) (Const, Native, Transient)
	TArray<struct FBoneAtom>                           CachedLocalAtoms;                                         // 0x0268(0x000C) (Const, Native, Transient)
	TArray<struct FBoneAtom>                           CachedSpaceBases;                                         // 0x0274(0x000C) (Const, Native, Transient)
	int                                                LowUpdateFrameRate;                                       // 0x0280(0x0004) (Const, Config, GlobalConfig)
	TArray<unsigned char>                              RequiredBones;                                            // 0x0284(0x000C) (Const, Native, Transient)
	TArray<unsigned char>                              ComposeOrderedRequiredBones;                              // 0x0290(0x000C) (Const, Native, Transient)
	class USkeletalMeshComponent*                      ParentAnimComponent;                                      // 0x029C(0x0004) (Edit, Const, ExportObject, Component, EditInline)
	TArray<int>                                        ParentBoneMap;                                            // 0x02A0(0x000C) (Const, Native, Transient)
	TArray<class UAnimSet*>                            AnimSets;                                                 // 0x02AC(0x000C) (Edit, NeedCtorLink)
	TArray<class UAnimSet*>                            TemporarySavedAnimSets;                                   // 0x02B8(0x000C) (Const, Native, Transient)
	TArray<class UMorphTargetSet*>                     MorphSets;                                                // 0x02C4(0x000C) (Edit, NeedCtorLink)
	TArray<struct FActiveMorph>                        ActiveMorphs;                                             // 0x02D0(0x000C) (Transient, NeedCtorLink)
	TArray<struct FActiveMorph>                        ActiveCurveMorphs;                                        // 0x02DC(0x000C) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x02E8(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMeshComponent.MorphTargetIndexMap
	TArray<struct FAttachment>                         Attachments;                                              // 0x0324(0x000C) (Const, Component, DuplicateTransient, NeedCtorLink)
	TArray<unsigned char>                              SkelControlIndex;                                         // 0x0330(0x000C) (Const, Transient, NeedCtorLink)
	TArray<unsigned char>                              PostPhysSkelControlIndex;                                 // 0x033C(0x000C) (Const, Transient, NeedCtorLink)
	int                                                ForcedLodModel;                                           // 0x0348(0x0004) (Edit)
	int                                                MinLodModel;                                              // 0x034C(0x0004) (Edit)
	int                                                PredictedLODLevel;                                        // 0x0350(0x0004)
	int                                                OldPredictedLODLevel;                                     // 0x0354(0x0004)
	float                                              AnimationLODDistanceFactor;                               // 0x0358(0x0004) (Edit)
	int                                                AnimationLODFrameRate;                                    // 0x035C(0x0004) (Edit)
	float                                              MaxDistanceFactor;                                        // 0x0360(0x0004) (Const)
	int                                                ChunkIndexPreview;                                        // 0x0364(0x0004) (Transient)
	int                                                SectionIndexPreview;                                      // 0x0368(0x0004) (Transient)
	int                                                bForceWireframe;                                          // 0x036C(0x0004)
	int                                                bForceRefpose;                                            // 0x0370(0x0004)
	int                                                bOldForceRefPose;                                         // 0x0374(0x0004)
	unsigned long                                      bNoSkeletonUpdate : 1;                                    // 0x0378(0x0004) (Edit)
	int                                                bDisplayBones;                                            // 0x037C(0x0004)
	int                                                bShowPrePhysBones;                                        // 0x0380(0x0004)
	int                                                bHideSkin;                                                // 0x0384(0x0004)
	int                                                bForceRawOffset;                                          // 0x0388(0x0004)
	int                                                bIgnoreControllers;                                       // 0x038C(0x0004)
	int                                                bTransformFromAnimParent;                                 // 0x0390(0x0004)
	int                                                TickTag;                                                  // 0x0394(0x0004) (Const, Transient)
	int                                                InitTag;                                                  // 0x0398(0x0004) (Const, Transient)
	int                                                CachedAtomsTag;                                           // 0x039C(0x0004) (Const, Transient)
	int                                                bUseSingleBodyPhysics;                                    // 0x03A0(0x0004) (Const)
	int                                                bRequiredBonesUpToDate;                                   // 0x03A4(0x0004) (Transient)
	float                                              MinDistFactorForKinematicUpdate;                          // 0x03A8(0x0004)
	int                                                FramesPhysicsAsleep;                                      // 0x03AC(0x0004) (Transient)
	int                                                SkipRateForTickAnimNodesAndGetBoneAtoms;                  // 0x03B0(0x0004) (Const, Transient)
	unsigned long                                      bSkipTickAnimNodes : 1;                                   // 0x03B4(0x0004) (Const, Transient)
	unsigned long                                      bSkipGetBoneAtoms : 1;                                    // 0x03B4(0x0004) (Const, Transient)
	unsigned long                                      bInterpolateBoneAtoms : 1;                                // 0x03B4(0x0004) (Const, Transient)
	unsigned long                                      bHasValidBodies : 1;                                      // 0x03B4(0x0004) (Const, Transient)
	unsigned long                                      bSkipAllUpdateWhenPhysicsAsleep : 1;                      // 0x03B4(0x0004)
	unsigned long                                      bComponentUseFixedSkelBounds : 1;                         // 0x03B4(0x0004) (Edit)
	unsigned long                                      bUseBoundsFromParentAnimComponent : 1;                    // 0x03B4(0x0004) (Edit)
	unsigned long                                      bConsiderAllBodiesForBounds : 1;                          // 0x03B4(0x0004) (Edit)
	unsigned long                                      bUpdateSkelWhenNotRendered : 1;                           // 0x03B4(0x0004) (Edit)
	unsigned long                                      bIgnoreControllersWhenNotRendered : 1;                    // 0x03B4(0x0004)
	unsigned long                                      bTickAnimNodesWhenNotRendered : 1;                        // 0x03B4(0x0004)
	unsigned long                                      bNotUpdatingKinematicDueToDistance : 1;                   // 0x03B4(0x0004) (Const)
	unsigned long                                      bForceDiscardRootMotion : 1;                              // 0x03B4(0x0004) (Edit)
	unsigned long                                      bNotifyRootMotionProcessed : 1;                           // 0x03B4(0x0004) (Edit)
	unsigned long                                      bRootMotionModeChangeNotify : 1;                          // 0x03B4(0x0004)
	unsigned long                                      bRootMotionExtractedNotify : 1;                           // 0x03B4(0x0004)
	unsigned long                                      bProcessingRootMotion : 1;                                // 0x03B4(0x0004) (Transient)
	unsigned long                                      bDisableFaceFXMaterialInstanceCreation : 1;               // 0x03B4(0x0004) (Edit)
	unsigned long                                      bDisableFaceFX : 1;                                       // 0x03B4(0x0004) (Edit)
	unsigned long                                      bAnimTreeInitialised : 1;                                 // 0x03B4(0x0004) (Const, Transient)
	unsigned long                                      bForceMeshObjectUpdate : 1;                               // 0x03B4(0x0004) (Transient)
	unsigned long                                      bHasPhysicsAssetInstance : 1;                             // 0x03B4(0x0004) (Edit, Const)
	unsigned long                                      bUpdateKinematicBonesFromAnimation : 1;                   // 0x03B4(0x0004) (Edit)
	unsigned long                                      bUpdateJointsFromAnimation : 1;                           // 0x03B4(0x0004) (Edit)
	unsigned long                                      bSkelCompFixed : 1;                                       // 0x03B4(0x0004) (Const)
	unsigned long                                      bHasHadPhysicsBlendedIn : 1;                              // 0x03B4(0x0004) (Const)
	unsigned long                                      bForceUpdateAttachmentsInTick : 1;                        // 0x03B4(0x0004) (Edit)
	unsigned long                                      bEnableFullAnimWeightBodies : 1;                          // 0x03B4(0x0004) (Transient)
	unsigned long                                      bPerBoneVolumeEffects : 1;                                // 0x03B4(0x0004) (Edit)
	unsigned long                                      bPerBoneMotionBlur : 1;                                   // 0x03B4(0x0004) (Edit)
	unsigned long                                      bSyncActorLocationToRootRigidBody : 1;                    // 0x03B4(0x0004) (Edit)
	unsigned long                                      bUseRawData : 1;                                          // 0x03B4(0x0004) (Const)
	unsigned long                                      bDisableWarningWhenAnimNotFound : 1;                      // 0x03B8(0x0004)
	unsigned long                                      bOverrideAttachmentOwnerVisibility : 1;                   // 0x03B8(0x0004)
	unsigned long                                      bNeedsToDeleteHitMask : 1;                                // 0x03B8(0x0004) (Const, Transient)
	unsigned long                                      bPauseAnims : 1;                                          // 0x03B8(0x0004)
	unsigned long                                      bChartDistanceFactor : 1;                                 // 0x03B8(0x0004)
	unsigned long                                      bEnableLineCheckWithBounds : 1;                           // 0x03B8(0x0004)
	unsigned long                                      bCanHighlightSelectedSections : 1;                        // 0x03B8(0x0004) (Transient)
	unsigned long                                      bUpdateMorphWhenParentAnimComponentExists : 1;            // 0x03B8(0x0004) (Edit)
	struct FVector                                     LineCheckBoundsScale;                                     // 0x03BC(0x000C)
	unsigned long                                      bEnableClothSimulation : 1;                               // 0x03C8(0x0004) (Edit, Const)
	unsigned long                                      bDisableClothCollision : 1;                               // 0x03C8(0x0004) (Edit, Const)
	unsigned long                                      bClothFrozen : 1;                                         // 0x03C8(0x0004) (Edit, Const)
	unsigned long                                      bAutoFreezeClothWhenNotRendered : 1;                      // 0x03C8(0x0004) (Edit)
	unsigned long                                      bClothAwakeOnStartup : 1;                                 // 0x03C8(0x0004) (Edit)
	unsigned long                                      bClothBaseVelClamp : 1;                                   // 0x03C8(0x0004) (Edit)
	unsigned long                                      bClothBaseVelInterp : 1;                                  // 0x03C8(0x0004) (Edit)
	unsigned long                                      bAttachClothVertsToBaseBody : 1;                          // 0x03C8(0x0004) (Edit)
	unsigned long                                      bIsClothOnStaticObject : 1;                               // 0x03C8(0x0004) (Edit)
	unsigned long                                      bUpdatedFixedClothVerts : 1;                              // 0x03C8(0x0004)
	unsigned long                                      bClothPositionalDampening : 1;                            // 0x03C8(0x0004) (Edit)
	unsigned long                                      bClothWindRelativeToOwner : 1;                            // 0x03C8(0x0004) (Edit)
	unsigned long                                      bRecentlyRendered : 1;                                    // 0x03C8(0x0004) (Transient)
	unsigned long                                      bCacheAnimSequenceNodes : 1;                              // 0x03C8(0x0004)
	unsigned long                                      bNeedsInstanceWeightUpdate : 1;                           // 0x03C8(0x0004) (Const, Transient)
	unsigned long                                      bAlwaysUseInstanceWeights : 1;                            // 0x03C8(0x0004) (Const, Transient)
	unsigned long                                      bUpdateComposeSkeletonPasses : 1;                         // 0x03C8(0x0004) (Const, Transient)
	unsigned long                                      bValidTemporarySavedAnimSets : 1;                         // 0x03C8(0x0004) (Const, Native, Transient)
	TArray<struct FBonePair>                           InstanceVertexWeightBones;                                // 0x03CC(0x000C) (Const, Native, Transient)
	TArray<struct FSkelMeshComponentLODInfo>           LODInfo;                                                  // 0x03D8(0x000C) (Const, Transient, NeedCtorLink)
	struct FVector                                     FrozenLocalToWorldPos;                                    // 0x03E4(0x000C) (Const)
	struct FRotator                                    FrozenLocalToWorldRot;                                    // 0x03F0(0x000C) (Const)
	struct FVector                                     ClothExternalForce;                                       // 0x03FC(0x000C) (Edit, Const)
	struct FVector                                     ClothWind;                                                // 0x0408(0x000C) (Edit)
	struct FVector                                     ClothBaseVelClampRange;                                   // 0x0414(0x000C) (Edit)
	float                                              ClothBlendWeight;                                         // 0x0420(0x0004) (Edit)
	float                                              ClothDynamicBlendWeight;                                  // 0x0424(0x0004)
	float                                              ClothBlendMinDistanceFactor;                              // 0x0428(0x0004) (Edit)
	float                                              ClothBlendMaxDistanceFactor;                              // 0x042C(0x0004) (Edit)
	struct FVector                                     MinPosDampRange;                                          // 0x0430(0x000C) (Edit)
	struct FVector                                     MaxPosDampRange;                                          // 0x043C(0x000C) (Edit)
	struct FVector                                     MinPosDampScale;                                          // 0x0448(0x000C) (Edit)
	struct FVector                                     MaxPosDampScale;                                          // 0x0454(0x000C) (Edit)
	struct FPointer                                    ClothSim;                                                 // 0x0460(0x0004) (Const, Native, Transient)
	int                                                SceneIndex;                                               // 0x0464(0x0004) (Const, Native, Transient)
	TArray<struct FVector>                             ClothMeshPosData;                                         // 0x0468(0x000C) (Const, NeedCtorLink)
	TArray<struct FVector>                             ClothMeshNormalData;                                      // 0x0474(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        ClothMeshIndexData;                                       // 0x0480(0x000C) (Const, NeedCtorLink)
	int                                                NumClothMeshVerts;                                        // 0x048C(0x0004)
	int                                                NumClothMeshIndices;                                      // 0x0490(0x0004)
	TArray<int>                                        ClothMeshParentData;                                      // 0x0494(0x000C) (Const, NeedCtorLink)
	int                                                NumClothMeshParentIndices;                                // 0x04A0(0x0004)
	TArray<struct FVector>                             ClothMeshWeldedPosData;                                   // 0x04A4(0x000C) (Const, Native, Transient)
	TArray<struct FVector>                             ClothMeshWeldedNormalData;                                // 0x04B0(0x000C) (Const, Native, Transient)
	TArray<int>                                        ClothMeshWeldedIndexData;                                 // 0x04BC(0x000C) (Const, Native, Transient)
	int                                                ClothDirtyBufferFlag;                                     // 0x04C8(0x0004)
	TEnumAsByte<ERBCollisionChannel>                   ClothRBChannel;                                           // 0x04CC(0x0001) (Edit, Const)
	unsigned char                                      UnknownData01[0x3];                                       // 0x04CD(0x0003) MISSED OFFSET
	struct FRBCollisionChannelContainer                ClothRBCollideWithChannels;                               // 0x04D0(0x0004) (Edit, Const)
	float                                              ClothForceScale;                                          // 0x04D4(0x0004) (Edit, Const)
	float                                              ClothImpulseScale;                                        // 0x04D8(0x0004) (Edit)
	float                                              ClothAttachmentTearFactor;                                // 0x04DC(0x0004) (Edit, Const)
	unsigned long                                      bClothUseCompartment : 1;                                 // 0x04E0(0x0004) (Edit, Const)
	float                                              MinDistanceForClothReset;                                 // 0x04E4(0x0004) (Edit, Const)
	struct FVector                                     LastClothLocation;                                        // 0x04E8(0x000C) (Const, Transient)
	TEnumAsByte<ERBCollisionChannel>                   ApexClothingRBChannel;                                    // 0x04F4(0x0001) (Edit, Const)
	unsigned char                                      UnknownData02[0x3];                                       // 0x04F5(0x0003) MISSED OFFSET
	struct FRBCollisionChannelContainer                ApexClothingRBCollideWithChannels;                        // 0x04F8(0x0004) (Edit, Const)
	TEnumAsByte<ERBCollisionChannel>                   ApexClothingCollisionRBChannel;                           // 0x04FC(0x0001) (Edit, Const)
	unsigned char                                      UnknownData03[0x3];                                       // 0x04FD(0x0003) MISSED OFFSET
	unsigned long                                      bAutoFreezeApexClothingWhenNotRendered : 1;               // 0x0500(0x0004) (Edit)
	unsigned long                                      bLocalSpaceWind : 1;                                      // 0x0500(0x0004) (Edit)
	struct FVector                                     WindVelocity;                                             // 0x0504(0x000C) (Edit)
	float                                              WindVelocityBlendTime;                                    // 0x0510(0x0004) (Edit)
	unsigned long                                      bSkipInitClothing : 1;                                    // 0x0514(0x0004) (Const, Transient)
	struct FPointer                                    SoftBodySim;                                              // 0x0518(0x0004) (Const, Native, Transient)
	int                                                SoftBodySceneIndex;                                       // 0x051C(0x0004) (Const, Native, Transient)
	unsigned long                                      bEnableSoftBodySimulation : 1;                            // 0x0520(0x0004) (Edit, Const)
	TArray<struct FVector>                             SoftBodyTetraPosData;                                     // 0x0524(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        SoftBodyTetraIndexData;                                   // 0x0530(0x000C) (Const, NeedCtorLink)
	int                                                NumSoftBodyTetraVerts;                                    // 0x053C(0x0004)
	int                                                NumSoftBodyTetraIndices;                                  // 0x0540(0x0004)
	float                                              SoftBodyImpulseScale;                                     // 0x0544(0x0004) (Edit)
	unsigned long                                      bSoftBodyFrozen : 1;                                      // 0x0548(0x0004) (Edit, Const)
	unsigned long                                      bAutoFreezeSoftBodyWhenNotRendered : 1;                   // 0x0548(0x0004) (Edit)
	unsigned long                                      bSoftBodyAwakeOnStartup : 1;                              // 0x0548(0x0004) (Edit)
	unsigned long                                      bSoftBodyUseCompartment : 1;                              // 0x0548(0x0004) (Edit, Const)
	TEnumAsByte<ERBCollisionChannel>                   SoftBodyRBChannel;                                        // 0x054C(0x0001) (Edit, Const)
	unsigned char                                      UnknownData04[0x3];                                       // 0x054D(0x0003) MISSED OFFSET
	struct FRBCollisionChannelContainer                SoftBodyRBCollideWithChannels;                            // 0x0550(0x0004) (Edit, Const)
	struct FPointer                                    SoftBodyASVPlane;                                         // 0x0554(0x0004) (Const, Native, Transient)
	class UMaterial*                                   LimitMaterial;                                            // 0x0558(0x0004)
	unsigned char                                      UnknownData05[0x4];                                       // 0x055C(0x0004) MISSED OFFSET
	struct FBoneAtom                                   RootMotionDelta;                                          // 0x0560(0x0020) (Transient)
	struct FVector                                     RootMotionVelocity;                                       // 0x0580(0x000C) (Transient)
	struct FVector                                     RootBoneTranslation;                                      // 0x058C(0x000C) (Const, Transient)
	struct FVector                                     RootMotionAccelScale;                                     // 0x0598(0x000C)
	TEnumAsByte<ERootMotionMode>                       RootMotionMode;                                           // 0x05A4(0x0001) (Edit)
	TEnumAsByte<ERootMotionMode>                       PreviousRMM;                                              // 0x05A5(0x0001) (Const)
	TEnumAsByte<ERootMotionMode>                       PendingRMM;                                               // 0x05A6(0x0001)
	TEnumAsByte<ERootMotionMode>                       OldPendingRMM;                                            // 0x05A7(0x0001)
	int                                                bRMMOneFrameDelay;                                        // 0x05A8(0x0004) (Const)
	TEnumAsByte<ERootMotionRotationMode>               RootMotionRotationMode;                                   // 0x05AC(0x0001) (Edit)
	TEnumAsByte<EAnimRotationOnly>                     AnimRotationOnly;                                         // 0x05AD(0x0001) (Edit)
	TEnumAsByte<EFaceFXBlendMode>                      FaceFXBlendMode;                                          // 0x05AE(0x0001) (Edit)
	unsigned char                                      UnknownData06[0x1];                                       // 0x05AF(0x0001) MISSED OFFSET
	struct FPointer                                    FaceFXActorInstance;                                      // 0x05B0(0x0004) (Native, Transient)
	class UAudioComponent*                             CachedFaceFXAudioComp;                                    // 0x05B4(0x0004) (ExportObject, Component, EditInline)
	TArray<unsigned char>                              BoneVisibilityStates;                                     // 0x05B8(0x000C) (Const, Transient, NeedCtorLink)
	unsigned char                                      UnknownData07[0xC];                                       // 0x05C4(0x000C) MISSED OFFSET
	struct FBoneAtom                                   LocalToWorldBoneAtom;                                     // 0x05D0(0x0020) (Const, Transient)
	float                                              ProgressiveDrawingFraction;                               // 0x05F0(0x0004) (Transient)
	unsigned char                                      CustomSortAlternateIndexMode;                             // 0x05F4(0x0001) (Transient)
	unsigned char                                      UnknownData08[0x3];                                       // 0x05F5(0x0003) MISSED OFFSET
	TArray<struct FName>                               MorphTargetsQueried;                                      // 0x05F8(0x000C) (Transient, NeedCtorLink)
	unsigned long                                      bUseTickOptimization : 1;                                 // 0x0604(0x0004) (Edit, Const)
	int                                                TickCount;                                                // 0x0608(0x0004) (Const)
	int                                                LastDropRate;                                             // 0x060C(0x0004) (Const, Transient)
	float                                              LastDropRateChange;                                       // 0x0610(0x0004) (Const, Transient)
	float                                              AccumulatedDroppedDeltaTime;                              // 0x0614(0x0004) (Const, Transient)
	float                                              ComponentDroppedDeltaTime;                                // 0x0618(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshComponent");
		return ptr;
	}


	void SetMaterial(int ElementIndex, class UMaterialInterface* Material);
	struct FRotator GetRotation();
	struct FVector GetPosition();
	void BreakConstraint(const struct FVector& Impulse, const struct FVector& HitLocation, const struct FName& InBoneName, bool bVelChange);
	void SkelMeshCompOnParticleSystemFinished(class UParticleSystemComponent* PSC);
	bool PlayParticleEffect(class UAnimNotify_PlayParticleEffect* AnimNotifyData);
	bool CreateForceField(class UAnimNotify_ForceField* AnimNotifyData);
	void StopAnim();
	void PlayAnim(const struct FName& AnimName, float Duration, bool bLoop, bool bRestartIfAlreadyPlaying, float StartTime, bool bPlayBackwards);
	void ShowMaterialSection(int MaterialID, bool bShow, int LODIndex);
	void UpdateMeshForBrokenConstraints();
	void UnHideBoneByName(const struct FName& BoneName);
	void HideBoneByName(const struct FName& BoneName, TEnumAsByte<EPhysBodyOp> PhysBodyOption);
	bool IsBoneHidden(int BoneIndex);
	void UnHideBone(int BoneIndex);
	void HideBone(int BoneIndex, TEnumAsByte<EPhysBodyOp> PhysBodyOption);
	void SetFaceFXRegisterEx(const struct FString& RegName, TEnumAsByte<EFaceFXRegOp> RegOp, float FirstValue, float FirstInterpDuration, float NextValue, float NextInterpDuration);
	void SetFaceFXRegister(const struct FString& RegName, float RegVal, TEnumAsByte<EFaceFXRegOp> RegOp, float InterpDuration);
	float GetFaceFXRegister(const struct FString& RegName);
	void DeclareFaceFXRegister(const struct FString& RegName);
	bool IsPlayingFaceFXAnim();
	void StopFaceFXAnim();
	bool PlayFaceFXAnim(class UFaceFXAnimSet* FaceFXAnimSetRef, const struct FString& AnimName, const struct FString& GroupName, class USoundCue* SoundCueToPlay);
	void ToggleInstanceVertexWeights(bool bEnable, int LODIdx);
	void UpdateInstanceVertexWeightBones(TArray<struct FBonePair> BonePairs);
	int FindInstanceVertexweightBonePair(const struct FBonePair& Bones);
	void RemoveInstanceVertexWeightBoneParented(const struct FName& BoneName);
	void AddInstanceVertexWeightBoneParented(const struct FName& BoneName, bool bPairWithParent);
	bool GetBonesWithinRadius(const struct FVector& Origin, float Radius, int TraceFlags, TArray<struct FName>* out_Bones);
	void UpdateAnimations();
	void ForceSkelUpdate();
	void UpdateRBBonesFromSpaceBases(bool bMoveUnfixedBodies, bool bTeleport);
	void SetHasPhysicsAssetInstance(bool bHasInstance, bool bUseCurrentPosition);
	class URB_BodyInstance* FindBodyInstanceNamed(const struct FName& BoneName);
	struct FName FindConstraintBoneName(int ConstraintIndex);
	int FindConstraintIndex(const struct FName& ConstraintName);
	void InitMorphTargets();
	void InitSkelControls();
	void UpdateParentBoneMap();
	void SetParentAnimComponent(class USkeletalMeshComponent* NewParentAnimComp);
	void SetAnimTreeTemplate(class UAnimTree* NewTemplate);
	struct FVector GetClosestCollidingBoneLocation(const struct FVector& TestLocation, bool bCheckZeroExtent, bool bCheckNonZeroExtent);
	struct FName FindClosestBone(const struct FVector& TestLocation, float IgnoreScale, struct FVector* BoneLocation);
	void TransformFromBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	void TransformToBoneSpace(const struct FName& BoneName, const struct FVector& InPosition, const struct FRotator& InRotation, struct FVector* OutPosition, struct FRotator* OutRotation);
	struct FVector GetBoneAxis(const struct FName& BoneName, TEnumAsByte<EAxis> Axis);
	struct FVector GetRefPosePosition(int BoneIndex);
	bool BoneIsChildOf(const struct FName& BoneName, const struct FName& ParentBoneName);
	void GetBoneNames(TArray<struct FName>* BoneNames);
	struct FName GetParentBone(const struct FName& BoneName);
	struct FMatrix GetBoneMatrix(int BoneIndex);
	struct FName GetBoneName(int BoneIndex);
	int MatchRefBone(const struct FName& BoneName);
	struct FVector GetBoneLocationByIndex(int BoneIdx, int Space);
	struct FVector GetBoneLocation(const struct FName& BoneName, int Space);
	struct FQuat GetBoneQuaternion(const struct FName& BoneName, int Space);
	class UMorphNodeBase* FindMorphNode(const struct FName& InNodeName);
	class USkelControlBase* FindSkelControl(const struct FName& InControlName);
	void AllAnimNodes(class UClass* BaseClass, class UAnimNode** Node);
	class UAnimNode* FindAnimNode(const struct FName& InNodeName);
	class UMorphTarget* FindMorphTarget(const struct FName& MorphTargetName);
	float GetAnimLength(const struct FName& AnimSeqName);
	float GetAnimRateByDuration(const struct FName& AnimSeqName, float Duration);
	void RestoreSavedAnimSets();
	void SaveAnimSets();
	class UAnimSequence* FindAnimSequence(const struct FName& AnimSeqName);
	void WakeSoftBody();
	void SetSoftBodyFrozen(bool bNewFrozen);
	void UpdateSoftBodyParams();
	void SetClothValidBounds(const struct FVector& ClothValidBoundsMin, const struct FVector& ClothValidBoundsMax);
	void EnableClothValidBounds(bool IfEnableClothValidBounds);
	void AttachClothToCollidingShapes(bool AttatchTwoWay, bool AttachTearable);
	void SetClothVelocity(const struct FVector& VelocityOffSet);
	void SetClothPosition(const struct FVector& ClothOffSet);
	void SetClothSleep(bool IfClothSleep);
	void SetClothThickness(float ClothThickness);
	void SetClothTearFactor(float ClothTearFactor);
	void SetClothStretchingStiffness(float ClothStretchingStiffness);
	void SetClothSolverIterations(int ClothSolverIterations);
	void SetClothSleepLinearVelocity(float ClothSleepLinearVelocity);
	void SetClothPressure(float ClothPressure);
	void SetClothFriction(float ClothFriction);
	void SetClothFlags(int ClothFlags);
	void SetClothDampingCoefficient(float ClothDampingCoefficient);
	void SetClothCollisionResponseCoefficient(float ClothCollisionResponseCoefficient);
	void SetClothBendingStiffness(float ClothBendingStiffness);
	void SetClothAttachmentTearFactor(float ClothAttachTearFactor);
	void SetClothAttachmentResponseCoefficient(float ClothAttachmentResponseCoefficient);
	float GetClothThickness();
	float GetClothTearFactor();
	float GetClothStretchingStiffness();
	int GetClothSolverIterations();
	float GetClothSleepLinearVelocity();
	float GetClothPressure();
	float GetClothFriction();
	int GetClothFlags();
	float GetClothDampingCoefficient();
	float GetClothCollisionResponseCoefficient();
	float GetClothBendingStiffness();
	float GetClothAttachmentTearFactor();
	float GetClothAttachmentResponseCoefficient();
	void ForceApexClothingTeleport();
	void ForceApexClothingTeleportAndReset();
	void ResetClothVertsToRefPose();
	void SetAttachClothVertsToBaseBody(bool bAttachVerts);
	void SetClothExternalForce(const struct FVector& InForce);
	void UpdateClothParams();
	void SetEnableClothingSimulation(bool bInEnable);
	void SetClothFrozen(bool bNewFrozen);
	void SetEnableClothSimulation(bool bInEnable);
	void SetForceRefPose(bool bNewForceRefPose);
	void SetPhysicsAsset(class UPhysicsAsset* NewPhysicsAsset, bool bForceReInit);
	void SetSkeletalMesh(class USkeletalMesh* NewMesh, bool bKeepSpaceBases);
	struct FMatrix GetTransformMatrix();
	void AttachedComponents(class UClass* BaseClass, class UActorComponent** OutComponent);
	bool IsComponentAttached(class UActorComponent* Component, const struct FName& BoneName);
	class UActorComponent* FindComponentAttachedToBone(const struct FName& InBoneName);
	struct FName GetSocketBoneName(const struct FName& InSocketName);
	class USkeletalMeshSocket* GetSocketByName(const struct FName& InSocketName);
	bool GetSocketWorldLocationAndRotation(const struct FName& InSocketName, int Space, struct FVector* OutLocation, struct FRotator* OutRotation);
	void AttachComponentToSocket(class UActorComponent* Component, const struct FName& SocketName);
	void DetachComponent(class UActorComponent* Component);
	void AttachComponent(class UActorComponent* Component, const struct FName& BoneName, const struct FVector& RelativeLocation, const struct FRotator& RelativeRotation, const struct FVector& RelativeScale);
};


// Class Engine.SkeletalMesh
// 0x0390 (0x03CC - 0x003C)
class USkeletalMesh : public UObject
{
public:
	struct FBoxSphereBounds                            Bounds;                                                   // 0x003C(0x001C) (Edit, Const, Native)
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0058(0x000C) (Edit, Const, Native)
	TArray<class UApexClothingAsset*>                  ClothingAssets;                                           // 0x0064(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	TArray<struct FApexClothingAssetInfo>              ClothingLodMap;                                           // 0x0070(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	struct FVector                                     Origin;                                                   // 0x007C(0x000C) (Edit, Const, Native)
	struct FRotator                                    RotOrigin;                                                // 0x0088(0x000C) (Edit, Const, Native)
	TArray<int>                                        RefSkeleton;                                              // 0x0094(0x000C) (Const, Native)
	int                                                SkeletalDepth;                                            // 0x00A0(0x0004) (Const, Native)
	unsigned char                                      UnknownData00[0x3C];                                      // 0x00A4(0x003C) UNKNOWN PROPERTY: MapProperty Engine.SkeletalMesh.NameIndexMap
	struct FIndirectArray_Mirror                       LODModels;                                                // 0x00E0(0x000C) (Const, Native)
	struct FPointer                                    SourceData;                                               // 0x00EC(0x0004) (Const, Native)
	TArray<struct FBoneAtom>                           RefBasesInvMatrix;                                        // 0x00F0(0x000C) (Const, Native)
	TArray<struct FBoneMirrorInfo>                     SkelMirrorTable;                                          // 0x00FC(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	TEnumAsByte<EAxis>                                 SkelMirrorAxis;                                           // 0x0108(0x0001) (Edit)
	TEnumAsByte<EAxis>                                 SkelMirrorFlipAxis;                                       // 0x0109(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x2];                                       // 0x010A(0x0002) MISSED OFFSET
	TArray<class USkeletalMeshSocket*>                 Sockets;                                                  // 0x010C(0x000C) (NeedCtorLink)
	TArray<struct FString>                             BoneBreakNames;                                           // 0x0118(0x000C) (Edit, Const, Native, EditConst)
	TArray<TEnumAsByte<EBoneBreakOption>>              BoneBreakOptions;                                         // 0x0124(0x000C) (Edit, Const, Native)
	TArray<struct FSkeletalMeshLODInfo>                LODInfo;                                                  // 0x0130(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	TArray<struct FSkeletalMeshOptimizationSettings>   OptimizationSettings;                                     // 0x013C(0x000C) (NeedCtorLink)
	TArray<struct FName>                               PerPolyCollisionBones;                                    // 0x0148(0x000C) (Edit, NeedCtorLink)
	TArray<struct FName>                               AddToParentPerPolyCollisionBone;                          // 0x0154(0x000C) (Edit, NeedCtorLink)
	TArray<int>                                        PerPolyBoneKDOPs;                                         // 0x0160(0x000C) (Const, Native)
	unsigned long                                      bPerPolyUseSoftWeighting : 1;                             // 0x016C(0x0004) (Edit)
	unsigned long                                      bUseSimpleLineCollision : 1;                              // 0x016C(0x0004) (Edit)
	unsigned long                                      bUseSimpleBoxCollision : 1;                               // 0x016C(0x0004) (Edit)
	unsigned long                                      bForceCPUSkinning : 1;                                    // 0x016C(0x0004) (Edit, Const)
	unsigned long                                      bUseFullPrecisionUVs : 1;                                 // 0x016C(0x0004) (Edit, Const)
	unsigned long                                      bHasBeenSimplified : 1;                                   // 0x016C(0x0004)
	class UFaceFXAsset*                                FaceFXAsset;                                              // 0x0170(0x0004) (Edit)
	class UPhysicsAsset*                               BoundsPreviewAsset;                                       // 0x0174(0x0004) (Edit)
	TArray<class UMorphTargetSet*>                     PreviewMorphSets;                                         // 0x0178(0x000C) (Edit, NeedCtorLink)
	int                                                LODBiasPC;                                                // 0x0184(0x0004) (Edit)
	int                                                LODBiasPS3;                                               // 0x0188(0x0004) (Edit)
	int                                                LODBiasXbox360;                                           // 0x018C(0x0004) (Edit)
	struct FString                                     SourceFilePath;                                           // 0x0190(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	struct FString                                     SourceFileTimestamp;                                      // 0x019C(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	TArray<struct FPointer>                            ClothMesh;                                                // 0x01A8(0x000C) (Const, Native, Transient)
	TArray<float>                                      ClothMeshScale;                                           // 0x01B4(0x000C) (Const, Native, Transient)
	TArray<int>                                        ClothToGraphicsVertMap;                                   // 0x01C0(0x000C) (Const, NeedCtorLink)
	TArray<float>                                      ClothMovementScale;                                       // 0x01CC(0x000C) (Const, NeedCtorLink)
	TEnumAsByte<EClothMovementScaleGen>                ClothMovementScaleGenMode;                                // 0x01D8(0x0001) (Edit)
	unsigned char                                      UnknownData02[0x3];                                       // 0x01D9(0x0003) MISSED OFFSET
	float                                              ClothToAnimMeshMaxDist;                                   // 0x01DC(0x0004) (Edit)
	unsigned long                                      bLimitClothToAnimMesh : 1;                                // 0x01E0(0x0004) (Edit)
	TArray<int>                                        ClothWeldingMap;                                          // 0x01E4(0x000C) (Const, NeedCtorLink)
	int                                                ClothWeldingDomain;                                       // 0x01F0(0x0004) (Const)
	TArray<int>                                        ClothWeldedIndices;                                       // 0x01F4(0x000C) (Const, NeedCtorLink)
	unsigned long                                      bForceNoWelding : 1;                                      // 0x0200(0x0004) (Edit, Const)
	int                                                NumFreeClothVerts;                                        // 0x0204(0x0004) (Const)
	TArray<int>                                        ClothIndexBuffer;                                         // 0x0208(0x000C) (Const, NeedCtorLink)
	TArray<struct FName>                               ClothBones;                                               // 0x0214(0x000C) (Edit, Const, NeedCtorLink)
	int                                                ClothHierarchyLevels;                                     // 0x0220(0x0004) (Edit, Const)
	unsigned long                                      bEnableClothBendConstraints : 1;                          // 0x0224(0x0004) (Edit, Const)
	unsigned long                                      bEnableClothDamping : 1;                                  // 0x0224(0x0004) (Edit, Const)
	unsigned long                                      bUseClothCOMDamping : 1;                                  // 0x0224(0x0004) (Edit, Const)
	float                                              ClothStretchStiffness;                                    // 0x0228(0x0004) (Edit, Const)
	float                                              ClothBendStiffness;                                       // 0x022C(0x0004) (Edit, Const)
	float                                              ClothDensity;                                             // 0x0230(0x0004) (Edit, Const)
	float                                              ClothThickness;                                           // 0x0234(0x0004) (Edit, Const)
	float                                              ClothDamping;                                             // 0x0238(0x0004) (Edit, Const)
	int                                                ClothIterations;                                          // 0x023C(0x0004) (Edit, Const)
	int                                                ClothHierarchicalIterations;                              // 0x0240(0x0004) (Edit, Const)
	float                                              ClothFriction;                                            // 0x0244(0x0004) (Edit, Const)
	float                                              ClothRelativeGridSpacing;                                 // 0x0248(0x0004) (Edit, Const)
	float                                              ClothPressure;                                            // 0x024C(0x0004) (Edit, Const)
	float                                              ClothCollisionResponseCoefficient;                        // 0x0250(0x0004) (Edit, Const)
	float                                              ClothAttachmentResponseCoefficient;                       // 0x0254(0x0004) (Edit, Const)
	float                                              ClothAttachmentTearFactor;                                // 0x0258(0x0004) (Edit, Const)
	float                                              ClothSleepLinearVelocity;                                 // 0x025C(0x0004) (Edit, Const)
	float                                              HardStretchLimitFactor;                                   // 0x0260(0x0004) (Edit, Const)
	unsigned long                                      bHardStretchLimit : 1;                                    // 0x0264(0x0004) (Edit, Const)
	unsigned long                                      bEnableClothOrthoBendConstraints : 1;                     // 0x0264(0x0004) (Edit, Const)
	unsigned long                                      bEnableClothSelfCollision : 1;                            // 0x0264(0x0004) (Edit, Const)
	unsigned long                                      bEnableClothPressure : 1;                                 // 0x0264(0x0004) (Edit, Const)
	unsigned long                                      bEnableClothTwoWayCollision : 1;                          // 0x0264(0x0004) (Edit, Const)
	TArray<struct FClothSpecialBoneInfo>               ClothSpecialBones;                                        // 0x0268(0x000C) (Edit, Const, NeedCtorLink)
	unsigned long                                      bEnableClothLineChecks : 1;                               // 0x0274(0x0004) (Edit, Const)
	unsigned long                                      bClothMetal : 1;                                          // 0x0274(0x0004) (Edit, Const)
	float                                              ClothMetalImpulseThreshold;                               // 0x0278(0x0004) (Edit, Const)
	float                                              ClothMetalPenetrationDepth;                               // 0x027C(0x0004) (Edit, Const)
	float                                              ClothMetalMaxDeformationDistance;                         // 0x0280(0x0004) (Edit, Const)
	unsigned long                                      bEnableClothTearing : 1;                                  // 0x0284(0x0004) (Edit, Const)
	float                                              ClothTearFactor;                                          // 0x0288(0x0004) (Edit, Const)
	int                                                ClothTearReserve;                                         // 0x028C(0x0004) (Edit, Const)
	unsigned long                                      bEnableValidBounds : 1;                                   // 0x0290(0x0004) (Edit)
	struct FVector                                     ValidBoundsMin;                                           // 0x0294(0x000C) (Edit)
	struct FVector                                     ValidBoundsMax;                                           // 0x02A0(0x000C) (Edit)
	struct FMap_Mirror                                 ClothTornTriMap;                                          // 0x02AC(0x003C) (Const, Native)
	TArray<int>                                        SoftBodySurfaceToGraphicsVertMap;                         // 0x02E8(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        SoftBodySurfaceIndices;                                   // 0x02F4(0x000C) (Const, NeedCtorLink)
	TArray<struct FVector>                             SoftBodyTetraVertsUnscaled;                               // 0x0300(0x000C) (Const, NeedCtorLink)
	TArray<int>                                        SoftBodyTetraIndices;                                     // 0x030C(0x000C) (Const, NeedCtorLink)
	TArray<struct FSoftBodyTetraLink>                  SoftBodyTetraLinks;                                       // 0x0318(0x000C) (Const, NeedCtorLink)
	TArray<struct FPointer>                            CachedSoftBodyMeshes;                                     // 0x0324(0x000C) (Const, Native, Transient)
	TArray<float>                                      CachedSoftBodyMeshScales;                                 // 0x0330(0x000C) (Const, Native, Transient)
	TArray<struct FName>                               SoftBodyBones;                                            // 0x033C(0x000C) (Edit, Const, NeedCtorLink)
	TArray<struct FSoftBodySpecialBoneInfo>            SoftBodySpecialBones;                                     // 0x0348(0x000C) (Edit, Const, NeedCtorLink)
	float                                              SoftBodyVolumeStiffness;                                  // 0x0354(0x0004) (Edit, Const)
	float                                              SoftBodyStretchingStiffness;                              // 0x0358(0x0004) (Edit, Const)
	float                                              SoftBodyDensity;                                          // 0x035C(0x0004) (Edit, Const)
	float                                              SoftBodyParticleRadius;                                   // 0x0360(0x0004) (Edit, Const)
	float                                              SoftBodyDamping;                                          // 0x0364(0x0004) (Edit, Const)
	int                                                SoftBodySolverIterations;                                 // 0x0368(0x0004) (Edit, Const)
	float                                              SoftBodyFriction;                                         // 0x036C(0x0004) (Edit, Const)
	float                                              SoftBodyRelativeGridSpacing;                              // 0x0370(0x0004) (Edit, Const)
	float                                              SoftBodySleepLinearVelocity;                              // 0x0374(0x0004) (Edit, Const)
	unsigned long                                      bEnableSoftBodySelfCollision : 1;                         // 0x0378(0x0004) (Edit, Const)
	float                                              SoftBodyAttachmentResponse;                               // 0x037C(0x0004) (Edit, Const)
	float                                              SoftBodyCollisionResponse;                                // 0x0380(0x0004) (Edit, Const)
	float                                              SoftBodyDetailLevel;                                      // 0x0384(0x0004) (Edit, Const)
	int                                                SoftBodySubdivisionLevel;                                 // 0x0388(0x0004) (Edit, Const)
	unsigned long                                      bSoftBodyIsoSurface : 1;                                  // 0x038C(0x0004) (Edit, Const)
	unsigned long                                      bEnableSoftBodyDamping : 1;                               // 0x038C(0x0004) (Edit, Const)
	unsigned long                                      bUseSoftBodyCOMDamping : 1;                               // 0x038C(0x0004) (Edit, Const)
	float                                              SoftBodyAttachmentThreshold;                              // 0x0390(0x0004) (Edit, Const)
	unsigned long                                      bEnableSoftBodyTwoWayCollision : 1;                       // 0x0394(0x0004) (Edit, Const)
	float                                              SoftBodyAttachmentTearFactor;                             // 0x0398(0x0004) (Edit, Const)
	unsigned long                                      bEnableSoftBodyLineChecks : 1;                            // 0x039C(0x0004) (Edit, Const)
	unsigned long                                      bHasVertexColors : 1;                                     // 0x039C(0x0004)
	TArray<unsigned long>                              GraphicsIndexIsCloth;                                     // 0x03A0(0x000C) (Const, Native)
	TArray<float>                                      CachedStreamingTextureFactors;                            // 0x03AC(0x000C) (Const, Native)
	float                                              StreamingDistanceMultiplier;                              // 0x03B8(0x0004) (Edit, Const)
	int                                                ReleaseResourcesFence;                                    // 0x03BC(0x0004) (Const, Native, Transient)
	struct FQWord                                      SkelMeshRUID;                                             // 0x03C0(0x0008) (Const, Transient)
	unsigned long                                      bUseClothingAssetMaterial : 1;                            // 0x03C8(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMesh");
		return ptr;
	}

};


// Class Engine.SkeletalMeshSocket
// 0x0044 (0x0080 - 0x003C)
class USkeletalMeshSocket : public UObject
{
public:
	struct FName                                       SocketName;                                               // 0x003C(0x0008) (Edit, EditConst)
	struct FName                                       BoneName;                                                 // 0x0044(0x0008) (Edit, EditConst)
	struct FVector                                     RelativeLocation;                                         // 0x004C(0x000C) (Edit)
	struct FRotator                                    RelativeRotation;                                         // 0x0058(0x000C) (Edit)
	struct FVector                                     RelativeScale;                                            // 0x0064(0x000C) (Edit)
	class USkeletalMesh*                               PreviewSkelMesh;                                          // 0x0070(0x0004) (Edit)
	class USkeletalMeshComponent*                      PreviewSkelComp;                                          // 0x0074(0x0004) (Edit, Const, ExportObject, Transient, EditConst, Component, EditInline)
	class UStaticMesh*                                 PreviewStaticMesh;                                        // 0x0078(0x0004) (Edit)
	class UParticleSystem*                             PreviewParticleSystem;                                    // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshSocket");
		return ptr;
	}

};


// Class Engine.SplineActor
// 0x0050 (0x0224 - 0x01D4)
class ASplineActor : public AActor
{
public:
	TArray<struct FSplineConnection>                   Connections;                                              // 0x01D4(0x000C) (Component, NeedCtorLink)
	struct FVector                                     SplineActorTangent;                                       // 0x01E0(0x000C) (Edit)
	struct FColor                                      SplineColor;                                              // 0x01EC(0x0004) (Edit)
	unsigned long                                      bDisableDestination : 1;                                  // 0x01F0(0x0004) (Edit)
	unsigned long                                      bAlreadyVisited : 1;                                      // 0x01F0(0x0004) (Transient)
	TArray<class ASplineActor*>                        LinksFrom;                                                // 0x01F4(0x000C) (NeedCtorLink)
	class ASplineActor*                                nextOrdered;                                              // 0x0200(0x0004) (Transient)
	class ASplineActor*                                prevOrdered;                                              // 0x0204(0x0004) (Transient)
	class ASplineActor*                                previousPath;                                             // 0x0208(0x0004) (Transient)
	int                                                bestPathWeight;                                           // 0x020C(0x0004) (Transient)
	int                                                visitedWeight;                                            // 0x0210(0x0004) (Transient)
	struct FInterpCurveFloat                           SplineVelocityOverTime;                                   // 0x0214(0x0010) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineActor");
		return ptr;
	}


	void OnToggleHidden(class USeqAct_ToggleHidden* Action);
	void OnToggle(class USeqAct_Toggle* inAction);
	void GetAllConnectedSplineActors(TArray<class ASplineActor*>* OutSet);
	bool FindSplinePathTo(class ASplineActor* Goal, TArray<class ASplineActor*>* OutRoute);
	class ASplineActor* GetBestConnectionInDirection(const struct FVector& DesiredDir, bool bUseLinksFrom);
	class ASplineActor* GetConnectionWithColor(const struct FColor& DesiredColor, bool bUseLinksFrom);
	class ASplineActor* GetRandomConnection(bool bUseLinksFrom);
	void BreakAllConnectionsFrom();
	void BreakAllConnections();
	void BreakConnectionTo(class ASplineActor* NextActor);
	class ASplineActor* FindTargetForComponent(class USplineComponent* SplineComp);
	class USplineComponent* FindSplineComponentTo(class ASplineActor* NextActor);
	bool IsConnectedTo(class ASplineActor* NextActor, bool bCheckForDisableDestination);
	void AddConnectionTo(class ASplineActor* NextActor);
	void UpdateConnectedSplineComponents(bool bFinish);
	void UpdateSplineComponents();
	struct FVector GetWorldSpaceTangent();
};


// Class Engine.SplineLoftActor
// 0x0048 (0x026C - 0x0224)
class ASplineLoftActor : public ASplineActor
{
public:
	float                                              ScaleX;                                                   // 0x0224(0x0004) (Edit)
	float                                              ScaleY;                                                   // 0x0228(0x0004) (Edit)
	TArray<class USplineMeshComponent*>                SplineMeshComps;                                          // 0x022C(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)
	class UStaticMesh*                                 DeformMesh;                                               // 0x0238(0x0004) (Edit, Const)
	TArray<class UMaterialInterface*>                  DeformMeshMaterials;                                      // 0x023C(0x000C) (Edit, Const, NeedCtorLink)
	float                                              Roll;                                                     // 0x0248(0x0004) (Edit)
	struct FVector                                     WorldXDir;                                                // 0x024C(0x000C) (Edit)
	struct FVector2D                                   offset;                                                   // 0x0258(0x0008) (Edit)
	unsigned long                                      bSmoothInterpRollAndScale : 1;                            // 0x0260(0x0004) (Edit)
	unsigned long                                      bAcceptsLights : 1;                                       // 0x0260(0x0004) (Edit)
	class UDynamicLightEnvironmentComponent*           MeshLightEnvironment;                                     // 0x0264(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	float                                              MeshMaxDrawDistance;                                      // 0x0268(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineLoftActor");
		return ptr;
	}


	void UpdateSplineParams();
	void ClearLoftMesh();
};


// Class Engine.SplineLoftActorMovable
// 0x0000 (0x026C - 0x026C)
class ASplineLoftActorMovable : public ASplineLoftActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineLoftActorMovable");
		return ptr;
	}

};


// Class Engine.SplineComponent
// 0x0034 (0x020C - 0x01D8)
class USplineComponent : public UPrimitiveComponent
{
public:
	struct FInterpCurveVector                          SplineInfo;                                               // 0x01D8(0x0010) (Edit, NeedCtorLink)
	float                                              SplineCurviness;                                          // 0x01E8(0x0004) (Edit, EditConst)
	struct FColor                                      SplineColor;                                              // 0x01EC(0x0004) (Edit)
	float                                              SplineDrawRes;                                            // 0x01F0(0x0004) (Edit)
	float                                              SplineArrowSize;                                          // 0x01F4(0x0004) (Edit)
	unsigned long                                      bSplineDisabled : 1;                                      // 0x01F8(0x0004) (Edit)
	struct FInterpCurveFloat                           SplineReparamTable;                                       // 0x01FC(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineComponent");
		return ptr;
	}


	struct FVector GetTangentAtDistanceAlongSpline(float Distance);
	struct FVector GetLocationAtDistanceAlongSpline(float Distance);
	float GetSplineLength();
	void UpdateSplineReparamTable();
	void UpdateSplineCurviness();
};


// Class Engine.ProcBuilding
// 0x00D4 (0x02D4 - 0x0200)
class AProcBuilding : public AVolume
{
public:
	class UProcBuildingRuleset*                        Ruleset;                                                  // 0x0200(0x0004) (Edit)
	TArray<struct FPBMeshCompInfo>                     BuildingMeshCompInfos;                                    // 0x0204(0x000C) (Edit, Const, EditConst, Component, NeedCtorLink)
	TArray<struct FPBFracMeshCompInfo>                 BuildingFracMeshCompInfos;                                // 0x0210(0x000C) (Edit, Const, EditConst, Component, NeedCtorLink)
	class UStaticMeshComponent*                        SimpleMeshComp;                                           // 0x021C(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bGenerateRoofMesh : 1;                                    // 0x0220(0x0004) (Edit)
	unsigned long                                      bGenerateFloorMesh : 1;                                   // 0x0220(0x0004) (Edit)
	unsigned long                                      bApplyRulesToRoof : 1;                                    // 0x0220(0x0004) (Edit)
	unsigned long                                      bApplyRulesToFloor : 1;                                   // 0x0220(0x0004) (Edit)
	unsigned long                                      bSplitWallsAtRoofLevels : 1;                              // 0x0220(0x0004) (Edit)
	unsigned long                                      bSplitWallsAtWallEdges : 1;                               // 0x0220(0x0004) (Edit)
	unsigned long                                      bQuickEdited : 1;                                         // 0x0220(0x0004) (Transient)
	unsigned long                                      bBuildingBrushCollision : 1;                              // 0x0220(0x0004) (Edit)
	unsigned long                                      bDebugDrawEdgeInfo : 1;                                   // 0x0220(0x0004) (Edit)
	unsigned long                                      bDebugDrawScopes : 1;                                     // 0x0220(0x0004) (Edit)
	TArray<class UStaticMeshComponent*>                LODMeshComps;                                             // 0x0224(0x000C) (Const, ExportObject, Component, NeedCtorLink, EditInline)
	TArray<struct FPBFaceUVInfo>                       LODMeshUVInfos;                                           // 0x0230(0x000C) (NeedCtorLink)
	TArray<struct FPBScope2D>                          TopLevelScopes;                                           // 0x023C(0x000C) (NeedCtorLink)
	int                                                NumMeshedTopLevelScopes;                                  // 0x0248(0x0004)
	TArray<struct FPBFaceUVInfo>                       TopLevelScopeUVInfos;                                     // 0x024C(0x000C) (NeedCtorLink)
	TArray<struct FPBScopeProcessInfo>                 TopLevelScopeInfos;                                       // 0x0258(0x000C) (NeedCtorLink)
	TArray<struct FPBEdgeInfo>                         EdgeInfos;                                                // 0x0264(0x000C) (NeedCtorLink)
	float                                              MaxFacadeZ;                                               // 0x0270(0x0004)
	float                                              MinFacadeZ;                                               // 0x0274(0x0004)
	TArray<class AProcBuilding*>                       OverlappingBuildings;                                     // 0x0278(0x000C) (Transient, NeedCtorLink)
	float                                              SimpleMeshMassiveLODDistance;                             // 0x0284(0x0004) (Edit)
	float                                              RenderToTexturePullBackAmount;                            // 0x0288(0x0004) (Edit)
	int                                                RoofLightmapRes;                                          // 0x028C(0x0004) (Edit)
	int                                                NonRectWallLightmapRes;                                   // 0x0290(0x0004) (Edit)
	float                                              LODRenderToTextureScale;                                  // 0x0294(0x0004) (Edit)
	struct FName                                       ParamSwatchName;                                          // 0x0298(0x0008) (Edit)
	TArray<struct FPBMaterialParam>                    BuildingMaterialParams;                                   // 0x02A0(0x000C) (Edit, NeedCtorLink)
	TArray<class UMaterialInstanceConstant*>           BuildingMatParamMICs;                                     // 0x02AC(0x000C) (NeedCtorLink)
	class AStaticMeshActor*                            LowLODPersistentActor;                                    // 0x02B8(0x0004) (Edit, Const, EditConst, DuplicateTransient)
	class UStaticMeshComponent*                        CurrentSimpleMeshComp;                                    // 0x02BC(0x0004) (ExportObject, Transient, Component, EditInline)
	class AActor*                                      CurrentSimpleMeshActor;                                   // 0x02C0(0x0004) (Transient)
	TArray<class AProcBuilding*>                       AttachedBuildings;                                        // 0x02C4(0x000C) (NeedCtorLink)
	int                                                BuildingInstanceVersion;                                  // 0x02D0(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProcBuilding");
		return ptr;
	}


	int FindEdgeForTopLevelScope(int TopLevelScopeIndex, TEnumAsByte<EScopeEdge> Edge);
	void BreakFractureComponent(class UFracturedStaticMeshComponent* Comp, const struct FVector& BoxMin, const struct FVector& BoxMax);
	void GetAllGroupedProcBuildings(TArray<class AProcBuilding*>* OutSet);
	class AProcBuilding* GetBaseMostBuilding();
	TArray<class UStaticMeshComponent*> FindComponentsForTopLevelScope(int TopLevelScopeIndex);
	void ClearBuildingMeshes();
};


// Class Engine.ProcBuilding_SimpleLODActor
// 0x0003 (0x01E0 - 0x01DD)
class AProcBuilding_SimpleLODActor : public AStaticMeshActor
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x01DD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProcBuilding_SimpleLODActor");
		return ptr;
	}

};


// Class Engine.PBRuleNodeBase
// 0x002C (0x0068 - 0x003C)
class UPBRuleNodeBase : public UObject
{
public:
	TArray<struct FPBRuleLink>                         NextRules;                                                // 0x003C(0x000C) (EditFixedSize, NeedCtorLink)
	struct FString                                     Comment;                                                  // 0x0048(0x000C) (Edit, NeedCtorLink)
	int                                                RulePosX;                                                 // 0x0054(0x0004)
	int                                                RulePosY;                                                 // 0x0058(0x0004)
	int                                                InDrawY;                                                  // 0x005C(0x0004)
	int                                                DrawWidth;                                                // 0x0060(0x0004)
	int                                                DrawHeight;                                               // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeBase");
		return ptr;
	}

};


// Class Engine.PBRuleNodeAlternate
// 0x0010 (0x0078 - 0x0068)
class UPBRuleNodeAlternate : public UPBRuleNodeBase
{
public:
	TEnumAsByte<EProcBuildingAxis>                     RepeatAxis;                                               // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              ASize;                                                    // 0x006C(0x0004) (Edit)
	float                                              BMaxSize;                                                 // 0x0070(0x0004) (Edit)
	unsigned long                                      bInvertPatternOrder : 1;                                  // 0x0074(0x0004) (Edit)
	unsigned long                                      bEqualSizeAB : 1;                                         // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeAlternate");
		return ptr;
	}

};


// Class Engine.PBRuleNodeComment
// 0x0018 (0x0080 - 0x0068)
class UPBRuleNodeComment : public UPBRuleNodeBase
{
public:
	int                                                SizeX;                                                    // 0x0068(0x0004) (Edit)
	int                                                SizeY;                                                    // 0x006C(0x0004) (Edit)
	int                                                BorderWidth;                                              // 0x0070(0x0004) (Edit)
	struct FColor                                      BorderColor;                                              // 0x0074(0x0004) (Edit)
	unsigned long                                      bFilled : 1;                                              // 0x0078(0x0004) (Edit)
	struct FColor                                      FillColor;                                                // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeComment");
		return ptr;
	}

};


// Class Engine.PBRuleNodeCorner
// 0x0028 (0x0090 - 0x0068)
class UPBRuleNodeCorner : public UPBRuleNodeBase
{
public:
	float                                              CornerSize;                                               // 0x0068(0x0004) (Edit)
	TArray<struct FRBCornerAngleInfo>                  Angles;                                                   // 0x006C(0x000C) (Edit, NeedCtorLink)
	float                                              FlatThreshold;                                            // 0x0078(0x0004) (Edit)
	unsigned long                                      bNoMeshForConcaveCorners : 1;                             // 0x007C(0x0004) (Edit)
	unsigned long                                      bUseAdjacentRulesetForRightGap : 1;                       // 0x007C(0x0004) (Edit)
	TEnumAsByte<EPBCornerType>                         CornerType;                                               // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	float                                              CornerShapeOffset;                                        // 0x0084(0x0004) (Edit)
	int                                                RoundTesselation;                                         // 0x0088(0x0004) (Edit)
	float                                              RoundCurvature;                                           // 0x008C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeCorner");
		return ptr;
	}

};


// Class Engine.PBRuleNodeCycle
// 0x0010 (0x0078 - 0x0068)
class UPBRuleNodeCycle : public UPBRuleNodeBase
{
public:
	TEnumAsByte<EProcBuildingAxis>                     RepeatAxis;                                               // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              RepeatSize;                                               // 0x006C(0x0004) (Edit)
	int                                                CycleSize;                                                // 0x0070(0x0004) (Edit)
	unsigned long                                      bFixRepeatSize : 1;                                       // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeCycle");
		return ptr;
	}

};


// Class Engine.PBRuleNodeEdgeAngle
// 0x0010 (0x0078 - 0x0068)
class UPBRuleNodeEdgeAngle : public UPBRuleNodeBase
{
public:
	TEnumAsByte<EProcBuildingEdge>                     Edge;                                                     // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	TArray<struct FRBEdgeAngleInfo>                    Angles;                                                   // 0x006C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeEdgeAngle");
		return ptr;
	}

};


// Class Engine.PBRuleNodeEdgeMesh
// 0x0008 (0x0070 - 0x0068)
class UPBRuleNodeEdgeMesh : public UPBRuleNodeBase
{
public:
	float                                              FlatThreshold;                                            // 0x0068(0x0004) (Edit)
	float                                              MainXPullIn;                                              // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeEdgeMesh");
		return ptr;
	}

};


// Class Engine.PBRuleNodeExtractTopBottom
// 0x0010 (0x0078 - 0x0068)
class UPBRuleNodeExtractTopBottom : public UPBRuleNodeBase
{
public:
	float                                              ExtractTopZ;                                              // 0x0068(0x0004) (Edit)
	float                                              ExtractNotTopZ;                                           // 0x006C(0x0004) (Edit)
	float                                              ExtractBottomZ;                                           // 0x0070(0x0004) (Edit)
	float                                              ExtractNotBottomZ;                                        // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeExtractTopBottom");
		return ptr;
	}

};


// Class Engine.PBRuleNodeLODQuad
// 0x0004 (0x006C - 0x0068)
class UPBRuleNodeLODQuad : public UPBRuleNodeBase
{
public:
	float                                              MassiveLODDistanceScale;                                  // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeLODQuad");
		return ptr;
	}

};


// Class Engine.PBRuleNodeMesh
// 0x0048 (0x00B0 - 0x0068)
class UPBRuleNodeMesh : public UPBRuleNodeBase
{
public:
	TArray<struct FBuildingMeshInfo>                   BuildingMeshes;                                           // 0x0068(0x000C) (Edit, Component, NeedCtorLink)
	struct FBuildingMeshInfo                           PartialOccludedBuildingMesh;                              // 0x0074(0x0038) (Edit, Component, NeedCtorLink)
	unsigned long                                      bDoOcclusionTest : 1;                                     // 0x00AC(0x0004) (Edit)
	unsigned long                                      bBlockAll : 1;                                            // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeMesh");
		return ptr;
	}


	int PickRandomBuildingMesh();
};


// Class Engine.PBRuleNodeOcclusion
// 0x0000 (0x0068 - 0x0068)
class UPBRuleNodeOcclusion : public UPBRuleNodeBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeOcclusion");
		return ptr;
	}

};


// Class Engine.PBRuleNodeQuad
// 0x0018 (0x0080 - 0x0068)
class UPBRuleNodeQuad : public UPBRuleNodeBase
{
public:
	class UMaterialInterface*                          Material;                                                 // 0x0068(0x0004) (Edit)
	float                                              RepeatMaxSizeX;                                           // 0x006C(0x0004) (Edit)
	float                                              RepeatMaxSizeZ;                                           // 0x0070(0x0004) (Edit)
	int                                                QuadLightmapRes;                                          // 0x0074(0x0004) (Edit)
	float                                              YOffset;                                                  // 0x0078(0x0004) (Edit)
	unsigned long                                      bDisableMaterialRepeat : 1;                               // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeQuad");
		return ptr;
	}

};


// Class Engine.PBRuleNodeRandom
// 0x000C (0x0074 - 0x0068)
class UPBRuleNodeRandom : public UPBRuleNodeBase
{
public:
	int                                                NumOutputs;                                               // 0x0068(0x0004) (Edit)
	int                                                MinNumExecuted;                                           // 0x006C(0x0004) (Edit)
	int                                                MaxNumExecuted;                                           // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeRandom");
		return ptr;
	}

};


// Class Engine.PBRuleNodeRepeat
// 0x0008 (0x0070 - 0x0068)
class UPBRuleNodeRepeat : public UPBRuleNodeBase
{
public:
	TEnumAsByte<EProcBuildingAxis>                     RepeatAxis;                                               // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              RepeatMaxSize;                                            // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeRepeat");
		return ptr;
	}

};


// Class Engine.PBRuleNodeSize
// 0x000C (0x0074 - 0x0068)
class UPBRuleNodeSize : public UPBRuleNodeBase
{
public:
	TEnumAsByte<EProcBuildingAxis>                     SizeAxis;                                                 // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	float                                              DecisionSize;                                             // 0x006C(0x0004) (Edit)
	unsigned long                                      bUseTopLevelScopeSize : 1;                                // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeSize");
		return ptr;
	}

};


// Class Engine.PBRuleNodeSplit
// 0x0010 (0x0078 - 0x0068)
class UPBRuleNodeSplit : public UPBRuleNodeBase
{
public:
	TEnumAsByte<EProcBuildingAxis>                     SplitAxis;                                                // 0x0068(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0069(0x0003) MISSED OFFSET
	TArray<struct FRBSplitInfo>                        SplitSetup;                                               // 0x006C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeSplit");
		return ptr;
	}

};


// Class Engine.PBRuleNodeSubRuleset
// 0x0004 (0x006C - 0x0068)
class UPBRuleNodeSubRuleset : public UPBRuleNodeBase
{
public:
	class UProcBuildingRuleset*                        SubRuleset;                                               // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeSubRuleset");
		return ptr;
	}

};


// Class Engine.PBRuleNodeTransform
// 0x000C (0x0074 - 0x0068)
class UPBRuleNodeTransform : public UPBRuleNodeBase
{
public:
	class UDistributionVector*                         Translation;                                              // 0x0068(0x0004) (Edit, ExportObject, Component, EditInline)
	class UDistributionVector*                         Rotation;                                                 // 0x006C(0x0004) (Edit, ExportObject, Component, EditInline)
	class UDistributionVector*                         Scale;                                                    // 0x0070(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeTransform");
		return ptr;
	}

};


// Class Engine.PBRuleNodeVariation
// 0x0004 (0x006C - 0x0068)
class UPBRuleNodeVariation : public UPBRuleNodeBase
{
public:
	unsigned long                                      bVariationOfScopeOnLeft : 1;                              // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeVariation");
		return ptr;
	}

};


// Class Engine.PBRuleNodeWindowWall
// 0x0024 (0x008C - 0x0068)
class UPBRuleNodeWindowWall : public UPBRuleNodeBase
{
public:
	float                                              CellMaxSizeX;                                             // 0x0068(0x0004) (Edit)
	float                                              CellMaxSizeZ;                                             // 0x006C(0x0004) (Edit)
	float                                              WindowSizeX;                                              // 0x0070(0x0004) (Edit)
	float                                              WindowSizeZ;                                              // 0x0074(0x0004) (Edit)
	float                                              WindowPosX;                                               // 0x0078(0x0004) (Edit)
	float                                              WindowPosZ;                                               // 0x007C(0x0004) (Edit)
	unsigned long                                      bScaleWindowWithCell : 1;                                 // 0x0080(0x0004) (Edit)
	float                                              YOffset;                                                  // 0x0084(0x0004) (Edit)
	class UMaterialInterface*                          Material;                                                 // 0x0088(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PBRuleNodeWindowWall");
		return ptr;
	}

};


// Class Engine.ProcBuildingRuleset
// 0x0060 (0x009C - 0x003C)
class UProcBuildingRuleset : public UObject
{
public:
	class UPBRuleNodeBase*                             RootRule;                                                 // 0x003C(0x0004) (ExportObject, NeedCtorLink, EditInline)
	unsigned long                                      bBeingEdited : 1;                                         // 0x0040(0x0004) (Transient)
	unsigned long                                      bEnableInteriorTexture : 1;                               // 0x0040(0x0004) (Edit)
	unsigned long                                      bLODOnlyRoof : 1;                                         // 0x0040(0x0004) (Edit)
	unsigned long                                      bPickRandomSwatch : 1;                                    // 0x0040(0x0004) (Edit)
	class UMaterialInterface*                          DefaultRoofMaterial;                                      // 0x0044(0x0004) (Edit)
	class UMaterialInterface*                          DefaultFloorMaterial;                                     // 0x0048(0x0004) (Edit)
	class UMaterialInterface*                          DefaultNonRectWallMaterial;                               // 0x004C(0x0004) (Edit)
	float                                              RoofZOffset;                                              // 0x0050(0x0004) (Edit)
	float                                              NotRoofZOffset;                                           // 0x0054(0x0004) (Edit)
	float                                              FloorZOffset;                                             // 0x0058(0x0004) (Edit)
	float                                              NotFloorZOffset;                                          // 0x005C(0x0004) (Edit)
	float                                              RoofPolyInset;                                            // 0x0060(0x0004) (Edit)
	float                                              FloorPolyInset;                                           // 0x0064(0x0004) (Edit)
	float                                              BuildingLODSpecular;                                      // 0x0068(0x0004) (Edit)
	float                                              RoofEdgeScopeRaise;                                       // 0x006C(0x0004) (Edit)
	class UTexture*                                    LODCubemap;                                               // 0x0070(0x0004) (Edit)
	class UTexture*                                    InteriorTexture;                                          // 0x0074(0x0004) (Edit)
	TArray<struct FPBVariationInfo>                    Variations;                                               // 0x0078(0x000C) (Edit, NeedCtorLink)
	TArray<struct FPBParamSwatch>                      ParamSwatches;                                            // 0x0084(0x000C) (Edit, NeedCtorLink)
	TArray<class UPBRuleNodeComment*>                  Comments;                                                 // 0x0090(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProcBuildingRuleset");
		return ptr;
	}

};


// Class Engine.ReplicationInfo
// 0x0000 (0x01D4 - 0x01D4)
class AReplicationInfo : public AInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReplicationInfo");
		return ptr;
	}

};


// Class Engine.GameReplicationInfo
// 0x0050 (0x0224 - 0x01D4)
class AGameReplicationInfo : public AReplicationInfo
{
public:
	class UClass*                                      GameClass;                                                // 0x01D4(0x0004) (Net)
	unsigned long                                      bStopCountDown : 1;                                       // 0x01D8(0x0004) (Net)
	unsigned long                                      bMatchHasBegun : 1;                                       // 0x01D8(0x0004) (Net)
	unsigned long                                      bMatchIsOver : 1;                                         // 0x01D8(0x0004) (Net)
	int                                                RemainingTime;                                            // 0x01DC(0x0004) (Net)
	int                                                ElapsedTime;                                              // 0x01E0(0x0004) (Net)
	int                                                RemainingMinute;                                          // 0x01E4(0x0004) (Net)
	int                                                GoalScore;                                                // 0x01E8(0x0004) (Net)
	int                                                TimeLimit;                                                // 0x01EC(0x0004) (Net)
	TArray<class ATeamInfo*>                           Teams;                                                    // 0x01F0(0x000C) (NeedCtorLink)
	struct FString                                     ServerName;                                               // 0x01FC(0x000C) (Edit, Net, Config, GlobalConfig, NeedCtorLink)
	class AActor*                                      Winner;                                                   // 0x0208(0x0004) (Net)
	TArray<class APlayerReplicationInfo*>              PRIArray;                                                 // 0x020C(0x000C) (NeedCtorLink)
	TArray<class APlayerReplicationInfo*>              InactivePRIArray;                                         // 0x0218(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameReplicationInfo");
		return ptr;
	}


	bool ShouldShowGore();
	bool IsCoopMultiplayerGame();
	bool IsMultiplayerGame();
	void EndGame();
	void StartMatch();
	void SetTeam(int Index, class ATeamInfo* TI);
	void RemovePRI(class APlayerReplicationInfo* PRI);
	void AddPRI(class APlayerReplicationInfo* PRI);
	bool OnSameTeam(class AActor* A, class AActor* B);
	void Timer();
	void Reset();
	void ReceivedGameClass();
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class Engine.PlayerReplicationInfo
// 0x00BC (0x0290 - 0x01D4)
class APlayerReplicationInfo : public AReplicationInfo
{
public:
	float                                              PercentMatchPlayed;                                       // 0x01D4(0x0004)
	float                                              Score;                                                    // 0x01D8(0x0004) (Net)
	int                                                Deaths;                                                   // 0x01DC(0x0004) (Net)
	unsigned char                                      Ping;                                                     // 0x01E0(0x0001) (Net)
	TEnumAsByte<ETTSSpeaker>                           TTSSpeaker;                                               // 0x01E1(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x01E2(0x0002) MISSED OFFSET
	int                                                NumLives;                                                 // 0x01E4(0x0004)
	struct FString                                     PlayerName;                                               // 0x01E8(0x000C) (Net, NeedCtorLink)
	struct FString                                     OldName;                                                  // 0x01F4(0x000C) (NeedCtorLink)
	int                                                PlayerID;                                                 // 0x0200(0x0004) (Net)
	class ATeamInfo*                                   Team;                                                     // 0x0204(0x0004) (Net, EditInline)
	unsigned long                                      bAdmin : 1;                                               // 0x0208(0x0004) (Net)
	unsigned long                                      bIsSpectator : 1;                                         // 0x0208(0x0004) (Net)
	unsigned long                                      bOnlySpectator : 1;                                       // 0x0208(0x0004) (Net)
	unsigned long                                      bWaitingPlayer : 1;                                       // 0x0208(0x0004) (Net)
	unsigned long                                      bReadyToPlay : 1;                                         // 0x0208(0x0004) (Net)
	unsigned long                                      bOutOfLives : 1;                                          // 0x0208(0x0004) (Net)
	unsigned long                                      bBot : 1;                                                 // 0x0208(0x0004) (Net)
	unsigned long                                      bHasBeenWelcomed : 1;                                     // 0x0208(0x0004)
	unsigned long                                      bIsInactive : 1;                                          // 0x0208(0x0004) (Net)
	unsigned long                                      bFromPreviousLevel : 1;                                   // 0x0208(0x0004) (Net)
	int                                                StartTime;                                                // 0x020C(0x0004) (Net)
	struct FString                                     StringSpectating;                                         // 0x0210(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     StringUnknown;                                            // 0x021C(0x000C) (Const, Localized, NeedCtorLink)
	int                                                Kills;                                                    // 0x0228(0x0004) (Net)
	class UClass*                                      GameMessageClass;                                         // 0x022C(0x0004)
	float                                              ExactPing;                                                // 0x0230(0x0004)
	struct FString                                     SavedNetworkAddress;                                      // 0x0234(0x000C) (NeedCtorLink)
	struct FUniqueNetId                                UniqueId;                                                 // 0x0240(0x0010) (Net)
	struct FName                                       SessionName;                                              // 0x0250(0x0008) (Const)
	struct FAutomatedTestingDatum                      AutomatedTestingData;                                     // 0x0258(0x0008)
	int                                                StatConnectionCounts;                                     // 0x0260(0x0004)
	int                                                StatPingTotals;                                           // 0x0264(0x0004)
	int                                                StatPingMin;                                              // 0x0268(0x0004)
	int                                                StatPingMax;                                              // 0x026C(0x0004)
	int                                                StatPKLTotal;                                             // 0x0270(0x0004)
	int                                                StatPKLMin;                                               // 0x0274(0x0004)
	int                                                StatPKLMax;                                               // 0x0278(0x0004)
	int                                                StatMaxInBPS;                                             // 0x027C(0x0004)
	int                                                StatAvgInBPS;                                             // 0x0280(0x0004)
	int                                                StatMaxOutBPS;                                            // 0x0284(0x0004)
	int                                                StatAvgOutBPS;                                            // 0x0288(0x0004)
	class UTexture2D*                                  Avatar;                                                   // 0x028C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerReplicationInfo");
		return ptr;
	}


	void InitOnlineStats();
	bool IsPrimaryPlayer();
	void UnregisterPlayerFromSession();
	void RegisterPlayerWithSession();
	bool IsInvalidName();
	unsigned char GetTeamNum();
	void SetUniqueId(const struct FUniqueNetId& PlayerUniqueId);
	void SeamlessTravelTo(class APlayerReplicationInfo* NewPRI);
	void IncrementDeaths(int Amt);
	void CopyProperties(class APlayerReplicationInfo* PRI);
	void OverrideWith(class APlayerReplicationInfo* PRI);
	class APlayerReplicationInfo* Duplicate();
	void SetWaitingPlayer(bool B);
	void SetPlayerName(const struct FString& S);
	void DisplayDebug(class AHUD* HUD, float* YL, float* YPos);
	struct FString GetHumanReadableName();
	void Reset();
	void Destroyed();
	bool ShouldBroadCastWelcomeMessage(bool bExiting);
	void UpdatePing(float TimeStamp);
	void ReplicatedEvent(const struct FName& VarName);
	void SetPlayerTeam(class ATeamInfo* NewTeam);
	void ClientInitialize(class AController* C);
	void PostBeginPlay();
};


// Class Engine.TeamInfo
// 0x001C (0x01F0 - 0x01D4)
class ATeamInfo : public AReplicationInfo
{
public:
	struct FString                                     TeamName;                                                 // 0x01D4(0x000C) (Net, NeedCtorLink)
	int                                                Size;                                                     // 0x01E0(0x0004)
	float                                              Score;                                                    // 0x01E4(0x0004) (Net)
	int                                                TeamIndex;                                                // 0x01E8(0x0004) (Net)
	struct FColor                                      TeamColor;                                                // 0x01EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TeamInfo");
		return ptr;
	}


	unsigned char GetTeamNum();
	struct FString GetHumanReadableName();
	void RemoveFromTeam(class AController* Other);
	bool AddToTeam(class AController* Other);
	void Destroyed();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class Engine.CameraActor
// 0x016C (0x0340 - 0x01D4)
class ACameraActor : public AActor
{
public:
	unsigned long                                      bConstrainAspectRatio : 1;                                // 0x01D4(0x0004) (Edit)
	unsigned long                                      bCamOverridePostProcess : 1;                              // 0x01D4(0x0004) (Deprecated)
	float                                              AspectRatio;                                              // 0x01D8(0x0004) (Edit, Net)
	float                                              FOVAngle;                                                 // 0x01DC(0x0004) (Edit, Net)
	float                                              FOVAngleRift;                                             // 0x01E0(0x0004) (Edit)
	float                                              CamOverridePostProcessAlpha;                              // 0x01E4(0x0004) (Edit)
	struct FPostProcessSettings                        CamOverridePostProcess;                                   // 0x01E8(0x0150) (Edit, NeedCtorLink)
	class UDrawFrustumComponent*                       DrawFrustum;                                              // 0x0338(0x0004) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        MeshComp;                                                 // 0x033C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraActor");
		return ptr;
	}


	void DisplayDebug(class AHUD* HUD, float* out_YL, float* out_YPos);
	void GetCameraView(float DeltaTime, struct FTPOV* OutPOV);
};


// Class Engine.DynamicCameraActor
// 0x0000 (0x0340 - 0x0340)
class ADynamicCameraActor : public ACameraActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicCameraActor");
		return ptr;
	}

};


// Class Engine.CameraAnim
// 0x0180 (0x01BC - 0x003C)
class UCameraAnim : public UObject
{
public:
	class UInterpGroupCamera*                          CameraInterpGroup;                                        // 0x003C(0x0004)
	class UInterpGroup*                                PreviewInterpGroup;                                       // 0x0040(0x0004) (Transient)
	float                                              AnimLength;                                               // 0x0044(0x0004) (Const)
	struct FBox                                        BoundingBox;                                              // 0x0048(0x001C) (Const)
	struct FPostProcessSettings                        BasePPSettings;                                           // 0x0064(0x0150) (Const, NeedCtorLink)
	float                                              BasePPSettingsAlpha;                                      // 0x01B4(0x0004) (Const)
	float                                              BaseFOV;                                                  // 0x01B8(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraAnim");
		return ptr;
	}

};


// Class Engine.CameraAnimInst
// 0x01E4 (0x0220 - 0x003C)
class UCameraAnimInst : public UObject
{
public:
	class UCameraAnim*                                 CamAnim;                                                  // 0x003C(0x0004)
	class UInterpGroupInst*                            InterpGroupInst;                                          // 0x0040(0x0004) (ExportObject, NeedCtorLink, EditInline)
	float                                              CurTime;                                                  // 0x0044(0x0004) (Transient)
	unsigned long                                      bLooping : 1;                                             // 0x0048(0x0004) (Transient)
	unsigned long                                      bFinished : 1;                                            // 0x0048(0x0004) (Transient)
	unsigned long                                      bAutoReleaseWhenFinished : 1;                             // 0x0048(0x0004) (Transient)
	unsigned long                                      bBlendingIn : 1;                                          // 0x0048(0x0004) (Transient)
	unsigned long                                      bBlendingOut : 1;                                         // 0x0048(0x0004) (Transient)
	float                                              BlendInTime;                                              // 0x004C(0x0004)
	float                                              BlendOutTime;                                             // 0x0050(0x0004)
	float                                              CurBlendInTime;                                           // 0x0054(0x0004) (Transient)
	float                                              CurBlendOutTime;                                          // 0x0058(0x0004) (Transient)
	float                                              PlayRate;                                                 // 0x005C(0x0004)
	float                                              BasePlayScale;                                            // 0x0060(0x0004)
	float                                              TransientScaleModifier;                                   // 0x0064(0x0004)
	float                                              CurrentBlendWeight;                                       // 0x0068(0x0004)
	float                                              RemainingTime;                                            // 0x006C(0x0004) (Transient)
	class UInterpTrackMove*                            MoveTrack;                                                // 0x0070(0x0004) (Transient)
	class UInterpTrackInstMove*                        MoveInst;                                                 // 0x0074(0x0004) (Transient)
	class UAnimNodeSequence*                           SourceAnimNode;                                           // 0x0078(0x0004) (Transient)
	TEnumAsByte<ECameraAnimPlaySpace>                  PlaySpace;                                                // 0x007C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	struct FMatrix                                     UserPlaySpaceMatrix;                                      // 0x0080(0x0040) (Transient)
	struct FPostProcessSettings                        LastPPSettings;                                           // 0x00C0(0x0150) (Transient, NeedCtorLink)
	float                                              LastPPSettingsAlpha;                                      // 0x0210(0x0004) (Transient)
	struct FVector                                     LastCameraLoc;                                            // 0x0214(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraAnimInst");
		return ptr;
	}


	void SetPlaySpace(TEnumAsByte<ECameraAnimPlaySpace> NewSpace, const struct FRotator& UserPlaySpace);
	void ApplyTransientScaling(float Scalar);
	void Stop(bool bImmediate);
	void AdvanceAnim(float DeltaTime, bool bJump);
	void Update(float NewRate, float NewScale, float NewBlendInTime, float NewBlendOutTime, float NewDuration);
	void Play(class UCameraAnim* Anim, class AActor* CamActor, float InRate, float InScale, float InBlendInTime, float InBlendOutTime, bool bInLoop, bool bRandomStartTime, float Duration);
};


// Class Engine.CameraModifier
// 0x001C (0x0058 - 0x003C)
class UCameraModifier : public UObject
{
public:
	unsigned long                                      bDisabled : 1;                                            // 0x003C(0x0004)
	unsigned long                                      bPendingDisable : 1;                                      // 0x003C(0x0004)
	unsigned long                                      bExclusive : 1;                                           // 0x003C(0x0004)
	unsigned long                                      bDebug : 1;                                               // 0x003C(0x0004) (Edit)
	class ACamera*                                     CameraOwner;                                              // 0x0040(0x0004)
	unsigned char                                      Priority;                                                 // 0x0044(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	float                                              AlphaInTime;                                              // 0x0048(0x0004)
	float                                              AlphaOutTime;                                             // 0x004C(0x0004)
	float                                              Alpha;                                                    // 0x0050(0x0004) (Transient)
	float                                              TargetAlpha;                                              // 0x0054(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraModifier");
		return ptr;
	}


	void UpdateAlpha(class ACamera* Camera, float DeltaTime);
	bool ProcessViewRotation(class AActor* ViewTarget, float DeltaTime, struct FRotator* out_ViewRotation, struct FRotator* out_DeltaRot);
	void ToggleModifier();
	void EnableModifier();
	void DisableModifier(bool bImmediate);
	bool RemoveCameraModifier(class ACamera* Camera);
	bool AddCameraModifier(class ACamera* Camera);
	bool IsDisabled();
	bool ModifyCamera(class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV);
	void Init();
};


// Class Engine.CameraShake
// 0x007C (0x00B8 - 0x003C)
class UCameraShake : public UObject
{
public:
	unsigned long                                      bSingleInstance : 1;                                      // 0x003C(0x0004) (Edit)
	unsigned long                                      bRandomAnimSegment : 1;                                   // 0x003C(0x0004) (Edit)
	float                                              OscillationDuration;                                      // 0x0040(0x0004) (Edit)
	float                                              OscillationBlendInTime;                                   // 0x0044(0x0004) (Edit)
	float                                              OscillationBlendOutTime;                                  // 0x0048(0x0004) (Edit)
	struct FROscillator                                RotOscillation;                                           // 0x004C(0x0024) (Edit)
	struct FVOscillator                                LocOscillation;                                           // 0x0070(0x0024) (Edit)
	struct FFOscillator                                FOVOscillation;                                           // 0x0094(0x000C) (Edit)
	class UCameraAnim*                                 Anim;                                                     // 0x00A0(0x0004) (Edit)
	float                                              AnimPlayRate;                                             // 0x00A4(0x0004) (Edit)
	float                                              AnimScale;                                                // 0x00A8(0x0004) (Edit)
	float                                              AnimBlendInTime;                                          // 0x00AC(0x0004) (Edit)
	float                                              AnimBlendOutTime;                                         // 0x00B0(0x0004) (Edit)
	float                                              RandomAnimSegmentDuration;                                // 0x00B4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraShake");
		return ptr;
	}


	float GetLocOscillationMagnitude();
	float GetRotOscillationMagnitude();
};


// Class Engine.CameraModifier_CameraShake
// 0x0010 (0x0068 - 0x0058)
class UCameraModifier_CameraShake : public UCameraModifier
{
public:
	TArray<struct FCameraShakeInstance>                ActiveShakes;                                             // 0x0058(0x000C) (NeedCtorLink)
	float                                              SplitScreenShakeScale;                                    // 0x0064(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraModifier_CameraShake");
		return ptr;
	}


	bool ModifyCamera(class ACamera* Camera, float DeltaTime, struct FTPOV* OutPOV);
	void UpdateCameraShake(float DeltaTime, struct FCameraShakeInstance* Shake, struct FTPOV* OutPOV);
	void RemoveAllCameraShakes();
	void RemoveCameraShake(class UCameraShake* Shake);
	void AddCameraShake(class UCameraShake* NewShake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	struct FCameraShakeInstance InitializeShake(class UCameraShake* NewShake, float Scale, TEnumAsByte<ECameraAnimPlaySpace> PlaySpace, const struct FRotator& UserPlaySpaceRot);
	void ReinitShake(int ActiveShakeIdx, float Scale);
	float STATIC_InitializeOffset(struct FFOscillator* Param);
};


// Class Engine.CloudStorageUpgradeHelper
// 0x0000 (0x003C - 0x003C)
class UCloudStorageUpgradeHelper : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CloudStorageUpgradeHelper");
		return ptr;
	}


	void GetCloudUpgradeKeys(TArray<struct FString>* CloudKeys);
	void HandleLocalKeyValue(struct FString* CloudKeyName, struct FPlatformInterfaceData* CloudValue, int* bShouldMoveToCloud, int* bShouldDeleteLocalKey);
	void HandleLocalDocument(struct FString* DocName, int* bShouldMoveToCloud, int* bShouldDeleteLocalFile);
};


// Class Engine.AnalyticEventsBase
// 0x0014 (0x0068 - 0x0054)
class UAnalyticEventsBase : public UPlatformInterfaceBase
{
public:
	unsigned long                                      bSessionInProgress : 1;                                   // 0x0054(0x0004) (Const)
	unsigned long                                      bAutoStartSession : 1;                                    // 0x0054(0x0004) (Config)
	int                                                SessionPauseThresholdSec;                                 // 0x0058(0x0004) (Config)
	struct FString                                     UserId;                                                   // 0x005C(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnalyticEventsBase");
		return ptr;
	}


	void SendCachedEvents();
	void LogCurrencyGivenEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount);
	void LogCurrencyPurchaseEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount, const struct FString& RealCurrencyType, float RealMoneyCost, const struct FString& PaymentProvider);
	void LogItemPurchaseEvent(const struct FString& ItemId, const struct FString& Currency, int PerItemCost, int ItemQuantity);
	void LogUserAttributeUpdateArray(TArray<struct FEventStringParam> AttributeArray);
	void LogUserAttributeUpdate(const struct FString& AttributeName, const struct FString& AttributeValue);
	void LogErrorMessage(const struct FString& ErrorName, const struct FString& ErrorMessage);
	void EndStringEventParamArray(const struct FString& EventName, TArray<struct FEventStringParam> ParamArray);
	void LogStringEventParamArray(const struct FString& EventName, TArray<struct FEventStringParam> ParamArray, bool bTimed);
	void EndStringEventParam(const struct FString& EventName, const struct FString& ParamName, const struct FString& ParamValue);
	void LogStringEventParam(const struct FString& EventName, const struct FString& ParamName, const struct FString& ParamValue, bool bTimed);
	void EndStringEvent(const struct FString& EventName);
	void LogStringEvent(const struct FString& EventName, bool bTimed);
	void EndSession();
	void StartSession();
	void SetUserId(const struct FString& NewUserId);
	void Init();
	bool IsSessionInProgress();
};


// Class Engine.MultiProviderAnalytics
// 0x0018 (0x0080 - 0x0068)
class UMultiProviderAnalytics : public UAnalyticEventsBase
{
public:
	TArray<struct FString>                             AnalyticsProviderClassNames;                              // 0x0068(0x000C) (Config, NeedCtorLink)
	TArray<class UAnalyticEventsBase*>                 AnalyticsProviders;                                       // 0x0074(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MultiProviderAnalytics");
		return ptr;
	}


	void SendCachedEvents();
	void LogCurrencyGivenEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount);
	void LogCurrencyPurchaseEvent(const struct FString& GameCurrencyType, int GameCurrencyAmount, const struct FString& RealCurrencyType, float RealMoneyCost, const struct FString& PaymentProvider);
	void LogItemPurchaseEvent(const struct FString& ItemId, const struct FString& Currency, int PerItemCost, int ItemQuantity);
	void LogUserAttributeUpdateArray(TArray<struct FEventStringParam> AttributeArray);
	void LogUserAttributeUpdate(const struct FString& AttributeName, const struct FString& AttributeValue);
	void LogErrorMessage(const struct FString& ErrorName, const struct FString& ErrorMessage);
	void EndStringEventParamArray(const struct FString& EventName, TArray<struct FEventStringParam> ParamArray);
	void LogStringEventParamArray(const struct FString& EventName, TArray<struct FEventStringParam> ParamArray, bool bTimed);
	void EndStringEventParam(const struct FString& EventName, const struct FString& ParamName, const struct FString& ParamValue);
	void LogStringEventParam(const struct FString& EventName, const struct FString& ParamName, const struct FString& ParamValue, bool bTimed);
	void EndStringEvent(const struct FString& EventName);
	void LogStringEvent(const struct FString& EventName, bool bTimed);
	void EndSession();
	void StartSession();
	void SetUserId(const struct FString& NewUserId);
	void Init();
};


// Class Engine.CloudStorageBase
// 0x0010 (0x0064 - 0x0054)
class UCloudStorageBase : public UPlatformInterfaceBase
{
public:
	TArray<struct FString>                             LocalCloudFiles;                                          // 0x0054(0x000C) (NeedCtorLink)
	unsigned long                                      bSuppressDelegateCalls : 1;                               // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CloudStorageBase");
		return ptr;
	}


	bool UpgradeLocalStorageToCloud(const TScriptInterface<class UCloudStorageUpgradeHelper>& UpgradeHelper, bool bForceSearchAgain);
	bool ResolveConflictWithVersionIndex(int Index);
	bool ResolveConflictWithNewestDocument();
	bool WaitForWritesToFinish(float MaxTimeSeconds);
	bool IsStillWritingFiles();
	bool SaveDocumentWithObject(int Index, class UObject* ObjectData, int SaveVersion);
	bool SaveDocumentWithBytes(int Index, TArray<unsigned char> ByteData);
	bool SaveDocumentWithString(int Index, const struct FString& StringData);
	bool WriteCloudDocument(int Index);
	class UObject* ParseDocumentAsObject(int Index, class UClass* ObjectClass, int ExpectedVersion, bool bIsForConflict);
	void ParseDocumentAsBytes(int Index, bool bIsForConflict, TArray<unsigned char>* ByteData);
	struct FString ParseDocumentAsString(int Index, bool bIsForConflict);
	bool ReadCloudDocument(int Index, bool bIsForConflict);
	void DeleteAllCloudDocuments();
	int CreateCloudDocument(const struct FString& Filename);
	struct FString GetCloudDocumentName(int Index);
	int GetNumCloudDocuments(bool bIsForConflict);
	bool QueryForCloudDocuments();
	bool WriteKeyValue(const struct FString& KeyName, struct FPlatformInterfaceData* Value);
	bool ReadKeyValueFromLocalStore(const struct FString& KeyName, TEnumAsByte<EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value);
	bool ReadKeyValue(const struct FString& KeyName, TEnumAsByte<EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value);
	bool IsUsingLocalStorage();
	void Init();
};


// Class Engine.FacebookIntegration
// 0x0048 (0x009C - 0x0054)
class UFacebookIntegration : public UPlatformInterfaceBase
{
public:
	struct FString                                     AppID;                                                    // 0x0054(0x000C) (Config, NeedCtorLink)
	TArray<struct FString>                             Permissions;                                              // 0x0060(0x000C) (Config, NeedCtorLink)
	struct FString                                     UserName;                                                 // 0x006C(0x000C) (NeedCtorLink)
	struct FString                                     UserId;                                                   // 0x0078(0x000C) (NeedCtorLink)
	struct FString                                     AccessToken;                                              // 0x0084(0x000C) (NeedCtorLink)
	TArray<struct FFacebookFriend>                     FriendsList;                                              // 0x0090(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FacebookIntegration");
		return ptr;
	}


	void Disconnect();
	void FacebookDialog(const struct FString& Action, TArray<struct FString> ParamKeysAndValues);
	void FacebookRequest(const struct FString& GraphRequest);
	bool IsAuthorized();
	bool Authorize();
	bool Init();
};


// Class Engine.InAppMessageBase
// 0x0000 (0x0054 - 0x0054)
class UInAppMessageBase : public UPlatformInterfaceBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InAppMessageBase");
		return ptr;
	}


	bool ShowInAppEmailUI(const struct FString& InitialSubject, const struct FString& InitialMessage);
	bool ShowInAppSMSUI(const struct FString& InitialMessage);
	void Init();
};


// Class Engine.InGameAdManager
// 0x0004 (0x0058 - 0x0054)
class UInGameAdManager : public UPlatformInterfaceBase
{
public:
	unsigned long                                      bShouldPauseWhileAdOpen : 1;                              // 0x0054(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InGameAdManager");
		return ptr;
	}


	void SetPauseWhileAdOpen(bool bShouldPause);
	void ForceCloseAd();
	void HideBanner();
	void ShowBanner(bool bShowBottomOfScreen);
	void Init();
};


// Class Engine.TwitterIntegrationBase
// 0x0000 (0x0054 - 0x0054)
class UTwitterIntegrationBase : public UPlatformInterfaceBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TwitterIntegrationBase");
		return ptr;
	}


	bool TwitterRequest(const struct FString& URL, TArray<struct FString> ParamKeysAndValues, TEnumAsByte<ETwitterRequestMethod> RequestMethod, int AccountIndex);
	struct FString GetAccountId(int AccountIndex);
	struct FString GetAccountName(int AccountIndex);
	int GetNumAccounts();
	bool AuthorizeAccounts();
	bool ShowTweetUI(const struct FString& InitialMessage, const struct FString& URL, const struct FString& Picture);
	bool CanShowTweetUI();
	void Init();
};


// Class Engine.PlatformInterfaceWebResponse
// 0x0068 (0x00A4 - 0x003C)
class UPlatformInterfaceWebResponse : public UObject
{
public:
	struct FString                                     OriginalURL;                                              // 0x003C(0x000C) (NeedCtorLink)
	int                                                ResponseCode;                                             // 0x0048(0x0004)
	int                                                Tag;                                                      // 0x004C(0x0004)
	struct FMap_Mirror                                 Headers;                                                  // 0x0050(0x003C) (Native)
	struct FString                                     StringResponse;                                           // 0x008C(0x000C) (NeedCtorLink)
	TArray<unsigned char>                              BinaryResponse;                                           // 0x0098(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlatformInterfaceWebResponse");
		return ptr;
	}


	struct FString GetHeaderValue(const struct FString& HeaderName);
	void GetHeader(int HeaderIndex, struct FString* Header, struct FString* Value);
	int GetNumHeaders();
};


// Class Engine.ApexAttractorActor
// 0x0004 (0x01D8 - 0x01D4)
class AApexAttractorActor : public AActor
{
public:
	class UApexAttractorComponent*                     AttractorComponent;                                       // 0x01D4(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexAttractorActor");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* inAction);
};


// Class Engine.ApexGridActor
// 0x0004 (0x01D8 - 0x01D4)
class AApexGridActor : public AActor
{
public:
	class UApexGridComponent*                          GridComponent;                                            // 0x01D4(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexGridActor");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* inAction);
};


// Class Engine.ApexJetActor
// 0x0004 (0x01D8 - 0x01D4)
class AApexJetActor : public AActor
{
public:
	class UApexJetComponent*                           JetComponent;                                             // 0x01D4(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexJetActor");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* inAction);
};


// Class Engine.ApexTurbulenceHeatSourceActor
// 0x0000 (0x01D4 - 0x01D4)
class AApexTurbulenceHeatSourceActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexTurbulenceHeatSourceActor");
		return ptr;
	}

};


// Class Engine.ApexFieldSamplerComponent
// 0x0028 (0x0200 - 0x01D8)
class UApexFieldSamplerComponent : public UPrimitiveComponent
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x01D8(0x0004) (Edit)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x01DC(0x0004) (Edit, Const)
	TEnumAsByte<ERBCollisionChannel>                   CollisionChannel;                                         // 0x01E0(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01E1(0x0003) MISSED OFFSET
	struct FPointer                                    GroupsMask;                                               // 0x01E4(0x0004) (Const, Native, Transient)
	struct FPointer                                    GroupsMask64;                                             // 0x01E8(0x0004) (Const, Native, Transient)
	class UPrimitiveComponent*                         DrawComponent;                                            // 0x01EC(0x0004) (ExportObject, Component, EditInline)
	struct FPointer                                    ApexAssetParams;                                          // 0x01F0(0x0004) (Native, DuplicateTransient)
	struct FPointer                                    ApexAsset;                                                // 0x01F4(0x0004) (Native, DuplicateTransient)
	struct FPointer                                    ApexActor;                                                // 0x01F8(0x0004) (Native, DuplicateTransient)
	int                                                PhysSceneIndex;                                           // 0x01FC(0x0004) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexFieldSamplerComponent");
		return ptr;
	}


	void SetEnabled(bool Enabled);
	void DoInitRBPhys();
};


// Class Engine.ApexAttractorComponent
// 0x0010 (0x0210 - 0x0200)
class UApexAttractorComponent : public UApexFieldSamplerComponent
{
public:
	float                                              BoundaryFadePercentage;                                   // 0x0200(0x0004) (Edit)
	float                                              Radius;                                                   // 0x0204(0x0004) (Edit)
	float                                              ConstFieldStrength;                                       // 0x0208(0x0004) (Edit)
	float                                              SqrFieldStrength;                                         // 0x020C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexAttractorComponent");
		return ptr;
	}

};


// Class Engine.ApexGridComponent
// 0x009C (0x029C - 0x0200)
class UApexGridComponent : public UApexFieldSamplerComponent
{
public:
	TEnumAsByte<EGridResolution>                       GridMinResolution;                                        // 0x0200(0x0001) (Edit)
	TEnumAsByte<EGridResolution>                       GridMaxResolution;                                        // 0x0201(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0202(0x0002) MISSED OFFSET
	struct FSGridIntRange                              GridXRange;                                               // 0x0204(0x0008) (Deprecated)
	struct FSGridIntRange                              GridYRange;                                               // 0x020C(0x0008) (Deprecated)
	struct FSGridIntRange                              GridZRange;                                               // 0x0214(0x0008) (Deprecated)
	struct FSGridFloatRange                            UpdatesPerFrameRange;                                     // 0x021C(0x0008) (Edit)
	float                                              GridSize;                                                 // 0x0224(0x0004) (Edit)
	struct FVector                                     GridSize3D;                                               // 0x0228(0x000C) (Edit)
	float                                              FluidVelocityMultiplier;                                  // 0x0234(0x0004) (Edit)
	float                                              FluidVelocityClamp;                                       // 0x0238(0x0004) (Edit)
	float                                              AngularVelocityMultiplier;                                // 0x023C(0x0004) (Edit)
	float                                              AngularVelocityClamp;                                     // 0x0240(0x0004) (Edit)
	float                                              LinearVelocityMultiplier;                                 // 0x0244(0x0004) (Edit)
	float                                              LinearVelocityClamp;                                      // 0x0248(0x0004) (Edit)
	float                                              BoundaryFadePercentage;                                   // 0x024C(0x0004) (Edit)
	float                                              BoundarySizePercentage;                                   // 0x0250(0x0004) (Edit)
	int                                                MaxCollidingObjects;                                      // 0x0254(0x0004) (Edit)
	int                                                MaxHeatSources;                                           // 0x0258(0x0004)
	struct FVector                                     ExternalVelocity;                                         // 0x025C(0x000C) (Edit)
	float                                              FieldVelocityMultiplier;                                  // 0x0268(0x0004) (Edit)
	float                                              FieldVelocityWeight;                                      // 0x026C(0x0004) (Edit)
	unsigned long                                      AutoVelocityEnabled : 1;                                  // 0x0270(0x0004) (Edit)
	float                                              AutoVelocityTeleportValue;                                // 0x0274(0x0004) (Edit)
	float                                              AutoVelocityImpulseClamp;                                 // 0x0278(0x0004) (Edit)
	float                                              AutoVelocitySmoothingTimeConstant;                        // 0x027C(0x0004) (Edit)
	float                                              DragCoeff;                                                // 0x0280(0x0004) (Edit)
	float                                              DragCoeffForRigidBody;                                    // 0x0284(0x0004) (Edit)
	float                                              FluidViscosity;                                           // 0x0288(0x0004) (Edit)
	float                                              NoiseStrength;                                            // 0x028C(0x0004) (Edit)
	float                                              NoiseSpacePeriod;                                         // 0x0290(0x0004) (Edit)
	float                                              NoiseTimePeriod;                                          // 0x0294(0x0004) (Edit)
	int                                                NoiseOctaves;                                             // 0x0298(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexGridComponent");
		return ptr;
	}

};


// Class Engine.ApexJetComponent
// 0x0050 (0x0250 - 0x0200)
class UApexJetComponent : public UApexFieldSamplerComponent
{
public:
	float                                              GridShapeRadius;                                          // 0x0200(0x0004) (Edit)
	float                                              GridShapeHeight;                                          // 0x0204(0x0004) (Edit)
	float                                              GridBoundaryFadePercentage;                               // 0x0208(0x0004) (Edit)
	float                                              FieldStrength;                                            // 0x020C(0x0004) (Edit)
	float                                              NoisePercentage;                                          // 0x0210(0x0004) (Edit)
	float                                              NoiseSpaceScale;                                          // 0x0214(0x0004) (Edit)
	float                                              NoiseTimeScale;                                           // 0x0218(0x0004) (Edit)
	int                                                NoiseOctaves;                                             // 0x021C(0x0004) (Edit)
	float                                              FieldDirectionDeviationAngle;                             // 0x0220(0x0004) (Edit)
	float                                              FieldDirectionOscillationPeriod;                          // 0x0224(0x0004) (Edit)
	float                                              FieldStrengthDeviationPercentage;                         // 0x0228(0x0004) (Edit)
	float                                              FieldStrengthOscillationPeriod;                           // 0x022C(0x0004) (Edit)
	float                                              FieldSize;                                                // 0x0230(0x0004) (Edit)
	float                                              FieldNearRatio;                                           // 0x0234(0x0004) (Edit)
	float                                              FieldFarRatio;                                            // 0x0238(0x0004) (Edit)
	float                                              FieldPivot;                                               // 0x023C(0x0004) (Edit)
	float                                              DirectionalStretch;                                       // 0x0240(0x0004) (Edit)
	float                                              AverageStartRatio;                                        // 0x0244(0x0004) (Edit)
	float                                              AverageEndRatio;                                          // 0x0248(0x0004) (Edit)
	float                                              BoundaryFadePercentage;                                   // 0x024C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexJetComponent");
		return ptr;
	}

};


// Class Engine.ApexTurbulenceHeatSourceComponent
// 0x0004 (0x01DC - 0x01D8)
class UApexTurbulenceHeatSourceComponent : public UPrimitiveComponent
{
public:
	class UApexShape*                                  Shape;                                                    // 0x01D8(0x0004) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexTurbulenceHeatSourceComponent");
		return ptr;
	}

};


// Class Engine.ActorFactoryApexAttractor
// 0x0019 (0x0081 - 0x0068)
class UActorFactoryApexAttractor : public UActorFactory
{
public:
	float                                              BoundaryFadePercentage;                                   // 0x0068(0x0004) (Edit)
	float                                              Radius;                                                   // 0x006C(0x0004) (Edit)
	float                                              ConstFieldStrength;                                       // 0x0070(0x0004) (Edit)
	float                                              SqrFieldStrength;                                         // 0x0074(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x0078(0x0004) (Edit)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x007C(0x0004) (Edit, Const)
	TEnumAsByte<ERBCollisionChannel>                   CollisionChannel;                                         // 0x0080(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryApexAttractor");
		return ptr;
	}

};


// Class Engine.ActorFactoryApexGrid
// 0x0078 (0x00E0 - 0x0068)
class UActorFactoryApexGrid : public UActorFactory
{
public:
	TEnumAsByte<EGridResolution>                       GridMinResolution;                                        // 0x0068(0x0001) (Edit)
	TEnumAsByte<EGridResolution>                       GridMaxResolution;                                        // 0x0069(0x0001) (Edit)
	TEnumAsByte<ERBCollisionChannel>                   CollisionChannel;                                         // 0x006A(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x1];                                       // 0x006B(0x0001) MISSED OFFSET
	float                                              GridSize;                                                 // 0x006C(0x0004) (Edit)
	struct FVector                                     GridSize3D;                                               // 0x0070(0x000C) (Edit)
	float                                              FluidVelocityMultiplier;                                  // 0x007C(0x0004) (Edit)
	float                                              FluidVelocityClamp;                                       // 0x0080(0x0004) (Edit)
	float                                              BoundaryFadePercentage;                                   // 0x0084(0x0004) (Edit)
	float                                              BoundarySizePercentage;                                   // 0x0088(0x0004) (Edit)
	struct FVector                                     ExternalVelocity;                                         // 0x008C(0x000C) (Edit)
	float                                              FieldVelocityMultiplier;                                  // 0x0098(0x0004) (Edit)
	float                                              FieldVelocityWeight;                                      // 0x009C(0x0004) (Edit)
	unsigned long                                      AutoVelocityEnabled : 1;                                  // 0x00A0(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x00A0(0x0004) (Edit)
	float                                              AutoVelocityTeleportValue;                                // 0x00A4(0x0004) (Edit)
	float                                              AutoVelocityImpulseClamp;                                 // 0x00A8(0x0004) (Edit)
	float                                              AutoVelocitySmoothingTimeConstant;                        // 0x00AC(0x0004) (Edit)
	float                                              DragCoeffForRigidBody;                                    // 0x00B0(0x0004) (Edit)
	float                                              FluidViscosity;                                           // 0x00B4(0x0004) (Edit)
	float                                              AngularVelocityMultiplier;                                // 0x00B8(0x0004) (Edit)
	float                                              AngularVelocityClamp;                                     // 0x00BC(0x0004) (Edit)
	float                                              LinearVelocityMultiplier;                                 // 0x00C0(0x0004) (Edit)
	float                                              LinearVelocityClamp;                                      // 0x00C4(0x0004) (Edit)
	int                                                MaxCollidingObjects;                                      // 0x00C8(0x0004) (Edit)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x00CC(0x0004) (Edit, Const)
	float                                              NoiseStrength;                                            // 0x00D0(0x0004) (Edit)
	float                                              NoiseSpacePeriod;                                         // 0x00D4(0x0004) (Edit)
	float                                              NoiseTimePeriod;                                          // 0x00D8(0x0004) (Edit)
	int                                                NoiseOctaves;                                             // 0x00DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryApexGrid");
		return ptr;
	}

};


// Class Engine.ActorFactoryApexJet
// 0x005C (0x00C4 - 0x0068)
class UActorFactoryApexJet : public UActorFactory
{
public:
	float                                              GridShapeRadius;                                          // 0x0068(0x0004) (Edit)
	float                                              GridShapeHeight;                                          // 0x006C(0x0004) (Edit)
	float                                              GridBoundaryFadePercentage;                               // 0x0070(0x0004) (Edit)
	float                                              FieldStrength;                                            // 0x0074(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x0078(0x0004) (Edit)
	struct FRBCollisionChannelContainer                CollideWithChannels;                                      // 0x007C(0x0004) (Edit, Const)
	TEnumAsByte<ERBCollisionChannel>                   CollisionChannel;                                         // 0x0080(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	float                                              NoisePercentage;                                          // 0x0084(0x0004) (Edit)
	float                                              NoiseSpaceScale;                                          // 0x0088(0x0004) (Edit)
	float                                              NoiseTimeScale;                                           // 0x008C(0x0004) (Edit)
	int                                                NoiseOctaves;                                             // 0x0090(0x0004) (Edit)
	float                                              FieldDirectionDeviationAngle;                             // 0x0094(0x0004) (Edit)
	float                                              FieldDirectionOscillationPeriod;                          // 0x0098(0x0004) (Edit)
	float                                              FieldStrengthDeviationPercentage;                         // 0x009C(0x0004) (Edit)
	float                                              FieldStrengthOscillationPeriod;                           // 0x00A0(0x0004) (Edit)
	float                                              FieldSize;                                                // 0x00A4(0x0004) (Edit)
	float                                              FieldNearRatio;                                           // 0x00A8(0x0004) (Edit)
	float                                              FieldFarRatio;                                            // 0x00AC(0x0004) (Edit)
	float                                              FieldPivot;                                               // 0x00B0(0x0004) (Edit)
	float                                              DirectionalStretch;                                       // 0x00B4(0x0004) (Edit)
	float                                              AverageStartRatio;                                        // 0x00B8(0x0004) (Edit)
	float                                              AverageEndRatio;                                          // 0x00BC(0x0004) (Edit)
	float                                              BoundaryFadePercentage;                                   // 0x00C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactoryApexJet");
		return ptr;
	}

};


// Class Engine.ApexShape
// 0x0000 (0x003C - 0x003C)
class UApexShape : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexShape");
		return ptr;
	}

};


// Class Engine.ApexShapeBox
// 0x0004 (0x0040 - 0x003C)
class UApexShapeBox : public UApexShape
{
public:
	class UDrawBoxComponent*                           Shape;                                                    // 0x003C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexShapeBox");
		return ptr;
	}

};


// Class Engine.ApexShapeCapsule
// 0x0004 (0x0040 - 0x003C)
class UApexShapeCapsule : public UApexShape
{
public:
	class UDrawCapsuleComponent*                       Shape;                                                    // 0x003C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexShapeCapsule");
		return ptr;
	}

};


// Class Engine.ApexShapeSphere
// 0x0004 (0x0040 - 0x003C)
class UApexShapeSphere : public UApexShape
{
public:
	class UDrawSphereComponent*                        Shape;                                                    // 0x003C(0x0004) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexShapeSphere");
		return ptr;
	}

};


// Class Engine.SeqEvent_HitWall
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_HitWall : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_HitWall");
		return ptr;
	}

};


// Class Engine.LocalMessage
// 0x0014 (0x0050 - 0x003C)
class ULocalMessage : public UObject
{
public:
	unsigned long                                      bIsSpecial : 1;                                           // 0x003C(0x0004)
	unsigned long                                      bIsUnique : 1;                                            // 0x003C(0x0004)
	unsigned long                                      bIsPartiallyUnique : 1;                                   // 0x003C(0x0004)
	unsigned long                                      bIsConsoleMessage : 1;                                    // 0x003C(0x0004)
	unsigned long                                      bBeep : 1;                                                // 0x003C(0x0004)
	unsigned long                                      bCountInstances : 1;                                      // 0x003C(0x0004)
	float                                              Lifetime;                                                 // 0x0040(0x0004)
	struct FColor                                      DrawColor;                                                // 0x0044(0x0004)
	float                                              PosY;                                                     // 0x0048(0x0004)
	int                                                FontSize;                                                 // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LocalMessage");
		return ptr;
	}


	bool STATIC_PartiallyDuplicates(int Switch1, int Switch2, class UObject* OptionalObject1, class UObject* OptionalObject2);
	bool STATIC_IsConsoleMessage(int Switch);
	float STATIC_GetLifeTime(int Switch);
	int STATIC_GetFontSize(int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer);
	float STATIC_GetPos(int Switch, class AHUD* myHUD);
	struct FColor STATIC_GetColor(int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	struct FColor STATIC_GetConsoleColor(class APlayerReplicationInfo* RelatedPRI_2);
	struct FString STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class Engine.SeqAct_Destroy
// 0x0010 (0x010C - 0x00FC)
class USeqAct_Destroy : public USequenceAction
{
public:
	unsigned long                                      bDestroyBasedActors : 1;                                  // 0x00FC(0x0004) (Edit)
	TArray<class UClass*>                              IgnoreBasedClasses;                                       // 0x0100(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Destroy");
		return ptr;
	}

};


// Class Engine.SeqAct_Teleport
// 0x0014 (0x0110 - 0x00FC)
class USeqAct_Teleport : public USequenceAction
{
public:
	unsigned long                                      bUpdateRotation : 1;                                      // 0x00FC(0x0004) (Edit)
	unsigned long                                      bCheckOverlap : 1;                                        // 0x00FC(0x0004) (Edit)
	float                                              TeleportDistance;                                         // 0x0100(0x0004) (Edit)
	TArray<class AVolume*>                             TeleportVolumes;                                          // 0x0104(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_Teleport");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	bool STATIC_ShouldTeleport(class AActor* TestActor, const struct FVector& TeleportLocation, float TeleportDist, TArray<class AVolume*> Volumes);
};


// Class Engine.SeqAct_SetVelocity
// 0x0014 (0x0110 - 0x00FC)
class USeqAct_SetVelocity : public USequenceAction
{
public:
	struct FVector                                     VelocityDir;                                              // 0x00FC(0x000C) (Edit)
	float                                              VelocityMag;                                              // 0x0108(0x0004) (Edit)
	unsigned long                                      bVelocityRelativeToActorRotation : 1;                     // 0x010C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetVelocity");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_ToggleHidden
// 0x0010 (0x010C - 0x00FC)
class USeqAct_ToggleHidden : public USeqAct_Toggle
{
public:
	unsigned long                                      bToggleBasedActors : 1;                                   // 0x00FC(0x0004) (Edit)
	TArray<class UClass*>                              IgnoreBasedClasses;                                       // 0x0100(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleHidden");
		return ptr;
	}

};


// Class Engine.SeqAct_AttachToActor
// 0x0024 (0x0120 - 0x00FC)
class USeqAct_AttachToActor : public USequenceAction
{
public:
	unsigned long                                      bDetach : 1;                                              // 0x00FC(0x0004) (Edit)
	unsigned long                                      bHardAttach : 1;                                          // 0x00FC(0x0004) (Edit)
	unsigned long                                      bUseRelativeOffset : 1;                                   // 0x00FC(0x0004) (Edit)
	unsigned long                                      bUseRelativeRotation : 1;                                 // 0x00FC(0x0004) (Edit)
	struct FName                                       BoneName;                                                 // 0x0100(0x0008) (Edit)
	struct FVector                                     RelativeOffset;                                           // 0x0108(0x000C) (Edit)
	struct FRotator                                    RelativeRotation;                                         // 0x0114(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AttachToActor");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqEvent_MobileTouch
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_MobileTouch : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_MobileTouch");
		return ptr;
	}

};


// Class Engine.OnlinePlayerInterface
// 0x0000 (0x003C - 0x003C)
class UOnlinePlayerInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePlayerInterface");
		return ptr;
	}


	TEnumAsByte<EOnlineEnumerationReadState> GetAchievements(unsigned char LocalUserNum, int TitleId, TArray<struct FAchievementDetails>* Achievements);
	void ClearReadAchievementsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadAchievementsCompleteDelegate);
	void AddReadAchievementsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadAchievementsCompleteDelegate);
	void OnReadAchievementsComplete(int TitleId);
	bool ReadAchievements(unsigned char LocalUserNum, int TitleId, bool bShouldReadText, bool bShouldReadImages);
	void ClearUnlockAchievementCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate);
	void AddUnlockAchievementCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& UnlockAchievementCompleteDelegate);
	void OnUnlockAchievementComplete(bool bWasSuccessful);
	bool UnlockAchievement(unsigned char LocalUserNum, int AchievementId, float PercentComplete);
	bool DeleteMessage(unsigned char LocalUserNum, int MessageIndex);
	void ClearFriendMessageReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& MessageDelegate);
	void AddFriendMessageReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& MessageDelegate);
	void OnFriendMessageReceived(unsigned char LocalUserNum, const struct FUniqueNetId& SendingPlayer, const struct FString& SendingNick, const struct FString& Message);
	void GetFriendMessages(unsigned char LocalUserNum, TArray<struct FOnlineFriendMessage>* FriendMessages);
	void ClearJoinFriendGameCompleteDelegate(const struct FScriptDelegate& JoinFriendGameCompleteDelegate);
	void AddJoinFriendGameCompleteDelegate(const struct FScriptDelegate& JoinFriendGameCompleteDelegate);
	void OnJoinFriendGameComplete(bool bWasSuccessful);
	bool JoinFriendGame(unsigned char LocalUserNum, const struct FUniqueNetId& Friend);
	void ClearReceivedGameInviteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReceivedGameInviteDelegate);
	void AddReceivedGameInviteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReceivedGameInviteDelegate);
	void OnReceivedGameInvite(unsigned char LocalUserNum, const struct FString& InviterName);
	bool SendGameInviteToFriends(unsigned char LocalUserNum, TArray<struct FUniqueNetId> Friends, const struct FString& Text);
	bool SendGameInviteToFriend(unsigned char LocalUserNum, const struct FUniqueNetId& Friend, const struct FString& Text);
	bool SendMessageToFriend(unsigned char LocalUserNum, const struct FUniqueNetId& Friend, const struct FString& Message);
	void ClearFriendInviteReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& InviteDelegate);
	void AddFriendInviteReceivedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& InviteDelegate);
	void OnFriendInviteReceived(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer, const struct FString& RequestingNick, const struct FString& Message);
	bool RemoveFriend(unsigned char LocalUserNum, const struct FUniqueNetId& FormerFriend);
	bool DenyFriendInvite(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer);
	bool AcceptFriendInvite(unsigned char LocalUserNum, const struct FUniqueNetId& RequestingPlayer);
	void ClearAddFriendByNameCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendDelegate);
	void AddAddFriendByNameCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendDelegate);
	void OnAddFriendByNameComplete(bool bWasSuccessful);
	bool AddFriendByName(unsigned char LocalUserNum, const struct FString& FriendName, const struct FString& Message);
	bool AddFriend(unsigned char LocalUserNum, const struct FUniqueNetId& NewFriend, const struct FString& Message);
	struct FString GetKeyboardInputResults(unsigned char* bWasCanceled);
	void ClearKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate);
	void AddKeyboardInputDoneDelegate(const struct FScriptDelegate& InputDelegate);
	void OnKeyboardInputComplete(bool bWasSuccessful);
	bool ShowKeyboardUI(unsigned char LocalUserNum, const struct FString& TitleText, const struct FString& DescriptionText, bool bIsPassword, bool bShouldValidate, const struct FString& DefaultText, int MaxResultLength);
	void SetOnlineStatus(unsigned char LocalUserNum, int StatusId, TArray<struct FLocalizedStringSetting>* LocalizedStringSettings, TArray<struct FSettingsProperty>* Properties);
	TEnumAsByte<EOnlineEnumerationReadState> GetFriendsList(unsigned char LocalUserNum, int Count, int StartingAt, TArray<struct FOnlineFriend>* Friends);
	void ClearReadFriendsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate);
	void AddReadFriendsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadFriendsCompleteDelegate);
	void OnReadFriendsComplete(bool bWasSuccessful);
	bool ReadFriendsList(unsigned char LocalUserNum, int Count, int StartingAt);
	void ClearWritePlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WritePlayerStorageCompleteDelegate);
	void AddWritePlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WritePlayerStorageCompleteDelegate);
	void OnWritePlayerStorageComplete(unsigned char LocalUserNum, bool bWasSuccessful);
	bool WritePlayerStorage(unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int DeviceID);
	class UOnlinePlayerStorage* GetPlayerStorage(unsigned char LocalUserNum);
	void ClearReadPlayerStorageForNetIdCompleteDelegate(const struct FUniqueNetId& NetId, const struct FScriptDelegate& ReadPlayerStorageForNetIdCompleteDelegate);
	void AddReadPlayerStorageForNetIdCompleteDelegate(const struct FUniqueNetId& NetId, const struct FScriptDelegate& ReadPlayerStorageForNetIdCompleteDelegate);
	void OnReadPlayerStorageForNetIdComplete(const struct FUniqueNetId& NetId, bool bWasSuccessful);
	bool ReadPlayerStorageForNetId(unsigned char LocalUserNum, const struct FUniqueNetId& NetId, class UOnlinePlayerStorage* PlayerStorage);
	void ClearReadPlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadPlayerStorageCompleteDelegate);
	void AddReadPlayerStorageCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadPlayerStorageCompleteDelegate);
	void OnReadPlayerStorageComplete(unsigned char LocalUserNum, bool bWasSuccessful);
	bool ReadPlayerStorage(unsigned char LocalUserNum, class UOnlinePlayerStorage* PlayerStorage, int DeviceID);
	void ClearWriteProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate);
	void AddWriteProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& WriteProfileSettingsCompleteDelegate);
	void OnWriteProfileSettingsComplete(unsigned char LocalUserNum, bool bWasSuccessful);
	bool WriteProfileSettings(unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings);
	class UOnlineProfileSettings* GetProfileSettings(unsigned char LocalUserNum);
	void ClearReadProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate);
	void AddReadProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate);
	void OnReadProfileSettingsComplete(unsigned char LocalUserNum, bool bWasSuccessful);
	bool ReadProfileSettings(unsigned char LocalUserNum, class UOnlineProfileSettings* ProfileSettings);
	void ClearFriendsChangeDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendsDelegate);
	void AddFriendsChangeDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& FriendsDelegate);
	void ClearMutingChangeDelegate(const struct FScriptDelegate& MutingDelegate);
	void AddMutingChangeDelegate(const struct FScriptDelegate& MutingDelegate);
	void ClearLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate);
	void AddLoginCancelledDelegate(const struct FScriptDelegate& CancelledDelegate);
	void ClearLoginStatusChangeDelegate(const struct FScriptDelegate& LoginStatusDelegate, unsigned char LocalUserNum);
	void AddLoginStatusChangeDelegate(const struct FScriptDelegate& LoginStatusDelegate, unsigned char LocalUserNum);
	void OnLoginStatusChange(TEnumAsByte<ELoginStatus> NewStatus, const struct FUniqueNetId& NewId);
	void ClearLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate);
	void AddLoginChangeDelegate(const struct FScriptDelegate& LoginDelegate);
	bool ShowFriendsUI(unsigned char LocalUserNum);
	bool IsMuted(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID);
	bool AreAnyFriends(unsigned char LocalUserNum, TArray<struct FFriendsQuery>* Query);
	bool IsFriend(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID);
	TEnumAsByte<EFeaturePrivilegeLevel> CanShowPresenceInformation(unsigned char LocalUserNum);
	TEnumAsByte<EFeaturePrivilegeLevel> CanViewPlayerProfiles(unsigned char LocalUserNum);
	TEnumAsByte<EFeaturePrivilegeLevel> CanPurchaseContent(unsigned char LocalUserNum);
	TEnumAsByte<EFeaturePrivilegeLevel> CanDownloadUserContent(unsigned char LocalUserNum);
	TEnumAsByte<EFeaturePrivilegeLevel> CanCommunicate(unsigned char LocalUserNum);
	TEnumAsByte<EFeaturePrivilegeLevel> CanPlayOnline(unsigned char LocalUserNum);
	bool IsLocalLogin(unsigned char LocalUserNum);
	bool IsGuestLogin(unsigned char LocalUserNum);
	struct FString GetPlayerNickname(unsigned char LocalUserNum);
	bool GetUniquePlayerId(unsigned char LocalUserNum, struct FUniqueNetId* PlayerID);
	TEnumAsByte<ELoginStatus> GetLoginStatus(unsigned char LocalUserNum);
	void ClearLogoutCompletedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LogoutDelegate);
	void AddLogoutCompletedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LogoutDelegate);
	void OnLogoutCompleted(bool bWasSuccessful);
	bool Logout(unsigned char LocalUserNum);
	void ClearLoginFailedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LoginDelegate);
	void AddLoginFailedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& LoginDelegate);
	void OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode);
	bool AutoLogin();
	bool Login(unsigned char LocalUserNum, const struct FString& LoginName, const struct FString& Password, bool bWantsLocalOnly);
	bool ShowLoginUI(bool bShowOnlineOnly);
	void OnFriendsChange();
	void OnMutingChange();
	void OnLoginCancelled();
	void OnLoginChange(unsigned char LocalUserNum);
};


// Class Engine.OnlineClanInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineClanInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineClanInterface");
		return ptr;
	}


	void ClearMessageHistory();
	void GetMessageHistory(TArray<class UOnlineClanMessage*>* Messages);
	void ClearReceiveClanMessageDelegate(const struct FScriptDelegate& Delegate);
	void AddReceiveClanMessageDelegate(const struct FScriptDelegate& Delegate);
	void OnReceiveClanMessage(class UOnlineClanMessage* Message);
	bool SendClanMessage(class UOnlineClanMessage* Message);
	void ClearClanInviteAcceptedDelegate(const struct FScriptDelegate& Delegate);
	void AddClanInviteAcceptedDelegate(const struct FScriptDelegate& Delegate);
	void OnClanInviteAccepted(class UOnlineClanInfo* ClanInfo);
	bool AcceptClanInvitation(struct FUniqueNetId* ClanId);
	void ClearClanInviteReceivedDelegate(const struct FScriptDelegate& Delegate);
	void AddClanInviteReceivedDelegate(const struct FScriptDelegate& Delegate);
	void OnClanInviteReceived(class UOnlineClanMessage* Invite);
	bool RemovePlayerFromClan(struct FUniqueNetId* PlayerID);
	bool SendClanInvite(const struct FString& Message, struct FUniqueNetId* PlayerID);
	void ClearFindClanCompleteDelegate(const struct FScriptDelegate& Delegate);
	void AddFindClanCompleteDelegate(const struct FScriptDelegate& Delegate);
	void OnFindClanComplete(int RequestID, bool bWasSuccessful, class UOnlineClanInfo* ClanInfo);
	int FindPlayerClan(struct FUniqueNetId* PlayerID);
	int FindClanByTag(const struct FName& ClanTag);
	int FindClanByName(const struct FName& ClanName);
	int FindClanById(struct FUniqueNetId* ClanId);
	void ClearChangeClanLeaderCompleteDelegate(const struct FScriptDelegate& Delegate);
	void AddChangeClanLeaderCompleteDelegate(const struct FScriptDelegate& Delegate);
	void OnChangeClanLeaderComplete(bool bWasSuccessful);
	bool ChangeClanLeader(struct FUniqueNetId* PlayerID);
	bool GetClanMember(struct FUniqueNetId* PlayerID, struct FOnlineFriend* Friend);
	bool IsClanMember(struct FUniqueNetId* PlayerID);
	void ClearMembersChangedDelegate(const struct FScriptDelegate& Delegate);
	void AddMembersChangedDelegate(const struct FScriptDelegate& Delegate);
	void OnMembersChanged(TArray<struct FOnlineFriend> Members);
	void GetClanMembers(TArray<struct FOnlineFriend>* Members);
	void ClearReadClanMembersCompleteDelegate(const struct FScriptDelegate& Delegate);
	void AddReadClanMembersCompleteDelegate(const struct FScriptDelegate& Delegate);
	void OnReadClanMembersComplete(bool bWasSuccessful);
	bool ReadClanMembers();
	void ClearClanInfoChangedDelegate(const struct FScriptDelegate& Delegate);
	void AddClanInfoChangedDelegate(const struct FScriptDelegate& Delegate);
	void OnClanInfoChanged(class UOnlineClanInfo* ClanInfo);
	void ClearChangeClanInfoCompleteDelegate(const struct FScriptDelegate& Delegate);
	void AddChangeClanInfoCompleteDelegate(const struct FScriptDelegate& Delegate);
	void OnChangeClanInfoComplete(bool bWasSuccessful);
	bool ChangeClanInfo(class UOnlineClanInfo* ClanInfo);
	void ClearDestroyClanCompleteDelegate(const struct FScriptDelegate& Delegate);
	void AddDestroyClanCompleteDelegate(const struct FScriptDelegate& Delegate);
	void OnDestroyClanComplete(bool bWasSuccessful);
	bool DestroyClan();
	void ClearCreateClanCompleteDelegate(const struct FScriptDelegate& Delegate);
	void AddCreateClanCompleteDelegate(const struct FScriptDelegate& Delegate);
	void OnCreateClanComplete(bool bWasSuccessful);
	bool CreateClan(class UOnlineClanInfo* ClanInfo);
	class UOnlineClanInfo* GetClanInfo();
};


// Class Engine.SharedCloudFileInterface
// 0x0000 (0x003C - 0x003C)
class USharedCloudFileInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SharedCloudFileInterface");
		return ptr;
	}


	void ClearWriteSharedFileCompleteDelegate(const struct FScriptDelegate& WriteSharedFileCompleteDelegate);
	void AddWriteSharedFileCompleteDelegate(const struct FScriptDelegate& WriteSharedFileCompleteDelegate);
	bool WriteSharedFile(const struct FString& UserId, const struct FString& Filename, TArray<unsigned char>* Contents);
	void OnWriteSharedFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename, const struct FString& SharedHandle);
	void ClearReadSharedFileCompleteDelegate(const struct FScriptDelegate& ReadSharedFileCompleteDelegate);
	void AddReadSharedFileCompleteDelegate(const struct FScriptDelegate& ReadSharedFileCompleteDelegate);
	bool ReadSharedFile(const struct FString& SharedHandle);
	void OnReadSharedFileComplete(bool bWasSuccessful, const struct FString& SharedHandle);
	bool ClearSharedFile(const struct FString& SharedHandle);
	bool ClearSharedFiles();
	bool GetSharedFileContents(const struct FString& SharedHandle, TArray<unsigned char>* FileContents);
};


// Class Engine.UserCloudFileInterface
// 0x0000 (0x003C - 0x003C)
class UUserCloudFileInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UserCloudFileInterface");
		return ptr;
	}


	void ClearAllDelegates();
	void ClearDeleteUserFileCompleteDelegate(const struct FScriptDelegate& DeleteUserFileCompleteDelegate);
	void AddDeleteUserFileCompleteDelegate(const struct FScriptDelegate& DeleteUserFileCompleteDelegate);
	bool DeleteUserFile(const struct FString& UserId, const struct FString& Filename, bool bShouldCloudDelete, bool bShouldLocallyDelete);
	void OnDeleteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename);
	void ClearWriteUserFileCompleteDelegate(const struct FScriptDelegate& WriteUserFileCompleteDelegate);
	void AddWriteUserFileCompleteDelegate(const struct FScriptDelegate& WriteUserFileCompleteDelegate);
	bool WriteUserFile(const struct FString& UserId, const struct FString& Filename, TArray<unsigned char>* FileContents);
	void OnWriteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename);
	void ClearReadUserFileCompleteDelegate(const struct FScriptDelegate& ReadUserFileCompleteDelegate);
	void AddReadUserFileCompleteDelegate(const struct FScriptDelegate& ReadUserFileCompleteDelegate);
	bool ReadUserFile(const struct FString& UserId, const struct FString& Filename);
	void OnReadUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename);
	void GetUserFileList(const struct FString& UserId, TArray<struct FEmsFile>* UserFiles);
	void ClearEnumerateUserFileCompleteDelegate(const struct FScriptDelegate& EnumerateUserFileCompleteDelegate);
	void AddEnumerateUserFileCompleteDelegate(const struct FScriptDelegate& EnumerateUserFileCompleteDelegate);
	void EnumerateUserFiles(const struct FString& UserId);
	void OnEnumerateUserFilesComplete(bool bWasSuccessful, const struct FString& UserId);
	bool ClearFile(const struct FString& UserId, const struct FString& Filename);
	bool ClearFiles(const struct FString& UserId);
	bool GetFileContents(const struct FString& UserId, const struct FString& Filename, TArray<unsigned char>* FileContents);
};


// Class Engine.OnlineSocialInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineSocialInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineSocialInterface");
		return ptr;
	}


	void ClearPostLinkCompleted(unsigned char LocalUserNum, const struct FScriptDelegate& PostLinkDelegate);
	void AddPostLinkCompleted(unsigned char LocalUserNum, const struct FScriptDelegate& PostLinkDelegate);
	void OnPostLinkCompleted(unsigned char LocalUserNum, bool bWasSuccessful);
	bool PostLink(unsigned char LocalUserNum, struct FSocialPostLinkInfo* PostLinkInfo);
	void ClearPostImageCompleted(unsigned char LocalUserNum, const struct FScriptDelegate& PostImageDelegate);
	void AddPostImageCompleted(unsigned char LocalUserNum, const struct FScriptDelegate& PostImageDelegate);
	void OnPostImageCompleted(unsigned char LocalUserNum, bool bWasSuccessful);
	bool PostImage(unsigned char LocalUserNum, TArray<unsigned char> FullImage, struct FSocialPostImageInfo* PostImageInfo);
	void ClearQuerySocialPostPrivilegesCompleted(const struct FScriptDelegate& PostPrivilegesDelegate);
	void AddQuerySocialPostPrivilegesCompleted(const struct FScriptDelegate& PostPrivilegesDelegate);
	void OnQuerySocialPostPrivilegesCompleted(bool bWasSuccessful, const struct FSocialPostPrivileges& PostPrivileges);
	bool QuerySocialPostPrivileges();
};


// Class Engine.OnlineTitleFileCacheInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineTitleFileCacheInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineTitleFileCacheInterface");
		return ptr;
	}


	bool DeleteTitleFile(const struct FString& Filename);
	bool DeleteTitleFiles(float MaxAgeSeconds);
	bool ClearCachedFile(const struct FString& Filename);
	bool ClearCachedFiles();
	struct FString GetTitleFileLogicalName(const struct FString& Filename);
	struct FString GetTitleFileHash(const struct FString& Filename);
	TEnumAsByte<EOnlineEnumerationReadState> GetTitleFileState(const struct FString& Filename);
	bool GetTitleFileContents(const struct FString& Filename, TArray<unsigned char>* FileContents);
	void ClearSaveTitleFileCompleteDelegate(const struct FScriptDelegate& SaveCompleteDelegate);
	void AddSaveTitleFileCompleteDelegate(const struct FScriptDelegate& SaveCompleteDelegate);
	void OnSaveTitleFileComplete(bool bWasSuccessful, const struct FString& Filename);
	bool SaveTitleFile(const struct FString& Filename, const struct FString& LogicalName, TArray<unsigned char> FileContents);
	void ClearLoadTitleFileCompleteDelegate(const struct FScriptDelegate& LoadCompleteDelegate);
	void AddLoadTitleFileCompleteDelegate(const struct FScriptDelegate& LoadCompleteDelegate);
	void OnLoadTitleFileComplete(bool bWasSuccessful, const struct FString& Filename);
	bool LoadTitleFile(const struct FString& Filename);
};


// Class Engine.OnlineTitleFileInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineTitleFileInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineTitleFileInterface");
		return ptr;
	}


	void ClearRequestTitleFileListCompleteDelegate(const struct FScriptDelegate& RequestTitleFileListDelegate);
	void AddRequestTitleFileListCompleteDelegate(const struct FScriptDelegate& RequestTitleFileListDelegate);
	void OnRequestTitleFileListComplete(bool bWasSuccessful, const struct FString& ResultStr);
	void RequestTitleFileList();
	bool ClearDownloadedFile(const struct FString& Filename);
	bool ClearDownloadedFiles();
	TEnumAsByte<EOnlineEnumerationReadState> GetTitleFileState(const struct FString& Filename);
	bool GetTitleFileContents(const struct FString& Filename, TArray<unsigned char>* FileContents);
	void ClearReadTitleFileCompleteDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate);
	void AddReadTitleFileCompleteDelegate(const struct FScriptDelegate& ReadTitleFileCompleteDelegate);
	bool ReadTitleFile(const struct FString& FileToRead);
	void OnReadTitleFileComplete(bool bWasSuccessful, const struct FString& Filename);
};


// Class Engine.OnlinePartyChatInterface
// 0x0000 (0x003C - 0x003C)
class UOnlinePartyChatInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePartyChatInterface");
		return ptr;
	}


	bool IsInPartyChat(unsigned char LocalUserNum);
	bool ShowCommunitySessionsUI(unsigned char LocalUserNum);
	bool ShowVoiceChannelUI(unsigned char LocalUserNum);
	bool ShowPartyUI(unsigned char LocalUserNum);
	int GetPartyBandwidth();
	bool SetPartyMemberCustomData(unsigned char LocalUserNum, int Data1, int Data2, int Data3, int Data4);
	void ClearPartyMembersInfoChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMembersInfoChangedDelegate);
	void AddPartyMembersInfoChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMembersInfoChangedDelegate);
	void OnPartyMembersInfoChanged(const struct FString& PlayerName, const struct FUniqueNetId& PlayerID, int CustomData1, int CustomData2, int CustomData3, int CustomData4);
	void ClearPartyMemberListChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMemberListChangedDelegate);
	void AddPartyMemberListChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& PartyMemberListChangedDelegate);
	void OnPartyMemberListChanged(bool bJoinedOrLeft, const struct FString& PlayerName, const struct FUniqueNetId& PlayerID);
	bool GetPartyMemberInformation(const struct FUniqueNetId& MemberId, struct FOnlinePartyMember* PartyMember);
	bool GetPartyMembersInformation(TArray<struct FOnlinePartyMember>* PartyMembers);
	void ClearSendPartyGameInvitesCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& SendPartyGameInvitesCompleteDelegate);
	void AddSendPartyGameInvitesCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& SendPartyGameInvitesCompleteDelegate);
	void OnSendPartyGameInvitesComplete(bool bWasSuccessful);
	bool SendPartyGameInvites(unsigned char LocalUserNum);
};


// Class Engine.OnlineNewsInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineNewsInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineNewsInterface");
		return ptr;
	}


	struct FString GetNews(unsigned char LocalUserNum, TEnumAsByte<EOnlineNewsType> NewsType);
	void ClearReadNewsCompletedDelegate(const struct FScriptDelegate& ReadNewsDelegate);
	void AddReadNewsCompletedDelegate(const struct FScriptDelegate& ReadNewsDelegate);
	void OnReadNewsCompleted(bool bWasSuccessful, TEnumAsByte<EOnlineNewsType> NewsType);
	bool ReadNews(unsigned char LocalUserNum, TEnumAsByte<EOnlineNewsType> NewsType);
};


// Class Engine.OnlineStatsInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineStatsInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineStatsInterface");
		return ptr;
	}


	void CalcAggregateSkill(TArray<struct FDouble> Mus, TArray<struct FDouble> Sigmas, struct FDouble* OutAggregateMu, struct FDouble* OutAggregateSigma);
	bool RegisterStatGuid(const struct FUniqueNetId& PlayerID, struct FString* ClientStatGuid);
	struct FString GetClientStatGuid();
	void ClearRegisterHostStatGuidCompleteDelegateDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate);
	void AddRegisterHostStatGuidCompleteDelegate(const struct FScriptDelegate& RegisterHostStatGuidCompleteDelegate);
	void OnRegisterHostStatGuidComplete(bool bWasSuccessful);
	bool RegisterHostStatGuid(struct FString* HostStatGuid);
	struct FString GetHostStatGuid();
	bool WriteOnlinePlayerScores(const struct FName& SessionName, int LeaderboardId, TArray<struct FOnlinePlayerScore>* PlayerScores);
	void ClearFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate);
	void AddFlushOnlineStatsCompleteDelegate(const struct FScriptDelegate& FlushOnlineStatsCompleteDelegate);
	void OnFlushOnlineStatsComplete(const struct FName& SessionName, bool bWasSuccessful);
	bool FlushOnlineStats(const struct FName& SessionName);
	bool WriteOnlineStats(const struct FName& SessionName, const struct FUniqueNetId& Player, class UOnlineStatsWrite* StatsWrite);
	void FreeStats(class UOnlineStatsRead* StatsRead);
	void ClearReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate);
	void AddReadOnlineStatsCompleteDelegate(const struct FScriptDelegate& ReadOnlineStatsCompleteDelegate);
	void OnReadOnlineStatsComplete(bool bWasSuccessful);
	bool ReadOnlineStatsByRankAroundPlayer(unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead, int NumRows);
	bool ReadOnlineStatsByRank(class UOnlineStatsRead* StatsRead, int StartIndex, int NumToRead);
	bool ReadOnlineStatsForFriends(unsigned char LocalUserNum, class UOnlineStatsRead* StatsRead);
	bool ReadOnlineStats(class UOnlineStatsRead* StatsRead, TArray<struct FUniqueNetId>* Players);
};


// Class Engine.OnlineVoiceInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineVoiceInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineVoiceInterface");
		return ptr;
	}


	bool UnmuteAll(unsigned char LocalUserNum);
	bool MuteAll(unsigned char LocalUserNum, bool bAllowFriends);
	bool SetSpeechRecognitionObject(unsigned char LocalUserNum, class USpeechRecognition* SpeechRecogObj);
	bool SelectVocabulary(unsigned char LocalUserNum, int VocabularyId);
	void ClearRecognitionCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& RecognitionDelegate);
	void AddRecognitionCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& RecognitionDelegate);
	void OnRecognitionComplete();
	bool GetRecognitionResults(unsigned char LocalUserNum, TArray<struct FSpeechRecognizedWord>* Words);
	bool StopSpeechRecognition(unsigned char LocalUserNum);
	bool StartSpeechRecognition(unsigned char LocalUserNum);
	void StopNetworkedVoice(unsigned char LocalUserNum);
	void StartNetworkedVoice(unsigned char LocalUserNum);
	void ClearPlayerTalkingDelegate(const struct FScriptDelegate& TalkerDelegate);
	void AddPlayerTalkingDelegate(const struct FScriptDelegate& TalkerDelegate);
	void OnPlayerTalkingStateChange(const struct FUniqueNetId& Player, bool bIsTalking);
	bool UnmuteRemoteTalker(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID, bool bIsSystemWide);
	bool MuteRemoteTalker(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID, bool bIsSystemWide);
	bool SetRemoteTalkerPriority(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID, int Priority);
	bool IsHeadsetPresent(unsigned char LocalUserNum);
	bool IsRemotePlayerTalking(const struct FUniqueNetId& PlayerID);
	bool IsLocalPlayerTalking(unsigned char LocalUserNum);
	bool UnregisterRemoteTalker(const struct FUniqueNetId& PlayerID);
	bool RegisterRemoteTalker(const struct FUniqueNetId& PlayerID);
	bool UnregisterLocalTalker(unsigned char LocalUserNum);
	bool RegisterLocalTalker(unsigned char LocalUserNum);
};


// Class Engine.OnlineContentInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineContentInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineContentInterface");
		return ptr;
	}


	bool ClearSaveGames(unsigned char LocalUserNum);
	bool DeleteSaveGame(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename);
	void ClearWriteSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& WriteSaveGameDataCompleteDelegate);
	void AddWriteSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& WriteSaveGameDataCompleteDelegate);
	void OnWriteSaveGameDataComplete(bool bWasSuccessful, unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName);
	bool WriteSaveGameData(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName, TArray<unsigned char>* SaveGameData);
	void ClearReadSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate);
	void AddReadSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate);
	void OnReadSaveGameDataComplete(bool bWasSuccessful, unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName);
	bool GetSaveGameData(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName, unsigned char* bIsValid, TArray<unsigned char>* SaveGameData);
	bool ReadSaveGameData(unsigned char LocalUserNum, int DeviceID, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName);
	void GetAvailableDownloadCounts(unsigned char LocalUserNum, int* NewDownloads, int* TotalDownloads);
	void ClearQueryAvailableDownloadsComplete(unsigned char LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate);
	void AddQueryAvailableDownloadsComplete(unsigned char LocalUserNum, const struct FScriptDelegate& QueryDownloadsDelegate);
	void OnQueryAvailableDownloadsComplete(bool bWasSuccessful);
	bool QueryAvailableDownloads(unsigned char LocalUserNum, int CategoryMask);
	bool ClearCrossTitleSaveGames(unsigned char LocalUserNum);
	void ClearReadCrossTitleSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate);
	void AddReadCrossTitleSaveGameDataComplete(unsigned char LocalUserNum, const struct FScriptDelegate& ReadSaveGameDataCompleteDelegate);
	void OnReadCrossTitleSaveGameDataComplete(bool bWasSuccessful, unsigned char LocalUserNum, int DeviceID, int TitleId, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName);
	bool GetCrossTitleSaveGameData(unsigned char LocalUserNum, int DeviceID, int TitleId, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName, unsigned char* bIsValid, TArray<unsigned char>* SaveGameData);
	bool ReadCrossTitleSaveGameData(unsigned char LocalUserNum, int DeviceID, int TitleId, const struct FString& FriendlyName, const struct FString& Filename, const struct FString& SaveFileName);
	void ClearReadCrossTitleContentCompleteDelegate(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate);
	void AddReadCrossTitleContentCompleteDelegate(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate);
	void OnReadCrossTitleContentComplete(bool bWasSuccessful);
	TEnumAsByte<EOnlineEnumerationReadState> GetCrossTitleContentList(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType, TArray<struct FOnlineCrossTitleContent>* ContentList);
	void ClearCrossTitleContentList(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType);
	bool ReadCrossTitleContentList(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType, int TitleId, int DeviceID);
	TEnumAsByte<EOnlineEnumerationReadState> GetContentList(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType, TArray<struct FOnlineContent>* ContentList);
	void ClearContentList(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType);
	bool ReadContentList(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType, int DeviceID);
	void ClearReadContentComplete(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate);
	void AddReadContentComplete(unsigned char LocalUserNum, TEnumAsByte<EOnlineContentType> ContentType, const struct FScriptDelegate& ReadContentCompleteDelegate);
	void OnReadContentComplete(bool bWasSuccessful);
	void ClearContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, unsigned char LocalUserNum);
	void AddContentChangeDelegate(const struct FScriptDelegate& ContentDelegate, unsigned char LocalUserNum);
	void OnContentChange();
};


// Class Engine.OnlineGameInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineGameInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineGameInterface");
		return ptr;
	}


	void ClearJoinMigratedOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinMigratedOnlineGameCompleteDelegate);
	void AddJoinMigratedOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinMigratedOnlineGameCompleteDelegate);
	void OnJoinMigratedOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	bool JoinMigratedOnlineGame(unsigned char PlayerNum, const struct FName& SessionName, struct FOnlineGameSearchResult* DesiredGame);
	void ClearMigrateOnlineGameCompleteDelegate(const struct FScriptDelegate& MigrateOnlineGameCompleteDelegate);
	void AddMigrateOnlineGameCompleteDelegate(const struct FScriptDelegate& MigrateOnlineGameCompleteDelegate);
	void OnMigrateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	bool MigrateOnlineGame(unsigned char HostingPlayerNum, const struct FName& SessionName);
	void ClearRecalculateSkillRatingCompleteDelegate(const struct FScriptDelegate& RecalculateSkillRatingGameCompleteDelegate);
	void AddRecalculateSkillRatingCompleteDelegate(const struct FScriptDelegate& RecalculateSkillRatingCompleteDelegate);
	void OnRecalculateSkillRatingComplete(const struct FName& SessionName, bool bWasSuccessful);
	bool RecalculateSkillRating(const struct FName& SessionName, TArray<struct FUniqueNetId>* Players);
	bool AcceptGameInvite(unsigned char LocalUserNum, const struct FName& SessionName);
	void ClearGameInviteAcceptedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& GameInviteAcceptedDelegate);
	void AddGameInviteAcceptedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& GameInviteAcceptedDelegate);
	void OnGameInviteAccepted(struct FOnlineGameSearchResult* InviteResult);
	TArray<struct FOnlineArbitrationRegistrant> GetArbitratedPlayers(const struct FName& SessionName);
	void ClearArbitrationRegistrationCompleteDelegate(const struct FScriptDelegate& ArbitrationRegistrationCompleteDelegate);
	void AddArbitrationRegistrationCompleteDelegate(const struct FScriptDelegate& ArbitrationRegistrationCompleteDelegate);
	void OnArbitrationRegistrationComplete(const struct FName& SessionName, bool bWasSuccessful);
	bool RegisterForArbitration(const struct FName& SessionName);
	void ClearEndOnlineGameCompleteDelegate(const struct FScriptDelegate& EndOnlineGameCompleteDelegate);
	void AddEndOnlineGameCompleteDelegate(const struct FScriptDelegate& EndOnlineGameCompleteDelegate);
	void OnEndOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	bool EndOnlineGame(const struct FName& SessionName);
	void ClearStartOnlineGameCompleteDelegate(const struct FScriptDelegate& StartOnlineGameCompleteDelegate);
	void AddStartOnlineGameCompleteDelegate(const struct FScriptDelegate& StartOnlineGameCompleteDelegate);
	void OnStartOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	bool StartOnlineGame(const struct FName& SessionName);
	void ClearUnregisterPlayerCompleteDelegate(const struct FScriptDelegate& UnregisterPlayerCompleteDelegate);
	void AddUnregisterPlayerCompleteDelegate(const struct FScriptDelegate& UnregisterPlayerCompleteDelegate);
	void OnUnregisterPlayerComplete(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful);
	bool UnregisterPlayers(const struct FName& SessionName, TArray<struct FUniqueNetId>* Players);
	bool UnregisterPlayer(const struct FName& SessionName, const struct FUniqueNetId& PlayerID);
	void ClearRegisterPlayerCompleteDelegate(const struct FScriptDelegate& RegisterPlayerCompleteDelegate);
	void AddRegisterPlayerCompleteDelegate(const struct FScriptDelegate& RegisterPlayerCompleteDelegate);
	void OnRegisterPlayerComplete(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasSuccessful);
	bool RegisterPlayers(const struct FName& SessionName, TArray<struct FUniqueNetId>* Players);
	bool RegisterPlayer(const struct FName& SessionName, const struct FUniqueNetId& PlayerID, bool bWasInvited);
	bool GetResolvedConnectString(const struct FName& SessionName, struct FString* ConnectInfo);
	void ClearJoinOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinOnlineGameCompleteDelegate);
	void AddJoinOnlineGameCompleteDelegate(const struct FScriptDelegate& JoinOnlineGameCompleteDelegate);
	void OnJoinOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	bool JoinOnlineGame(unsigned char PlayerNum, const struct FName& SessionName, struct FOnlineGameSearchResult* DesiredGame);
	bool QueryNonAdvertisedData(int StartAt, int NumberToQuery);
	bool FreeSearchResults(class UOnlineGameSearch* Search);
	class UOnlineGameSearch* GetGameSearch();
	bool BindPlatformSpecificSessionToSearch(unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, unsigned char PlatformSpecificInfo);
	bool ReadPlatformSpecificSessionInfoBySessionName(const struct FName& SessionName, unsigned char* PlatformSpecificInfo);
	bool ReadPlatformSpecificSessionInfo(struct FOnlineGameSearchResult* DesiredGame, unsigned char* PlatformSpecificInfo);
	void ClearQosStatusChangedDelegate(const struct FScriptDelegate& QosStatusChangedDelegate);
	void AddQosStatusChangedDelegate(const struct FScriptDelegate& QosStatusChangedDelegate);
	void OnQosStatusChanged(int NumComplete, int NumTotal);
	void ClearCancelFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& CancelFindOnlineGamesCompleteDelegate);
	void AddCancelFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& CancelFindOnlineGamesCompleteDelegate);
	void OnCancelFindOnlineGamesComplete(bool bWasSuccessful);
	bool CancelFindOnlineGames();
	void ClearFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& FindOnlineGamesCompleteDelegate);
	void AddFindOnlineGamesCompleteDelegate(const struct FScriptDelegate& FindOnlineGamesCompleteDelegate);
	void OnFindOnlineGamesComplete(bool bWasSuccessful);
	bool FindOnlineGames(unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings);
	void ClearDestroyOnlineGameCompleteDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate);
	void AddDestroyOnlineGameCompleteDelegate(const struct FScriptDelegate& DestroyOnlineGameCompleteDelegate);
	void OnDestroyOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	bool DestroyOnlineGame(const struct FName& SessionName);
	class UOnlineGameSettings* GetGameSettings(const struct FName& SessionName);
	void ClearUpdateOnlineGameCompleteDelegate(const struct FScriptDelegate& UpdateOnlineGameCompleteDelegate);
	void AddUpdateOnlineGameCompleteDelegate(const struct FScriptDelegate& UpdateOnlineGameCompleteDelegate);
	void OnUpdateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	bool UpdateOnlineGame(const struct FName& SessionName, class UOnlineGameSettings* UpdatedGameSettings, bool bShouldRefreshOnlineData);
	void ClearCreateOnlineGameCompleteDelegate(const struct FScriptDelegate& CreateOnlineGameCompleteDelegate);
	void AddCreateOnlineGameCompleteDelegate(const struct FScriptDelegate& CreateOnlineGameCompleteDelegate);
	void OnCreateOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	bool CreateOnlineGame(unsigned char HostingPlayerNum, const struct FName& SessionName, class UOnlineGameSettings* NewGameSettings);
};


// Class Engine.OnlineSystemInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineSystemInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineSystemInterface");
		return ptr;
	}


	int GetLocale();
	void ClearStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate);
	void AddStorageDeviceChangeDelegate(const struct FScriptDelegate& StorageDeviceChangeDelegate);
	void OnStorageDeviceChange();
	TEnumAsByte<ENATType> GetNATType();
	void ClearConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate);
	void AddConnectionStatusChangeDelegate(const struct FScriptDelegate& ConnectionStatusDelegate);
	void OnConnectionStatusChange(TEnumAsByte<EOnlineServerConnectionStatus> ConnectionStatus);
	bool IsControllerConnected(int ControllerId);
	void ClearControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate);
	void AddControllerChangeDelegate(const struct FScriptDelegate& ControllerChangeDelegate);
	void OnControllerChange(int ControllerId, bool bIsConnected);
	void SetNetworkNotificationPosition(TEnumAsByte<ENetworkNotificationPosition> NewPos);
	TEnumAsByte<ENetworkNotificationPosition> GetNetworkNotificationPosition();
	void ClearExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate);
	void AddExternalUIChangeDelegate(const struct FScriptDelegate& ExternalUIDelegate);
	void OnExternalUIChange(bool bIsOpening);
	void ClearLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate);
	void AddLinkStatusChangeDelegate(const struct FScriptDelegate& LinkStatusDelegate);
	void OnLinkStatusChange(bool bIsConnected);
	bool HasLinkConnection();
};


// Class Engine.OnlinePlayerInterfaceEx
// 0x0000 (0x003C - 0x003C)
class UOnlinePlayerInterfaceEx : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePlayerInterfaceEx");
		return ptr;
	}


	bool ShowCustomMessageUI(unsigned char LocalUserNum, const struct FString& MessageTitle, const struct FString& NonEditableMessage, const struct FString& EditableMessage, TArray<struct FUniqueNetId>* Recipients);
	void ClearCrossTitleProfileSettings(unsigned char LocalUserNum, int TitleId);
	class UOnlineProfileSettings* GetCrossTitleProfileSettings(unsigned char LocalUserNum, int TitleId);
	void ClearReadCrossTitleProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate);
	void AddReadCrossTitleProfileSettingsCompleteDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ReadProfileSettingsCompleteDelegate);
	void OnReadCrossTitleProfileSettingsComplete(unsigned char LocalUserNum, int TitleId, bool bWasSuccessful);
	bool ReadCrossTitleProfileSettings(unsigned char LocalUserNum, int TitleId, class UOnlineProfileSettings* ProfileSettings);
	bool UnlockAvatarAward(unsigned char LocalUserNum, int AvatarItemId);
	bool ShowCustomPlayersUI(unsigned char LocalUserNum, const struct FString& Title, const struct FString& Description, TArray<struct FUniqueNetId>* Players);
	bool ShowPlayersUI(unsigned char LocalUserNum);
	bool ShowFriendsInviteUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID);
	void ClearProfileDataChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate);
	void AddProfileDataChangedDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& ProfileDataChangedDelegate);
	void OnProfileDataChanged();
	bool UnlockGamerPicture(unsigned char LocalUserNum, int PictureId);
	bool IsDeviceValid(int DeviceID, int SizeNeeded);
	int GetDeviceSelectionResults(unsigned char LocalUserNum, struct FString* DeviceName);
	void ClearDeviceSelectionDoneDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& DeviceDelegate);
	void AddDeviceSelectionDoneDelegate(unsigned char LocalUserNum, const struct FScriptDelegate& DeviceDelegate);
	void OnDeviceSelectionComplete(bool bWasSuccessful);
	bool ShowDeviceSelectionUI(unsigned char LocalUserNum, int SizeNeeded, bool bManageStorage);
	bool ShowMembershipMarketplaceUI(unsigned char LocalUserNum);
	bool ShowContentMarketplaceUI(unsigned char LocalUserNum, int CategoryMask, int OfferId);
	bool ShowInviteUI(unsigned char LocalUserNum, const struct FString& InviteText);
	bool ShowAchievementsUI(unsigned char LocalUserNum);
	bool ShowMessagesUI(unsigned char LocalUserNum);
	bool ShowGamerCardUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID);
	bool ShowFeedbackUI(unsigned char LocalUserNum, const struct FUniqueNetId& PlayerID);
};


// Class Engine.OnlineAccountInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineAccountInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineAccountInterface");
		return ptr;
	}


	bool GetLocalAccountNames(TArray<struct FString>* Accounts);
	bool DeleteLocalAccount(const struct FString& UserName, const struct FString& Password);
	bool RenameLocalAccount(const struct FString& NewUserName, const struct FString& OldUserName, const struct FString& Password);
	bool CreateLocalAccount(const struct FString& UserName, const struct FString& Password);
	void ClearCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate);
	void AddCreateOnlineAccountCompletedDelegate(const struct FScriptDelegate& AccountCreateDelegate);
	void OnCreateOnlineAccountCompleted(TEnumAsByte<EOnlineAccountCreateStatus> ErrorStatus);
	bool CreateOnlineAccount(const struct FString& UserName, const struct FString& Password, const struct FString& EmailAddress, const struct FString& ProductKey);
};


// Class Engine.AccessControl
// 0x0108 (0x02DC - 0x01D4)
class AAccessControl : public AInfo
{
public:
	TArray<struct FString>                             IPPolicies;                                               // 0x01D4(0x000C) (Config, GlobalConfig, NeedCtorLink)
	TArray<struct FUniqueNetId>                        BannedIDs;                                                // 0x01E0(0x000C) (Config, GlobalConfig, NeedCtorLink)
	struct FString                                     IPBanned;                                                 // 0x01EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     WrongPassword;                                            // 0x01F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NeedPassword;                                             // 0x0204(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SessionBanned;                                            // 0x0210(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     KickedMsg;                                                // 0x021C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     DefaultKickReason;                                        // 0x0228(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     IdleKickReason;                                           // 0x0234(0x000C) (Const, Localized, NeedCtorLink)
	class UClass*                                      AdminClass;                                               // 0x0240(0x0004)
	struct FString                                     AdminPassword;                                            // 0x0244(0x000C) (Config, GlobalConfig, NeedCtorLink)
	struct FString                                     GamePassword;                                             // 0x0250(0x000C) (Config, GlobalConfig, NeedCtorLink)
	struct FString                                     ACDisplayText[0x3];                                       // 0x025C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ACDescText[0x3];                                          // 0x0280(0x000C) (Const, Localized, NeedCtorLink)
	unsigned long                                      bDontAddDefaultAdmin : 1;                                 // 0x02A4(0x0004)
	unsigned long                                      bAuthenticateClients : 1;                                 // 0x02A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bAuthenticateServer : 1;                                  // 0x02A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bAuthenticateListenHost : 1;                              // 0x02A4(0x0004) (Config, GlobalConfig)
	unsigned long                                      bAuthDelegatesRegistered : 1;                             // 0x02A4(0x0004)
	unsigned long                                      bPendingListenAuth : 1;                                   // 0x02A4(0x0004)
	int                                                MaxAuthRetryCount;                                        // 0x02A8(0x0004) (Config, GlobalConfig)
	int                                                AuthRetryDelay;                                           // 0x02AC(0x0004) (Config, GlobalConfig)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x02B0(0x0004)
	TScriptInterface<class UOnlineAuthInterface>       CachedAuthInt;                                            // 0x02B4(0x0008)
	TArray<struct FPendingClientAuth>                  ClientsPendingAuth;                                       // 0x02BC(0x000C) (NeedCtorLink)
	TArray<struct FServerAuthRetry>                    ServerAuthRetries;                                        // 0x02C8(0x000C) (NeedCtorLink)
	int                                                ListenAuthTicketUID;                                      // 0x02D4(0x0004)
	int                                                ListenAuthRetryCount;                                     // 0x02D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AccessControl");
		return ptr;
	}


	bool IsPendingAuth(const struct FUniqueNetId& PlayerUID);
	void Cleanup(bool bExit);
	void NotifyExit();
	void NotifyGameEnding();
	void NotifyServerTravel(bool bSeamless);
	void OnDestroyOnlineGameComplete(const struct FName& SessionName, bool bWasSuccessful);
	void STATIC_StaticOnClientConnectionClose(class UPlayer* ClientConnection);
	void OnClientConnectionClose(class UPlayer* ClientConnection);
	void ListenHostAuthTimeout();
	void EndListenHostAuth();
	void ContinueListenHostAuth();
	void BeginListenHostAuth(bool bRetry);
	void ProcessServerAuthRetryRequest(class UPlayer* ClientConnection);
	void ProcessServerAuthRequest(class UPlayer* ClientConnection, const struct FUniqueNetId& ClientUID, int ClientIP, int ClientPort);
	void OnClientAuthComplete(bool bSuccess, const struct FUniqueNetId& ClientUID, class UPlayer* ClientConnection, const struct FString& ExtraInfo);
	void ProcessClientAuthResponse(const struct FUniqueNetId& ClientUID, int ClientIP, int AuthTicketUID);
	void OnAuthReady();
	void PendingAuthTimer();
	void PostLogin(class APlayerController* NewPlayer);
	void PreLogin(const struct FString& Options, const struct FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, bool bSpectator, struct FString* OutError);
	void ClearAuthDelegates(bool bExiting);
	void RegisterAuthDelegates();
	void InitAuthHooks();
	bool IsIDBanned(struct FUniqueNetId* NetId);
	bool CheckIPPolicy(const struct FString& Address);
	bool ValidLogin(const struct FString& UserName, const struct FString& Password);
	bool ParseAdminOptions(const struct FString& Options);
	void AdminExited(class APlayerController* P);
	void AdminEntered(class APlayerController* P);
	bool AdminLogout(class APlayerController* P);
	bool AdminLogin(class APlayerController* P, const struct FString& Password);
	bool KickPlayer(class APlayerController* C, const struct FString& KickReason);
	bool ForceKickPlayer(class APlayerController* C, const struct FString& KickReason, const struct FString& KickTitle);
	void KickBan(const struct FString& Target);
	void Kick(const struct FString& Target);
	class AController* GetControllerFromString(const struct FString& Target);
	struct FString GetGamePassword();
	bool RequiresPassword();
	void SetGamePassword(const struct FString& P);
	bool SetAdminPassword(const struct FString& P);
	bool IsAdmin(class APlayerController* P);
	void Destroyed();
	void PostBeginPlay();
};


// Class Engine.Admin
// 0x0000 (0x0608 - 0x0608)
class AAdmin : public APlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Admin");
		return ptr;
	}


	void ServerSwitch(const struct FString& URL);
	void Switch(const struct FString& URL);
	void ServerRestartMap();
	void RestartMap();
	void PlayerList();
	void ServerKick(const struct FString& S);
	void Kick(const struct FString& S);
	void ServerKickBan(const struct FString& S);
	void KickBan(const struct FString& S);
	void ServerAdmin(const struct FString& CommandLine);
	void Admin(const struct FString& CommandLine);
	void PostBeginPlay();
};


// Class Engine.ApexDestructibleActorSpawnable
// 0x0000 (0x024C - 0x024C)
class AApexDestructibleActorSpawnable : public AApexDestructibleActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexDestructibleActorSpawnable");
		return ptr;
	}

};


// Class Engine.EmitterSpawnable
// 0x0004 (0x01E4 - 0x01E0)
class AEmitterSpawnable : public AEmitter
{
public:
	class UParticleSystem*                             ParticleTemplate;                                         // 0x01E0(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EmitterSpawnable");
		return ptr;
	}


	void ReplicatedEvent(const struct FName& VarName);
	void SetTemplate(class UParticleSystem* NewTemplate, bool bDestroyOnFinish);
};


// Class Engine.KAssetSpawnable
// 0x0000 (0x01E4 - 0x01E4)
class AKAssetSpawnable : public AKAsset
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KAssetSpawnable");
		return ptr;
	}

};


// Class Engine.ActorFactorySkeletalMeshCinematic
// 0x0000 (0x0078 - 0x0078)
class UActorFactorySkeletalMeshCinematic : public UActorFactorySkeletalMesh
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactorySkeletalMeshCinematic");
		return ptr;
	}

};


// Class Engine.ActorFactorySkeletalMeshMAT
// 0x0000 (0x0078 - 0x0078)
class UActorFactorySkeletalMeshMAT : public UActorFactorySkeletalMesh
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorFactorySkeletalMeshMAT");
		return ptr;
	}

};


// Class Engine.SeqEvent_Death
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_Death : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_Death");
		return ptr;
	}

};


// Class Engine.SeqAct_ToggleGodMode
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_ToggleGodMode : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleGodMode");
		return ptr;
	}

};


// Class Engine.SeqAct_ControlMovieTexture
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_ControlMovieTexture : public USequenceAction
{
public:
	class UTextureMovie*                               MovieTexture;                                             // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ControlMovieTexture");
		return ptr;
	}


	void Activated();
};


// Class Engine.CoverReplicator
// 0x000C (0x01E0 - 0x01D4)
class ACoverReplicator : public AReplicationInfo
{
public:
	TArray<struct FCoverReplicationInfo>               CoverReplicationData;                                     // 0x01D4(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CoverReplicator");
		return ptr;
	}


	void ClientReceiveLinkDisabledState(int Index, class ACoverLink* Link, bool bLinkDisabled);
	void ServerSendLinkDisabledState(int Index);
	void NotifyLinkDisabledStateChange(class ACoverLink* Link);
	void ClientReceiveManualCoverTypeSlots(int Index, class ACoverLink* Link, unsigned char NumCoverTypesChanged, const struct FManualCoverTypeInfo& SlotsCoverTypeChanged, bool bDone);
	void ServerSendManualCoverTypeSlots(int Index);
	void NotifySetManualCoverTypeForSlots(class ACoverLink* Link, TEnumAsByte<ECoverType> NewCoverType, TArray<int>* SlotIndices);
	void ClientReceiveAdjustedSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsAdjusted, unsigned char SlotsAdjusted, bool bDone);
	void ServerSendAdjustedSlots(int Index);
	void NotifyAutoAdjustSlots(class ACoverLink* Link, TArray<int>* SlotIndices);
	void ClientReceiveDisabledSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsDisabled, unsigned char SlotsDisabled, bool bDone);
	void ServerSendDisabledSlots(int Index);
	void NotifyDisabledSlots(class ACoverLink* Link, TArray<int>* SlotIndices);
	void ClientReceiveEnabledSlots(int Index, class ACoverLink* Link, unsigned char NumSlotsEnabled, unsigned char SlotsEnabled, bool bDone);
	void ServerSendEnabledSlots(int Index);
	void NotifyEnabledSlots(class ACoverLink* Link, TArray<int>* SlotIndices);
	void ClientReceiveInitialCoverReplicationInfo(int Index, class ACoverLink* Link, bool bLinkDisabled, unsigned char NumSlotsEnabled, unsigned char SlotsEnabled, unsigned char NumSlotsDisabled, unsigned char SlotsDisabled, unsigned char NumSlotsAdjusted, unsigned char SlotsAdjusted, unsigned char NumCoverTypesChanged, const struct FManualCoverTypeInfo& SlotsCoverTypeChanged, bool bDone);
	void ServerSendInitialCoverReplicationInfo(int Index);
	void ClientSetOwner(class APlayerController* PC);
	void ReplicateInitialCoverInfo();
	void PurgeOldEntries();
};


// Class Engine.GameMessage
// 0x0114 (0x0164 - 0x0050)
class UGameMessage : public ULocalMessage
{
public:
	struct FString                                     SwitchLevelMessage;                                       // 0x0050(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     LeftMessage;                                              // 0x005C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FailedTeamMessage;                                        // 0x0068(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FailedPlaceMessage;                                       // 0x0074(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     FailedSpawnMessage;                                       // 0x0080(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     EnteredMessage;                                           // 0x008C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MaxedOutMessage;                                          // 0x0098(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     ArbitrationMessage;                                       // 0x00A4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     OvertimeMessage;                                          // 0x00B0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     GlobalNameChange;                                         // 0x00BC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NewTeamMessage;                                           // 0x00C8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NewTeamMessageTrailer;                                    // 0x00D4(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NoNameChange;                                             // 0x00E0(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     VoteStarted;                                              // 0x00EC(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     VotePassed;                                               // 0x00F8(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     MustHaveStats;                                            // 0x0104(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CantBeSpectator;                                          // 0x0110(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     CantBePlayer;                                             // 0x011C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     BecameSpectator;                                          // 0x0128(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NewPlayerMessage;                                         // 0x0134(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     KickWarning;                                              // 0x0140(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     NewSpecMessage;                                           // 0x014C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     SpecEnteredMessage;                                       // 0x0158(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameMessage");
		return ptr;
	}


	struct FString STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
};


// Class Engine.DmgType_Suicided
// 0x0000 (0x0064 - 0x0064)
class UDmgType_Suicided : public UKillZDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DmgType_Suicided");
		return ptr;
	}

};


// Class Engine.SeqAct_ToggleInput
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_ToggleInput : public USeqAct_Toggle
{
public:
	unsigned long                                      bToggleMovement : 1;                                      // 0x00FC(0x0004) (Edit)
	unsigned long                                      bToggleTurning : 1;                                       // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleInput");
		return ptr;
	}

};


// Class Engine.SeqAct_ToggleHUD
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_ToggleHUD : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleHUD");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_ForceFeedback
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_ForceFeedback : public USequenceAction
{
public:
	class UForceFeedbackWaveform*                      FFWaveform;                                               // 0x00FC(0x0004) (Edit, EditInline)
	class UClass*                                      PredefinedWaveForm;                                       // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ForceFeedback");
		return ptr;
	}

};


// Class Engine.SeqAct_ToggleCinematicMode
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_ToggleCinematicMode : public USequenceAction
{
public:
	unsigned long                                      bDisableMovement : 1;                                     // 0x00FC(0x0004) (Edit)
	unsigned long                                      bDisableTurning : 1;                                      // 0x00FC(0x0004) (Edit)
	unsigned long                                      bHidePlayer : 1;                                          // 0x00FC(0x0004) (Edit)
	unsigned long                                      bDisableInput : 1;                                        // 0x00FC(0x0004) (Edit)
	unsigned long                                      bHideHUD : 1;                                             // 0x00FC(0x0004) (Edit)
	unsigned long                                      bDeadBodies : 1;                                          // 0x00FC(0x0004) (Edit)
	unsigned long                                      bDroppedPickups : 1;                                      // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleCinematicMode");
		return ptr;
	}


	void Activated();
};


// Class Engine.SeqAct_ConsoleCommand
// 0x0018 (0x0114 - 0x00FC)
class USeqAct_ConsoleCommand : public USequenceAction
{
public:
	struct FString                                     Command;                                                  // 0x00FC(0x000C) (NeedCtorLink)
	TArray<struct FString>                             Commands;                                                 // 0x0108(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ConsoleCommand");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	void VersionUpdated(int OldVersion, int NewVersion);
};


// Class Engine.SeqAct_FlyThroughHasEnded
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_FlyThroughHasEnded : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_FlyThroughHasEnded");
		return ptr;
	}

};


// Class Engine.SeqAct_SetSoundMode
// 0x0008 (0x0104 - 0x00FC)
class USeqAct_SetSoundMode : public USequenceAction
{
public:
	class USoundMode*                                  SoundMode;                                                // 0x00FC(0x0004) (Edit)
	unsigned long                                      bTopPriority : 1;                                         // 0x0100(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetSoundMode");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	void Activated();
};


// Class Engine.SplineComponentSimplified
// 0x0000 (0x020C - 0x020C)
class USplineComponentSimplified : public USplineComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SplineComponentSimplified");
		return ptr;
	}

};


// Class Engine.AmbientSoundSimpleSplineNonLoop
// 0x0000 (0x01F8 - 0x01F8)
class AAmbientSoundSimpleSplineNonLoop : public AAmbientSoundSimpleSpline
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSoundSimpleSplineNonLoop");
		return ptr;
	}

};


// Class Engine.AnimNotify_PlayFaceFXAnim
// 0x0028 (0x0068 - 0x0040)
class UAnimNotify_PlayFaceFXAnim : public UAnimNotify_Scripted
{
public:
	class UFaceFXAnimSet*                              FaceFXAnimSetRef;                                         // 0x0040(0x0004) (Edit)
	struct FString                                     GroupName;                                                // 0x0044(0x000C) (Edit, NeedCtorLink)
	struct FString                                     AnimName;                                                 // 0x0050(0x000C) (Edit, NeedCtorLink)
	class USoundCue*                                   SoundCueToPlay;                                           // 0x005C(0x0004) (Edit)
	unsigned long                                      bOverridePlayingAnim : 1;                                 // 0x0060(0x0004) (Edit)
	float                                              PlayFrequency;                                            // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_PlayFaceFXAnim");
		return ptr;
	}


	void Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};


// Class Engine.SeqAct_SetParticleSysParam
// 0x0014 (0x0110 - 0x00FC)
class USeqAct_SetParticleSysParam : public USequenceAction
{
public:
	TArray<struct FParticleSysParam>                   InstanceParameters;                                       // 0x00FC(0x000C) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	unsigned long                                      bOverrideScalar : 1;                                      // 0x0108(0x0004) (Edit)
	float                                              ScalarValue;                                              // 0x010C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetParticleSysParam");
		return ptr;
	}

};


// Class Engine.ApexEffect
// 0x0010 (0x01F4 - 0x01E4)
class AApexEffect : public AEmitterSpawnable
{
public:
	class UApexGridComponent*                          GridTemplate;                                             // 0x01E4(0x0004) (ExportObject, Component, EditInline)
	TArray<class UParticleSystemComponent*>            OuterParticleSystemComponents;                            // 0x01E8(0x000C) (ExportObject, Component, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexEffect");
		return ptr;
	}


	void Tick(float DeltaTime);
	void SetGridTemplate(class UApexGridComponent* GridComponentTemplate);
};


// Class Engine.ApexEffectPool
// 0x0004 (0x01D8 - 0x01D4)
class AApexEffectPool : public AActor
{
public:
	int                                                MaxNumGrids;                                              // 0x01D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ApexEffectPool");
		return ptr;
	}


	class AApexEffect* SpawnEffect(class UApexGridComponent* GridComponentTemplate, class UParticleSystem* Template, class AActor* EffectBase, float EffectMaxLifespan);
};


// Class Engine.BroadcastHandler
// 0x0008 (0x01DC - 0x01D4)
class ABroadcastHandler : public AInfo
{
public:
	int                                                SentText;                                                 // 0x01D4(0x0004)
	unsigned long                                      bMuteSpectators : 1;                                      // 0x01D8(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BroadcastHandler");
		return ptr;
	}


	void AllowBroadcastLocalizedTeam(int TeamIndex, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void AllowBroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void BroadcastTeam(class AController* Sender, const struct FString& msg, const struct FName& Type);
	void Broadcast(class AActor* Sender, const struct FString& msg, const struct FName& Type);
	void BroadcastLocalized(class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	void BroadcastText(class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, const struct FString& msg, const struct FName& Type);
	bool AllowsBroadcast(class AActor* broadcaster, int InLen);
	void UpdateSentText();
};


// Class Engine.HttpFactory
// 0x000C (0x0048 - 0x003C)
class UHttpFactory : public UObject
{
public:
	struct FString                                     HttpRequestClassName;                                     // 0x003C(0x000C) (Config, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HttpFactory");
		return ptr;
	}


	class UHttpRequestInterface* STATIC_CreateRequest();
};


// Class Engine.CloudSaveSystemKVSInterface
// 0x0000 (0x003C - 0x003C)
class UCloudSaveSystemKVSInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CloudSaveSystemKVSInterface");
		return ptr;
	}


	bool WriteKeyValue(int SaveSlotIndex, const struct FString& KeyName, struct FPlatformInterfaceData* Value);
	bool ReadKeyValue(int SaveSlotIndex, const struct FString& KeyName, TEnumAsByte<EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value);
};


// Class Engine.CloudSaveSystemDataBlobStoreInterface
// 0x0000 (0x003C - 0x003C)
class UCloudSaveSystemDataBlobStoreInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CloudSaveSystemDataBlobStoreInterface");
		return ptr;
	}


	bool DeleteDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& InDeleteDataBlobCallback);
	void DeleteDataBlobCallbackDelegate(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error);
	void SetDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& InSetDataBlobCallback, TArray<unsigned char>* DataBlob);
	void SetDataBlobCallbackDelegate(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error);
	void GetDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& OnGetDataBlobComplete);
	void GetDataBlobCallbackDelegate(bool bWasSuccessful, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error, TArray<unsigned char>* DataBlob);
};


// Class Engine.CloudStorageBaseCloudSaveSystemKVS
// 0x0004 (0x0040 - 0x003C)
class UCloudStorageBaseCloudSaveSystemKVS : public UObject
{
public:
	class UCloudStorageBase*                           CloudStorage;                                             // 0x003C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CloudStorageBaseCloudSaveSystemKVS");
		return ptr;
	}


	struct FString GenerateKeyNameForSaveSlot(int SaveSlotIndex, const struct FString& KeyName);
	bool WriteKeyValue(int SaveSlotIndex, const struct FString& KeyName, struct FPlatformInterfaceData* Value);
	bool ReadKeyValue(int SaveSlotIndex, const struct FString& KeyName, TEnumAsByte<EPlatformInterfaceDataType> Type, struct FPlatformInterfaceDelegateResult* Value);
	void Init(class UCloudStorageBase* InCloudStorage);
};


// Class Engine.ColorScaleVolume
// 0x0010 (0x0210 - 0x0200)
class AColorScaleVolume : public AVolume
{
public:
	struct FVector                                     ColorScale;                                               // 0x0200(0x000C) (Edit)
	float                                              InterpTime;                                               // 0x020C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ColorScaleVolume");
		return ptr;
	}


	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class Engine.VolumeTimer
// 0x0004 (0x01D8 - 0x01D4)
class AVolumeTimer : public AInfo
{
public:
	class APhysicsVolume*                              V;                                                        // 0x01D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VolumeTimer");
		return ptr;
	}


	void Timer();
	void PostBeginPlay();
};


// Class Engine.SeqAct_SetDamageInstigator
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_SetDamageInstigator : public USequenceAction
{
public:
	class AActor*                                      DamageInstigator;                                         // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetDamageInstigator");
		return ptr;
	}

};


// Class Engine.DmgType_Crushed
// 0x0000 (0x0064 - 0x0064)
class UDmgType_Crushed : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DmgType_Crushed");
		return ptr;
	}

};


// Class Engine.DmgType_Fell
// 0x0000 (0x0064 - 0x0064)
class UDmgType_Fell : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DmgType_Fell");
		return ptr;
	}

};


// Class Engine.DmgType_Telefragged
// 0x0000 (0x0064 - 0x0064)
class UDmgType_Telefragged : public UDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DmgType_Telefragged");
		return ptr;
	}

};


// Class Engine.DynamicPhysicsVolume
// 0x0004 (0x0244 - 0x0240)
class ADynamicPhysicsVolume : public APhysicsVolume
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0240(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicPhysicsVolume");
		return ptr;
	}


	void PostBeginPlay();
};


// Class Engine.DynamicSMActor_Spawnable
// 0x0000 (0x0210 - 0x0210)
class ADynamicSMActor_Spawnable : public ADynamicSMActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicSMActor_Spawnable");
		return ptr;
	}

};


// Class Engine.DynamicTriggerVolume
// 0x0004 (0x0204 - 0x0200)
class ADynamicTriggerVolume : public ATriggerVolume
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0200(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DynamicTriggerVolume");
		return ptr;
	}


	void PostBeginPlay();
};


// Class Engine.ExponentialHeightFog
// 0x0008 (0x01DC - 0x01D4)
class AExponentialHeightFog : public AInfo
{
public:
	class UExponentialHeightFogComponent*              Component;                                                // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bEnabled : 1;                                             // 0x01D8(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ExponentialHeightFog");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class Engine.FailedConnect
// 0x0030 (0x0080 - 0x0050)
class UFailedConnect : public ULocalMessage
{
public:
	struct FString                                     FailMessage[0x4];                                         // 0x0050(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FailedConnect");
		return ptr;
	}


	struct FString STATIC_GetString(int Switch, bool bPRI1HUD, class APlayerReplicationInfo* RelatedPRI_2, class APlayerReplicationInfo* RelatedPRI_3, class UObject* OptionalObject);
	int STATIC_GetFailSwitch(const struct FString& FailString);
};


// Class Engine.FracturedSMActorSpawnable
// 0x0000 (0x023C - 0x023C)
class AFracturedSMActorSpawnable : public AFracturedStaticMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedSMActorSpawnable");
		return ptr;
	}

};


// Class Engine.FracturedStaticMeshActor_Spawnable
// 0x0000 (0x023C - 0x023C)
class AFracturedStaticMeshActor_Spawnable : public AFracturedStaticMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FracturedStaticMeshActor_Spawnable");
		return ptr;
	}

};


// Class Engine.SeqEvent_PlayerSpawned
// 0x0004 (0x0118 - 0x0114)
class USeqEvent_PlayerSpawned : public USequenceEvent
{
public:
	class UObject*                                     SpawnPoint;                                               // 0x0114(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_PlayerSpawned");
		return ptr;
	}

};


// Class Engine.HeightFog
// 0x0008 (0x01DC - 0x01D4)
class AHeightFog : public AInfo
{
public:
	class UHeightFogComponent*                         Component;                                                // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	unsigned long                                      bEnabled : 1;                                             // 0x01D8(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HeightFog");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class Engine.InterpActor_ForCinematic
// 0x0000 (0x023C - 0x023C)
class AInterpActor_ForCinematic : public AInterpActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpActor_ForCinematic");
		return ptr;
	}

};


// Class Engine.MaterialInstanceTimeVaryingActor
// 0x0004 (0x01D8 - 0x01D4)
class AMaterialInstanceTimeVaryingActor : public AActor
{
public:
	class UMaterialInstanceTimeVarying*                MatInst;                                                  // 0x01D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialInstanceTimeVaryingActor");
		return ptr;
	}

};


// Class Engine.SeqAct_AssignController
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_AssignController : public USequenceAction
{
public:
	class UClass*                                      ControllerClass;                                          // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AssignController");
		return ptr;
	}

};


// Class Engine.SeqAct_GiveInventory
// 0x0010 (0x010C - 0x00FC)
class USeqAct_GiveInventory : public USequenceAction
{
public:
	TArray<class UClass*>                              InventoryList;                                            // 0x00FC(0x000C) (Edit, NeedCtorLink)
	unsigned long                                      bClearExisting : 1;                                       // 0x0108(0x0004) (Edit)
	unsigned long                                      bForceReplace : 1;                                        // 0x0108(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_GiveInventory");
		return ptr;
	}

};


// Class Engine.NavMeshBoundsVolume
// 0x0000 (0x0200 - 0x0200)
class ANavMeshBoundsVolume : public AVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavMeshBoundsVolume");
		return ptr;
	}

};


// Class Engine.OculusDebugHud
// 0x0020 (0x005C - 0x003C)
class UOculusDebugHud : public UObject
{
public:
	class UOculus*                                     OC;                                                       // 0x003C(0x0004)
	class APlayerController*                           Player;                                                   // 0x0040(0x0004)
	float                                              MsgTime;                                                  // 0x0044(0x0004)
	unsigned long                                      bActive : 1;                                              // 0x0048(0x0004)
	unsigned long                                      bShowInfoMode : 1;                                        // 0x0048(0x0004)
	struct FString                                     Message;                                                  // 0x004C(0x000C) (NeedCtorLink)
	float                                              MsgTimeout;                                               // 0x0058(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OculusDebugHud");
		return ptr;
	}


	void UpdateInfo();
	void UpdateMsgTime();
	bool OnKeyInput(int ControllerId, const struct FName& KeyName, TEnumAsByte<EInputEvent> IEvent, float AmountDepressed, bool bGamepad);
	void STATIC_DrawHudIfNeeded(class UOculus* O, class UCanvas* C, float T, class APlayerController* PC);
	bool STATIC_NeedsDisplayHud(class UOculus* O);
	void HideHUD();
	bool DrawHUD(class UCanvas* C, float T);
};


// Class Engine.OnlineCommunityContentInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineCommunityContentInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineCommunityContentInterface");
		return ptr;
	}


	void RateContent(unsigned char PlayerNum, int NewRating, struct FCommunityContentFile* FileToRate);
	void ClearGetContentPayloadCompleteDelegate(const struct FScriptDelegate& GetContentPayloadCompleteDelegate);
	void AddGetContentPayloadCompleteDelegate(const struct FScriptDelegate& GetContentPayloadCompleteDelegate);
	void OnGetContentPayloadComplete(bool bWasSuccessful, const struct FCommunityContentFile& FileDownloaded, TArray<unsigned char>* Payload);
	bool GetContentPayload(unsigned char PlayerNum, struct FCommunityContentFile* FileDownloaded);
	void ClearDownloadContentCompleteDelegate(const struct FScriptDelegate& DownloadContentCompleteDelegate);
	void AddDownloadContentCompleteDelegate(const struct FScriptDelegate& DownloadContentCompleteDelegate);
	void OnDownloadContentComplete(bool bWasSuccessful, const struct FCommunityContentFile& FileDownloaded);
	bool DownloadContent(unsigned char PlayerNum, struct FCommunityContentFile* FileToDownload);
	void ClearUploadContentCompleteDelegate(const struct FScriptDelegate& UploadContentCompleteDelegate);
	void AddUploadContentCompleteDelegate(const struct FScriptDelegate& UploadContentCompleteDelegate);
	void OnUploadContentComplete(bool bWasSuccessful, const struct FCommunityContentFile& UploadedFile);
	bool UploadContent(unsigned char PlayerNum, TArray<unsigned char>* Payload, struct FCommunityContentMetadata* MetaData);
	bool GetFriendsContentList(unsigned char PlayerNum, struct FOnlineFriend* Friend, TArray<struct FCommunityContentFile>* ContentFiles);
	void ClearReadFriendsContentListCompleteDelegate(const struct FScriptDelegate& ReadFriendsContentListCompleteDelegate);
	void AddReadFriendsContentListCompleteDelegate(const struct FScriptDelegate& ReadFriendsContentListCompleteDelegate);
	void OnReadFriendsContentListComplete(bool bWasSuccessful);
	bool ReadFriendsContentList(unsigned char PlayerNum, int StartAt, int NumToRead, TArray<struct FOnlineFriend>* Friends);
	bool GetContentList(unsigned char PlayerNum, TArray<struct FCommunityContentFile>* ContentFiles);
	void ClearReadContentListCompleteDelegate(const struct FScriptDelegate& ReadContentListCompleteDelegate);
	void AddReadContentListCompleteDelegate(const struct FScriptDelegate& ReadContentListCompleteDelegate);
	void OnReadContentListComplete(bool bWasSuccessful);
	bool ReadContentList(unsigned char PlayerNum, int StartAt, int NumToRead);
	void Exit();
	bool Init();
};


// Class Engine.OnlineEventsInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineEventsInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineEventsInterface");
		return ptr;
	}


	bool UpdatePlaylistPopulation(int PlaylistId, int NumPlayers);
	bool UploadGameplayEventsData(const struct FUniqueNetId& UniqueId, TArray<unsigned char>* Payload);
	bool UploadPlayerData(const struct FUniqueNetId& UniqueId, const struct FString& PlayerNick, class UOnlineProfileSettings* ProfileSettings, class UOnlinePlayerStorage* PlayerStorage);
};


// Class Engine.OnlinePlaylistGameTypeProvider
// 0x0024 (0x0088 - 0x0064)
class UOnlinePlaylistGameTypeProvider : public UUIResourceDataProvider
{
public:
	struct FName                                       PlaylistGameTypeName;                                     // 0x0064(0x0008) (Config)
	struct FString                                     DisplayName;                                              // 0x006C(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0078(0x000C) (Const, Config, Localized, NeedCtorLink)
	int                                                GameTypeId;                                               // 0x0084(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlinePlaylistGameTypeProvider");
		return ptr;
	}

};


// Class Engine.OnlineStreamingInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineStreamingInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineStreamingInterface");
		return ptr;
	}


	void ReceiveChatMessage(const struct FString& Message);
	void UpdateStreamingStatus(TEnumAsByte<EStreamState> SS);
	TEnumAsByte<EStreamState> GetStreamingStatus();
	void ClearStreamingChatMessageReceivedDelegate(const struct FScriptDelegate& Delegate);
	void AddStreamingChatMessageReceivedDelegate(const struct FScriptDelegate& Delegate);
	void OnStreamingChatMessageReceived(const struct FString& Message);
	void ClearStreamingStatusChangedDelegate(const struct FScriptDelegate& Delegate);
	void AddStreamingStatusChangedDelegate(const struct FScriptDelegate& Delegate);
	void OnStreamingStatusChanged(TEnumAsByte<EStreamState> NewState);
	bool RunCommercial();
	bool StopStreaming();
	bool PauseStreaming();
	bool StartStreaming(int Width, int Height);
	bool StreamingLogin(const struct FString& UserName, const struct FString& Password);
	bool ShutDown();
	bool Initialize();
};


// Class Engine.OnlineSuppliedUIInterface
// 0x0000 (0x003C - 0x003C)
class UOnlineSuppliedUIInterface : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OnlineSuppliedUIInterface");
		return ptr;
	}


	bool ShowMatchmakingUI(unsigned char SearchingPlayerNum, class UOnlineGameSearch* SearchSettings, class UOnlineGameSettings* GameSettings);
	void ClearShowOnlineStatsUICompleteDelegate(const struct FScriptDelegate& ShowOnlineStatsUICompleteDelegate);
	void AddShowOnlineStatsUICompleteDelegate(const struct FScriptDelegate& ShowOnlineStatsUICompleteDelegate);
	bool ShowOnlineStatsUI(class UOnlineStatsRead* StatsRead, TArray<struct FUniqueNetId>* Players);
	void OnShowOnlineStatsUIComplete();
};


// Class Engine.ParticleModuleForceFieldCylindrical
// 0x0000 (0x004C - 0x004C)
class UParticleModuleForceFieldCylindrical : public UParticleModuleForceFieldBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleForceFieldCylindrical");
		return ptr;
	}

};


// Class Engine.ParticleModuleForceFieldGeneric
// 0x0000 (0x004C - 0x004C)
class UParticleModuleForceFieldGeneric : public UParticleModuleForceFieldBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleForceFieldGeneric");
		return ptr;
	}

};


// Class Engine.ParticleModuleForceFieldRadial
// 0x0000 (0x004C - 0x004C)
class UParticleModuleForceFieldRadial : public UParticleModuleForceFieldBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleForceFieldRadial");
		return ptr;
	}

};


// Class Engine.ParticleModuleForceFieldTornado
// 0x0000 (0x004C - 0x004C)
class UParticleModuleForceFieldTornado : public UParticleModuleForceFieldBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleModuleForceFieldTornado");
		return ptr;
	}

};


// Class Engine.PathNode_Dynamic
// 0x0000 (0x02AC - 0x02AC)
class APathNode_Dynamic : public APathNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathNode_Dynamic");
		return ptr;
	}


	struct FString GetDebugAbbrev();
};


// Class Engine.SeqEvent_AIReachedRouteActor
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_AIReachedRouteActor : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_AIReachedRouteActor");
		return ptr;
	}

};


// Class Engine.SeqEvent_PickupStatusChange
// 0x0000 (0x0114 - 0x0114)
class USeqEvent_PickupStatusChange : public USequenceEvent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_PickupStatusChange");
		return ptr;
	}

};


// Class Engine.RadialBlurActor
// 0x0004 (0x01D8 - 0x01D4)
class ARadialBlurActor : public AActor
{
public:
	class URadialBlurComponent*                        RadialBlur;                                               // 0x01D4(0x0004) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RadialBlurActor");
		return ptr;
	}

};


// Class Engine.SeqAct_ToggleConstraintDrive
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_ToggleConstraintDrive : public USequenceAction
{
public:
	unsigned long                                      bEnableAngularPositionDrive : 1;                          // 0x00FC(0x0004) (Edit)
	unsigned long                                      bEnableAngularVelocityDrive : 1;                          // 0x00FC(0x0004) (Edit)
	unsigned long                                      bEnableLinearPositionDrive : 1;                           // 0x00FC(0x0004) (Edit)
	unsigned long                                      bEnableLinearvelocityDrive : 1;                           // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleConstraintDrive");
		return ptr;
	}

};


// Class Engine.RB_BSJointActor
// 0x0000 (0x01F0 - 0x01F0)
class ARB_BSJointActor : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_BSJointActor");
		return ptr;
	}

};


// Class Engine.RB_ConstraintActorSpawnable
// 0x0000 (0x01F0 - 0x01F0)
class ARB_ConstraintActorSpawnable : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_ConstraintActorSpawnable");
		return ptr;
	}

};


// Class Engine.RB_HingeActor
// 0x0000 (0x01F0 - 0x01F0)
class ARB_HingeActor : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_HingeActor");
		return ptr;
	}

};


// Class Engine.RB_PrismaticActor
// 0x0000 (0x01F0 - 0x01F0)
class ARB_PrismaticActor : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_PrismaticActor");
		return ptr;
	}

};


// Class Engine.RB_PulleyJointActor
// 0x0000 (0x01F0 - 0x01F0)
class ARB_PulleyJointActor : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RB_PulleyJointActor");
		return ptr;
	}

};


// Class Engine.ReverbVolumeToggleable
// 0x0000 (0x0240 - 0x0240)
class AReverbVolumeToggleable : public AReverbVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReverbVolumeToggleable");
		return ptr;
	}


	void OnToggle(class USeqAct_Toggle* Action);
};


// Class Engine.SeqAct_AddRemoveFaceFXAnimSet
// 0x000C (0x0108 - 0x00FC)
class USeqAct_AddRemoveFaceFXAnimSet : public USequenceAction
{
public:
	TArray<class UFaceFXAnimSet*>                      FaceFXAnimSets;                                           // 0x00FC(0x000C) (NeedCtorLink, Deprecated)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AddRemoveFaceFXAnimSet");
		return ptr;
	}

};


// Class Engine.SeqAct_AIAbortMoveToActor
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_AIAbortMoveToActor : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_AIAbortMoveToActor");
		return ptr;
	}

};


// Class Engine.SeqAct_MITV_Activate
// 0x0004 (0x0100 - 0x00FC)
class USeqAct_MITV_Activate : public USequenceAction
{
public:
	float                                              DurationOfMITV;                                           // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_MITV_Activate");
		return ptr;
	}


	void Activated();
	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_SetMatInstTexParam
// 0x0010 (0x010C - 0x00FC)
class USeqAct_SetMatInstTexParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                                  // 0x00FC(0x0004) (Edit)
	class UTexture*                                    NewTexture;                                               // 0x0100(0x0004) (Edit)
	struct FName                                       ParamName;                                                // 0x0104(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMatInstTexParam");
		return ptr;
	}

};


// Class Engine.SeqAct_SetMatInstVectorParam
// 0x001C (0x0118 - 0x00FC)
class USeqAct_SetMatInstVectorParam : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                                  // 0x00FC(0x0004) (Edit)
	struct FName                                       ParamName;                                                // 0x0100(0x0008) (Edit)
	struct FLinearColor                                VectorValue;                                              // 0x0108(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetMatInstVectorParam");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqAct_SetSkelControlTarget
// 0x0014 (0x0110 - 0x00FC)
class USeqAct_SetSkelControlTarget : public USequenceAction
{
public:
	struct FName                                       SkelControlName;                                          // 0x00FC(0x0008) (Edit)
	TArray<class UObject*>                             TargetActors;                                             // 0x0104(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetSkelControlTarget");
		return ptr;
	}

};


// Class Engine.SeqAct_SetVector
// 0x000C (0x0108 - 0x00FC)
class USeqAct_SetVector : public USeqAct_SetSequenceVariable
{
public:
	struct FVector                                     DefaultValue;                                             // 0x00FC(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_SetVector");
		return ptr;
	}


	void Activated();
};


// Class Engine.SeqAct_ToggleAffectedByHitEffects
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_ToggleAffectedByHitEffects : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_ToggleAffectedByHitEffects");
		return ptr;
	}

};


// Class Engine.SeqAct_UpdatePhysBonesFromAnim
// 0x0000 (0x00FC - 0x00FC)
class USeqAct_UpdatePhysBonesFromAnim : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqAct_UpdatePhysBonesFromAnim");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqEvent_LOS
// 0x000C (0x0120 - 0x0114)
class USeqEvent_LOS : public USequenceEvent
{
public:
	float                                              ScreenCenterDistance;                                     // 0x0114(0x0004) (Edit)
	float                                              TriggerDistance;                                          // 0x0118(0x0004) (Edit)
	unsigned long                                      bCheckForObstructions : 1;                                // 0x011C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqEvent_LOS");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
};


// Class Engine.SeqVar_Byte
// 0x0000 (0x0098 - 0x0098)
class USeqVar_Byte : public USequenceVariable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Byte");
		return ptr;
	}

};


// Class Engine.SeqVar_Name
// 0x0000 (0x0098 - 0x0098)
class USeqVar_Name : public USequenceVariable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Name");
		return ptr;
	}

};


// Class Engine.SeqVar_Union
// 0x0000 (0x0098 - 0x0098)
class USeqVar_Union : public USequenceVariable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SeqVar_Union");
		return ptr;
	}

};


// Class Engine.SkeletalMeshActorMATSpawnable
// 0x0000 (0x0220 - 0x0220)
class ASkeletalMeshActorMATSpawnable : public ASkeletalMeshActorMAT
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActorMATSpawnable");
		return ptr;
	}

};


// Class Engine.SkeletalMeshActorMATWalkable
// 0x0000 (0x0220 - 0x0220)
class ASkeletalMeshActorMATWalkable : public ASkeletalMeshActorMAT
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshActorMATWalkable");
		return ptr;
	}

};


// Class Engine.Trigger_Dynamic
// 0x0000 (0x01E0 - 0x01E0)
class ATrigger_Dynamic : public ATrigger
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Trigger_Dynamic");
		return ptr;
	}

};


// Class Engine.Trigger_LOS
// 0x000C (0x01EC - 0x01E0)
class ATrigger_LOS : public ATrigger
{
public:
	TArray<class APlayerController*>                   PCsWithLOS;                                               // 0x01E0(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Trigger_LOS");
		return ptr;
	}


	void Tick(float DeltaTime);
};


// Class Engine.TriggeredPath
// 0x0008 (0x02B4 - 0x02AC)
class ATriggeredPath : public ANavigationPoint
{
public:
	unsigned long                                      bOpen : 1;                                                // 0x02AC(0x0004) (Edit)
	class AActor*                                      MyTrigger;                                                // 0x02B0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggeredPath");
		return ptr;
	}


	bool SuggestMovePreparation(class APawn* Other);
	class AActor* SpecialHandling(class APawn* Other);
	void OnToggle(class USeqAct_Toggle* inAction);
};


// Class Engine.TriggerStreamingLevel
// 0x000C (0x01EC - 0x01E0)
class ATriggerStreamingLevel : public ATrigger
{
public:
	TArray<struct FLevelStreamingData>                 Levels;                                                   // 0x01E0(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TriggerStreamingLevel");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class Engine.UICharacterSummary
// 0x0028 (0x008C - 0x0064)
class UUICharacterSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassPathName;                                            // 0x0064(0x000C) (Config, NeedCtorLink)
	struct FString                                     CharacterName;                                            // 0x0070(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     CharacterBio;                                             // 0x007C(0x000C) (Const, Config, Localized, NeedCtorLink)
	unsigned long                                      bIsDisabled : 1;                                          // 0x0088(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UICharacterSummary");
		return ptr;
	}

};


// Class Engine.UIGameInfoSummary
// 0x004C (0x00B0 - 0x0064)
class UUIGameInfoSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassName;                                                // 0x0064(0x000C) (Config, NeedCtorLink)
	struct FString                                     GameAcronym;                                              // 0x0070(0x000C) (Config, NeedCtorLink)
	struct FString                                     MapPrefix;                                                // 0x007C(0x000C) (Config, NeedCtorLink)
	unsigned long                                      bIsTeamGame : 1;                                          // 0x0088(0x0004) (Config)
	unsigned long                                      bIsDisabled : 1;                                          // 0x0088(0x0004) (Config)
	struct FString                                     GameSettingsClassName;                                    // 0x008C(0x000C) (Config, NeedCtorLink)
	struct FString                                     GameName;                                                 // 0x0098(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x00A4(0x000C) (Const, Config, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIGameInfoSummary");
		return ptr;
	}

};


// Class Engine.UIMapSummary
// 0x0030 (0x0094 - 0x0064)
class UUIMapSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     MapName;                                                  // 0x0064(0x000C) (Config, NeedCtorLink)
	struct FString                                     ScreenshotPathName;                                       // 0x0070(0x000C) (Config, NeedCtorLink)
	struct FString                                     DisplayName;                                              // 0x007C(0x000C) (Const, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0088(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIMapSummary");
		return ptr;
	}

};


// Class Engine.UIWeaponSummary
// 0x0028 (0x008C - 0x0064)
class UUIWeaponSummary : public UUIResourceDataProvider
{
public:
	struct FString                                     ClassPathName;                                            // 0x0064(0x000C) (Config, NeedCtorLink)
	struct FString                                     FriendlyName;                                             // 0x0070(0x000C) (Const, Config, Localized, NeedCtorLink)
	struct FString                                     WeaponDescription;                                        // 0x007C(0x000C) (Const, Config, Localized, NeedCtorLink)
	unsigned long                                      bIsDisabled : 1;                                          // 0x0088(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UIWeaponSummary");
		return ptr;
	}

};


// Class Engine.UserCloudFileCloudSaveSystemDataBlobStore
// 0x0050 (0x008C - 0x003C)
class UUserCloudFileCloudSaveSystemDataBlobStore : public UObject
{
public:
	TScriptInterface<class UUserCloudFileInterface>    UserCloudFile;                                            // 0x003C(0x0008) (Transient)
	struct FScriptDelegate                             GetDataBlobCallback;                                      // 0x0044(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             SetDataBlobCallback;                                      // 0x0050(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             DeleteDataBlobCallback;                                   // 0x005C(0x000C) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __GetDataBlobCallbackDelegate__Delegate;                  // 0x0068(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __SetDataBlobCallbackDelegate__Delegate;                  // 0x0074(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __DeleteDataBlobCallbackDelegate__Delegate;               // 0x0080(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UserCloudFileCloudSaveSystemDataBlobStore");
		return ptr;
	}


	void OnDeleteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename);
	bool DeleteDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& InDeleteDataBlobCallback);
	void OnWriteUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename);
	void SetDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& InSetDataBlobCallback, TArray<unsigned char>* DataBlob);
	void OnReadUserFileComplete(bool bWasSuccessful, const struct FString& UserId, const struct FString& Filename);
	void GetDataBlob(const struct FString& StorageID, const struct FString& BlobName, const struct FScriptDelegate& InGetDataBlobCallback);
	void Init(const TScriptInterface<class UUserCloudFileInterface>& InUserCloudFile);
	void DeleteDataBlobCallbackDelegate(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error);
	void SetDataBlobCallbackDelegate(bool bWasSucessfull, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error);
	void GetDataBlobCallbackDelegate(bool bWasSuccessful, const struct FString& StorageID, const struct FString& BlobName, const struct FString& Error, TArray<unsigned char>* DataBlob);
};


// Class Engine.WaterVolume
// 0x0010 (0x0250 - 0x0240)
class AWaterVolume : public APhysicsVolume
{
public:
	class USoundCue*                                   EntrySound;                                               // 0x0240(0x0004) (Edit)
	class UClass*                                      EntryActor;                                               // 0x0244(0x0004) (Edit)
	class USoundCue*                                   ExitSound;                                                // 0x0248(0x0004) (Edit)
	class UClass*                                      ExitActor;                                                // 0x024C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WaterVolume");
		return ptr;
	}


	void PlayExitSplash(class AActor* Other);
	void UnTouch(class AActor* Other);
	void PlayEntrySplash(class AActor* Other);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class Engine.WindDirectionalSource
// 0x0004 (0x01D8 - 0x01D4)
class AWindDirectionalSource : public AInfo
{
public:
	class UWindDirectionalSourceComponent*             Component;                                                // 0x01D4(0x0004) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WindDirectionalSource");
		return ptr;
	}

};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
